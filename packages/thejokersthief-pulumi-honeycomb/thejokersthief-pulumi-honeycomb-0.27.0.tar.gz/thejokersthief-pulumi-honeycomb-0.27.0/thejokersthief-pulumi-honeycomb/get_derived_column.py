# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDerivedColumnResult',
    'AwaitableGetDerivedColumnResult',
    'get_derived_column',
    'get_derived_column_output',
]

@pulumi.output_type
class GetDerivedColumnResult:
    """
    A collection of values returned by GetDerivedColumn.
    """
    def __init__(__self__, alias=None, dataset=None, description=None, expression=None, id=None):
        if alias and not isinstance(alias, str):
            raise TypeError("Expected argument 'alias' to be a str")
        pulumi.set(__self__, "alias", alias)
        if dataset and not isinstance(dataset, str):
            raise TypeError("Expected argument 'dataset' to be a str")
        pulumi.set(__self__, "dataset", dataset)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if expression and not isinstance(expression, str):
            raise TypeError("Expected argument 'expression' to be a str")
        pulumi.set(__self__, "expression", expression)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def alias(self) -> str:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        the description of the derived column
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expression(self) -> str:
        """
        the expression of the derived column
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        the ID of the derived column.
        """
        return pulumi.get(self, "id")


class AwaitableGetDerivedColumnResult(GetDerivedColumnResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDerivedColumnResult(
            alias=self.alias,
            dataset=self.dataset,
            description=self.description,
            expression=self.expression,
            id=self.id)


def get_derived_column(alias: Optional[str] = None,
                       dataset: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDerivedColumnResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    mydc = honeycomb.get_derived_column(dataset=dataset,
        alias="mydc")
    ```


    :param str alias: The alias of the column
    :param str dataset: The dataset this derived column is associated with. Use `__all__` for Environment-wide derived columns.
    """
    __args__ = dict()
    __args__['alias'] = alias
    __args__['dataset'] = dataset
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getDerivedColumn:GetDerivedColumn', __args__, opts=opts, typ=GetDerivedColumnResult).value

    return AwaitableGetDerivedColumnResult(
        alias=pulumi.get(__ret__, 'alias'),
        dataset=pulumi.get(__ret__, 'dataset'),
        description=pulumi.get(__ret__, 'description'),
        expression=pulumi.get(__ret__, 'expression'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_derived_column)
def get_derived_column_output(alias: Optional[pulumi.Input[str]] = None,
                              dataset: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDerivedColumnResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    mydc = honeycomb.get_derived_column(dataset=dataset,
        alias="mydc")
    ```


    :param str alias: The alias of the column
    :param str dataset: The dataset this derived column is associated with. Use `__all__` for Environment-wide derived columns.
    """
    ...
