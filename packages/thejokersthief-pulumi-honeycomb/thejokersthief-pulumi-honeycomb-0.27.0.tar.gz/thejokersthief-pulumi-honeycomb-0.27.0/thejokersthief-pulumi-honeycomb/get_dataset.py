# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetDatasetResult',
    'AwaitableGetDatasetResult',
    'get_dataset',
    'get_dataset_output',
]

@pulumi.output_type
class GetDatasetResult:
    """
    A collection of values returned by GetDataset.
    """
    def __init__(__self__, created_at=None, delete_protected=None, description=None, expand_json_depth=None, id=None, last_written_at=None, name=None, slug=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if delete_protected and not isinstance(delete_protected, bool):
            raise TypeError("Expected argument 'delete_protected' to be a bool")
        pulumi.set(__self__, "delete_protected", delete_protected)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if expand_json_depth and not isinstance(expand_json_depth, float):
            raise TypeError("Expected argument 'expand_json_depth' to be a float")
        pulumi.set(__self__, "expand_json_depth", expand_json_depth)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_written_at and not isinstance(last_written_at, str):
            raise TypeError("Expected argument 'last_written_at' to be a str")
        pulumi.set(__self__, "last_written_at", last_written_at)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        ISO8601-formatted time the dataset was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="deleteProtected")
    def delete_protected(self) -> bool:
        """
        the current state of the Dataset's deletion protection status.
        """
        return pulumi.get(self, "delete_protected")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        the Dataset's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expandJsonDepth")
    def expand_json_depth(self) -> float:
        """
        The Dataset's maximum unpacking depth of nested JSON fields.
        """
        return pulumi.get(self, "expand_json_depth")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastWrittenAt")
    def last_written_at(self) -> str:
        """
        ISO8601-formatted time the dataset was last written to (received event data).
        """
        return pulumi.get(self, "last_written_at")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the Dataset's name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


class AwaitableGetDatasetResult(GetDatasetResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDatasetResult(
            created_at=self.created_at,
            delete_protected=self.delete_protected,
            description=self.description,
            expand_json_depth=self.expand_json_depth,
            id=self.id,
            last_written_at=self.last_written_at,
            name=self.name,
            slug=self.slug)


def get_dataset(slug: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDatasetResult:
    """
    ## # Data Source: Dataset

    The `Dataset` data source retrieves the details of a single Dataset.
    If you want to retrieve multiple Datasets, use the `get_datasets` data source instead.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    my_service = honeycomb.get_dataset(slug="my-service")
    ```


    :param str slug: The Slug of the Dataset
    """
    __args__ = dict()
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getDataset:GetDataset', __args__, opts=opts, typ=GetDatasetResult).value

    return AwaitableGetDatasetResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        delete_protected=pulumi.get(__ret__, 'delete_protected'),
        description=pulumi.get(__ret__, 'description'),
        expand_json_depth=pulumi.get(__ret__, 'expand_json_depth'),
        id=pulumi.get(__ret__, 'id'),
        last_written_at=pulumi.get(__ret__, 'last_written_at'),
        name=pulumi.get(__ret__, 'name'),
        slug=pulumi.get(__ret__, 'slug'))


@_utilities.lift_output_func(get_dataset)
def get_dataset_output(slug: Optional[pulumi.Input[str]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDatasetResult]:
    """
    ## # Data Source: Dataset

    The `Dataset` data source retrieves the details of a single Dataset.
    If you want to retrieve multiple Datasets, use the `get_datasets` data source instead.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    my_service = honeycomb.get_dataset(slug="my-service")
    ```


    :param str slug: The Slug of the Dataset
    """
    ...
