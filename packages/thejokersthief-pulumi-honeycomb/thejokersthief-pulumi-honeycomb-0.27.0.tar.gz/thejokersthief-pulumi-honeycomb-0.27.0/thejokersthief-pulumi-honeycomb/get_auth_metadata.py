# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetAuthMetadataResult',
    'AwaitableGetAuthMetadataResult',
    'get_auth_metadata',
    'get_auth_metadata_output',
]

@pulumi.output_type
class GetAuthMetadataResult:
    """
    A collection of values returned by GetAuthMetadata.
    """
    def __init__(__self__, api_key_access=None, environment=None, id=None, team=None):
        if api_key_access and not isinstance(api_key_access, dict):
            raise TypeError("Expected argument 'api_key_access' to be a dict")
        pulumi.set(__self__, "api_key_access", api_key_access)
        if environment and not isinstance(environment, dict):
            raise TypeError("Expected argument 'environment' to be a dict")
        pulumi.set(__self__, "environment", environment)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if team and not isinstance(team, dict):
            raise TypeError("Expected argument 'team' to be a dict")
        pulumi.set(__self__, "team", team)

    @property
    @pulumi.getter(name="apiKeyAccess")
    def api_key_access(self) -> Optional['outputs.GetAuthMetadataApiKeyAccessResult']:
        """
        The authorizations granted for the API key used to authenticate the provider.
        See [the documentation](https://docs.honeycomb.io/working-with-your-data/settings/api-keys/) for more information.
        """
        return pulumi.get(self, "api_key_access")

    @property
    @pulumi.getter
    def environment(self) -> Optional['outputs.GetAuthMetadataEnvironmentResult']:
        """
        Information about the Environment the API key is scoped to.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def team(self) -> Optional['outputs.GetAuthMetadataTeamResult']:
        """
        Information about the Team the API key is scoped to.
        """
        return pulumi.get(self, "team")


class AwaitableGetAuthMetadataResult(GetAuthMetadataResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthMetadataResult(
            api_key_access=self.api_key_access,
            environment=self.environment,
            id=self.id,
            team=self.team)


def get_auth_metadata(api_key_access: Optional[Union['GetAuthMetadataApiKeyAccessArgs', 'GetAuthMetadataApiKeyAccessArgsDict']] = None,
                      environment: Optional[Union['GetAuthMetadataEnvironmentArgs', 'GetAuthMetadataEnvironmentArgsDict']] = None,
                      team: Optional[Union['GetAuthMetadataTeamArgs', 'GetAuthMetadataTeamArgsDict']] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthMetadataResult:
    """
    ## # Data Source: get_auth_metadata

    The `get_auth_metadata` data source retreives information about the API key used to authenticate the provider.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    current = honeycomb.get_auth_metadata()
    pulumi.export("teamName", current.team.name)
    pulumi.export("environmentSlug", current.environment.slug)
    pulumi.export("sloManagementAccess", current.api_key_access.slos)
    ```


    :param Union['GetAuthMetadataApiKeyAccessArgs', 'GetAuthMetadataApiKeyAccessArgsDict'] api_key_access: The authorizations granted for the API key used to authenticate the provider.
           See [the documentation](https://docs.honeycomb.io/working-with-your-data/settings/api-keys/) for more information.
    :param Union['GetAuthMetadataEnvironmentArgs', 'GetAuthMetadataEnvironmentArgsDict'] environment: Information about the Environment the API key is scoped to.
    :param Union['GetAuthMetadataTeamArgs', 'GetAuthMetadataTeamArgsDict'] team: Information about the Team the API key is scoped to.
    """
    __args__ = dict()
    __args__['apiKeyAccess'] = api_key_access
    __args__['environment'] = environment
    __args__['team'] = team
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getAuthMetadata:GetAuthMetadata', __args__, opts=opts, typ=GetAuthMetadataResult).value

    return AwaitableGetAuthMetadataResult(
        api_key_access=pulumi.get(__ret__, 'api_key_access'),
        environment=pulumi.get(__ret__, 'environment'),
        id=pulumi.get(__ret__, 'id'),
        team=pulumi.get(__ret__, 'team'))


@_utilities.lift_output_func(get_auth_metadata)
def get_auth_metadata_output(api_key_access: Optional[pulumi.Input[Optional[Union['GetAuthMetadataApiKeyAccessArgs', 'GetAuthMetadataApiKeyAccessArgsDict']]]] = None,
                             environment: Optional[pulumi.Input[Optional[Union['GetAuthMetadataEnvironmentArgs', 'GetAuthMetadataEnvironmentArgsDict']]]] = None,
                             team: Optional[pulumi.Input[Optional[Union['GetAuthMetadataTeamArgs', 'GetAuthMetadataTeamArgsDict']]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthMetadataResult]:
    """
    ## # Data Source: get_auth_metadata

    The `get_auth_metadata` data source retreives information about the API key used to authenticate the provider.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    current = honeycomb.get_auth_metadata()
    pulumi.export("teamName", current.team.name)
    pulumi.export("environmentSlug", current.environment.slug)
    pulumi.export("sloManagementAccess", current.api_key_access.slos)
    ```


    :param Union['GetAuthMetadataApiKeyAccessArgs', 'GetAuthMetadataApiKeyAccessArgsDict'] api_key_access: The authorizations granted for the API key used to authenticate the provider.
           See [the documentation](https://docs.honeycomb.io/working-with-your-data/settings/api-keys/) for more information.
    :param Union['GetAuthMetadataEnvironmentArgs', 'GetAuthMetadataEnvironmentArgsDict'] environment: Information about the Environment the API key is scoped to.
    :param Union['GetAuthMetadataTeamArgs', 'GetAuthMetadataTeamArgsDict'] team: Information about the Team the API key is scoped to.
    """
    ...
