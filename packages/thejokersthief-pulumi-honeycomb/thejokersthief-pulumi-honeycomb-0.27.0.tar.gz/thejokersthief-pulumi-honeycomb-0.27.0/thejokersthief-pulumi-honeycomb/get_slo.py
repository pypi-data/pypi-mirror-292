# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSLOResult',
    'AwaitableGetSLOResult',
    'get_slo',
    'get_slo_output',
]

@pulumi.output_type
class GetSLOResult:
    """
    A collection of values returned by GetSLO.
    """
    def __init__(__self__, dataset=None, description=None, id=None, name=None, sli=None, target_percentage=None, time_period=None):
        if dataset and not isinstance(dataset, str):
            raise TypeError("Expected argument 'dataset' to be a str")
        pulumi.set(__self__, "dataset", dataset)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if sli and not isinstance(sli, str):
            raise TypeError("Expected argument 'sli' to be a str")
        pulumi.set(__self__, "sli", sli)
        if target_percentage and not isinstance(target_percentage, float):
            raise TypeError("Expected argument 'target_percentage' to be a float")
        pulumi.set(__self__, "target_percentage", target_percentage)
        if time_period and not isinstance(time_period, int):
            raise TypeError("Expected argument 'time_period' to be a int")
        pulumi.set(__self__, "time_period", time_period)

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        the SLO's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the name of the SLO.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def sli(self) -> str:
        """
        the alias of the Derived Column used as the SLO's SLI.
        """
        return pulumi.get(self, "sli")

    @property
    @pulumi.getter(name="targetPercentage")
    def target_percentage(self) -> float:
        """
        the percentage of qualified events expected to succeed during the `time_period`.
        """
        return pulumi.get(self, "target_percentage")

    @property
    @pulumi.getter(name="timePeriod")
    def time_period(self) -> int:
        """
        The time period, in days, over which the SLO is evaluated.
        """
        return pulumi.get(self, "time_period")


class AwaitableGetSLOResult(GetSLOResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSLOResult(
            dataset=self.dataset,
            description=self.description,
            id=self.id,
            name=self.name,
            sli=self.sli,
            target_percentage=self.target_percentage,
            time_period=self.time_period)


def get_slo(dataset: Optional[str] = None,
            id: Optional[str] = None,
            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSLOResult:
    """
    ## # Data Source: get_slo

    The `get_slo` data source retrieves the details of a single SLO for a dataset.
    If you want to retreive multiple SLOs, use the `get_slos` data source instead.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    myslo = honeycomb.get_slo(dataset=dataset,
        id="fS4WfA82ACt")
    ```


    :param str dataset: The dataset this SLO is associated with
    :param str id: The ID of the SLO
    """
    __args__ = dict()
    __args__['dataset'] = dataset
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getSLO:GetSLO', __args__, opts=opts, typ=GetSLOResult).value

    return AwaitableGetSLOResult(
        dataset=pulumi.get(__ret__, 'dataset'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        sli=pulumi.get(__ret__, 'sli'),
        target_percentage=pulumi.get(__ret__, 'target_percentage'),
        time_period=pulumi.get(__ret__, 'time_period'))


@_utilities.lift_output_func(get_slo)
def get_slo_output(dataset: Optional[pulumi.Input[str]] = None,
                   id: Optional[pulumi.Input[str]] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSLOResult]:
    """
    ## # Data Source: get_slo

    The `get_slo` data source retrieves the details of a single SLO for a dataset.
    If you want to retreive multiple SLOs, use the `get_slos` data source instead.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    myslo = honeycomb.get_slo(dataset=dataset,
        id="fS4WfA82ACt")
    ```


    :param str dataset: The dataset this SLO is associated with
    :param str id: The ID of the SLO
    """
    ...
