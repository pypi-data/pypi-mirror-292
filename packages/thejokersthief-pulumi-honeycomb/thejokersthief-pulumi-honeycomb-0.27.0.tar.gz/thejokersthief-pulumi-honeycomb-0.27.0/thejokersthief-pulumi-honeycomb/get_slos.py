# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetSLOsResult',
    'AwaitableGetSLOsResult',
    'get_slos',
    'get_slos_output',
]

@pulumi.output_type
class GetSLOsResult:
    """
    A collection of values returned by GetSLOs.
    """
    def __init__(__self__, dataset=None, detail_filter=None, id=None, ids=None):
        if dataset and not isinstance(dataset, str):
            raise TypeError("Expected argument 'dataset' to be a str")
        pulumi.set(__self__, "dataset", dataset)
        if detail_filter and not isinstance(detail_filter, dict):
            raise TypeError("Expected argument 'detail_filter' to be a dict")
        pulumi.set(__self__, "detail_filter", detail_filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def dataset(self) -> str:
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter(name="detailFilter")
    def detail_filter(self) -> Optional['outputs.GetSLOsDetailFilterResult']:
        return pulumi.get(self, "detail_filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of all the SLO IDs found in the dataset
        """
        return pulumi.get(self, "ids")


class AwaitableGetSLOsResult(GetSLOsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSLOsResult(
            dataset=self.dataset,
            detail_filter=self.detail_filter,
            id=self.id,
            ids=self.ids)


def get_slos(dataset: Optional[str] = None,
             detail_filter: Optional[Union['GetSLOsDetailFilterArgs', 'GetSLOsDetailFilterArgsDict']] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSLOsResult:
    """
    ## # Data Source: get_slos

    The SLOs data source retrieves the SLOs of a dataset, with the option of narrowing the retrieval by providing a `detail_filter`.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    all = honeycomb.get_slos(dataset=dataset)
    foo = honeycomb.get_slos(dataset=dataset,
        detail_filter={
            "name": "name",
            "value_regex": "foo_*",
        })
    ```


    :param str dataset: The dataset to retrieve the SLOs list from
    :param Union['GetSLOsDetailFilterArgs', 'GetSLOsDetailFilterArgsDict'] detail_filter: a block to further filter results as described below. `name` must be set when providing a filter.
    """
    __args__ = dict()
    __args__['dataset'] = dataset
    __args__['detailFilter'] = detail_filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getSLOs:GetSLOs', __args__, opts=opts, typ=GetSLOsResult).value

    return AwaitableGetSLOsResult(
        dataset=pulumi.get(__ret__, 'dataset'),
        detail_filter=pulumi.get(__ret__, 'detail_filter'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'))


@_utilities.lift_output_func(get_slos)
def get_slos_output(dataset: Optional[pulumi.Input[str]] = None,
                    detail_filter: Optional[pulumi.Input[Optional[Union['GetSLOsDetailFilterArgs', 'GetSLOsDetailFilterArgsDict']]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSLOsResult]:
    """
    ## # Data Source: get_slos

    The SLOs data source retrieves the SLOs of a dataset, with the option of narrowing the retrieval by providing a `detail_filter`.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    config = pulumi.Config()
    dataset = config.require("dataset")
    all = honeycomb.get_slos(dataset=dataset)
    foo = honeycomb.get_slos(dataset=dataset,
        detail_filter={
            "name": "name",
            "value_regex": "foo_*",
        })
    ```


    :param str dataset: The dataset to retrieve the SLOs list from
    :param Union['GetSLOsDetailFilterArgs', 'GetSLOsDetailFilterArgsDict'] detail_filter: a block to further filter results as described below. `name` must be set when providing a filter.
    """
    ...
