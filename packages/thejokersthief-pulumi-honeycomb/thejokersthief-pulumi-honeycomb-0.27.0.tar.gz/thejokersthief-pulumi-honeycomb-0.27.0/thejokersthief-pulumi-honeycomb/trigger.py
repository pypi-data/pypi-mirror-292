# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['TriggerArgs', 'Trigger']

@pulumi.input_type
class TriggerArgs:
    def __init__(__self__, *,
                 dataset: pulumi.Input[str],
                 alert_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 evaluation_schedule: Optional[pulumi.Input['TriggerEvaluationScheduleArgs']] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_id: Optional[pulumi.Input[str]] = None,
                 query_json: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input['TriggerRecipientArgs']]]] = None,
                 threshold: Optional[pulumi.Input['TriggerThresholdArgs']] = None):
        """
        The set of arguments for constructing a Trigger resource.
        :param pulumi.Input[str] dataset: The dataset this trigger is associated with.
        :param pulumi.Input[str] alert_type: The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)
        :param pulumi.Input[str] description: Description of the trigger.
        :param pulumi.Input[bool] disabled: The state of the trigger. If true, the trigger will not be run. Defaults to false.
        :param pulumi.Input['TriggerEvaluationScheduleArgs'] evaluation_schedule: A configuration block (described below) that determines when the trigger is run.
               When the time is within the scheduled window the trigger will be run at the specified frequency.
               Outside of the window, the trigger will not be run.
               If no schedule is specified, the trigger will be run at the specified frequency at all times.
        :param pulumi.Input[int] frequency: The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
               This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
               Defaults to 900 (15 minutes).
        :param pulumi.Input[str] name: Name of the trigger.
        :param pulumi.Input[str] query_id: The ID of the Query that the Trigger will execute. Conflicts with `query_json`.
        :param pulumi.Input[str] query_json: The Query Specfication JSON for the Trigger to execute.
               Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
               Conflicts with `query_id`.
        :param pulumi.Input[Sequence[pulumi.Input['TriggerRecipientArgs']]] recipients: Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
               
               One of `query_id` or `query_json` are required.
               
               > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.
               The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
               See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
               For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.
        :param pulumi.Input['TriggerThresholdArgs'] threshold: A configuration block (described below) describing the threshold of the trigger.
        """
        pulumi.set(__self__, "dataset", dataset)
        if alert_type is not None:
            pulumi.set(__self__, "alert_type", alert_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if evaluation_schedule is not None:
            pulumi.set(__self__, "evaluation_schedule", evaluation_schedule)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_id is not None:
            pulumi.set(__self__, "query_id", query_id)
        if query_json is not None:
            pulumi.set(__self__, "query_json", query_json)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter
    def dataset(self) -> pulumi.Input[str]:
        """
        The dataset this trigger is associated with.
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: pulumi.Input[str]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> Optional[pulumi.Input[str]]:
        """
        The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)
        """
        return pulumi.get(self, "alert_type")

    @alert_type.setter
    def alert_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The state of the trigger. If true, the trigger will not be run. Defaults to false.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="evaluationSchedule")
    def evaluation_schedule(self) -> Optional[pulumi.Input['TriggerEvaluationScheduleArgs']]:
        """
        A configuration block (described below) that determines when the trigger is run.
        When the time is within the scheduled window the trigger will be run at the specified frequency.
        Outside of the window, the trigger will not be run.
        If no schedule is specified, the trigger will be run at the specified frequency at all times.
        """
        return pulumi.get(self, "evaluation_schedule")

    @evaluation_schedule.setter
    def evaluation_schedule(self, value: Optional[pulumi.Input['TriggerEvaluationScheduleArgs']]):
        pulumi.set(self, "evaluation_schedule", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[int]]:
        """
        The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
        This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
        Defaults to 900 (15 minutes).
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the trigger.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Query that the Trigger will execute. Conflicts with `query_json`.
        """
        return pulumi.get(self, "query_id")

    @query_id.setter
    def query_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_id", value)

    @property
    @pulumi.getter(name="queryJson")
    def query_json(self) -> Optional[pulumi.Input[str]]:
        """
        The Query Specfication JSON for the Trigger to execute.
        Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
        Conflicts with `query_id`.
        """
        return pulumi.get(self, "query_json")

    @query_json.setter
    def query_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_json", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TriggerRecipientArgs']]]]:
        """
        Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.

        One of `query_id` or `query_json` are required.

        > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.
        The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
        See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
        For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TriggerRecipientArgs']]]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input['TriggerThresholdArgs']]:
        """
        A configuration block (described below) describing the threshold of the trigger.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input['TriggerThresholdArgs']]):
        pulumi.set(self, "threshold", value)


@pulumi.input_type
class _TriggerState:
    def __init__(__self__, *,
                 alert_type: Optional[pulumi.Input[str]] = None,
                 dataset: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 evaluation_schedule: Optional[pulumi.Input['TriggerEvaluationScheduleArgs']] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_id: Optional[pulumi.Input[str]] = None,
                 query_json: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input['TriggerRecipientArgs']]]] = None,
                 threshold: Optional[pulumi.Input['TriggerThresholdArgs']] = None):
        """
        Input properties used for looking up and filtering Trigger resources.
        :param pulumi.Input[str] alert_type: The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)
        :param pulumi.Input[str] dataset: The dataset this trigger is associated with.
        :param pulumi.Input[str] description: Description of the trigger.
        :param pulumi.Input[bool] disabled: The state of the trigger. If true, the trigger will not be run. Defaults to false.
        :param pulumi.Input['TriggerEvaluationScheduleArgs'] evaluation_schedule: A configuration block (described below) that determines when the trigger is run.
               When the time is within the scheduled window the trigger will be run at the specified frequency.
               Outside of the window, the trigger will not be run.
               If no schedule is specified, the trigger will be run at the specified frequency at all times.
        :param pulumi.Input[int] frequency: The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
               This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
               Defaults to 900 (15 minutes).
        :param pulumi.Input[str] name: Name of the trigger.
        :param pulumi.Input[str] query_id: The ID of the Query that the Trigger will execute. Conflicts with `query_json`.
        :param pulumi.Input[str] query_json: The Query Specfication JSON for the Trigger to execute.
               Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
               Conflicts with `query_id`.
        :param pulumi.Input[Sequence[pulumi.Input['TriggerRecipientArgs']]] recipients: Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
               
               One of `query_id` or `query_json` are required.
               
               > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.
               The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
               See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
               For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.
        :param pulumi.Input['TriggerThresholdArgs'] threshold: A configuration block (described below) describing the threshold of the trigger.
        """
        if alert_type is not None:
            pulumi.set(__self__, "alert_type", alert_type)
        if dataset is not None:
            pulumi.set(__self__, "dataset", dataset)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if evaluation_schedule is not None:
            pulumi.set(__self__, "evaluation_schedule", evaluation_schedule)
        if frequency is not None:
            pulumi.set(__self__, "frequency", frequency)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if query_id is not None:
            pulumi.set(__self__, "query_id", query_id)
        if query_json is not None:
            pulumi.set(__self__, "query_json", query_json)
        if recipients is not None:
            pulumi.set(__self__, "recipients", recipients)
        if threshold is not None:
            pulumi.set(__self__, "threshold", threshold)

    @property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> Optional[pulumi.Input[str]]:
        """
        The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)
        """
        return pulumi.get(self, "alert_type")

    @alert_type.setter
    def alert_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_type", value)

    @property
    @pulumi.getter
    def dataset(self) -> Optional[pulumi.Input[str]]:
        """
        The dataset this trigger is associated with.
        """
        return pulumi.get(self, "dataset")

    @dataset.setter
    def dataset(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dataset", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the trigger.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        The state of the trigger. If true, the trigger will not be run. Defaults to false.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="evaluationSchedule")
    def evaluation_schedule(self) -> Optional[pulumi.Input['TriggerEvaluationScheduleArgs']]:
        """
        A configuration block (described below) that determines when the trigger is run.
        When the time is within the scheduled window the trigger will be run at the specified frequency.
        Outside of the window, the trigger will not be run.
        If no schedule is specified, the trigger will be run at the specified frequency at all times.
        """
        return pulumi.get(self, "evaluation_schedule")

    @evaluation_schedule.setter
    def evaluation_schedule(self, value: Optional[pulumi.Input['TriggerEvaluationScheduleArgs']]):
        pulumi.set(self, "evaluation_schedule", value)

    @property
    @pulumi.getter
    def frequency(self) -> Optional[pulumi.Input[int]]:
        """
        The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
        This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
        Defaults to 900 (15 minutes).
        """
        return pulumi.get(self, "frequency")

    @frequency.setter
    def frequency(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "frequency", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the trigger.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the Query that the Trigger will execute. Conflicts with `query_json`.
        """
        return pulumi.get(self, "query_id")

    @query_id.setter
    def query_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_id", value)

    @property
    @pulumi.getter(name="queryJson")
    def query_json(self) -> Optional[pulumi.Input[str]]:
        """
        The Query Specfication JSON for the Trigger to execute.
        Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
        Conflicts with `query_id`.
        """
        return pulumi.get(self, "query_json")

    @query_json.setter
    def query_json(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "query_json", value)

    @property
    @pulumi.getter
    def recipients(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['TriggerRecipientArgs']]]]:
        """
        Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.

        One of `query_id` or `query_json` are required.

        > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.
        The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
        See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
        For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.
        """
        return pulumi.get(self, "recipients")

    @recipients.setter
    def recipients(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['TriggerRecipientArgs']]]]):
        pulumi.set(self, "recipients", value)

    @property
    @pulumi.getter
    def threshold(self) -> Optional[pulumi.Input['TriggerThresholdArgs']]:
        """
        A configuration block (described below) describing the threshold of the trigger.
        """
        return pulumi.get(self, "threshold")

    @threshold.setter
    def threshold(self, value: Optional[pulumi.Input['TriggerThresholdArgs']]):
        pulumi.set(self, "threshold", value)


class Trigger(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_type: Optional[pulumi.Input[str]] = None,
                 dataset: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 evaluation_schedule: Optional[pulumi.Input[Union['TriggerEvaluationScheduleArgs', 'TriggerEvaluationScheduleArgsDict']]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_id: Optional[pulumi.Input[str]] = None,
                 query_json: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TriggerRecipientArgs', 'TriggerRecipientArgsDict']]]]] = None,
                 threshold: Optional[pulumi.Input[Union['TriggerThresholdArgs', 'TriggerThresholdArgsDict']]] = None,
                 __props__=None):
        """
        ## # Resource: Trigger

        Creates a trigger. For more information about triggers, check out [Alert with Triggers](https://docs.honeycomb.io/working-with-your-data/triggers/).

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_honeycomb as honeycomb
        import thejokersthief-pulumi-honeycomb as honeycomb

        config = pulumi.Config()
        dataset = config.require("dataset")
        example_get_query_specification = honeycomb.get_query_specification(calculations=[{
                "op": "AVG",
                "column": "duration_ms",
            }],
            filters=[{
                "column": "trace.parent_id",
                "op": "does-not-exist",
            }],
            time_range=1800)
        example_trigger = honeycomb.Trigger("exampleTrigger",
            description="Average duration of all requests for the last 10 minutes.",
            query_json=example_get_query_specification.json,
            dataset=dataset,
            frequency=600,
            alert_type="on_change",
            threshold={
                "op": ">",
                "value": 1000,
            },
            recipients=[
                {
                    "type": "email",
                    "target": "hello@example.com",
                },
                {
                    "type": "marker",
                    "target": "Trigger - requests are slow",
                },
            ])
        ```

        ## Import

        Triggers can be imported using a combination of the dataset name and their ID, e.g.

        ```sh
        $ pulumi import honeycomb:index/trigger:Trigger my_trigger my-dataset/AeZzSoWws9G
        ```
        You can find the ID in the URL bar when visiting the trigger from the UI.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_type: The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)
        :param pulumi.Input[str] dataset: The dataset this trigger is associated with.
        :param pulumi.Input[str] description: Description of the trigger.
        :param pulumi.Input[bool] disabled: The state of the trigger. If true, the trigger will not be run. Defaults to false.
        :param pulumi.Input[Union['TriggerEvaluationScheduleArgs', 'TriggerEvaluationScheduleArgsDict']] evaluation_schedule: A configuration block (described below) that determines when the trigger is run.
               When the time is within the scheduled window the trigger will be run at the specified frequency.
               Outside of the window, the trigger will not be run.
               If no schedule is specified, the trigger will be run at the specified frequency at all times.
        :param pulumi.Input[int] frequency: The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
               This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
               Defaults to 900 (15 minutes).
        :param pulumi.Input[str] name: Name of the trigger.
        :param pulumi.Input[str] query_id: The ID of the Query that the Trigger will execute. Conflicts with `query_json`.
        :param pulumi.Input[str] query_json: The Query Specfication JSON for the Trigger to execute.
               Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
               Conflicts with `query_id`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TriggerRecipientArgs', 'TriggerRecipientArgsDict']]]] recipients: Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
               
               One of `query_id` or `query_json` are required.
               
               > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.
               The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
               See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
               For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.
        :param pulumi.Input[Union['TriggerThresholdArgs', 'TriggerThresholdArgsDict']] threshold: A configuration block (described below) describing the threshold of the trigger.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: TriggerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Resource: Trigger

        Creates a trigger. For more information about triggers, check out [Alert with Triggers](https://docs.honeycomb.io/working-with-your-data/triggers/).

        ## Example Usage

        ### Basic Example

        ```python
        import pulumi
        import pulumi_honeycomb as honeycomb
        import thejokersthief-pulumi-honeycomb as honeycomb

        config = pulumi.Config()
        dataset = config.require("dataset")
        example_get_query_specification = honeycomb.get_query_specification(calculations=[{
                "op": "AVG",
                "column": "duration_ms",
            }],
            filters=[{
                "column": "trace.parent_id",
                "op": "does-not-exist",
            }],
            time_range=1800)
        example_trigger = honeycomb.Trigger("exampleTrigger",
            description="Average duration of all requests for the last 10 minutes.",
            query_json=example_get_query_specification.json,
            dataset=dataset,
            frequency=600,
            alert_type="on_change",
            threshold={
                "op": ">",
                "value": 1000,
            },
            recipients=[
                {
                    "type": "email",
                    "target": "hello@example.com",
                },
                {
                    "type": "marker",
                    "target": "Trigger - requests are slow",
                },
            ])
        ```

        ## Import

        Triggers can be imported using a combination of the dataset name and their ID, e.g.

        ```sh
        $ pulumi import honeycomb:index/trigger:Trigger my_trigger my-dataset/AeZzSoWws9G
        ```
        You can find the ID in the URL bar when visiting the trigger from the UI.

        :param str resource_name: The name of the resource.
        :param TriggerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(TriggerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_type: Optional[pulumi.Input[str]] = None,
                 dataset: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 evaluation_schedule: Optional[pulumi.Input[Union['TriggerEvaluationScheduleArgs', 'TriggerEvaluationScheduleArgsDict']]] = None,
                 frequency: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 query_id: Optional[pulumi.Input[str]] = None,
                 query_json: Optional[pulumi.Input[str]] = None,
                 recipients: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TriggerRecipientArgs', 'TriggerRecipientArgsDict']]]]] = None,
                 threshold: Optional[pulumi.Input[Union['TriggerThresholdArgs', 'TriggerThresholdArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = TriggerArgs.__new__(TriggerArgs)

            __props__.__dict__["alert_type"] = alert_type
            if dataset is None and not opts.urn:
                raise TypeError("Missing required property 'dataset'")
            __props__.__dict__["dataset"] = dataset
            __props__.__dict__["description"] = description
            __props__.__dict__["disabled"] = disabled
            __props__.__dict__["evaluation_schedule"] = evaluation_schedule
            __props__.__dict__["frequency"] = frequency
            __props__.__dict__["name"] = name
            __props__.__dict__["query_id"] = query_id
            __props__.__dict__["query_json"] = query_json
            __props__.__dict__["recipients"] = recipients
            __props__.__dict__["threshold"] = threshold
        super(Trigger, __self__).__init__(
            'honeycomb:index/trigger:Trigger',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_type: Optional[pulumi.Input[str]] = None,
            dataset: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            evaluation_schedule: Optional[pulumi.Input[Union['TriggerEvaluationScheduleArgs', 'TriggerEvaluationScheduleArgsDict']]] = None,
            frequency: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            query_id: Optional[pulumi.Input[str]] = None,
            query_json: Optional[pulumi.Input[str]] = None,
            recipients: Optional[pulumi.Input[Sequence[pulumi.Input[Union['TriggerRecipientArgs', 'TriggerRecipientArgsDict']]]]] = None,
            threshold: Optional[pulumi.Input[Union['TriggerThresholdArgs', 'TriggerThresholdArgsDict']]] = None) -> 'Trigger':
        """
        Get an existing Trigger resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_type: The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)
        :param pulumi.Input[str] dataset: The dataset this trigger is associated with.
        :param pulumi.Input[str] description: Description of the trigger.
        :param pulumi.Input[bool] disabled: The state of the trigger. If true, the trigger will not be run. Defaults to false.
        :param pulumi.Input[Union['TriggerEvaluationScheduleArgs', 'TriggerEvaluationScheduleArgsDict']] evaluation_schedule: A configuration block (described below) that determines when the trigger is run.
               When the time is within the scheduled window the trigger will be run at the specified frequency.
               Outside of the window, the trigger will not be run.
               If no schedule is specified, the trigger will be run at the specified frequency at all times.
        :param pulumi.Input[int] frequency: The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
               This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
               Defaults to 900 (15 minutes).
        :param pulumi.Input[str] name: Name of the trigger.
        :param pulumi.Input[str] query_id: The ID of the Query that the Trigger will execute. Conflicts with `query_json`.
        :param pulumi.Input[str] query_json: The Query Specfication JSON for the Trigger to execute.
               Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
               Conflicts with `query_id`.
        :param pulumi.Input[Sequence[pulumi.Input[Union['TriggerRecipientArgs', 'TriggerRecipientArgsDict']]]] recipients: Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.
               
               One of `query_id` or `query_json` are required.
               
               > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.
               The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
               See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
               For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.
        :param pulumi.Input[Union['TriggerThresholdArgs', 'TriggerThresholdArgsDict']] threshold: A configuration block (described below) describing the threshold of the trigger.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _TriggerState.__new__(_TriggerState)

        __props__.__dict__["alert_type"] = alert_type
        __props__.__dict__["dataset"] = dataset
        __props__.__dict__["description"] = description
        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["evaluation_schedule"] = evaluation_schedule
        __props__.__dict__["frequency"] = frequency
        __props__.__dict__["name"] = name
        __props__.__dict__["query_id"] = query_id
        __props__.__dict__["query_json"] = query_json
        __props__.__dict__["recipients"] = recipients
        __props__.__dict__["threshold"] = threshold
        return Trigger(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertType")
    def alert_type(self) -> pulumi.Output[str]:
        """
        The frequency for the alert to trigger. (`on_change` is the default behavior, `on_true` can also be selected)
        """
        return pulumi.get(self, "alert_type")

    @property
    @pulumi.getter
    def dataset(self) -> pulumi.Output[str]:
        """
        The dataset this trigger is associated with.
        """
        return pulumi.get(self, "dataset")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the trigger.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[bool]:
        """
        The state of the trigger. If true, the trigger will not be run. Defaults to false.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="evaluationSchedule")
    def evaluation_schedule(self) -> pulumi.Output[Optional['outputs.TriggerEvaluationSchedule']]:
        """
        A configuration block (described below) that determines when the trigger is run.
        When the time is within the scheduled window the trigger will be run at the specified frequency.
        Outside of the window, the trigger will not be run.
        If no schedule is specified, the trigger will be run at the specified frequency at all times.
        """
        return pulumi.get(self, "evaluation_schedule")

    @property
    @pulumi.getter
    def frequency(self) -> pulumi.Output[int]:
        """
        The interval (in seconds) in which to check the results of the query’s calculation against the threshold.
        This value must be divisible by 60, between 60 and 86400 (between 1 minute and 1 day), and not be more than 4 times the query's duration (see note below).
        Defaults to 900 (15 minutes).
        """
        return pulumi.get(self, "frequency")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the trigger.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="queryId")
    def query_id(self) -> pulumi.Output[Optional[str]]:
        """
        The ID of the Query that the Trigger will execute. Conflicts with `query_json`.
        """
        return pulumi.get(self, "query_id")

    @property
    @pulumi.getter(name="queryJson")
    def query_json(self) -> pulumi.Output[Optional[str]]:
        """
        The Query Specfication JSON for the Trigger to execute.
        Providing the Query Specification as JSON -- as opposed to a Query ID -- enables additional validation during the validate and plan stages.
        Conflicts with `query_id`.
        """
        return pulumi.get(self, "query_json")

    @property
    @pulumi.getter
    def recipients(self) -> pulumi.Output[Optional[Sequence['outputs.TriggerRecipient']]]:
        """
        Zero or more configuration blocks (described below) with the recipients to notify when the trigger fires.

        One of `query_id` or `query_json` are required.

        > **NOTE** The query used in a Trigger must follow a strict subset: the query must contain *exactly one* calcuation and may only contain `calculation`, `filter`, `filter_combination` and `breakdowns` fields.
        The query's duration cannot be more than four times the trigger frequency (i.e. `duration <= frequency*4`).
        See [A Caveat on Time](https://docs.honeycomb.io/working-with-your-data/query-specification/#a-caveat-on-time)) for more information on specifying a query's duration.
        For example: if using the default query `time_range` of `7200` the lowest `frequency` for a trigger is `1800`.
        """
        return pulumi.get(self, "recipients")

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Output[Optional['outputs.TriggerThreshold']]:
        """
        A configuration block (described below) describing the threshold of the trigger.
        """
        return pulumi.get(self, "threshold")

