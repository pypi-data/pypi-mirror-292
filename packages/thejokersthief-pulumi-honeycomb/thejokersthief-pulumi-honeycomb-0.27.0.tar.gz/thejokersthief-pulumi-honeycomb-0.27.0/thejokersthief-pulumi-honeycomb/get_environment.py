# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetEnvironmentResult',
    'AwaitableGetEnvironmentResult',
    'get_environment',
    'get_environment_output',
]

@pulumi.output_type
class GetEnvironmentResult:
    """
    A collection of values returned by GetEnvironment.
    """
    def __init__(__self__, color=None, delete_protected=None, description=None, id=None, name=None, slug=None):
        if color and not isinstance(color, str):
            raise TypeError("Expected argument 'color' to be a str")
        pulumi.set(__self__, "color", color)
        if delete_protected and not isinstance(delete_protected, bool):
            raise TypeError("Expected argument 'delete_protected' to be a bool")
        pulumi.set(__self__, "delete_protected", delete_protected)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def color(self) -> str:
        """
        the Environment's color.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="deleteProtected")
    def delete_protected(self) -> bool:
        """
        the current state of the Environment's deletion protection status.
        """
        return pulumi.get(self, "delete_protected")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        the Environment's description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        the Environment's name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        """
        the Environment's slug.
        """
        return pulumi.get(self, "slug")


class AwaitableGetEnvironmentResult(GetEnvironmentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvironmentResult(
            color=self.color,
            delete_protected=self.delete_protected,
            description=self.description,
            id=self.id,
            name=self.name,
            slug=self.slug)


def get_environment(id: Optional[str] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvironmentResult:
    """
    ## # Data Source: Environment

    The `Environment` data source retrieves the details of a single Environment.
    If you want to retrieve multiple Environments, use the `get_environments` data source instead.

    > **NOTE** This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    prod = honeycomb.get_environment(id="hcaen_01j1d7t02zf7wgw7q89z3t60vf")
    ```


    :param str id: The ID of the Environment
    """
    __args__ = dict()
    __args__['id'] = id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getEnvironment:GetEnvironment', __args__, opts=opts, typ=GetEnvironmentResult).value

    return AwaitableGetEnvironmentResult(
        color=pulumi.get(__ret__, 'color'),
        delete_protected=pulumi.get(__ret__, 'delete_protected'),
        description=pulumi.get(__ret__, 'description'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        slug=pulumi.get(__ret__, 'slug'))


@_utilities.lift_output_func(get_environment)
def get_environment_output(id: Optional[pulumi.Input[str]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEnvironmentResult]:
    """
    ## # Data Source: Environment

    The `Environment` data source retrieves the details of a single Environment.
    If you want to retrieve multiple Environments, use the `get_environments` data source instead.

    > **NOTE** This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    prod = honeycomb.get_environment(id="hcaen_01j1d7t02zf7wgw7q89z3t60vf")
    ```


    :param str id: The ID of the Environment
    """
    ...
