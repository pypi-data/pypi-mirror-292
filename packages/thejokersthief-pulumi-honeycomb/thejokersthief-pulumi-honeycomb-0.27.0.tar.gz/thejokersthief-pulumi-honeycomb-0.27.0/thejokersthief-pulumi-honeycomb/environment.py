# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['EnvironmentArgs', 'Environment']

@pulumi.input_type
class EnvironmentArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 delete_protected: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Environment resource.
        :param pulumi.Input[str] color: The color to display the Environment in the navigation bar.
               If not provided one will be randomly selected at creation.
               One of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.
        :param pulumi.Input[bool] delete_protected: the current state of the Environment's deletion protection status.
               Defaults to `true`. Cannot be set to `false` on create.
        :param pulumi.Input[str] description: A description for the Environment.
        :param pulumi.Input[str] name: The name of the Environment. Must be unique to the Team.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if delete_protected is not None:
            pulumi.set(__self__, "delete_protected", delete_protected)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        The color to display the Environment in the navigation bar.
        If not provided one will be randomly selected at creation.
        One of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="deleteProtected")
    def delete_protected(self) -> Optional[pulumi.Input[bool]]:
        """
        the current state of the Environment's deletion protection status.
        Defaults to `true`. Cannot be set to `false` on create.
        """
        return pulumi.get(self, "delete_protected")

    @delete_protected.setter
    def delete_protected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_protected", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the Environment.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Environment. Must be unique to the Team.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _EnvironmentState:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 delete_protected: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Environment resources.
        :param pulumi.Input[str] color: The color to display the Environment in the navigation bar.
               If not provided one will be randomly selected at creation.
               One of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.
        :param pulumi.Input[bool] delete_protected: the current state of the Environment's deletion protection status.
               Defaults to `true`. Cannot be set to `false` on create.
        :param pulumi.Input[str] description: A description for the Environment.
        :param pulumi.Input[str] name: The name of the Environment. Must be unique to the Team.
        :param pulumi.Input[str] slug: The slug of the Environment.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if delete_protected is not None:
            pulumi.set(__self__, "delete_protected", delete_protected)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        The color to display the Environment in the navigation bar.
        If not provided one will be randomly selected at creation.
        One of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="deleteProtected")
    def delete_protected(self) -> Optional[pulumi.Input[bool]]:
        """
        the current state of the Environment's deletion protection status.
        Defaults to `true`. Cannot be set to `false` on create.
        """
        return pulumi.get(self, "delete_protected")

    @delete_protected.setter
    def delete_protected(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "delete_protected", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description for the Environment.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Environment. Must be unique to the Team.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the Environment.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class Environment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 delete_protected: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # Resource: Environment

        Creates a Honeycomb Environment.

        > **NOTE** This resource requires the provider be configured with a Management Key with `environments:write` in the configured scopes.

        ## Example Usage

        ```python
        import pulumi
        import thejokersthief-pulumi-honeycomb as honeycomb

        uat = honeycomb.Environment("uat", color="green")
        ```

        ## Import

        Environments can be imported by their ID. e.g.

        ```sh
        $ pulumi import honeycomb:index/environment:Environment myenv hcaen_01j1jrsewaha3m0z6fwffpcrxg
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] color: The color to display the Environment in the navigation bar.
               If not provided one will be randomly selected at creation.
               One of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.
        :param pulumi.Input[bool] delete_protected: the current state of the Environment's deletion protection status.
               Defaults to `true`. Cannot be set to `false` on create.
        :param pulumi.Input[str] description: A description for the Environment.
        :param pulumi.Input[str] name: The name of the Environment. Must be unique to the Team.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[EnvironmentArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Resource: Environment

        Creates a Honeycomb Environment.

        > **NOTE** This resource requires the provider be configured with a Management Key with `environments:write` in the configured scopes.

        ## Example Usage

        ```python
        import pulumi
        import thejokersthief-pulumi-honeycomb as honeycomb

        uat = honeycomb.Environment("uat", color="green")
        ```

        ## Import

        Environments can be imported by their ID. e.g.

        ```sh
        $ pulumi import honeycomb:index/environment:Environment myenv hcaen_01j1jrsewaha3m0z6fwffpcrxg
        ```

        :param str resource_name: The name of the resource.
        :param EnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 delete_protected: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnvironmentArgs.__new__(EnvironmentArgs)

            __props__.__dict__["color"] = color
            __props__.__dict__["delete_protected"] = delete_protected
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["slug"] = None
        super(Environment, __self__).__init__(
            'honeycomb:index/environment:Environment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            color: Optional[pulumi.Input[str]] = None,
            delete_protected: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'Environment':
        """
        Get an existing Environment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] color: The color to display the Environment in the navigation bar.
               If not provided one will be randomly selected at creation.
               One of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.
        :param pulumi.Input[bool] delete_protected: the current state of the Environment's deletion protection status.
               Defaults to `true`. Cannot be set to `false` on create.
        :param pulumi.Input[str] description: A description for the Environment.
        :param pulumi.Input[str] name: The name of the Environment. Must be unique to the Team.
        :param pulumi.Input[str] slug: The slug of the Environment.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnvironmentState.__new__(_EnvironmentState)

        __props__.__dict__["color"] = color
        __props__.__dict__["delete_protected"] = delete_protected
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["slug"] = slug
        return Environment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[str]:
        """
        The color to display the Environment in the navigation bar.
        If not provided one will be randomly selected at creation.
        One of `blue`, `green`, `gold`, `red`, `purple`, `lightBlue`, `lightGreen`, `lightGold`, `lightRed`, `lightPurple`.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="deleteProtected")
    def delete_protected(self) -> pulumi.Output[bool]:
        """
        the current state of the Environment's deletion protection status.
        Defaults to `true`. Cannot be set to `false` on create.
        """
        return pulumi.get(self, "delete_protected")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A description for the Environment.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Environment. Must be unique to the Team.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the Environment.
        """
        return pulumi.get(self, "slug")

