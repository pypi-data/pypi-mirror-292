# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetEnvironmentsResult',
    'AwaitableGetEnvironmentsResult',
    'get_environments',
    'get_environments_output',
]

@pulumi.output_type
class GetEnvironmentsResult:
    """
    A collection of values returned by GetEnvironments.
    """
    def __init__(__self__, detail_filter=None, id=None, ids=None):
        if detail_filter and not isinstance(detail_filter, dict):
            raise TypeError("Expected argument 'detail_filter' to be a dict")
        pulumi.set(__self__, "detail_filter", detail_filter)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ids and not isinstance(ids, list):
            raise TypeError("Expected argument 'ids' to be a list")
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter(name="detailFilter")
    def detail_filter(self) -> Optional['outputs.GetEnvironmentsDetailFilterResult']:
        return pulumi.get(self, "detail_filter")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ids(self) -> Sequence[str]:
        """
        a list of all the Environment IDs found in the Team.
        """
        return pulumi.get(self, "ids")


class AwaitableGetEnvironmentsResult(GetEnvironmentsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetEnvironmentsResult(
            detail_filter=self.detail_filter,
            id=self.id,
            ids=self.ids)


def get_environments(detail_filter: Optional[Union['GetEnvironmentsDetailFilterArgs', 'GetEnvironmentsDetailFilterArgsDict']] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetEnvironmentsResult:
    """
    ## # Data Source: get_environments

    The Environments data source retrieves the Team's environments.

    > **NOTE** This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    all = honeycomb.get_environments()
    foo = honeycomb.get_environments(detail_filter={
        "name": "name",
        "value_regex": "foo_*",
    })
    ```


    :param Union['GetEnvironmentsDetailFilterArgs', 'GetEnvironmentsDetailFilterArgsDict'] detail_filter: a block to further filter results as described below. `name` must be set when providing a filter.
    """
    __args__ = dict()
    __args__['detailFilter'] = detail_filter
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('honeycomb:index/getEnvironments:GetEnvironments', __args__, opts=opts, typ=GetEnvironmentsResult).value

    return AwaitableGetEnvironmentsResult(
        detail_filter=pulumi.get(__ret__, 'detail_filter'),
        id=pulumi.get(__ret__, 'id'),
        ids=pulumi.get(__ret__, 'ids'))


@_utilities.lift_output_func(get_environments)
def get_environments_output(detail_filter: Optional[pulumi.Input[Optional[Union['GetEnvironmentsDetailFilterArgs', 'GetEnvironmentsDetailFilterArgsDict']]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetEnvironmentsResult]:
    """
    ## # Data Source: get_environments

    The Environments data source retrieves the Team's environments.

    > **NOTE** This data source requires the provider be configured with a Management Key with `environments:read` in the configured scopes.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_honeycomb as honeycomb

    all = honeycomb.get_environments()
    foo = honeycomb.get_environments(detail_filter={
        "name": "name",
        "value_regex": "foo_*",
    })
    ```


    :param Union['GetEnvironmentsDetailFilterArgs', 'GetEnvironmentsDetailFilterArgsDict'] detail_filter: a block to further filter results as described below. `name` must be set when providing a filter.
    """
    ...
