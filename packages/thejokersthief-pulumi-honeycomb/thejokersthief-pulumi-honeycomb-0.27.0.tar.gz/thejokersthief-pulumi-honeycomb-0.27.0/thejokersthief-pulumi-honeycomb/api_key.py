# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ApiKeyArgs', 'ApiKey']

@pulumi.input_type
class ApiKeyArgs:
    def __init__(__self__, *,
                 environment_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 disabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input['ApiKeyPermissionsArgs']] = None):
        """
        The set of arguments for constructing a ApiKey resource.
        :param pulumi.Input[str] environment_id: The Environment ID the API key is scoped to.
        :param pulumi.Input[str] type: The type of API key. Currently only `ingest` is supported.
        :param pulumi.Input[bool] disabled: Whether the API key is disabled. Defaults to `false`.
        :param pulumi.Input[str] name: The name of the API key.
        :param pulumi.Input['ApiKeyPermissionsArgs'] permissions: A configuration block (described below) setting what actions the API key can perform.
        """
        pulumi.set(__self__, "environment_id", environment_id)
        pulumi.set(__self__, "type", type)
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Input[str]:
        """
        The Environment ID the API key is scoped to.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The type of API key. Currently only `ingest` is supported.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the API key is disabled. Defaults to `false`.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the API key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input['ApiKeyPermissionsArgs']]:
        """
        A configuration block (described below) setting what actions the API key can perform.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input['ApiKeyPermissionsArgs']]):
        pulumi.set(self, "permissions", value)


@pulumi.input_type
class _ApiKeyState:
    def __init__(__self__, *,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input['ApiKeyPermissionsArgs']] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ApiKey resources.
        :param pulumi.Input[bool] disabled: Whether the API key is disabled. Defaults to `false`.
        :param pulumi.Input[str] environment_id: The Environment ID the API key is scoped to.
        :param pulumi.Input[str] name: The name of the API key.
        :param pulumi.Input['ApiKeyPermissionsArgs'] permissions: A configuration block (described below) setting what actions the API key can perform.
        :param pulumi.Input[str] secret: The secret portion of the API Key.
        :param pulumi.Input[str] type: The type of API key. Currently only `ingest` is supported.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if environment_id is not None:
            pulumi.set(__self__, "environment_id", environment_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the API key is disabled. Defaults to `false`.
        """
        return pulumi.get(self, "disabled")

    @disabled.setter
    def disabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disabled", value)

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Environment ID the API key is scoped to.
        """
        return pulumi.get(self, "environment_id")

    @environment_id.setter
    def environment_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the API key.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input['ApiKeyPermissionsArgs']]:
        """
        A configuration block (described below) setting what actions the API key can perform.
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input['ApiKeyPermissionsArgs']]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret portion of the API Key.
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of API key. Currently only `ingest` is supported.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class ApiKey(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Union['ApiKeyPermissionsArgs', 'ApiKeyPermissionsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## # Resource: ApiKey

        Creates a Honeycomb API Key.
        For more information about API Keys, check out [Best Practices for API Keys](https://docs.honeycomb.io/get-started/best-practices/api-keys/).

        > **NOTE** This resource requires the provider be configured with a Management Key with `api-keys:write` in the configured scopes.

        ## Example Usage

        ```python
        import pulumi
        import thejokersthief-pulumi-honeycomb as honeycomb

        prod_ingest = honeycomb.ApiKey("prodIngest",
            type="ingest",
            environment_id=var["environment_id"],
            permissions={
                "create_datasets": True,
            })
        pulumi.export("ingestKey", f"{honeycomb_api_key['prod_ingest']['id']}{honeycomb_api_key['prod_ingest']['secret']}")
        ```

        ## Import

        API Keys cannot be imported.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disabled: Whether the API key is disabled. Defaults to `false`.
        :param pulumi.Input[str] environment_id: The Environment ID the API key is scoped to.
        :param pulumi.Input[str] name: The name of the API key.
        :param pulumi.Input[Union['ApiKeyPermissionsArgs', 'ApiKeyPermissionsArgsDict']] permissions: A configuration block (described below) setting what actions the API key can perform.
        :param pulumi.Input[str] type: The type of API key. Currently only `ingest` is supported.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ApiKeyArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## # Resource: ApiKey

        Creates a Honeycomb API Key.
        For more information about API Keys, check out [Best Practices for API Keys](https://docs.honeycomb.io/get-started/best-practices/api-keys/).

        > **NOTE** This resource requires the provider be configured with a Management Key with `api-keys:write` in the configured scopes.

        ## Example Usage

        ```python
        import pulumi
        import thejokersthief-pulumi-honeycomb as honeycomb

        prod_ingest = honeycomb.ApiKey("prodIngest",
            type="ingest",
            environment_id=var["environment_id"],
            permissions={
                "create_datasets": True,
            })
        pulumi.export("ingestKey", f"{honeycomb_api_key['prod_ingest']['id']}{honeycomb_api_key['prod_ingest']['secret']}")
        ```

        ## Import

        API Keys cannot be imported.

        :param str resource_name: The name of the resource.
        :param ApiKeyArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ApiKeyArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 disabled: Optional[pulumi.Input[bool]] = None,
                 environment_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 permissions: Optional[pulumi.Input[Union['ApiKeyPermissionsArgs', 'ApiKeyPermissionsArgsDict']]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ApiKeyArgs.__new__(ApiKeyArgs)

            __props__.__dict__["disabled"] = disabled
            if environment_id is None and not opts.urn:
                raise TypeError("Missing required property 'environment_id'")
            __props__.__dict__["environment_id"] = environment_id
            __props__.__dict__["name"] = name
            __props__.__dict__["permissions"] = permissions
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["secret"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ApiKey, __self__).__init__(
            'honeycomb:index/apiKey:ApiKey',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            disabled: Optional[pulumi.Input[bool]] = None,
            environment_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            permissions: Optional[pulumi.Input[Union['ApiKeyPermissionsArgs', 'ApiKeyPermissionsArgsDict']]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'ApiKey':
        """
        Get an existing ApiKey resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] disabled: Whether the API key is disabled. Defaults to `false`.
        :param pulumi.Input[str] environment_id: The Environment ID the API key is scoped to.
        :param pulumi.Input[str] name: The name of the API key.
        :param pulumi.Input[Union['ApiKeyPermissionsArgs', 'ApiKeyPermissionsArgsDict']] permissions: A configuration block (described below) setting what actions the API key can perform.
        :param pulumi.Input[str] secret: The secret portion of the API Key.
        :param pulumi.Input[str] type: The type of API key. Currently only `ingest` is supported.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ApiKeyState.__new__(_ApiKeyState)

        __props__.__dict__["disabled"] = disabled
        __props__.__dict__["environment_id"] = environment_id
        __props__.__dict__["name"] = name
        __props__.__dict__["permissions"] = permissions
        __props__.__dict__["secret"] = secret
        __props__.__dict__["type"] = type
        return ApiKey(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def disabled(self) -> pulumi.Output[bool]:
        """
        Whether the API key is disabled. Defaults to `false`.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="environmentId")
    def environment_id(self) -> pulumi.Output[str]:
        """
        The Environment ID the API key is scoped to.
        """
        return pulumi.get(self, "environment_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the API key.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Output[Optional['outputs.ApiKeyPermissions']]:
        """
        A configuration block (described below) setting what actions the API key can perform.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[str]:
        """
        The secret portion of the API Key.
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The type of API key. Currently only `ingest` is supported.
        """
        return pulumi.get(self, "type")

