"""Dynamically create HTML syntax."""

from __future__ import annotations
from typing import Literal
import html as _py_html


from markitup.dtype import (
    ElementAttributes as _ElementAttributesDictType,
    ElementContentInput as _ElementContentInputType,
    ElementContent as _ElementContentType,
    TableRowsContent as _TableRowsContentType,
    Stringable as _Stringable,
)
from markitup import md as _md, render as _render
from markitup.html import spec as _spec
from markitup.html import text as _text
from markitup.exception import html as _exception


class Element:
    def __init__(
        self,
        name: str,
        content: _ElementContentInputType = None,
        attributes: _ElementAttributesDictType = None,
    ):
        self.void = _spec.element_is_void(name)
        if self.void and content:
            raise _exception.MarkItUpHTMLElementError(f"Void element '{name}' cannot have content.")
        if not content:
            content = {}
        elif isinstance(content, (list, tuple)):
            content = {idx: elem for idx, elem in enumerate(content)}
        elif not isinstance(content, dict):
            content = {0: content}
        self.name = name
        self.attributes = attributes or {}
        self.content = content
        return

    @property
    def opening_tag(self) -> str:
        """HTML syntax of the opening tag as a one-line string."""
        attrs = []
        for key, val in self.attributes.items():
            if val is None:
                continue
            if isinstance(val, bool):
                if val:
                    attrs.append(f"{key}")
            else:
                attrs.append(f'{key}="{_py_html.escape(str(val))}"')
        attrs_str = "" if not attrs else f" {' '.join(attrs)}"
        return f"<{self.name}{attrs_str}{' /' if self.void else ''}>"

    def __str__(self):
        """HTML syntax of the element as a one-line string."""
        return self.syntax(indent=-1)

    def syntax(self, indent: int = 3) -> str:
        """HTML syntax of the element."""
        open_tag = self.opening_tag
        if self.void:
            return open_tag
        close_tag = f"</{self.name}>"
        contents = []
        for elem_content in self.content.values():
            content_str = elem_content.syntax(indent=indent) if isinstance(elem_content, Element) else str(elem_content)
            if isinstance(elem_content, _md.Element):
                md_sep = "\n\n" if indent < 0 else "\n"
                content_str = f"{md_sep}{content_str.strip()}{md_sep}"
            contents.append(content_str)
            # contents.append("\n".join([f"{indent * ' '}{line}" for line in content_str.split("\n")]))
        if not contents:
            return f"{open_tag}{close_tag}"
        element_contents = "".join(contents).strip("\n")
        prefix = f"<!DOCTYPE html>\n" if self.name == "html" else ""
        return f"{prefix}{open_tag}{element_contents}{close_tag}"

    def display(self, ipython: bool = False, as_md: bool = False) -> None:
        """Display the element in an IPython notebook."""
        _render.display(str(self), ipython=ipython, as_md=as_md)
        return


# Begin autogenerated code

class A(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="a", attributes=attributes, content=content)
        return


class Abbr(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="abbr", attributes=attributes, content=content)
        return


class Acronym(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="acronym", attributes=attributes, content=content)
        return


class Address(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="address", attributes=attributes, content=content)
        return


class Applet(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="applet", attributes=attributes, content=content)
        return


class Area(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="area", attributes=attributes)
        return


class Article(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="article", attributes=attributes, content=content)
        return


class Aside(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="aside", attributes=attributes, content=content)
        return


class Audio(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="audio", attributes=attributes, content=content)
        return


class B(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="b", attributes=attributes, content=content)
        return


class Base(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="base", attributes=attributes)
        return


class Basefont(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="basefont", attributes=attributes, content=content)
        return


class Bdi(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="bdi", attributes=attributes, content=content)
        return


class Bdo(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="bdo", attributes=attributes, content=content)
        return


class Bgsound(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="bgsound", attributes=attributes, content=content)
        return


class Big(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="big", attributes=attributes, content=content)
        return


class Blink(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="blink", attributes=attributes, content=content)
        return


class Blockquote(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="blockquote", attributes=attributes, content=content)
        return


class Body(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="body", attributes=attributes, content=content)
        return


class Br(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="br", attributes=attributes)
        return


class Button(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="button", attributes=attributes, content=content)
        return


class Canvas(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="canvas", attributes=attributes, content=content)
        return


class Caption(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="caption", attributes=attributes, content=content)
        return


class Center(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="center", attributes=attributes, content=content)
        return


class Cite(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="cite", attributes=attributes, content=content)
        return


class Code(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="code", attributes=attributes, content=content)
        return


class Col(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="col", attributes=attributes)
        return


class Colgroup(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="colgroup", attributes=attributes, content=content)
        return


class Content(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="content", attributes=attributes, content=content)
        return


class Data(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="data", attributes=attributes, content=content)
        return


class Datalist(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="datalist", attributes=attributes, content=content)
        return


class Dd(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="dd", attributes=attributes, content=content)
        return


class Del(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="del", attributes=attributes, content=content)
        return


class Details(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="details", attributes=attributes, content=content)
        return


class Dfn(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="dfn", attributes=attributes, content=content)
        return


class Dialog(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="dialog", attributes=attributes, content=content)
        return


class Dir(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="dir", attributes=attributes, content=content)
        return


class Div(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="div", attributes=attributes, content=content)
        return


class Dl(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="dl", attributes=attributes, content=content)
        return


class Dt(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="dt", attributes=attributes, content=content)
        return


class Em(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="em", attributes=attributes, content=content)
        return


class Embed(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="embed", attributes=attributes)
        return


class Fieldset(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="fieldset", attributes=attributes, content=content)
        return


class Figcaption(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="figcaption", attributes=attributes, content=content)
        return


class Figure(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="figure", attributes=attributes, content=content)
        return


class Font(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="font", attributes=attributes, content=content)
        return


class Footer(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="footer", attributes=attributes, content=content)
        return


class Form(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="form", attributes=attributes, content=content)
        return


class Frame(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="frame", attributes=attributes, content=content)
        return


class Frameset(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="frameset", attributes=attributes, content=content)
        return


class H1(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="h1", attributes=attributes, content=content)
        return


class H2(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="h2", attributes=attributes, content=content)
        return


class H3(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="h3", attributes=attributes, content=content)
        return


class H4(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="h4", attributes=attributes, content=content)
        return


class H5(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="h5", attributes=attributes, content=content)
        return


class H6(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="h6", attributes=attributes, content=content)
        return


class Head(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="head", attributes=attributes, content=content)
        return


class Header(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="header", attributes=attributes, content=content)
        return


class Hgroup(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="hgroup", attributes=attributes, content=content)
        return


class Hr(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="hr", attributes=attributes)
        return


class Html(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="html", attributes=attributes, content=content)
        return


class I(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="i", attributes=attributes, content=content)
        return


class Iframe(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="iframe", attributes=attributes, content=content)
        return


class Image(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="image", attributes=attributes, content=content)
        return


class Img(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="img", attributes=attributes)
        return


class Input(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="input", attributes=attributes)
        return


class Ins(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="ins", attributes=attributes, content=content)
        return


class Isindex(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="isindex", attributes=attributes, content=content)
        return


class Kbd(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="kbd", attributes=attributes, content=content)
        return


class Keygen(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="keygen", attributes=attributes)
        return


class Label(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="label", attributes=attributes, content=content)
        return


class Legend(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="legend", attributes=attributes, content=content)
        return


class Li(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="li", attributes=attributes, content=content)
        return


class Link(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="link", attributes=attributes)
        return


class Listing(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="listing", attributes=attributes, content=content)
        return


class Main(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="main", attributes=attributes, content=content)
        return


class Map(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="map", attributes=attributes, content=content)
        return


class Mark(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="mark", attributes=attributes, content=content)
        return


class Marquee(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="marquee", attributes=attributes, content=content)
        return


class Math(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="math", attributes=attributes, content=content)
        return


class Menu(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="menu", attributes=attributes, content=content)
        return


class Menuitem(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="menuitem", attributes=attributes, content=content)
        return


class Meta(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="meta", attributes=attributes)
        return


class Meter(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="meter", attributes=attributes, content=content)
        return


class Multicol(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="multicol", attributes=attributes, content=content)
        return


class Nav(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="nav", attributes=attributes, content=content)
        return


class Nextid(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="nextid", attributes=attributes, content=content)
        return


class Nobr(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="nobr", attributes=attributes, content=content)
        return


class Noembed(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="noembed", attributes=attributes, content=content)
        return


class Noframes(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="noframes", attributes=attributes, content=content)
        return


class Noscript(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="noscript", attributes=attributes, content=content)
        return


class Object(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="object", attributes=attributes, content=content)
        return


class Ol(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="ol", attributes=attributes, content=content)
        return


class Optgroup(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="optgroup", attributes=attributes, content=content)
        return


class Option(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="option", attributes=attributes, content=content)
        return


class Output(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="output", attributes=attributes, content=content)
        return


class P(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="p", attributes=attributes, content=content)
        return


class Param(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="param", attributes=attributes)
        return


class Picture(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="picture", attributes=attributes, content=content)
        return


class Plaintext(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="plaintext", attributes=attributes, content=content)
        return


class Portal(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="portal", attributes=attributes, content=content)
        return


class Pre(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="pre", attributes=attributes, content=content)
        return


class Progress(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="progress", attributes=attributes, content=content)
        return


class Q(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="q", attributes=attributes, content=content)
        return


class Rb(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="rb", attributes=attributes, content=content)
        return


class Rp(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="rp", attributes=attributes, content=content)
        return


class Rt(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="rt", attributes=attributes, content=content)
        return


class Rtc(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="rtc", attributes=attributes, content=content)
        return


class Ruby(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="ruby", attributes=attributes, content=content)
        return


class S(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="s", attributes=attributes, content=content)
        return


class Samp(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="samp", attributes=attributes, content=content)
        return


class Script(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="script", attributes=attributes, content=content)
        return


class Search(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="search", attributes=attributes, content=content)
        return


class Section(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="section", attributes=attributes, content=content)
        return


class Select(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="select", attributes=attributes, content=content)
        return


class Shadow(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="shadow", attributes=attributes, content=content)
        return


class Slot(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="slot", attributes=attributes, content=content)
        return


class Small(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="small", attributes=attributes, content=content)
        return


class Source(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="source", attributes=attributes)
        return


class Spacer(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="spacer", attributes=attributes, content=content)
        return


class Span(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="span", attributes=attributes, content=content)
        return


class Strike(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="strike", attributes=attributes, content=content)
        return


class Strong(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="strong", attributes=attributes, content=content)
        return


class Style(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="style", attributes=attributes, content=content)
        return


class Sub(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="sub", attributes=attributes, content=content)
        return


class Summary(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="summary", attributes=attributes, content=content)
        return


class Sup(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="sup", attributes=attributes, content=content)
        return


class Svg(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="svg", attributes=attributes, content=content)
        return


class Table(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="table", attributes=attributes, content=content)
        return


class Tbody(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="tbody", attributes=attributes, content=content)
        return


class Td(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="td", attributes=attributes, content=content)
        return


class Template(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="template", attributes=attributes, content=content)
        return


class Textarea(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="textarea", attributes=attributes, content=content)
        return


class Tfoot(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="tfoot", attributes=attributes, content=content)
        return


class Th(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="th", attributes=attributes, content=content)
        return


class Thead(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="thead", attributes=attributes, content=content)
        return


class Time(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="time", attributes=attributes, content=content)
        return


class Title(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="title", attributes=attributes, content=content)
        return


class Tr(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="tr", attributes=attributes, content=content)
        return


class Track(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="track", attributes=attributes)
        return


class Tt(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="tt", attributes=attributes, content=content)
        return


class U(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="u", attributes=attributes, content=content)
        return


class Ul(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="ul", attributes=attributes, content=content)
        return


class Var(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="var", attributes=attributes, content=content)
        return


class Video(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="video", attributes=attributes, content=content)
        return


class Wbr(Element):
    def __init__(self, attributes: _ElementAttributesDictType = None):
        super().__init__(name="wbr", attributes=attributes)
        return


class Xmp(Element):
    def __init__(
        self, content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None
    ):
        super().__init__(name="xmp", attributes=attributes, content=content)
        return


def a(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> A:
    return A(content, (attributes or {}) | attrs)


def abbr(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Abbr:
    return Abbr(content, (attributes or {}) | attrs)


def acronym(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Acronym:
    return Acronym(content, (attributes or {}) | attrs)


def address(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Address:
    return Address(content, (attributes or {}) | attrs)


def applet(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Applet:
    return Applet(content, (attributes or {}) | attrs)


def area(attributes: _ElementAttributesDictType = None, /, **attrs) -> Area:
    return Area((attributes or {}) | attrs)


def article(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Article:
    return Article(content, (attributes or {}) | attrs)


def aside(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Aside:
    return Aside(content, (attributes or {}) | attrs)


def audio(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Audio:
    return Audio(content, (attributes or {}) | attrs)


def b(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> B:
    return B(content, (attributes or {}) | attrs)


def base(attributes: _ElementAttributesDictType = None, /, **attrs) -> Base:
    return Base((attributes or {}) | attrs)


def basefont(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Basefont:
    return Basefont(content, (attributes or {}) | attrs)


def bdi(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Bdi:
    return Bdi(content, (attributes or {}) | attrs)


def bdo(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Bdo:
    return Bdo(content, (attributes or {}) | attrs)


def bgsound(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Bgsound:
    return Bgsound(content, (attributes or {}) | attrs)


def big(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Big:
    return Big(content, (attributes or {}) | attrs)


def blink(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Blink:
    return Blink(content, (attributes or {}) | attrs)


def blockquote(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Blockquote:
    return Blockquote(content, (attributes or {}) | attrs)


def body(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Body:
    return Body(content, (attributes or {}) | attrs)


def br(attributes: _ElementAttributesDictType = None, /, **attrs) -> Br:
    return Br((attributes or {}) | attrs)


def button(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Button:
    return Button(content, (attributes or {}) | attrs)


def canvas(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Canvas:
    return Canvas(content, (attributes or {}) | attrs)


def caption(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Caption:
    return Caption(content, (attributes or {}) | attrs)


def center(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Center:
    return Center(content, (attributes or {}) | attrs)


def cite(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Cite:
    return Cite(content, (attributes or {}) | attrs)


def code(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Code:
    return Code(content, (attributes or {}) | attrs)


def col(attributes: _ElementAttributesDictType = None, /, **attrs) -> Col:
    return Col((attributes or {}) | attrs)


def colgroup(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Colgroup:
    return Colgroup(content, (attributes or {}) | attrs)


def content(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Content:
    return Content(content, (attributes or {}) | attrs)


def data(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Data:
    return Data(content, (attributes or {}) | attrs)


def datalist(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Datalist:
    return Datalist(content, (attributes or {}) | attrs)


def dd(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Dd:
    return Dd(content, (attributes or {}) | attrs)


def del_(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Del:
    return Del(content, (attributes or {}) | attrs)


def details(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Details:
    return Details(content, (attributes or {}) | attrs)


def dfn(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Dfn:
    return Dfn(content, (attributes or {}) | attrs)


def dialog(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Dialog:
    return Dialog(content, (attributes or {}) | attrs)


def dir(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Dir:
    return Dir(content, (attributes or {}) | attrs)


def div(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Div:
    return Div(content, (attributes or {}) | attrs)


def dl(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Dl:
    return Dl(content, (attributes or {}) | attrs)


def dt(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Dt:
    return Dt(content, (attributes or {}) | attrs)


def em(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Em:
    return Em(content, (attributes or {}) | attrs)


def embed(attributes: _ElementAttributesDictType = None, /, **attrs) -> Embed:
    return Embed((attributes or {}) | attrs)


def fieldset(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Fieldset:
    return Fieldset(content, (attributes or {}) | attrs)


def figcaption(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Figcaption:
    return Figcaption(content, (attributes or {}) | attrs)


def figure(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Figure:
    return Figure(content, (attributes or {}) | attrs)


def font(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Font:
    return Font(content, (attributes or {}) | attrs)


def footer(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Footer:
    return Footer(content, (attributes or {}) | attrs)


def form(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Form:
    return Form(content, (attributes or {}) | attrs)


def frame(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Frame:
    return Frame(content, (attributes or {}) | attrs)


def frameset(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Frameset:
    return Frameset(content, (attributes or {}) | attrs)


def h1(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> H1:
    return H1(content, (attributes or {}) | attrs)


def h2(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> H2:
    return H2(content, (attributes or {}) | attrs)


def h3(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> H3:
    return H3(content, (attributes or {}) | attrs)


def h4(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> H4:
    return H4(content, (attributes or {}) | attrs)


def h5(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> H5:
    return H5(content, (attributes or {}) | attrs)


def h6(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> H6:
    return H6(content, (attributes or {}) | attrs)


def head(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Head:
    return Head(content, (attributes or {}) | attrs)


def header(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Header:
    return Header(content, (attributes or {}) | attrs)


def hgroup(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Hgroup:
    return Hgroup(content, (attributes or {}) | attrs)


def hr(attributes: _ElementAttributesDictType = None, /, **attrs) -> Hr:
    return Hr((attributes or {}) | attrs)


def html(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Html:
    return Html(content, (attributes or {}) | attrs)


def i(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> I:
    return I(content, (attributes or {}) | attrs)


def iframe(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Iframe:
    return Iframe(content, (attributes or {}) | attrs)


def image(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Image:
    return Image(content, (attributes or {}) | attrs)


def img(attributes: _ElementAttributesDictType = None, /, **attrs) -> Img:
    return Img((attributes or {}) | attrs)


def input(attributes: _ElementAttributesDictType = None, /, **attrs) -> Input:
    return Input((attributes or {}) | attrs)


def ins(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Ins:
    return Ins(content, (attributes or {}) | attrs)


def isindex(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Isindex:
    return Isindex(content, (attributes or {}) | attrs)


def kbd(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Kbd:
    return Kbd(content, (attributes or {}) | attrs)


def keygen(attributes: _ElementAttributesDictType = None, /, **attrs) -> Keygen:
    return Keygen((attributes or {}) | attrs)


def label(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Label:
    return Label(content, (attributes or {}) | attrs)


def legend(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Legend:
    return Legend(content, (attributes or {}) | attrs)


def li(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Li:
    return Li(content, (attributes or {}) | attrs)


def link(attributes: _ElementAttributesDictType = None, /, **attrs) -> Link:
    return Link((attributes or {}) | attrs)


def listing(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Listing:
    return Listing(content, (attributes or {}) | attrs)


def main(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Main:
    return Main(content, (attributes or {}) | attrs)


def map(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Map:
    return Map(content, (attributes or {}) | attrs)


def mark(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Mark:
    return Mark(content, (attributes or {}) | attrs)


def marquee(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Marquee:
    return Marquee(content, (attributes or {}) | attrs)


def math(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Math:
    return Math(content, (attributes or {}) | attrs)


def menu(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Menu:
    return Menu(content, (attributes or {}) | attrs)


def menuitem(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Menuitem:
    return Menuitem(content, (attributes or {}) | attrs)


def meta(attributes: _ElementAttributesDictType = None, /, **attrs) -> Meta:
    return Meta((attributes or {}) | attrs)


def meter(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Meter:
    return Meter(content, (attributes or {}) | attrs)


def multicol(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Multicol:
    return Multicol(content, (attributes or {}) | attrs)


def nav(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Nav:
    return Nav(content, (attributes or {}) | attrs)


def nextid(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Nextid:
    return Nextid(content, (attributes or {}) | attrs)


def nobr(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Nobr:
    return Nobr(content, (attributes or {}) | attrs)


def noembed(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Noembed:
    return Noembed(content, (attributes or {}) | attrs)


def noframes(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Noframes:
    return Noframes(content, (attributes or {}) | attrs)


def noscript(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Noscript:
    return Noscript(content, (attributes or {}) | attrs)


def object(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Object:
    return Object(content, (attributes or {}) | attrs)


def ol(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Ol:
    return Ol(content, (attributes or {}) | attrs)


def optgroup(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Optgroup:
    return Optgroup(content, (attributes or {}) | attrs)


def option(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Option:
    return Option(content, (attributes or {}) | attrs)


def output(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Output:
    return Output(content, (attributes or {}) | attrs)


def p(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> P:
    return P(content, (attributes or {}) | attrs)


def param(attributes: _ElementAttributesDictType = None, /, **attrs) -> Param:
    return Param((attributes or {}) | attrs)


def picture(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Picture:
    return Picture(content, (attributes or {}) | attrs)


def plaintext(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Plaintext:
    return Plaintext(content, (attributes or {}) | attrs)


def portal(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Portal:
    return Portal(content, (attributes or {}) | attrs)


def pre(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Pre:
    return Pre(content, (attributes or {}) | attrs)


def progress(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Progress:
    return Progress(content, (attributes or {}) | attrs)


def q(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Q:
    return Q(content, (attributes or {}) | attrs)


def rb(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Rb:
    return Rb(content, (attributes or {}) | attrs)


def rp(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Rp:
    return Rp(content, (attributes or {}) | attrs)


def rt(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Rt:
    return Rt(content, (attributes or {}) | attrs)


def rtc(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Rtc:
    return Rtc(content, (attributes or {}) | attrs)


def ruby(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Ruby:
    return Ruby(content, (attributes or {}) | attrs)


def s(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> S:
    return S(content, (attributes or {}) | attrs)


def samp(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Samp:
    return Samp(content, (attributes or {}) | attrs)


def script(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Script:
    return Script(content, (attributes or {}) | attrs)


def search(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Search:
    return Search(content, (attributes or {}) | attrs)


def section(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Section:
    return Section(content, (attributes or {}) | attrs)


def select(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Select:
    return Select(content, (attributes or {}) | attrs)


def shadow(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Shadow:
    return Shadow(content, (attributes or {}) | attrs)


def slot(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Slot:
    return Slot(content, (attributes or {}) | attrs)


def small(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Small:
    return Small(content, (attributes or {}) | attrs)


def source(attributes: _ElementAttributesDictType = None, /, **attrs) -> Source:
    return Source((attributes or {}) | attrs)


def spacer(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Spacer:
    return Spacer(content, (attributes or {}) | attrs)


def span(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Span:
    return Span(content, (attributes or {}) | attrs)


def strike(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Strike:
    return Strike(content, (attributes or {}) | attrs)


def strong(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Strong:
    return Strong(content, (attributes or {}) | attrs)


def style(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Style:
    return Style(content, (attributes or {}) | attrs)


def sub(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Sub:
    return Sub(content, (attributes or {}) | attrs)


def summary(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Summary:
    return Summary(content, (attributes or {}) | attrs)


def sup(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Sup:
    return Sup(content, (attributes or {}) | attrs)


def svg(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Svg:
    return Svg(content, (attributes or {}) | attrs)


def table(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Table:
    return Table(content, (attributes or {}) | attrs)


def tbody(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Tbody:
    return Tbody(content, (attributes or {}) | attrs)


def td(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Td:
    return Td(content, (attributes or {}) | attrs)


def template(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Template:
    return Template(content, (attributes or {}) | attrs)


def textarea(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Textarea:
    return Textarea(content, (attributes or {}) | attrs)


def tfoot(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Tfoot:
    return Tfoot(content, (attributes or {}) | attrs)


def th(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Th:
    return Th(content, (attributes or {}) | attrs)


def thead(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Thead:
    return Thead(content, (attributes or {}) | attrs)


def time(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Time:
    return Time(content, (attributes or {}) | attrs)


def title(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Title:
    return Title(content, (attributes or {}) | attrs)


def tr(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Tr:
    return Tr(content, (attributes or {}) | attrs)


def track(attributes: _ElementAttributesDictType = None, /, **attrs) -> Track:
    return Track((attributes or {}) | attrs)


def tt(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Tt:
    return Tt(content, (attributes or {}) | attrs)


def u(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> U:
    return U(content, (attributes or {}) | attrs)


def ul(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Ul:
    return Ul(content, (attributes or {}) | attrs)


def var(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Var:
    return Var(content, (attributes or {}) | attrs)


def video(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Video:
    return Video(content, (attributes or {}) | attrs)


def wbr(attributes: _ElementAttributesDictType = None, /, **attrs) -> Wbr:
    return Wbr((attributes or {}) | attrs)


def xmp(
    content: _ElementContentInputType = None, attributes: _ElementAttributesDictType = None, /, **attrs
) -> Xmp:
    return Xmp(content, (attributes or {}) | attrs)

# End auto-generated code


class Comment:
    def __init__(self, content: _Stringable):
        self.content = content
        return

    def __str__(self):
        return self.html(indent=-1)

    def html(self, indent: int = 3):
        open_tag = "<!-- "
        close_tag = " -->"
        content = str(self.content)
        if indent < 0:
            content = content.replace("\n", " ")
        content = "\n".join([f"{indent * ' '}{line}" for line in content.split("\n")])
        if not content:
            return f"{open_tag}{close_tag}"
        sep = "" if indent < 0 else "\n"
        return f"{open_tag}{sep}{content}{sep}{close_tag}"


def comment(content: _Stringable) -> Comment:
    return Comment(content)


def h(
    level: Literal[1, 2, 3, 4, 5, 6],
    content: _ElementContentType = None,
    attrs: _ElementAttributesDictType = None,
) -> H1 | H2 | H3 | H4 | H5 | H6:
    """Create a heading element (`<h1>`, `<h2>`, etc.) with the given level."""
    h_ = {1: H1, 2: H2, 3: H3, 4: H4, 5: H5, 6: H6}
    return h_[level](content, attrs)


def paragraph(
    text: _Stringable,
    styles: list[dict] | None = None,
    align: Literal["left", "center", "right", "justify"] = None,
    attrs_p: _ElementAttributesDictType = None,
):
    text = str(text)
    for style in styles or []:
        text = _text.style(text, **style)
    attrs_p = (attrs_p or {}) | {"align": align}
    return p(text, attrs_p)


def picture_color_scheme(
    src_light: _Stringable,
    src_dark: _Stringable,
    attrs_img: _ElementAttributesDictType = None,
    attrs_picture: _ElementAttributesDictType = None,
    attrs_source_light: _ElementAttributesDictType = None,
    attrs_source_dark: _ElementAttributesDictType = None,
    default_light: bool = True,
):
    """Create a <picture> element with a <source> element for light and dark color schemes.

    Parameters
    ----------
    src_light : Stringable
        The URI of the image for the light color scheme.
    src_dark : Stringable
        The URI of the image for the dark color scheme.
    attrs_picture : ElementAttributesDictType, optional
        Attributes for the <picture> element.
    attrs_source_light : ElementAttributesDictType, optional
        Attributes for the <source> element for the light color scheme.
    attrs_source_dark : ElementAttributesDictType, optional
        Attributes for the <source> element for the dark color scheme.
    attrs_img : ElementAttributesDictType, optional
        Attributes for the <img> element.
    default_light: bool, optional
        If True, the 'src' attribute of the <img> element will be set to `src_light`,
        when 'src' is not provided. If False, it will be set to `src_dark`.

    Returns
    -------
    Picture
        A <picture> element with a <source> element for light and dark color schemes.
    """
    args = locals()
    sources_attributes = []
    for theme in ("light", "dark"):
        src = args[f"src_{theme}"]
        src_attrs = (args[f"attrs_source_{theme}"] or {}) | {
            "srcset": src,
            "media": f"(prefers-color-scheme: {theme})",
        }
        sources_attributes.append(src_attrs)
    img_attributes_full = {
        "src": args["src_light" if default_light else "src_dark"]
    } | (attrs_img or {})
    return picture_from_sources(sources_attributes, attrs_picture, img_attributes_full)


def picture_from_sources(
    attrs_sources: list[_ElementAttributesDictType],
    attrs_picture: _ElementAttributesDictType = None,
    attrs_img: _ElementAttributesDictType = None,
) -> Picture:
    """Create a <picture> element with multiple <source> elements and an <img> element.

    Parameters
    ----------
    attrs_sources : list[ElementAttributesDictType]
        A list of attributes for each <source> element.
    attrs_picture : ElementAttributesDictType, optional
        Attributes for the <picture> element.
    attrs_img : ElementAttributesDictType, optional
        Attributes for the <img> element.

    Returns
    -------
    Picture
        A <picture> element with multiple <source> elements and an <img> element.
    """
    sources = [source(attrs) for attrs in attrs_sources]
    return picture(sources + [img(attrs_img)], attrs_picture)


def table_from_rows(
    rows_body: _TableRowsContentType,
    rows_head: _TableRowsContentType | None = None,
    rows_foot: _TableRowsContentType | None = None,
    as_figure: bool = False,
    caption: _ElementContentType = None,
    first_cell_header: bool = False,
    attrs_figure: _ElementAttributesDictType = None,
    attrs_caption: _ElementAttributesDictType = None,
    attrs_table: _ElementAttributesDictType = None,
    attrs_body: _ElementAttributesDictType = None,
    attrs_head: _ElementAttributesDictType = None,
    attrs_foot: _ElementAttributesDictType = None,
    attrs_tr: _ElementAttributesDictType = None,
    attrs_th: _ElementAttributesDictType = None,
    attrs_td: _ElementAttributesDictType = None,
    attrs_body_tr: _ElementAttributesDictType = None,
    attrs_body_th: _ElementAttributesDictType = None,
    attrs_body_td: _ElementAttributesDictType = None,
    attrs_head_tr: _ElementAttributesDictType = None,
    attrs_head_th: _ElementAttributesDictType = None,
    attrs_head_td: _ElementAttributesDictType = None,
    attrs_foot_tr: _ElementAttributesDictType = None,
    attrs_foot_th: _ElementAttributesDictType = None,
    attrs_foot_td: _ElementAttributesDictType = None,
) -> Table | Figure:
    """Create a <table> element (optionally inside a <figure>) from rows of data.

    Parameters
    ----------
    rows_body : TableRowsContentType
        A list of rows for the table body.
        Each row is a list of cells,
        where each cell is either a content or a tuple of content and attributes.
        A cell content can be `markitup.html.Element` or `markitup.protocol.Stringable`
        (i.e., any object that can be converted to a string).
        If a cell content is a `markitup.html.element.Th` or `markitup.html.element.Td` element,
        it is used as is, otherwise it will be used to create one (see also `first_cell_header`).
    rows_head : TableRowsContentType, optional
        A list of rows for the table head.
        Same as `body_rows`, but each cell will be rendered as a `<th scope="col">` element.
    rows_foot : TableRowsContentType, optional
        A list of rows for the table foot; same as `body_rows`.
    as_figure : bool, optional
        If True, the table will be wrapped in a `<figure>` element.
        Also, if provided, the `caption` parameter will be used
        as a `<figcaption>` element inside the `<figure>`
        instead of a `<caption>` element inside the `<table>`.
    caption : ElementContentType, optional
        The caption for the table or figure.
        If it is a `markitup.html.element.Caption` or `markitup.html.element.Figcaption` element,
        it will be used as is,
        otherwise it will be used to create a `<caption>` or `<figcaption>` element (cf. `as_figure`).
    first_cell_header : bool, optional
        If True, the first cell in each row will be rendered as a `<th>` element.
        Otherwise, all cells will be rendered as a `<td>` element.
        This parameter is ignored for the head rows.
    attrs_figure : ElementAttributesDictType, optional
        Attributes for the `<figure>` element, if `as_figure` is set to `True`.
    attrs_caption : ElementAttributesDictType, optional
        Attributes for the `<caption>` or `<figcaption>` element, if provided.
    attrs_table : ElementAttributesDictType, optional
        Attributes for the `<table>` element.
    attrs_body : ElementAttributesDictType, optional
        Attributes for the `<tbody>` element.
    attrs_head : ElementAttributesDictType, optional
        Attributes for the `<thead>` element.
    attrs_foot : ElementAttributesDictType, optional
        Attributes for the `<tfoot>` element.
    attrs_tr : ElementAttributesDictType, optional
        Attributes for all `<tr>` elements.
        These have the lowest priority and can be overridden by specific row attributes
        (cf. `body_rows`, `head_rows`, `foot_rows`),
        or by the row attributes of the corresponding section
        (cf. `body_tr_attributes`, `head_tr_attributes`, `foot_tr_attributes`).
    attrs_th : ElementAttributesDictType, optional
        Attributes for all `<th>` elements.
        These have the lowest priority and can be overridden by specific cell attributes
        (cf. `body_rows`, `head_rows`, `foot_rows`),
        or by the row attributes of the corresponding section
        (cf. `body_th_attributes`, `head_th_attributes`, `foot_th_attributes`).
    attrs_td : ElementAttributesDictType, optional
        Attributes for all `<td>` elements.
        These have the lowest priority and can be overridden by specific cell attributes,
        (cf. `body_rows`, `head_rows`, `foot_rows`),
        or by the row attributes of the corresponding section
        (cf. `body_td_attributes`, `head_td_attributes`, `foot_td_attributes`).
    attrs_body_tr : ElementAttributesDictType, optional
        Attributes for all `<tr>` elements (i.e., rows) in the table body (cf. `body_rows`)
        These have the second lowest priority and can be overridden by specific row attributes,
        but not by `tr_attributes`.
    attrs_body_th : ElementAttributesDictType, optional
        Attributes for all `<th>` elements (i.e., cells) in the table body (cf. `body_rows`)
        These have the second lowest priority and can be overridden by specific cell attributes,
        but not by `th_attributes`.
    attrs_body_td : ElementAttributesDictType, optional
        Attributes for all `<td>` elements (i.e., cells) in the table body (cf. `body_rows`)
        These have the second lowest priority and can be overridden by specific cell attributes,
        but not by `td_attributes`.
    attrs_head_tr : ElementAttributesDictType, optional
        Like `body_tr_attributes`, but for the table head (cf. `head_rows`).
    attrs_head_th : ElementAttributesDictType, optional
        Like `body_th_attributes`, but for the table head (cf. `head_rows`).
    attrs_head_td : ElementAttributesDictType, optional
        Like `body_td_attributes`, but for the table head (cf. `head_rows`).
    attrs_foot_tr : ElementAttributesDictType, optional
        Like `body_tr_attributes`, but for the table foot (cf. `foot_rows`).
    attrs_foot_th : ElementAttributesDictType, optional
        Like `body_th_attributes`, but for the table foot (cf. `foot_rows`).
    attrs_foot_td : ElementAttributesDictType, optional
        Like `body_td_attributes`, but for the table foot (cf. `foot_rows`).

    Returns
    -------
    Table | Figure
        A `<table>` or `<figure>` element with the given rows.
    """
    args = locals()
    attrs_tr = attrs_tr or {}
    attrs_th = attrs_th or {}
    attrs_td = attrs_td or {}
    table_content = []
    for section in ("head", "body", "foot"):
        rows = args[f"rows_{section}"]
        if not rows:
            continue
        section_func = {"head": thead, "body": tbody, "foot": tfoot}[section]
        section_attrs = args[f"attrs_{section}"] or {}
        section_tr_attrs = args[f"attrs_{section}_tr"] or {}
        section_th_attrs = args[f"attrs_{section}_th"] or {}
        section_td_attrs = args[f"attrs_{section}_td"] or {}
        section_content = []
        for row in rows:
            if isinstance(row, tuple):
                cells, row_attrs = row
            else:
                cells = row
                row_attrs = {}
            row_attrs = attrs_tr | section_tr_attrs | row_attrs
            row_content = []
            for cell_idx, cell in enumerate(cells):
                if isinstance(cell, (Th, Tr)):
                    row_content.append(cell)
                    continue
                if isinstance(cell, tuple):
                    cell_content, cell_attrs = cell
                else:
                    cell_content = cell
                    cell_attrs = {}
                if section == "head" or (cell_idx == 0 and first_cell_header):
                    cell_attrs = attrs_th | section_th_attrs | cell_attrs
                    cell_func = th
                else:
                    cell_attrs = attrs_td | section_td_attrs | cell_attrs
                    cell_func = td
                row_content.append(cell_func(cell_content, cell_attrs))
            section_content.append(tr(row_content, row_attrs))
        table_content.append(section_func(section_content, section_attrs))
    if caption and not isinstance(caption, (Caption, Figcaption)):
        attrs_caption = attrs_caption or {}
        caption_func_name = "figcaption" if as_figure else "caption"
        caption = globals()[caption_func_name](caption, attrs_caption)
    if as_figure:
        fig_content: list[Element] = [caption] if caption else []
        fig_content.append(table(table_content, attrs_table))
        return figure(fig_content, attrs_figure)
    if caption:
        table_content.insert(0, caption)
    return table(table_content, attrs_table)


# class UL(Element):
#     """An unordered list <ul> element."""
#
#     def __init__(
#         self,
#         content: Optional[Sequence] = None,
#         type: Literal["disc", "circle", "square"] = "disc",
#         content_separator: Optional[str] = "",
#         content_indent: Optional[str] = "",
#         **attributes,
#     ):
#         attributes["type"] = type
#         if isinstance(content, str):
#             content = [LI(content=content, content_separator=content_separator, content_indent=content_indent)]
#         elif isinstance(content, Sequence):
#             content = [
#                 (
#                     LI(content=li, content_separator=content_separator, content_indent=content_indent)
#                     if isinstance(li, str) else li
#                 ) for li in content
#             ]
#         super().__init__(
#             name=f"ul",
#             attributes=attributes,
#             content=content,
#             content_separator=content_separator,
#             content_indent=content_indent,
#         )
#         return
#
#
# class OL(Element):
#     """An ordered list <ol> element."""
#
#     def __init__(
#         self,
#         content: Optional[Sequence] = None,
#         start: int = 1,
#         type: Literal["1", "a", "A", "i", "I"] = "1",
#         reversed: bool = False,
#         content_separator: Optional[str] = "",
#         content_indent: Optional[str] = "",
#         **attributes,
#     ):
#         attributes["type"] = type
#         attributes["start"] = start
#         attributes["reversed"] = reversed
#         if isinstance(content, str):
#             content = [LI(content=content, content_separator=content_separator, content_indent=content_indent)]
#         elif isinstance(content, Sequence):
#             content = [
#                 LI(content=li, content_separator=content_separator, content_indent=content_indent)
#                 for li in content
#             ]
#         super().__init__(
#             name=f"ol",
#             attributes=attributes,
#             content=content,
#             content_separator=content_separator,
#             content_indent=content_indent,
#         )
#         return
#
#
# class LI(Element):
#     """A list item <li> element."""
#
#     def __init__(
#         self,
#         content: Optional[str | ElementCollection] = None,
#         value: Optional[str] = None,
#         type: Optional[Literal["1", "a", "A", "i", "I"]] = None,
#         content_separator: Optional[str] = "",
#         content_indent: Optional[str] = "",
#         **attributes,
#     ):
#         attributes["value"] = value
#         attributes["type"] = type
#         super().__init__(
#             name=f"li",
#             attributes=attributes,
#             content=content,
#             content_separator=content_separator,
#             content_indent=content_indent,
#         )
#         return
