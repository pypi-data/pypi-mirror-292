from .utils import replace_tags


__all__ = ["BasicInputConverter"]

class BasicInputConverter:
    """Creates a basic input type converter for a given PL tag, such as `pl-number-input` or `pl-string-input`.
    
    Basic is determined by the fact that the processor just needs to set the appropriate tag,
    group the pl-customizations, and return the HTML including the markdown content for the question.

    More complex processors will need to be created manually, or with a different factory function.

    Arguments
    ---------
        pl_tag (str): The tag to be used for the input type, such as `number-input` (for `pl-number-input`) or `string-input` (for `pl-string-input`).
        ans_name (bool, optional): Wether the answers-name attribute should be autogenerated. Defaults to True.
    """

    def __init__(self, pl_tag: str, ans_name: bool = True):
        self._pl_tag = pl_tag
        self._ans_name = ans_name
        self.__doc__ = self.__call__.__doc__.format(pl_tag=pl_tag)  # pyright: ignore[reportOptionalMemberAccess]
    
    def __call__(self, part_name: str, parsed_question: dict, data_dict: dict) -> str:
        """Processes markdown format of {pl_tag} questions and returns PL HTML

        Arguments
        ---------
            part_name : str
                Name of the question part being processed (e.g., part1, part2, etc...)
            parsed_question : dict
                Dictionary of the MD-parsed question (output of ``read_md_problem``)
            data_dict : dict
                Dictionary of the ``data`` dict created after running server.py using ``exec``

        Returns
        -------
            html : str
                A string of HTML that is part of the final PL question.html file.
        """
        pl_customizations = " ".join(
            [
                f'{k} = "{v}"'
                for k, v in parsed_question["header"][part_name][
                    "pl-customizations"
                ].items()
            ]
        )  # PL-customizations

        html = f"<pl-question-panel>\n<markdown>{parsed_question['body_parts_split'][part_name]['content']}</markdown>\n</pl-question-panel>\n\n"

        if "answers-name" in pl_customizations or self._ans_name is False:
            html += f'<pl-{self._pl_tag} {pl_customizations} ></pl-{self._pl_tag}>\n'
        else:
            html += f'<pl-{self._pl_tag} answers-name="{part_name}_ans" {pl_customizations} ></pl-{self._pl_tag}>\n'

        return replace_tags(html)
