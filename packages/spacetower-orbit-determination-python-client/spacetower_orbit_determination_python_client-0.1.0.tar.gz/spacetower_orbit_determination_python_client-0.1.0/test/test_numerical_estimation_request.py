# coding: utf-8

"""
    Orbit Determination API

    Orbit Determination API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_determination_python_client.models.numerical_estimation_request import NumericalEstimationRequest

class TestNumericalEstimationRequest(unittest.TestCase):
    """NumericalEstimationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> NumericalEstimationRequest:
        """Test NumericalEstimationRequest
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `NumericalEstimationRequest`
        """
        model = NumericalEstimationRequest()
        if include_optional:
            return NumericalEstimationRequest(
                attitude_sequence = spacetower_orbit_determination_python_client.models.attitude_sequence.AttitudeSequence(
                    attitude_sequence_type = 'DATE_TRIGGERED_ATTITUDE_SWITCH', 
                    initial_attitude_law = spacetower_orbit_determination_python_client.models.attitude_law.AttitudeLaw(
                        attitude_law_type = 'LOF_ATTITUDE', ), ),
                estimator_type = 'UNSCENTED_KALMAN_FILTER',
                input_measurements_set = [
                    null
                    ],
                dynamics_and_frames_configuration = spacetower_orbit_determination_python_client.models.propagation_configuration.PropagationConfiguration(
                    perturbations_configuration = spacetower_orbit_determination_python_client.models.perturbations_configuration.PerturbationsConfiguration(
                        celestial_body_configuration = spacetower_orbit_determination_python_client.models.celestial_body_configuration.CelestialBodyConfiguration(
                            bodies = [
                                spacetower_orbit_determination_python_client.models.celestial_body.CelestialBody(
                                    body_name = 'SUN', )
                                ], ), 
                        perturbations = [
                            spacetower_orbit_determination_python_client.models.perturbation.Perturbation(
                                perturbation_type = 'EARTH_POTENTIAL', )
                            ], ), 
                    maneuver_schedule = spacetower_orbit_determination_python_client.models.maneuver_schedule.ManeuverSchedule(
                        maneuver_schedule_type = 'LOF_BASED_MANEUVER_SCHEDULE', ), 
                    reference_frames_configuration = spacetower_orbit_determination_python_client.models.reference_frames_configuration.ReferenceFramesConfiguration(
                        earth_centered_inertial_frame = 'GCRF', 
                        earth_centered_fixed_frame = 'ITRF2020', 
                        ellipsoid_model = 'WGS84', 
                        include_tidal_effects_in_eop_interpolation = True, ), 
                    integrator_configuration = spacetower_orbit_determination_python_client.models.integrator_configuration.IntegratorConfiguration(
                        integrator_type = 'VARIABLE_STEP', ), ),
                estimation_configuration = spacetower_orbit_determination_python_client.models.numerical_estimation_parameters.NumericalEstimationParameters(
                    estimate_orbit_flag = True, 
                    estimated_orbit_type = 'CARTESIAN', 
                    estimated_model_parameters_configuration = spacetower_orbit_determination_python_client.models.estimated_model_parameters_configuration.EstimatedModelParametersConfiguration(
                        thrust_scale_factors_estimation = spacetower_orbit_determination_python_client.models.thrust_scale_factor_estimation_request.ThrustScaleFactorEstimationRequest(
                            estimate_thrust_scales_flag = True, 
                            scale_factor_x_initial_standard_deviation = 1.337, 
                            scale_factor_y_initial_standard_deviation = 1.337, 
                            scale_factor_z_initial_standard_deviation = 1.337, 
                            scale_factor_x_process_noise_standard_deviation = 1.337, 
                            scale_factor_y_process_noise_standard_deviation = 1.337, 
                            scale_factor_z_process_noise_standard_deviation = 1.337, ), 
                        satellite_clock_offset_estimation = null, 
                        drag_coefficient_estimation = null, 
                        reflectivity_coefficient_estimation = spacetower_orbit_determination_python_client.models.reflectivity_coefficient_estimation_request.ReflectivityCoefficientEstimationRequest(), ), ),
                post_process_configuration = spacetower_orbit_determination_python_client.models.post_process_configuration.PostProcessConfiguration(
                    output_orbit_type = 'KEPLERIAN', 
                    output_mean_osc_type = 'OSCULATING', )
            )
        else:
            return NumericalEstimationRequest(
        )
        """

    def testNumericalEstimationRequest(self):
        """Test NumericalEstimationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
