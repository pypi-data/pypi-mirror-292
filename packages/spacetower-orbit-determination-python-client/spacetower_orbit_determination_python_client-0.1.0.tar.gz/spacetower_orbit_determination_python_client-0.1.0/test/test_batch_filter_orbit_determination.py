# coding: utf-8

"""
    Orbit Determination API

    Orbit Determination API

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from spacetower_orbit_determination_python_client.models.batch_filter_orbit_determination import BatchFilterOrbitDetermination

class TestBatchFilterOrbitDetermination(unittest.TestCase):
    """BatchFilterOrbitDetermination unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> BatchFilterOrbitDetermination:
        """Test BatchFilterOrbitDetermination
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `BatchFilterOrbitDetermination`
        """
        model = BatchFilterOrbitDetermination()
        if include_optional:
            return BatchFilterOrbitDetermination(
                initial_guess_configuration = spacetower_orbit_determination_python_client.models.batch_filter_initial_guess_configuration.BatchFilterInitialGuessConfiguration(
                    initial_orbit = spacetower_orbit_determination_python_client.models.orbit.Orbit(
                        orbit_type = 'KEPLERIAN', ), 
                    space_object = spacetower_orbit_determination_python_client.models.space_object.SpaceObject(
                        mass = 1.337, 
                        solar_array_system = spacetower_orbit_determination_python_client.models.solar_array_system.SolarArraySystem(
                            solar_array_power = 1.337, ), 
                        propulsion_system = spacetower_orbit_determination_python_client.models.propulsion_system.PropulsionSystem(
                            active_propulsion_power_consumption = 1.337, 
                            thruster = spacetower_orbit_determination_python_client.models.thruster.Thruster(
                                thrust = 1.337, 
                                specific_impulse = 1.337, 
                                axis_in_space_object_frame = spacetower_orbit_determination_python_client.models.vector3_d.Vector3D(
                                    x = 1.337, 
                                    y = 1.337, 
                                    z = 1.337, ), ), ), 
                        space_object_type = 'ISOTROPIC', ), )
            )
        else:
            return BatchFilterOrbitDetermination(
                initial_guess_configuration = spacetower_orbit_determination_python_client.models.batch_filter_initial_guess_configuration.BatchFilterInitialGuessConfiguration(
                    initial_orbit = spacetower_orbit_determination_python_client.models.orbit.Orbit(
                        orbit_type = 'KEPLERIAN', ), 
                    space_object = spacetower_orbit_determination_python_client.models.space_object.SpaceObject(
                        mass = 1.337, 
                        solar_array_system = spacetower_orbit_determination_python_client.models.solar_array_system.SolarArraySystem(
                            solar_array_power = 1.337, ), 
                        propulsion_system = spacetower_orbit_determination_python_client.models.propulsion_system.PropulsionSystem(
                            active_propulsion_power_consumption = 1.337, 
                            thruster = spacetower_orbit_determination_python_client.models.thruster.Thruster(
                                thrust = 1.337, 
                                specific_impulse = 1.337, 
                                axis_in_space_object_frame = spacetower_orbit_determination_python_client.models.vector3_d.Vector3D(
                                    x = 1.337, 
                                    y = 1.337, 
                                    z = 1.337, ), ), ), 
                        space_object_type = 'ISOTROPIC', ), ),
        )
        """

    def testBatchFilterOrbitDetermination(self):
        """Test BatchFilterOrbitDetermination"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
