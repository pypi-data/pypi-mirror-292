import{a as $,f as x}from"./1.8.0_string2.js";import{_ as f,r as a,o as e,f as g,w as u,a as _,n as w,c as s,t as b,A as C,B as v,s as A,F as S,i as B,g as d,j,e as k}from"./1.8.0_index.js";const z={components:{},props:{new_tab:{default:!1,type:Boolean},text:{default:"",type:String},address:{default:"",type:String}},mounted(){console.log(this.$slots._)}},D=["target","href"],N={key:0},V={key:1};function E(t,h,n,m,p,o){const i=a("lounge");return e(),g(i,null,{default:u(({palette:r,style:l})=>[_("a",{target:n.new_tab?"_blank":"",class:"outer-link",href:n.address,style:w(Object.assign({},{color:r.button.color,transition:["color "+r.change_duration].join(", "),textDecoration:"underline"},l))},[this.$slots._!==1&&n.text.length===0?(e(),s("span",N,b(n.address),1)):this.$slots._!==1&&n.text.length>=1?(e(),s("span",V,b(n.text),1)):C(t.$slots,"default",{key:2},void 0,!0)],12,D)]),_:3})}const F=f(z,[["render",E],["__scopeId","data-v-4fce88a2"]]),G={components:{s_outer_button_link:F,s_outer_link:v,s_button:A},props:{affiliates:Array},methods:{furnish_string:$}},I=_("h2",{style:{textAlign:"center"}},"affiliate sources",-1),L={key:0,style:{textAlign:"center",height:"100%",paddingTop:"5px",boxSizing:"border-box"}};function O(t,h,n,m,p,o){const i=a("s_outer_button_link"),r=a("lounge");return e(),g(r,null,{default:u(({palette:l})=>[I,(e(!0),s(S,null,B(n.affiliates,c=>(e(),s("div",null,[d(i,{new_tab:!0,address:o.furnish_string(c,"link",""),text:o.furnish_string(c,"name",""),style:{}},null,8,["address","text"])]))),256)),n.affiliates.length===0?(e(),s("div",L," not found ")):j("",!0)]),_:1})}const W=f(G,[["render",O]]);function X(){try{let t;if(arguments.length===3?t=k(arguments[0],arguments[1],arguments[2]):arguments.length===2?t=k(arguments[0],arguments[1],""):arguments.length===1&&(t=arguments[0]),Array.isArray(t)===!0)return t;throw console.log(arguments),new Error("An array could not be furnished from the preceeding arguments.")}catch(t){console.log("exception:",t)}return[]}const T={components:{s_outer_link:v,s_button:A},props:["goodness"],methods:{furnish_array:x,furnish_string:$},computed:{goodness_certs(){return x(this,"goodness")}}},q={style:{display:"flex",justifyContent:"space-between",flexDirection:"column"}},H=_("h3",{style:{margin:0,fontSize:".8em"}},"Goodness Certifications",-1),J={key:0},K=_("p",null,"Certification info for this product was not found.",-1),M=[K],P={key:1};function Q(t,h,n,m,p,o){const i=a("s_outer_link"),r=a("s_button"),l=a("lounge");return e(),g(l,null,{default:u(({palette:c})=>[_("div",q,[H,o.goodness_certs.length===0?(e(),s("div",J,M)):(e(),s("div",P,[(e(!0),s(S,null,B(o.goodness_certs,y=>(e(),s("div",null,[d(r,{ref_for:!0,ref:"button",pressable:!0,boundaries:"3px 12px 3px",clicked:()=>{},styles:{inside:{}}},{default:u(()=>[d(i,{new_tab:!0,address:o.furnish_string(y,["links",0]),style:w({color:c[1]}),text:o.furnish_string(y,["show","text"],"")},null,8,["address","style","text"])]),_:2},1536)]))),256))]))])]),_:1})}const Y=f(T,[["render",Q]]);export{W as a,X as f,Y as g};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
