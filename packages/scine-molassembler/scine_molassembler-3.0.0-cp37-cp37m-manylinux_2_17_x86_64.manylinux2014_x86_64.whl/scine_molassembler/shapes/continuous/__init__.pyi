"""
    Calculation of continuous shape or symmetry measures
  """
import scine_molassembler.shapes.continuous
import typing
from typing import Union
import numpy
import scine_molassembler.shapes

__all__ = [
    "cloud_distribution",
    "normalize",
    "probability_random_cloud",
    "shape_centroid_last"
]


def cloud_distribution(shape: scine_molassembler.shapes.Shape, N: int, seed: int) -> typing.List[float[4]]:
    """
          Generate beta distribution parameters for shape measures of random point clouds

          The random point clouds are generated by a zero vector representing the
          centroid, and points of uniformly distributed direction and normally
          distributed (mu = 1, stddev = 0.2) length.

          A beta distribution is fitted against two hundred such continuous shape
          measures with respect to the chosen shape.

          :param shape: Shape for which to calculate distribution parameters
          :param N: Number of samples
          :param seed: Seed for PRNG

          :returns: list with a, b, loc and scale parameters
        
    """
def normalize(positions: numpy.ndarray) -> numpy.ndarray:
    """
    Normalizes positions for continuous measure analyses
    """
def probability_random_cloud(measure: float, shape: scine_molassembler.shapes.Shape) -> typing.Optional[float]:
    """
          Probability that shape measure in set of measures for random point clouds

          The random point clouds are generated by a zero vector representing the
          centroid, and points of uniformly distributed direction and normally
          distributed (mu = 1, stddev = 0.2) length.

          A beta distribution is fitted against two hundred such continuous shape
          measures with respect to the chosen shape.

          The probability is then the cumulative distribution function value of the
          passed measure in the fitted beta distribution.

          The distribution parameters for N = 200 random point clouds are
          precomputed for shapes of sizes <= 8 and hardcoded into the binary. If no
          beta distribution parameters are available for a shape, returns None.

          :param measure: Continuous shape measure for a particular shape
          :param shape: The shape for which the measure was calculated

          :returns: Option[float]
        
    """
def shape_centroid_last(normalized_positions: numpy.ndarray, shape: scine_molassembler.shapes.Shape) -> float:
    """
    Calculates shape measure with centroid pre-matched, last in normalized positions
    """
