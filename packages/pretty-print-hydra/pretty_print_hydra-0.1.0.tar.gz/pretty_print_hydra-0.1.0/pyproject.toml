[project]
name = "pretty-print-hydra"
version = "0.1.0"
description = "Pretty print Hydra configs for easier debugging in development."
authors = [
    { name = "Amit Parekh", email = "amit@amitkparekh.com" },
]
dependencies = [
    "hydra-core>=1.3.0",
    "rich>=13.0.0",
    "omegaconf>=2.3.0",
]
requires-python = ">=3.10"
readme = "README.md"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Development Status :: 2 - Pre-Alpha",
    "Typing :: Typed",
]

[project.license]
text = "MIT"

[tool.pdm]
distribution = true
plugins = [
    "sync-pre-commit-lock",
]

[tool.pdm.dev-dependencies]
lint = [
    "ruff>=0.6.1",
    "pre-commit>=3.8.0",
    "commitizen>=3.29.0",
    "basedpyright>=1.16.0",
    "toml-sort>=0.23.1",
    "docformatter>=1.7.5",
]
test = [
    "pytest>=8.3.2",
    "pytest-cov>=5.0.0",
    "pytest-cases>=3.8.5",
    "pytest-xdist>=3.6.1",
    "hypothesis>=6.111.2",
    "pytest-sugar>=1.0.0",
    "pytest-mock>=3.14.0",
]

[tool.pdm.build]
package-dir = "src"

[tool.pdm.scripts]
pre_install = "pdm install --plugins"
format = "pre-commit run --all-files"

[tool.basedpyright]
typeCheckingMode = "all"
reportMissingTypeStubs = false
reportUnknownMemberType = false
reportFunctionMemberAccess = "warning"
reportUnknownVariableType = false
reportUntypedFunctionDecorator = false
reportUnknownLambdaType = false
reportUnknownArgumentType = false
reportUnknownParameterType = false
reportAny = false
reportImplicitOverride = false
reportMissingSuperCall = false
reportUnusedCallResult = false
reportIncompatibleMethodOverride = false
reportInvalidCast = false
reportPrivateLocalImportUsage = false
reportUnsafeMultipleInheritance = false
reportUnusedParameter = false
reportPrivateUsage = false
reportUnusedImport = false
reportPrivateImportUsage = false
reportImplicitStringConcatenation = false
reportDeprecated = false
reportMissingParameterType = false

[tool.pytest.ini_options]
testpaths = [
    "tests",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning",
]

[tool.ruff]
line-length = 99
target-version = "py312"
unsafe-fixes = true
src = [
    "src",
]

[tool.ruff.format]
docstring-code-format = true
skip-magic-trailing-comma = true

[tool.ruff.lint]
select = [
    "ALL",
]
ignore = [
    "B008",
    "D100",
    "D107",
    "E501",
    "N812",
    "S101",
    "ANN1",
    "ANN401",
    "COM",
    "G004",
    "EM",
    "FIX002",
    "TRY003",
    "RET504",
    "TD002",
    "TD003",
    "ERA001",
    "D206",
    "D300",
    "E111",
    "E114",
    "E117",
    "ISC001",
    "ISC002",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191",
]
unfixable = [
    "F841",
    "ERA001",
]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
exempt-modules = [
    "typing",
    "typing_extensions",
    "pydantic_numpy",
]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "pydantic.generics.GenericModel",
]

[tool.ruff.lint.isort]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",
    "S101",
    "INP001",
    "PLR2004",
    "FBT001",
    "SLF001",
]
"scripts/*" = [
    "INP001",
]
"src/**/__init__.py" = [
    "D",
    "F401",
    "I002",
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 20

[tool.sync-pre-commit-lock.dependency-mapping.toml-sort]
repo = "https://github.com/pappasam/toml-sort"
rev = "v${rev}"

[tool.sync-pre-commit-lock.dependency-mapping.docformatter]
repo = "https://github.com/PyCQA/docformatter"
rev = "v${rev}"

[tool.tomlsort]
sort_first = [
    "project",
    "tool",
]
spaces_indent_inline_array = 4
trailing_comma_inline_array = true

[tool.tomlsort.overrides.project]
first = [
    "name",
    "version",
    "description",
    "authors",
    "license",
    "readme",
    "requires-python",
]

[tool.tomlsort.overrides.tool]
first = [
    "pdm",
]

[tool.tomlsort.overrides."tool.pdm"]
first = [
    "dev-dependencies",
]

[build-system]
requires = [
    "pdm-backend",
]
build-backend = "pdm.backend"
