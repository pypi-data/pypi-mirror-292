# This file was generated by liblab | https://liblab.com/

from typing import List
from ..utils.json_map import JsonMap
from ..base import BaseModel


@JsonMap({"m": "M", "ef_construction": "efConstruction"})
class IndexConfig(BaseModel):
    """IndexConfig

    :param index_type: index_type, defaults to None
    :type index_type: str, optional
    :param m: m, defaults to None
    :type m: int, optional
    :param ef_construction: ef_construction, defaults to None
    :type ef_construction: int, optional
    :param nlist: nlist, defaults to None
    :type nlist: int, optional
    """

    def __init__(
        self,
        index_type: str = None,
        m: int = None,
        ef_construction: int = None,
        nlist: int = None,
    ):
        if index_type is not None:
            self.index_type = index_type
        if m is not None:
            self.m = m
        if ef_construction is not None:
            self.ef_construction = ef_construction
        if nlist is not None:
            self.nlist = nlist


@JsonMap(
    {"metric_type": "metricType", "field_name": "fieldName", "index_name": "indexName"}
)
class Index(BaseModel):
    """Index

    :param metric_type: metric_type, defaults to None
    :type metric_type: str, optional
    :param field_name: field_name, defaults to None
    :type field_name: str, optional
    :param index_name: index_name, defaults to None
    :type index_name: str, optional
    :param params: params, defaults to None
    :type params: IndexConfig, optional
    """

    def __init__(
        self,
        metric_type: str = "COSINE",
        field_name: str = None,
        index_name: str = None,
        params: IndexConfig = None,
    ):
        if metric_type is not None:
            self.metric_type = metric_type
        if field_name is not None:
            self.field_name = field_name
        if index_name is not None:
            self.index_name = index_name
        if params is not None:
            self.params = self._define_object(params, IndexConfig)


@JsonMap(
    {
        "collection_name": "collectionName",
        "index_params": "indexParams",
    }
)
class IndexRequest(BaseModel):
    """IndexRequest



    :param collection_name: collection_name
    :type collection_name: str
    :param index_params: index_params, defaults to None
    :type index_params: List[Index], optional
    """

    def __init__(
        self,
        collection_name: str,
        project_id: str,
        index_params: List[Index] = None,
    ):
        self.collection_name = collection_name
        self.project_id = project_id
        if index_params is not None:
            self.index_params = self._define_list(index_params, Index)
