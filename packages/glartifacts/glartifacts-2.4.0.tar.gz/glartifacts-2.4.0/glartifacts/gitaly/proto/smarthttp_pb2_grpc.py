# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import smarthttp_pb2 as smarthttp__pb2


class SmartHTTPServiceStub(object):
  """SmartHTTPService is a service that provides RPCs required for HTTP-based Git
  clones via the smart HTTP protocol.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.InfoRefsUploadPack = channel.unary_stream(
        '/gitaly.SmartHTTPService/InfoRefsUploadPack',
        request_serializer=smarthttp__pb2.InfoRefsRequest.SerializeToString,
        response_deserializer=smarthttp__pb2.InfoRefsResponse.FromString,
        )
    self.InfoRefsReceivePack = channel.unary_stream(
        '/gitaly.SmartHTTPService/InfoRefsReceivePack',
        request_serializer=smarthttp__pb2.InfoRefsRequest.SerializeToString,
        response_deserializer=smarthttp__pb2.InfoRefsResponse.FromString,
        )
    self.PostUploadPack = channel.stream_stream(
        '/gitaly.SmartHTTPService/PostUploadPack',
        request_serializer=smarthttp__pb2.PostUploadPackRequest.SerializeToString,
        response_deserializer=smarthttp__pb2.PostUploadPackResponse.FromString,
        )
    self.PostUploadPackWithSidechannel = channel.unary_unary(
        '/gitaly.SmartHTTPService/PostUploadPackWithSidechannel',
        request_serializer=smarthttp__pb2.PostUploadPackWithSidechannelRequest.SerializeToString,
        response_deserializer=smarthttp__pb2.PostUploadPackWithSidechannelResponse.FromString,
        )
    self.PostReceivePack = channel.stream_stream(
        '/gitaly.SmartHTTPService/PostReceivePack',
        request_serializer=smarthttp__pb2.PostReceivePackRequest.SerializeToString,
        response_deserializer=smarthttp__pb2.PostReceivePackResponse.FromString,
        )


class SmartHTTPServiceServicer(object):
  """SmartHTTPService is a service that provides RPCs required for HTTP-based Git
  clones via the smart HTTP protocol.
  """

  def InfoRefsUploadPack(self, request, context):
    """The response body for GET /info/refs?service=git-upload-pack
    Will be invoked when the user executes a `git fetch`, meaning the server
    will upload the packs to that user. The user doesn't upload new objects.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InfoRefsReceivePack(self, request, context):
    """The response body for GET /info/refs?service=git-receive-pack
    Will be invoked when the user executes a `git push`, but only advertises
    references to the user.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PostUploadPack(self, request_iterator, context):
    """Request and response body for POST /upload-pack
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PostUploadPackWithSidechannel(self, request, context):
    """Request and response body for POST /upload-pack using sidechannel protocol
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PostReceivePack(self, request_iterator, context):
    """Request and response body for POST /receive-pack
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_SmartHTTPServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'InfoRefsUploadPack': grpc.unary_stream_rpc_method_handler(
          servicer.InfoRefsUploadPack,
          request_deserializer=smarthttp__pb2.InfoRefsRequest.FromString,
          response_serializer=smarthttp__pb2.InfoRefsResponse.SerializeToString,
      ),
      'InfoRefsReceivePack': grpc.unary_stream_rpc_method_handler(
          servicer.InfoRefsReceivePack,
          request_deserializer=smarthttp__pb2.InfoRefsRequest.FromString,
          response_serializer=smarthttp__pb2.InfoRefsResponse.SerializeToString,
      ),
      'PostUploadPack': grpc.stream_stream_rpc_method_handler(
          servicer.PostUploadPack,
          request_deserializer=smarthttp__pb2.PostUploadPackRequest.FromString,
          response_serializer=smarthttp__pb2.PostUploadPackResponse.SerializeToString,
      ),
      'PostUploadPackWithSidechannel': grpc.unary_unary_rpc_method_handler(
          servicer.PostUploadPackWithSidechannel,
          request_deserializer=smarthttp__pb2.PostUploadPackWithSidechannelRequest.FromString,
          response_serializer=smarthttp__pb2.PostUploadPackWithSidechannelResponse.SerializeToString,
      ),
      'PostReceivePack': grpc.stream_stream_rpc_method_handler(
          servicer.PostReceivePack,
          request_deserializer=smarthttp__pb2.PostReceivePackRequest.FromString,
          response_serializer=smarthttp__pb2.PostReceivePackResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.SmartHTTPService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
