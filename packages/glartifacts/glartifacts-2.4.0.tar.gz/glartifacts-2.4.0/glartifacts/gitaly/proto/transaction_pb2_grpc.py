# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import transaction_pb2 as transaction__pb2


class RefTransactionStub(object):
  """RefTransaction is a service which provides RPCs to interact with reference
  transactions. Reference transactions are used in the context of Gitaly
  Cluster to ensure that all nodes part of a single transaction perform the
  same change: given a set of changes, the changes are hashed and the hash is
  then voted on.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.VoteTransaction = channel.unary_unary(
        '/gitaly.RefTransaction/VoteTransaction',
        request_serializer=transaction__pb2.VoteTransactionRequest.SerializeToString,
        response_deserializer=transaction__pb2.VoteTransactionResponse.FromString,
        )
    self.StopTransaction = channel.unary_unary(
        '/gitaly.RefTransaction/StopTransaction',
        request_serializer=transaction__pb2.StopTransactionRequest.SerializeToString,
        response_deserializer=transaction__pb2.StopTransactionResponse.FromString,
        )


class RefTransactionServicer(object):
  """RefTransaction is a service which provides RPCs to interact with reference
  transactions. Reference transactions are used in the context of Gitaly
  Cluster to ensure that all nodes part of a single transaction perform the
  same change: given a set of changes, the changes are hashed and the hash is
  then voted on.
  """

  def VoteTransaction(self, request, context):
    """VoteTransaction casts a vote on a transaction to establish whether the
    node is doing the same change as all the other nodes part of the
    transaction. This RPC blocks until quorum has been reached, which may be
    _before_ all nodes have cast a vote.

    This RPC may return one of the following error codes:

    - `NotFound` in case the transaction could not be found.
    - `Canceled` in case the transaction has been canceled before quorum was
    reached.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StopTransaction(self, request, context):
    """StopTransaction gracefully stops a transaction. This RPC can be used if
    only a subset of nodes executes specific code which may cause the
    transaction to fail. One such example is Git hooks, which only execute on
    the primary Gitaly noded. Other nodes which vote on this transaction will
    get a response with the `STOP` state being set.

    This RPC may return one of the following error codes:

    - `NotFound` in case the transaction could not be found.
    - `Canceled` in case the transaction has been canceled before quorum was
    reached.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RefTransactionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'VoteTransaction': grpc.unary_unary_rpc_method_handler(
          servicer.VoteTransaction,
          request_deserializer=transaction__pb2.VoteTransactionRequest.FromString,
          response_serializer=transaction__pb2.VoteTransactionResponse.SerializeToString,
      ),
      'StopTransaction': grpc.unary_unary_rpc_method_handler(
          servicer.StopTransaction,
          request_deserializer=transaction__pb2.StopTransactionRequest.FromString,
          response_serializer=transaction__pb2.StopTransactionResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.RefTransaction', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
