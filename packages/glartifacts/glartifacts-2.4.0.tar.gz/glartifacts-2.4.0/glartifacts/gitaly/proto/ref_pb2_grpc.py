# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import ref_pb2 as ref__pb2


class RefServiceStub(object):
  """RefService is a service that provides RPCs to list and modify Git references.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.FindDefaultBranchName = channel.unary_unary(
        '/gitaly.RefService/FindDefaultBranchName',
        request_serializer=ref__pb2.FindDefaultBranchNameRequest.SerializeToString,
        response_deserializer=ref__pb2.FindDefaultBranchNameResponse.FromString,
        )
    self.FindAllBranchNames = channel.unary_stream(
        '/gitaly.RefService/FindAllBranchNames',
        request_serializer=ref__pb2.FindAllBranchNamesRequest.SerializeToString,
        response_deserializer=ref__pb2.FindAllBranchNamesResponse.FromString,
        )
    self.FindAllTagNames = channel.unary_stream(
        '/gitaly.RefService/FindAllTagNames',
        request_serializer=ref__pb2.FindAllTagNamesRequest.SerializeToString,
        response_deserializer=ref__pb2.FindAllTagNamesResponse.FromString,
        )
    self.FindLocalBranches = channel.unary_stream(
        '/gitaly.RefService/FindLocalBranches',
        request_serializer=ref__pb2.FindLocalBranchesRequest.SerializeToString,
        response_deserializer=ref__pb2.FindLocalBranchesResponse.FromString,
        )
    self.FindAllBranches = channel.unary_stream(
        '/gitaly.RefService/FindAllBranches',
        request_serializer=ref__pb2.FindAllBranchesRequest.SerializeToString,
        response_deserializer=ref__pb2.FindAllBranchesResponse.FromString,
        )
    self.FindAllTags = channel.unary_stream(
        '/gitaly.RefService/FindAllTags',
        request_serializer=ref__pb2.FindAllTagsRequest.SerializeToString,
        response_deserializer=ref__pb2.FindAllTagsResponse.FromString,
        )
    self.FindTag = channel.unary_unary(
        '/gitaly.RefService/FindTag',
        request_serializer=ref__pb2.FindTagRequest.SerializeToString,
        response_deserializer=ref__pb2.FindTagResponse.FromString,
        )
    self.FindAllRemoteBranches = channel.unary_stream(
        '/gitaly.RefService/FindAllRemoteBranches',
        request_serializer=ref__pb2.FindAllRemoteBranchesRequest.SerializeToString,
        response_deserializer=ref__pb2.FindAllRemoteBranchesResponse.FromString,
        )
    self.RefExists = channel.unary_unary(
        '/gitaly.RefService/RefExists',
        request_serializer=ref__pb2.RefExistsRequest.SerializeToString,
        response_deserializer=ref__pb2.RefExistsResponse.FromString,
        )
    self.FindBranch = channel.unary_unary(
        '/gitaly.RefService/FindBranch',
        request_serializer=ref__pb2.FindBranchRequest.SerializeToString,
        response_deserializer=ref__pb2.FindBranchResponse.FromString,
        )
    self.DeleteRefs = channel.unary_unary(
        '/gitaly.RefService/DeleteRefs',
        request_serializer=ref__pb2.DeleteRefsRequest.SerializeToString,
        response_deserializer=ref__pb2.DeleteRefsResponse.FromString,
        )
    self.ListBranchNamesContainingCommit = channel.unary_stream(
        '/gitaly.RefService/ListBranchNamesContainingCommit',
        request_serializer=ref__pb2.ListBranchNamesContainingCommitRequest.SerializeToString,
        response_deserializer=ref__pb2.ListBranchNamesContainingCommitResponse.FromString,
        )
    self.ListTagNamesContainingCommit = channel.unary_stream(
        '/gitaly.RefService/ListTagNamesContainingCommit',
        request_serializer=ref__pb2.ListTagNamesContainingCommitRequest.SerializeToString,
        response_deserializer=ref__pb2.ListTagNamesContainingCommitResponse.FromString,
        )
    self.GetTagSignatures = channel.unary_stream(
        '/gitaly.RefService/GetTagSignatures',
        request_serializer=ref__pb2.GetTagSignaturesRequest.SerializeToString,
        response_deserializer=ref__pb2.GetTagSignaturesResponse.FromString,
        )
    self.GetTagMessages = channel.unary_stream(
        '/gitaly.RefService/GetTagMessages',
        request_serializer=ref__pb2.GetTagMessagesRequest.SerializeToString,
        response_deserializer=ref__pb2.GetTagMessagesResponse.FromString,
        )
    self.PackRefs = channel.unary_unary(
        '/gitaly.RefService/PackRefs',
        request_serializer=ref__pb2.PackRefsRequest.SerializeToString,
        response_deserializer=ref__pb2.PackRefsResponse.FromString,
        )
    self.ListRefs = channel.unary_stream(
        '/gitaly.RefService/ListRefs',
        request_serializer=ref__pb2.ListRefsRequest.SerializeToString,
        response_deserializer=ref__pb2.ListRefsResponse.FromString,
        )
    self.FindRefsByOID = channel.unary_unary(
        '/gitaly.RefService/FindRefsByOID',
        request_serializer=ref__pb2.FindRefsByOIDRequest.SerializeToString,
        response_deserializer=ref__pb2.FindRefsByOIDResponse.FromString,
        )


class RefServiceServicer(object):
  """RefService is a service that provides RPCs to list and modify Git references.
  """

  def FindDefaultBranchName(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindAllBranchNames(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindAllTagNames(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindLocalBranches(self, request, context):
    """Return a stream so we can divide the response in chunks of branches
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindAllBranches(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindAllTags(self, request, context):
    """Returns a stream of tags repository has.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindTag(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindAllRemoteBranches(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RefExists(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindBranch(self, request, context):
    """FindBranch finds a branch by its unqualified name (like "master") and
    returns the commit it currently points to.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeleteRefs(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListBranchNamesContainingCommit(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListTagNamesContainingCommit(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTagSignatures(self, request, context):
    """GetTagSignatures returns signatures for annotated tags resolved from a set of revisions. Revisions
    which don't resolve to an annotated tag are silently discarded. Revisions which cannot be resolved
    result in an error. Tags which are annotated but not signed will return a TagSignature response
    which has no signature, but its unsigned contents will still be returned.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTagMessages(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PackRefs(self, request, context):
    """PackRefs is deprecated in favor of OptimizeRepository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListRefs(self, request, context):
    """ListRefs returns a stream of all references in the repository. By default, pseudo-revisions like HEAD
    will not be returned by this RPC. Any symbolic references will be resolved to the object ID it is
    pointing at.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindRefsByOID(self, request, context):
    """FindRefsByOID returns an array of fully qualified reference names that point to an object ID.
    It returns nothing if the object ID doesn't exist, or doesn't point to
    any branches or tags. Prefixes can be also be used as the object ID.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RefServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'FindDefaultBranchName': grpc.unary_unary_rpc_method_handler(
          servicer.FindDefaultBranchName,
          request_deserializer=ref__pb2.FindDefaultBranchNameRequest.FromString,
          response_serializer=ref__pb2.FindDefaultBranchNameResponse.SerializeToString,
      ),
      'FindAllBranchNames': grpc.unary_stream_rpc_method_handler(
          servicer.FindAllBranchNames,
          request_deserializer=ref__pb2.FindAllBranchNamesRequest.FromString,
          response_serializer=ref__pb2.FindAllBranchNamesResponse.SerializeToString,
      ),
      'FindAllTagNames': grpc.unary_stream_rpc_method_handler(
          servicer.FindAllTagNames,
          request_deserializer=ref__pb2.FindAllTagNamesRequest.FromString,
          response_serializer=ref__pb2.FindAllTagNamesResponse.SerializeToString,
      ),
      'FindLocalBranches': grpc.unary_stream_rpc_method_handler(
          servicer.FindLocalBranches,
          request_deserializer=ref__pb2.FindLocalBranchesRequest.FromString,
          response_serializer=ref__pb2.FindLocalBranchesResponse.SerializeToString,
      ),
      'FindAllBranches': grpc.unary_stream_rpc_method_handler(
          servicer.FindAllBranches,
          request_deserializer=ref__pb2.FindAllBranchesRequest.FromString,
          response_serializer=ref__pb2.FindAllBranchesResponse.SerializeToString,
      ),
      'FindAllTags': grpc.unary_stream_rpc_method_handler(
          servicer.FindAllTags,
          request_deserializer=ref__pb2.FindAllTagsRequest.FromString,
          response_serializer=ref__pb2.FindAllTagsResponse.SerializeToString,
      ),
      'FindTag': grpc.unary_unary_rpc_method_handler(
          servicer.FindTag,
          request_deserializer=ref__pb2.FindTagRequest.FromString,
          response_serializer=ref__pb2.FindTagResponse.SerializeToString,
      ),
      'FindAllRemoteBranches': grpc.unary_stream_rpc_method_handler(
          servicer.FindAllRemoteBranches,
          request_deserializer=ref__pb2.FindAllRemoteBranchesRequest.FromString,
          response_serializer=ref__pb2.FindAllRemoteBranchesResponse.SerializeToString,
      ),
      'RefExists': grpc.unary_unary_rpc_method_handler(
          servicer.RefExists,
          request_deserializer=ref__pb2.RefExistsRequest.FromString,
          response_serializer=ref__pb2.RefExistsResponse.SerializeToString,
      ),
      'FindBranch': grpc.unary_unary_rpc_method_handler(
          servicer.FindBranch,
          request_deserializer=ref__pb2.FindBranchRequest.FromString,
          response_serializer=ref__pb2.FindBranchResponse.SerializeToString,
      ),
      'DeleteRefs': grpc.unary_unary_rpc_method_handler(
          servicer.DeleteRefs,
          request_deserializer=ref__pb2.DeleteRefsRequest.FromString,
          response_serializer=ref__pb2.DeleteRefsResponse.SerializeToString,
      ),
      'ListBranchNamesContainingCommit': grpc.unary_stream_rpc_method_handler(
          servicer.ListBranchNamesContainingCommit,
          request_deserializer=ref__pb2.ListBranchNamesContainingCommitRequest.FromString,
          response_serializer=ref__pb2.ListBranchNamesContainingCommitResponse.SerializeToString,
      ),
      'ListTagNamesContainingCommit': grpc.unary_stream_rpc_method_handler(
          servicer.ListTagNamesContainingCommit,
          request_deserializer=ref__pb2.ListTagNamesContainingCommitRequest.FromString,
          response_serializer=ref__pb2.ListTagNamesContainingCommitResponse.SerializeToString,
      ),
      'GetTagSignatures': grpc.unary_stream_rpc_method_handler(
          servicer.GetTagSignatures,
          request_deserializer=ref__pb2.GetTagSignaturesRequest.FromString,
          response_serializer=ref__pb2.GetTagSignaturesResponse.SerializeToString,
      ),
      'GetTagMessages': grpc.unary_stream_rpc_method_handler(
          servicer.GetTagMessages,
          request_deserializer=ref__pb2.GetTagMessagesRequest.FromString,
          response_serializer=ref__pb2.GetTagMessagesResponse.SerializeToString,
      ),
      'PackRefs': grpc.unary_unary_rpc_method_handler(
          servicer.PackRefs,
          request_deserializer=ref__pb2.PackRefsRequest.FromString,
          response_serializer=ref__pb2.PackRefsResponse.SerializeToString,
      ),
      'ListRefs': grpc.unary_stream_rpc_method_handler(
          servicer.ListRefs,
          request_deserializer=ref__pb2.ListRefsRequest.FromString,
          response_serializer=ref__pb2.ListRefsResponse.SerializeToString,
      ),
      'FindRefsByOID': grpc.unary_unary_rpc_method_handler(
          servicer.FindRefsByOID,
          request_deserializer=ref__pb2.FindRefsByOIDRequest.FromString,
          response_serializer=ref__pb2.FindRefsByOIDResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.RefService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
