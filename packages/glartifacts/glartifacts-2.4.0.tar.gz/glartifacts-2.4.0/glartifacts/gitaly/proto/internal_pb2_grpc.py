# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import internal_pb2 as internal__pb2


class InternalGitalyStub(object):
  """InternalGitaly is a gRPC service meant to be served by a Gitaly node, but
  only reachable by Praefect or other Gitalies
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.WalkRepos = channel.unary_stream(
        '/gitaly.InternalGitaly/WalkRepos',
        request_serializer=internal__pb2.WalkReposRequest.SerializeToString,
        response_deserializer=internal__pb2.WalkReposResponse.FromString,
        )


class InternalGitalyServicer(object):
  """InternalGitaly is a gRPC service meant to be served by a Gitaly node, but
  only reachable by Praefect or other Gitalies
  """

  def WalkRepos(self, request, context):
    """WalkRepos walks the storage and streams back all known git repos on the
    requested storage
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_InternalGitalyServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'WalkRepos': grpc.unary_stream_rpc_method_handler(
          servicer.WalkRepos,
          request_deserializer=internal__pb2.WalkReposRequest.FromString,
          response_serializer=internal__pb2.WalkReposResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.InternalGitaly', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
