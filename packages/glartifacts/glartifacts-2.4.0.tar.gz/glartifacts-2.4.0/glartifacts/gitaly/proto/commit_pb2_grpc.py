# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import commit_pb2 as commit__pb2


class CommitServiceStub(object):
  """CommitService is a service which provides RPCs that interact with Git
  commits.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ListCommits = channel.unary_stream(
        '/gitaly.CommitService/ListCommits',
        request_serializer=commit__pb2.ListCommitsRequest.SerializeToString,
        response_deserializer=commit__pb2.ListCommitsResponse.FromString,
        )
    self.ListAllCommits = channel.unary_stream(
        '/gitaly.CommitService/ListAllCommits',
        request_serializer=commit__pb2.ListAllCommitsRequest.SerializeToString,
        response_deserializer=commit__pb2.ListAllCommitsResponse.FromString,
        )
    self.CommitIsAncestor = channel.unary_unary(
        '/gitaly.CommitService/CommitIsAncestor',
        request_serializer=commit__pb2.CommitIsAncestorRequest.SerializeToString,
        response_deserializer=commit__pb2.CommitIsAncestorResponse.FromString,
        )
    self.TreeEntry = channel.unary_stream(
        '/gitaly.CommitService/TreeEntry',
        request_serializer=commit__pb2.TreeEntryRequest.SerializeToString,
        response_deserializer=commit__pb2.TreeEntryResponse.FromString,
        )
    self.CountCommits = channel.unary_unary(
        '/gitaly.CommitService/CountCommits',
        request_serializer=commit__pb2.CountCommitsRequest.SerializeToString,
        response_deserializer=commit__pb2.CountCommitsResponse.FromString,
        )
    self.CountDivergingCommits = channel.unary_unary(
        '/gitaly.CommitService/CountDivergingCommits',
        request_serializer=commit__pb2.CountDivergingCommitsRequest.SerializeToString,
        response_deserializer=commit__pb2.CountDivergingCommitsResponse.FromString,
        )
    self.GetTreeEntries = channel.unary_stream(
        '/gitaly.CommitService/GetTreeEntries',
        request_serializer=commit__pb2.GetTreeEntriesRequest.SerializeToString,
        response_deserializer=commit__pb2.GetTreeEntriesResponse.FromString,
        )
    self.ListFiles = channel.unary_stream(
        '/gitaly.CommitService/ListFiles',
        request_serializer=commit__pb2.ListFilesRequest.SerializeToString,
        response_deserializer=commit__pb2.ListFilesResponse.FromString,
        )
    self.FindCommit = channel.unary_unary(
        '/gitaly.CommitService/FindCommit',
        request_serializer=commit__pb2.FindCommitRequest.SerializeToString,
        response_deserializer=commit__pb2.FindCommitResponse.FromString,
        )
    self.CommitStats = channel.unary_unary(
        '/gitaly.CommitService/CommitStats',
        request_serializer=commit__pb2.CommitStatsRequest.SerializeToString,
        response_deserializer=commit__pb2.CommitStatsResponse.FromString,
        )
    self.FindAllCommits = channel.unary_stream(
        '/gitaly.CommitService/FindAllCommits',
        request_serializer=commit__pb2.FindAllCommitsRequest.SerializeToString,
        response_deserializer=commit__pb2.FindAllCommitsResponse.FromString,
        )
    self.FindCommits = channel.unary_stream(
        '/gitaly.CommitService/FindCommits',
        request_serializer=commit__pb2.FindCommitsRequest.SerializeToString,
        response_deserializer=commit__pb2.FindCommitsResponse.FromString,
        )
    self.CommitLanguages = channel.unary_unary(
        '/gitaly.CommitService/CommitLanguages',
        request_serializer=commit__pb2.CommitLanguagesRequest.SerializeToString,
        response_deserializer=commit__pb2.CommitLanguagesResponse.FromString,
        )
    self.RawBlame = channel.unary_stream(
        '/gitaly.CommitService/RawBlame',
        request_serializer=commit__pb2.RawBlameRequest.SerializeToString,
        response_deserializer=commit__pb2.RawBlameResponse.FromString,
        )
    self.LastCommitForPath = channel.unary_unary(
        '/gitaly.CommitService/LastCommitForPath',
        request_serializer=commit__pb2.LastCommitForPathRequest.SerializeToString,
        response_deserializer=commit__pb2.LastCommitForPathResponse.FromString,
        )
    self.ListLastCommitsForTree = channel.unary_stream(
        '/gitaly.CommitService/ListLastCommitsForTree',
        request_serializer=commit__pb2.ListLastCommitsForTreeRequest.SerializeToString,
        response_deserializer=commit__pb2.ListLastCommitsForTreeResponse.FromString,
        )
    self.CommitsByMessage = channel.unary_stream(
        '/gitaly.CommitService/CommitsByMessage',
        request_serializer=commit__pb2.CommitsByMessageRequest.SerializeToString,
        response_deserializer=commit__pb2.CommitsByMessageResponse.FromString,
        )
    self.ListCommitsByOid = channel.unary_stream(
        '/gitaly.CommitService/ListCommitsByOid',
        request_serializer=commit__pb2.ListCommitsByOidRequest.SerializeToString,
        response_deserializer=commit__pb2.ListCommitsByOidResponse.FromString,
        )
    self.ListCommitsByRefName = channel.unary_stream(
        '/gitaly.CommitService/ListCommitsByRefName',
        request_serializer=commit__pb2.ListCommitsByRefNameRequest.SerializeToString,
        response_deserializer=commit__pb2.ListCommitsByRefNameResponse.FromString,
        )
    self.FilterShasWithSignatures = channel.stream_stream(
        '/gitaly.CommitService/FilterShasWithSignatures',
        request_serializer=commit__pb2.FilterShasWithSignaturesRequest.SerializeToString,
        response_deserializer=commit__pb2.FilterShasWithSignaturesResponse.FromString,
        )
    self.GetCommitSignatures = channel.unary_stream(
        '/gitaly.CommitService/GetCommitSignatures',
        request_serializer=commit__pb2.GetCommitSignaturesRequest.SerializeToString,
        response_deserializer=commit__pb2.GetCommitSignaturesResponse.FromString,
        )
    self.GetCommitMessages = channel.unary_stream(
        '/gitaly.CommitService/GetCommitMessages',
        request_serializer=commit__pb2.GetCommitMessagesRequest.SerializeToString,
        response_deserializer=commit__pb2.GetCommitMessagesResponse.FromString,
        )
    self.CheckObjectsExist = channel.stream_stream(
        '/gitaly.CommitService/CheckObjectsExist',
        request_serializer=commit__pb2.CheckObjectsExistRequest.SerializeToString,
        response_deserializer=commit__pb2.CheckObjectsExistResponse.FromString,
        )


class CommitServiceServicer(object):
  """CommitService is a service which provides RPCs that interact with Git
  commits.
  """

  def ListCommits(self, request, context):
    """ListCommits lists all commits reachable via a set of references by doing a
    graph walk. This deprecates FindAllCommits and FindCommits (except Follow
    is not yet supported). Any unknown revisions will cause the RPC to fail.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListAllCommits(self, request, context):
    """ListAllCommits lists all commits present in the repository, including
    those not reachable by any reference.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitIsAncestor(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TreeEntry(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CountCommits(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CountDivergingCommits(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTreeEntries(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListFiles(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindCommit(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitStats(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindAllCommits(self, request, context):
    """Use a stream to paginate the result set
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindCommits(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitLanguages(self, request, context):
    """CommitLanguages detects the source code languages of the whole tree for a
    given commit. Returns an error in case no languages could be detected.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RawBlame(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def LastCommitForPath(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListLastCommitsForTree(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CommitsByMessage(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListCommitsByOid(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListCommitsByRefName(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FilterShasWithSignatures(self, request_iterator, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCommitSignatures(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCommitMessages(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CheckObjectsExist(self, request_iterator, context):
    """CheckObjectsExist will check for the existence of revisions against a
    repository. It returns two sets of data. An array containing the revisions
    fromm the input that it found on the repository, and an array that contains all
    revisions from the input it did not find on the repository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CommitServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ListCommits': grpc.unary_stream_rpc_method_handler(
          servicer.ListCommits,
          request_deserializer=commit__pb2.ListCommitsRequest.FromString,
          response_serializer=commit__pb2.ListCommitsResponse.SerializeToString,
      ),
      'ListAllCommits': grpc.unary_stream_rpc_method_handler(
          servicer.ListAllCommits,
          request_deserializer=commit__pb2.ListAllCommitsRequest.FromString,
          response_serializer=commit__pb2.ListAllCommitsResponse.SerializeToString,
      ),
      'CommitIsAncestor': grpc.unary_unary_rpc_method_handler(
          servicer.CommitIsAncestor,
          request_deserializer=commit__pb2.CommitIsAncestorRequest.FromString,
          response_serializer=commit__pb2.CommitIsAncestorResponse.SerializeToString,
      ),
      'TreeEntry': grpc.unary_stream_rpc_method_handler(
          servicer.TreeEntry,
          request_deserializer=commit__pb2.TreeEntryRequest.FromString,
          response_serializer=commit__pb2.TreeEntryResponse.SerializeToString,
      ),
      'CountCommits': grpc.unary_unary_rpc_method_handler(
          servicer.CountCommits,
          request_deserializer=commit__pb2.CountCommitsRequest.FromString,
          response_serializer=commit__pb2.CountCommitsResponse.SerializeToString,
      ),
      'CountDivergingCommits': grpc.unary_unary_rpc_method_handler(
          servicer.CountDivergingCommits,
          request_deserializer=commit__pb2.CountDivergingCommitsRequest.FromString,
          response_serializer=commit__pb2.CountDivergingCommitsResponse.SerializeToString,
      ),
      'GetTreeEntries': grpc.unary_stream_rpc_method_handler(
          servicer.GetTreeEntries,
          request_deserializer=commit__pb2.GetTreeEntriesRequest.FromString,
          response_serializer=commit__pb2.GetTreeEntriesResponse.SerializeToString,
      ),
      'ListFiles': grpc.unary_stream_rpc_method_handler(
          servicer.ListFiles,
          request_deserializer=commit__pb2.ListFilesRequest.FromString,
          response_serializer=commit__pb2.ListFilesResponse.SerializeToString,
      ),
      'FindCommit': grpc.unary_unary_rpc_method_handler(
          servicer.FindCommit,
          request_deserializer=commit__pb2.FindCommitRequest.FromString,
          response_serializer=commit__pb2.FindCommitResponse.SerializeToString,
      ),
      'CommitStats': grpc.unary_unary_rpc_method_handler(
          servicer.CommitStats,
          request_deserializer=commit__pb2.CommitStatsRequest.FromString,
          response_serializer=commit__pb2.CommitStatsResponse.SerializeToString,
      ),
      'FindAllCommits': grpc.unary_stream_rpc_method_handler(
          servicer.FindAllCommits,
          request_deserializer=commit__pb2.FindAllCommitsRequest.FromString,
          response_serializer=commit__pb2.FindAllCommitsResponse.SerializeToString,
      ),
      'FindCommits': grpc.unary_stream_rpc_method_handler(
          servicer.FindCommits,
          request_deserializer=commit__pb2.FindCommitsRequest.FromString,
          response_serializer=commit__pb2.FindCommitsResponse.SerializeToString,
      ),
      'CommitLanguages': grpc.unary_unary_rpc_method_handler(
          servicer.CommitLanguages,
          request_deserializer=commit__pb2.CommitLanguagesRequest.FromString,
          response_serializer=commit__pb2.CommitLanguagesResponse.SerializeToString,
      ),
      'RawBlame': grpc.unary_stream_rpc_method_handler(
          servicer.RawBlame,
          request_deserializer=commit__pb2.RawBlameRequest.FromString,
          response_serializer=commit__pb2.RawBlameResponse.SerializeToString,
      ),
      'LastCommitForPath': grpc.unary_unary_rpc_method_handler(
          servicer.LastCommitForPath,
          request_deserializer=commit__pb2.LastCommitForPathRequest.FromString,
          response_serializer=commit__pb2.LastCommitForPathResponse.SerializeToString,
      ),
      'ListLastCommitsForTree': grpc.unary_stream_rpc_method_handler(
          servicer.ListLastCommitsForTree,
          request_deserializer=commit__pb2.ListLastCommitsForTreeRequest.FromString,
          response_serializer=commit__pb2.ListLastCommitsForTreeResponse.SerializeToString,
      ),
      'CommitsByMessage': grpc.unary_stream_rpc_method_handler(
          servicer.CommitsByMessage,
          request_deserializer=commit__pb2.CommitsByMessageRequest.FromString,
          response_serializer=commit__pb2.CommitsByMessageResponse.SerializeToString,
      ),
      'ListCommitsByOid': grpc.unary_stream_rpc_method_handler(
          servicer.ListCommitsByOid,
          request_deserializer=commit__pb2.ListCommitsByOidRequest.FromString,
          response_serializer=commit__pb2.ListCommitsByOidResponse.SerializeToString,
      ),
      'ListCommitsByRefName': grpc.unary_stream_rpc_method_handler(
          servicer.ListCommitsByRefName,
          request_deserializer=commit__pb2.ListCommitsByRefNameRequest.FromString,
          response_serializer=commit__pb2.ListCommitsByRefNameResponse.SerializeToString,
      ),
      'FilterShasWithSignatures': grpc.stream_stream_rpc_method_handler(
          servicer.FilterShasWithSignatures,
          request_deserializer=commit__pb2.FilterShasWithSignaturesRequest.FromString,
          response_serializer=commit__pb2.FilterShasWithSignaturesResponse.SerializeToString,
      ),
      'GetCommitSignatures': grpc.unary_stream_rpc_method_handler(
          servicer.GetCommitSignatures,
          request_deserializer=commit__pb2.GetCommitSignaturesRequest.FromString,
          response_serializer=commit__pb2.GetCommitSignaturesResponse.SerializeToString,
      ),
      'GetCommitMessages': grpc.unary_stream_rpc_method_handler(
          servicer.GetCommitMessages,
          request_deserializer=commit__pb2.GetCommitMessagesRequest.FromString,
          response_serializer=commit__pb2.GetCommitMessagesResponse.SerializeToString,
      ),
      'CheckObjectsExist': grpc.stream_stream_rpc_method_handler(
          servicer.CheckObjectsExist,
          request_deserializer=commit__pb2.CheckObjectsExistRequest.FromString,
          response_serializer=commit__pb2.CheckObjectsExistResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.CommitService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
