# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import hook_pb2 as hook__pb2


class HookServiceStub(object):
  """HookService is a service which provides the implementation of a subset of
  Git hooks. These are typically invoked via the `gitaly-hooks` binary to
  ensure that the actual hook logic is executed in the context of the server.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.PreReceiveHook = channel.stream_stream(
        '/gitaly.HookService/PreReceiveHook',
        request_serializer=hook__pb2.PreReceiveHookRequest.SerializeToString,
        response_deserializer=hook__pb2.PreReceiveHookResponse.FromString,
        )
    self.PostReceiveHook = channel.stream_stream(
        '/gitaly.HookService/PostReceiveHook',
        request_serializer=hook__pb2.PostReceiveHookRequest.SerializeToString,
        response_deserializer=hook__pb2.PostReceiveHookResponse.FromString,
        )
    self.UpdateHook = channel.unary_stream(
        '/gitaly.HookService/UpdateHook',
        request_serializer=hook__pb2.UpdateHookRequest.SerializeToString,
        response_deserializer=hook__pb2.UpdateHookResponse.FromString,
        )
    self.ReferenceTransactionHook = channel.stream_stream(
        '/gitaly.HookService/ReferenceTransactionHook',
        request_serializer=hook__pb2.ReferenceTransactionHookRequest.SerializeToString,
        response_deserializer=hook__pb2.ReferenceTransactionHookResponse.FromString,
        )
    self.PackObjectsHookWithSidechannel = channel.unary_unary(
        '/gitaly.HookService/PackObjectsHookWithSidechannel',
        request_serializer=hook__pb2.PackObjectsHookWithSidechannelRequest.SerializeToString,
        response_deserializer=hook__pb2.PackObjectsHookWithSidechannelResponse.FromString,
        )


class HookServiceServicer(object):
  """HookService is a service which provides the implementation of a subset of
  Git hooks. These are typically invoked via the `gitaly-hooks` binary to
  ensure that the actual hook logic is executed in the context of the server.
  """

  def PreReceiveHook(self, request_iterator, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PostReceiveHook(self, request_iterator, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def UpdateHook(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReferenceTransactionHook(self, request_iterator, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PackObjectsHookWithSidechannel(self, request, context):
    """PackObjectsHookWithSidechannel is an optimized version of PackObjectsHook that uses
    a unix socket side channel.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_HookServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'PreReceiveHook': grpc.stream_stream_rpc_method_handler(
          servicer.PreReceiveHook,
          request_deserializer=hook__pb2.PreReceiveHookRequest.FromString,
          response_serializer=hook__pb2.PreReceiveHookResponse.SerializeToString,
      ),
      'PostReceiveHook': grpc.stream_stream_rpc_method_handler(
          servicer.PostReceiveHook,
          request_deserializer=hook__pb2.PostReceiveHookRequest.FromString,
          response_serializer=hook__pb2.PostReceiveHookResponse.SerializeToString,
      ),
      'UpdateHook': grpc.unary_stream_rpc_method_handler(
          servicer.UpdateHook,
          request_deserializer=hook__pb2.UpdateHookRequest.FromString,
          response_serializer=hook__pb2.UpdateHookResponse.SerializeToString,
      ),
      'ReferenceTransactionHook': grpc.stream_stream_rpc_method_handler(
          servicer.ReferenceTransactionHook,
          request_deserializer=hook__pb2.ReferenceTransactionHookRequest.FromString,
          response_serializer=hook__pb2.ReferenceTransactionHookResponse.SerializeToString,
      ),
      'PackObjectsHookWithSidechannel': grpc.unary_unary_rpc_method_handler(
          servicer.PackObjectsHookWithSidechannel,
          request_deserializer=hook__pb2.PackObjectsHookWithSidechannelRequest.FromString,
          response_serializer=hook__pb2.PackObjectsHookWithSidechannelResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.HookService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
