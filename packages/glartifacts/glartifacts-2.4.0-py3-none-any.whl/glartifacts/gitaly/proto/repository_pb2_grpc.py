# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import repository_pb2 as repository__pb2


class RepositoryServiceStub(object):
  """RepositoryService is a service providing RPCs accessing repositories as a whole.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.RepositoryExists = channel.unary_unary(
        '/gitaly.RepositoryService/RepositoryExists',
        request_serializer=repository__pb2.RepositoryExistsRequest.SerializeToString,
        response_deserializer=repository__pb2.RepositoryExistsResponse.FromString,
        )
    self.RepackIncremental = channel.unary_unary(
        '/gitaly.RepositoryService/RepackIncremental',
        request_serializer=repository__pb2.RepackIncrementalRequest.SerializeToString,
        response_deserializer=repository__pb2.RepackIncrementalResponse.FromString,
        )
    self.RepackFull = channel.unary_unary(
        '/gitaly.RepositoryService/RepackFull',
        request_serializer=repository__pb2.RepackFullRequest.SerializeToString,
        response_deserializer=repository__pb2.RepackFullResponse.FromString,
        )
    self.MidxRepack = channel.unary_unary(
        '/gitaly.RepositoryService/MidxRepack',
        request_serializer=repository__pb2.MidxRepackRequest.SerializeToString,
        response_deserializer=repository__pb2.MidxRepackResponse.FromString,
        )
    self.GarbageCollect = channel.unary_unary(
        '/gitaly.RepositoryService/GarbageCollect',
        request_serializer=repository__pb2.GarbageCollectRequest.SerializeToString,
        response_deserializer=repository__pb2.GarbageCollectResponse.FromString,
        )
    self.WriteCommitGraph = channel.unary_unary(
        '/gitaly.RepositoryService/WriteCommitGraph',
        request_serializer=repository__pb2.WriteCommitGraphRequest.SerializeToString,
        response_deserializer=repository__pb2.WriteCommitGraphResponse.FromString,
        )
    self.RepositorySize = channel.unary_unary(
        '/gitaly.RepositoryService/RepositorySize',
        request_serializer=repository__pb2.RepositorySizeRequest.SerializeToString,
        response_deserializer=repository__pb2.RepositorySizeResponse.FromString,
        )
    self.ApplyGitattributes = channel.unary_unary(
        '/gitaly.RepositoryService/ApplyGitattributes',
        request_serializer=repository__pb2.ApplyGitattributesRequest.SerializeToString,
        response_deserializer=repository__pb2.ApplyGitattributesResponse.FromString,
        )
    self.FetchRemote = channel.unary_unary(
        '/gitaly.RepositoryService/FetchRemote',
        request_serializer=repository__pb2.FetchRemoteRequest.SerializeToString,
        response_deserializer=repository__pb2.FetchRemoteResponse.FromString,
        )
    self.CreateRepository = channel.unary_unary(
        '/gitaly.RepositoryService/CreateRepository',
        request_serializer=repository__pb2.CreateRepositoryRequest.SerializeToString,
        response_deserializer=repository__pb2.CreateRepositoryResponse.FromString,
        )
    self.GetArchive = channel.unary_stream(
        '/gitaly.RepositoryService/GetArchive',
        request_serializer=repository__pb2.GetArchiveRequest.SerializeToString,
        response_deserializer=repository__pb2.GetArchiveResponse.FromString,
        )
    self.HasLocalBranches = channel.unary_unary(
        '/gitaly.RepositoryService/HasLocalBranches',
        request_serializer=repository__pb2.HasLocalBranchesRequest.SerializeToString,
        response_deserializer=repository__pb2.HasLocalBranchesResponse.FromString,
        )
    self.FetchSourceBranch = channel.unary_unary(
        '/gitaly.RepositoryService/FetchSourceBranch',
        request_serializer=repository__pb2.FetchSourceBranchRequest.SerializeToString,
        response_deserializer=repository__pb2.FetchSourceBranchResponse.FromString,
        )
    self.Fsck = channel.unary_unary(
        '/gitaly.RepositoryService/Fsck',
        request_serializer=repository__pb2.FsckRequest.SerializeToString,
        response_deserializer=repository__pb2.FsckResponse.FromString,
        )
    self.WriteRef = channel.unary_unary(
        '/gitaly.RepositoryService/WriteRef',
        request_serializer=repository__pb2.WriteRefRequest.SerializeToString,
        response_deserializer=repository__pb2.WriteRefResponse.FromString,
        )
    self.FindMergeBase = channel.unary_unary(
        '/gitaly.RepositoryService/FindMergeBase',
        request_serializer=repository__pb2.FindMergeBaseRequest.SerializeToString,
        response_deserializer=repository__pb2.FindMergeBaseResponse.FromString,
        )
    self.CreateFork = channel.unary_unary(
        '/gitaly.RepositoryService/CreateFork',
        request_serializer=repository__pb2.CreateForkRequest.SerializeToString,
        response_deserializer=repository__pb2.CreateForkResponse.FromString,
        )
    self.CreateRepositoryFromURL = channel.unary_unary(
        '/gitaly.RepositoryService/CreateRepositoryFromURL',
        request_serializer=repository__pb2.CreateRepositoryFromURLRequest.SerializeToString,
        response_deserializer=repository__pb2.CreateRepositoryFromURLResponse.FromString,
        )
    self.CreateBundle = channel.unary_stream(
        '/gitaly.RepositoryService/CreateBundle',
        request_serializer=repository__pb2.CreateBundleRequest.SerializeToString,
        response_deserializer=repository__pb2.CreateBundleResponse.FromString,
        )
    self.CreateBundleFromRefList = channel.stream_stream(
        '/gitaly.RepositoryService/CreateBundleFromRefList',
        request_serializer=repository__pb2.CreateBundleFromRefListRequest.SerializeToString,
        response_deserializer=repository__pb2.CreateBundleFromRefListResponse.FromString,
        )
    self.FetchBundle = channel.stream_unary(
        '/gitaly.RepositoryService/FetchBundle',
        request_serializer=repository__pb2.FetchBundleRequest.SerializeToString,
        response_deserializer=repository__pb2.FetchBundleResponse.FromString,
        )
    self.CreateRepositoryFromBundle = channel.stream_unary(
        '/gitaly.RepositoryService/CreateRepositoryFromBundle',
        request_serializer=repository__pb2.CreateRepositoryFromBundleRequest.SerializeToString,
        response_deserializer=repository__pb2.CreateRepositoryFromBundleResponse.FromString,
        )
    self.GetConfig = channel.unary_stream(
        '/gitaly.RepositoryService/GetConfig',
        request_serializer=repository__pb2.GetConfigRequest.SerializeToString,
        response_deserializer=repository__pb2.GetConfigResponse.FromString,
        )
    self.FindLicense = channel.unary_unary(
        '/gitaly.RepositoryService/FindLicense',
        request_serializer=repository__pb2.FindLicenseRequest.SerializeToString,
        response_deserializer=repository__pb2.FindLicenseResponse.FromString,
        )
    self.GetInfoAttributes = channel.unary_stream(
        '/gitaly.RepositoryService/GetInfoAttributes',
        request_serializer=repository__pb2.GetInfoAttributesRequest.SerializeToString,
        response_deserializer=repository__pb2.GetInfoAttributesResponse.FromString,
        )
    self.CalculateChecksum = channel.unary_unary(
        '/gitaly.RepositoryService/CalculateChecksum',
        request_serializer=repository__pb2.CalculateChecksumRequest.SerializeToString,
        response_deserializer=repository__pb2.CalculateChecksumResponse.FromString,
        )
    self.Cleanup = channel.unary_unary(
        '/gitaly.RepositoryService/Cleanup',
        request_serializer=repository__pb2.CleanupRequest.SerializeToString,
        response_deserializer=repository__pb2.CleanupResponse.FromString,
        )
    self.GetSnapshot = channel.unary_stream(
        '/gitaly.RepositoryService/GetSnapshot',
        request_serializer=repository__pb2.GetSnapshotRequest.SerializeToString,
        response_deserializer=repository__pb2.GetSnapshotResponse.FromString,
        )
    self.CreateRepositoryFromSnapshot = channel.unary_unary(
        '/gitaly.RepositoryService/CreateRepositoryFromSnapshot',
        request_serializer=repository__pb2.CreateRepositoryFromSnapshotRequest.SerializeToString,
        response_deserializer=repository__pb2.CreateRepositoryFromSnapshotResponse.FromString,
        )
    self.GetRawChanges = channel.unary_stream(
        '/gitaly.RepositoryService/GetRawChanges',
        request_serializer=repository__pb2.GetRawChangesRequest.SerializeToString,
        response_deserializer=repository__pb2.GetRawChangesResponse.FromString,
        )
    self.SearchFilesByContent = channel.unary_stream(
        '/gitaly.RepositoryService/SearchFilesByContent',
        request_serializer=repository__pb2.SearchFilesByContentRequest.SerializeToString,
        response_deserializer=repository__pb2.SearchFilesByContentResponse.FromString,
        )
    self.SearchFilesByName = channel.unary_stream(
        '/gitaly.RepositoryService/SearchFilesByName',
        request_serializer=repository__pb2.SearchFilesByNameRequest.SerializeToString,
        response_deserializer=repository__pb2.SearchFilesByNameResponse.FromString,
        )
    self.RestoreCustomHooks = channel.stream_unary(
        '/gitaly.RepositoryService/RestoreCustomHooks',
        request_serializer=repository__pb2.RestoreCustomHooksRequest.SerializeToString,
        response_deserializer=repository__pb2.RestoreCustomHooksResponse.FromString,
        )
    self.BackupCustomHooks = channel.unary_stream(
        '/gitaly.RepositoryService/BackupCustomHooks',
        request_serializer=repository__pb2.BackupCustomHooksRequest.SerializeToString,
        response_deserializer=repository__pb2.BackupCustomHooksResponse.FromString,
        )
    self.GetObjectDirectorySize = channel.unary_unary(
        '/gitaly.RepositoryService/GetObjectDirectorySize',
        request_serializer=repository__pb2.GetObjectDirectorySizeRequest.SerializeToString,
        response_deserializer=repository__pb2.GetObjectDirectorySizeResponse.FromString,
        )
    self.RemoveRepository = channel.unary_unary(
        '/gitaly.RepositoryService/RemoveRepository',
        request_serializer=repository__pb2.RemoveRepositoryRequest.SerializeToString,
        response_deserializer=repository__pb2.RemoveRepositoryResponse.FromString,
        )
    self.RenameRepository = channel.unary_unary(
        '/gitaly.RepositoryService/RenameRepository',
        request_serializer=repository__pb2.RenameRepositoryRequest.SerializeToString,
        response_deserializer=repository__pb2.RenameRepositoryResponse.FromString,
        )
    self.ReplicateRepository = channel.unary_unary(
        '/gitaly.RepositoryService/ReplicateRepository',
        request_serializer=repository__pb2.ReplicateRepositoryRequest.SerializeToString,
        response_deserializer=repository__pb2.ReplicateRepositoryResponse.FromString,
        )
    self.OptimizeRepository = channel.unary_unary(
        '/gitaly.RepositoryService/OptimizeRepository',
        request_serializer=repository__pb2.OptimizeRepositoryRequest.SerializeToString,
        response_deserializer=repository__pb2.OptimizeRepositoryResponse.FromString,
        )
    self.PruneUnreachableObjects = channel.unary_unary(
        '/gitaly.RepositoryService/PruneUnreachableObjects',
        request_serializer=repository__pb2.PruneUnreachableObjectsRequest.SerializeToString,
        response_deserializer=repository__pb2.PruneUnreachableObjectsResponse.FromString,
        )
    self.SetFullPath = channel.unary_unary(
        '/gitaly.RepositoryService/SetFullPath',
        request_serializer=repository__pb2.SetFullPathRequest.SerializeToString,
        response_deserializer=repository__pb2.SetFullPathResponse.FromString,
        )
    self.FullPath = channel.unary_unary(
        '/gitaly.RepositoryService/FullPath',
        request_serializer=repository__pb2.FullPathRequest.SerializeToString,
        response_deserializer=repository__pb2.FullPathResponse.FromString,
        )


class RepositoryServiceServicer(object):
  """RepositoryService is a service providing RPCs accessing repositories as a whole.
  """

  def RepositoryExists(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RepackIncremental(self, request, context):
    """RepackIncremental is deprecated in favor of OptimizeRepository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RepackFull(self, request, context):
    """RepackFull is deprecated in favor of OptimizeRepository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MidxRepack(self, request, context):
    """MidxRepack is deprecated in favor of OptimizeRepository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GarbageCollect(self, request, context):
    """GarbageCollect is deprecated in favor of OptimizeRepository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def WriteCommitGraph(self, request, context):
    """WriteCommitGraph is deprecated in favor of OptimizeRepository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RepositorySize(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ApplyGitattributes(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchRemote(self, request, context):
    """FetchRemote fetches references from a remote repository into the local
    repository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateRepository(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetArchive(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HasLocalBranches(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchSourceBranch(self, request, context):
    """FetchSourceBranch fetches a branch from a second (potentially remote)
    repository into the given repository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Fsck(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def WriteRef(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindMergeBase(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateFork(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateRepositoryFromURL(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateBundle(self, request, context):
    """CreateBundle creates a bundle from all refs
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateBundleFromRefList(self, request_iterator, context):
    """CreateBundleFromRefList creates a bundle from a stream of ref patterns.
    When the bundle would be empty the FailedPrecondition error code is returned.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FetchBundle(self, request_iterator, context):
    """FetchBundle fetches references from a bundle into the local repository.
    Refs will be mirrored to the target repository with the refspec
    "+refs/*:refs/*" and refs that do not exist in the bundle will be removed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateRepositoryFromBundle(self, request_iterator, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetConfig(self, request, context):
    """GetConfig reads the target repository's gitconfig and streams its contents
    back. Returns a NotFound error in case no gitconfig was found.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FindLicense(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetInfoAttributes(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CalculateChecksum(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Cleanup(self, request, context):
    """Cleanup is deprecated in favor of OptimizeRepository.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetSnapshot(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateRepositoryFromSnapshot(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetRawChanges(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SearchFilesByContent(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SearchFilesByName(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RestoreCustomHooks(self, request_iterator, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def BackupCustomHooks(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetObjectDirectorySize(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RemoveRepository(self, request, context):
    """RemoveRepository will move the repository to `+gitaly/tmp/<relative_path>_removed` and
    eventually remove it. This ensures that even on networked filesystems the
    data is actually removed even if there's someone still handling the data.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RenameRepository(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ReplicateRepository(self, request, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def OptimizeRepository(self, request, context):
    """OptimizeRepository performs all maintenance tasks in a repository to keep
    it in an efficient state. It cleans up stale data, repacks objects,
    updates auxiliary caches like commit-graphs and packs references. The
    optimizations performed are based on heuristics and will adapt to the
    repository's size. This RPC call is designed as a black-box such that
    Gitaly has complete control of the on-disk state of repositories.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def PruneUnreachableObjects(self, request, context):
    """PruneUnreachableObjects will prune all objects which aren't reachable from
    the repository's current set of references. Because pruning can only
    happen for objects which aren't packed, you are required to first run
    OptimizeRepository to explode any unreachable objects into loose objects.

    Furthermore, this RPC call has a grace period of 30 minutes: any
    unreachable loose objects must not have been accessed or modified in the
    last 30 minutes. This is a hard requirement to avoid repository corruption.

    To make proper use of this RPC you thus need to call OptimizeRepository,
    wait 30 minutes, and then call PruneUnreachableObjects.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SetFullPath(self, request, context):
    """SetFullPath writes the "gitlab.fullpath" configuration into the
    repository's gitconfig. This is mainly to help debugging purposes in case
    an admin inspects the repository's gitconfig such that he can easily see
    what the repository name is.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def FullPath(self, request, context):
    """FullPath reads the "gitlab.fullpath" configuration from the repository's
    gitconfig. Returns an error in case the full path has not been configured.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RepositoryServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'RepositoryExists': grpc.unary_unary_rpc_method_handler(
          servicer.RepositoryExists,
          request_deserializer=repository__pb2.RepositoryExistsRequest.FromString,
          response_serializer=repository__pb2.RepositoryExistsResponse.SerializeToString,
      ),
      'RepackIncremental': grpc.unary_unary_rpc_method_handler(
          servicer.RepackIncremental,
          request_deserializer=repository__pb2.RepackIncrementalRequest.FromString,
          response_serializer=repository__pb2.RepackIncrementalResponse.SerializeToString,
      ),
      'RepackFull': grpc.unary_unary_rpc_method_handler(
          servicer.RepackFull,
          request_deserializer=repository__pb2.RepackFullRequest.FromString,
          response_serializer=repository__pb2.RepackFullResponse.SerializeToString,
      ),
      'MidxRepack': grpc.unary_unary_rpc_method_handler(
          servicer.MidxRepack,
          request_deserializer=repository__pb2.MidxRepackRequest.FromString,
          response_serializer=repository__pb2.MidxRepackResponse.SerializeToString,
      ),
      'GarbageCollect': grpc.unary_unary_rpc_method_handler(
          servicer.GarbageCollect,
          request_deserializer=repository__pb2.GarbageCollectRequest.FromString,
          response_serializer=repository__pb2.GarbageCollectResponse.SerializeToString,
      ),
      'WriteCommitGraph': grpc.unary_unary_rpc_method_handler(
          servicer.WriteCommitGraph,
          request_deserializer=repository__pb2.WriteCommitGraphRequest.FromString,
          response_serializer=repository__pb2.WriteCommitGraphResponse.SerializeToString,
      ),
      'RepositorySize': grpc.unary_unary_rpc_method_handler(
          servicer.RepositorySize,
          request_deserializer=repository__pb2.RepositorySizeRequest.FromString,
          response_serializer=repository__pb2.RepositorySizeResponse.SerializeToString,
      ),
      'ApplyGitattributes': grpc.unary_unary_rpc_method_handler(
          servicer.ApplyGitattributes,
          request_deserializer=repository__pb2.ApplyGitattributesRequest.FromString,
          response_serializer=repository__pb2.ApplyGitattributesResponse.SerializeToString,
      ),
      'FetchRemote': grpc.unary_unary_rpc_method_handler(
          servicer.FetchRemote,
          request_deserializer=repository__pb2.FetchRemoteRequest.FromString,
          response_serializer=repository__pb2.FetchRemoteResponse.SerializeToString,
      ),
      'CreateRepository': grpc.unary_unary_rpc_method_handler(
          servicer.CreateRepository,
          request_deserializer=repository__pb2.CreateRepositoryRequest.FromString,
          response_serializer=repository__pb2.CreateRepositoryResponse.SerializeToString,
      ),
      'GetArchive': grpc.unary_stream_rpc_method_handler(
          servicer.GetArchive,
          request_deserializer=repository__pb2.GetArchiveRequest.FromString,
          response_serializer=repository__pb2.GetArchiveResponse.SerializeToString,
      ),
      'HasLocalBranches': grpc.unary_unary_rpc_method_handler(
          servicer.HasLocalBranches,
          request_deserializer=repository__pb2.HasLocalBranchesRequest.FromString,
          response_serializer=repository__pb2.HasLocalBranchesResponse.SerializeToString,
      ),
      'FetchSourceBranch': grpc.unary_unary_rpc_method_handler(
          servicer.FetchSourceBranch,
          request_deserializer=repository__pb2.FetchSourceBranchRequest.FromString,
          response_serializer=repository__pb2.FetchSourceBranchResponse.SerializeToString,
      ),
      'Fsck': grpc.unary_unary_rpc_method_handler(
          servicer.Fsck,
          request_deserializer=repository__pb2.FsckRequest.FromString,
          response_serializer=repository__pb2.FsckResponse.SerializeToString,
      ),
      'WriteRef': grpc.unary_unary_rpc_method_handler(
          servicer.WriteRef,
          request_deserializer=repository__pb2.WriteRefRequest.FromString,
          response_serializer=repository__pb2.WriteRefResponse.SerializeToString,
      ),
      'FindMergeBase': grpc.unary_unary_rpc_method_handler(
          servicer.FindMergeBase,
          request_deserializer=repository__pb2.FindMergeBaseRequest.FromString,
          response_serializer=repository__pb2.FindMergeBaseResponse.SerializeToString,
      ),
      'CreateFork': grpc.unary_unary_rpc_method_handler(
          servicer.CreateFork,
          request_deserializer=repository__pb2.CreateForkRequest.FromString,
          response_serializer=repository__pb2.CreateForkResponse.SerializeToString,
      ),
      'CreateRepositoryFromURL': grpc.unary_unary_rpc_method_handler(
          servicer.CreateRepositoryFromURL,
          request_deserializer=repository__pb2.CreateRepositoryFromURLRequest.FromString,
          response_serializer=repository__pb2.CreateRepositoryFromURLResponse.SerializeToString,
      ),
      'CreateBundle': grpc.unary_stream_rpc_method_handler(
          servicer.CreateBundle,
          request_deserializer=repository__pb2.CreateBundleRequest.FromString,
          response_serializer=repository__pb2.CreateBundleResponse.SerializeToString,
      ),
      'CreateBundleFromRefList': grpc.stream_stream_rpc_method_handler(
          servicer.CreateBundleFromRefList,
          request_deserializer=repository__pb2.CreateBundleFromRefListRequest.FromString,
          response_serializer=repository__pb2.CreateBundleFromRefListResponse.SerializeToString,
      ),
      'FetchBundle': grpc.stream_unary_rpc_method_handler(
          servicer.FetchBundle,
          request_deserializer=repository__pb2.FetchBundleRequest.FromString,
          response_serializer=repository__pb2.FetchBundleResponse.SerializeToString,
      ),
      'CreateRepositoryFromBundle': grpc.stream_unary_rpc_method_handler(
          servicer.CreateRepositoryFromBundle,
          request_deserializer=repository__pb2.CreateRepositoryFromBundleRequest.FromString,
          response_serializer=repository__pb2.CreateRepositoryFromBundleResponse.SerializeToString,
      ),
      'GetConfig': grpc.unary_stream_rpc_method_handler(
          servicer.GetConfig,
          request_deserializer=repository__pb2.GetConfigRequest.FromString,
          response_serializer=repository__pb2.GetConfigResponse.SerializeToString,
      ),
      'FindLicense': grpc.unary_unary_rpc_method_handler(
          servicer.FindLicense,
          request_deserializer=repository__pb2.FindLicenseRequest.FromString,
          response_serializer=repository__pb2.FindLicenseResponse.SerializeToString,
      ),
      'GetInfoAttributes': grpc.unary_stream_rpc_method_handler(
          servicer.GetInfoAttributes,
          request_deserializer=repository__pb2.GetInfoAttributesRequest.FromString,
          response_serializer=repository__pb2.GetInfoAttributesResponse.SerializeToString,
      ),
      'CalculateChecksum': grpc.unary_unary_rpc_method_handler(
          servicer.CalculateChecksum,
          request_deserializer=repository__pb2.CalculateChecksumRequest.FromString,
          response_serializer=repository__pb2.CalculateChecksumResponse.SerializeToString,
      ),
      'Cleanup': grpc.unary_unary_rpc_method_handler(
          servicer.Cleanup,
          request_deserializer=repository__pb2.CleanupRequest.FromString,
          response_serializer=repository__pb2.CleanupResponse.SerializeToString,
      ),
      'GetSnapshot': grpc.unary_stream_rpc_method_handler(
          servicer.GetSnapshot,
          request_deserializer=repository__pb2.GetSnapshotRequest.FromString,
          response_serializer=repository__pb2.GetSnapshotResponse.SerializeToString,
      ),
      'CreateRepositoryFromSnapshot': grpc.unary_unary_rpc_method_handler(
          servicer.CreateRepositoryFromSnapshot,
          request_deserializer=repository__pb2.CreateRepositoryFromSnapshotRequest.FromString,
          response_serializer=repository__pb2.CreateRepositoryFromSnapshotResponse.SerializeToString,
      ),
      'GetRawChanges': grpc.unary_stream_rpc_method_handler(
          servicer.GetRawChanges,
          request_deserializer=repository__pb2.GetRawChangesRequest.FromString,
          response_serializer=repository__pb2.GetRawChangesResponse.SerializeToString,
      ),
      'SearchFilesByContent': grpc.unary_stream_rpc_method_handler(
          servicer.SearchFilesByContent,
          request_deserializer=repository__pb2.SearchFilesByContentRequest.FromString,
          response_serializer=repository__pb2.SearchFilesByContentResponse.SerializeToString,
      ),
      'SearchFilesByName': grpc.unary_stream_rpc_method_handler(
          servicer.SearchFilesByName,
          request_deserializer=repository__pb2.SearchFilesByNameRequest.FromString,
          response_serializer=repository__pb2.SearchFilesByNameResponse.SerializeToString,
      ),
      'RestoreCustomHooks': grpc.stream_unary_rpc_method_handler(
          servicer.RestoreCustomHooks,
          request_deserializer=repository__pb2.RestoreCustomHooksRequest.FromString,
          response_serializer=repository__pb2.RestoreCustomHooksResponse.SerializeToString,
      ),
      'BackupCustomHooks': grpc.unary_stream_rpc_method_handler(
          servicer.BackupCustomHooks,
          request_deserializer=repository__pb2.BackupCustomHooksRequest.FromString,
          response_serializer=repository__pb2.BackupCustomHooksResponse.SerializeToString,
      ),
      'GetObjectDirectorySize': grpc.unary_unary_rpc_method_handler(
          servicer.GetObjectDirectorySize,
          request_deserializer=repository__pb2.GetObjectDirectorySizeRequest.FromString,
          response_serializer=repository__pb2.GetObjectDirectorySizeResponse.SerializeToString,
      ),
      'RemoveRepository': grpc.unary_unary_rpc_method_handler(
          servicer.RemoveRepository,
          request_deserializer=repository__pb2.RemoveRepositoryRequest.FromString,
          response_serializer=repository__pb2.RemoveRepositoryResponse.SerializeToString,
      ),
      'RenameRepository': grpc.unary_unary_rpc_method_handler(
          servicer.RenameRepository,
          request_deserializer=repository__pb2.RenameRepositoryRequest.FromString,
          response_serializer=repository__pb2.RenameRepositoryResponse.SerializeToString,
      ),
      'ReplicateRepository': grpc.unary_unary_rpc_method_handler(
          servicer.ReplicateRepository,
          request_deserializer=repository__pb2.ReplicateRepositoryRequest.FromString,
          response_serializer=repository__pb2.ReplicateRepositoryResponse.SerializeToString,
      ),
      'OptimizeRepository': grpc.unary_unary_rpc_method_handler(
          servicer.OptimizeRepository,
          request_deserializer=repository__pb2.OptimizeRepositoryRequest.FromString,
          response_serializer=repository__pb2.OptimizeRepositoryResponse.SerializeToString,
      ),
      'PruneUnreachableObjects': grpc.unary_unary_rpc_method_handler(
          servicer.PruneUnreachableObjects,
          request_deserializer=repository__pb2.PruneUnreachableObjectsRequest.FromString,
          response_serializer=repository__pb2.PruneUnreachableObjectsResponse.SerializeToString,
      ),
      'SetFullPath': grpc.unary_unary_rpc_method_handler(
          servicer.SetFullPath,
          request_deserializer=repository__pb2.SetFullPathRequest.FromString,
          response_serializer=repository__pb2.SetFullPathResponse.SerializeToString,
      ),
      'FullPath': grpc.unary_unary_rpc_method_handler(
          servicer.FullPath,
          request_deserializer=repository__pb2.FullPathRequest.FromString,
          response_serializer=repository__pb2.FullPathResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.RepositoryService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
