# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from . import cleanup_pb2 as cleanup__pb2


class CleanupServiceStub(object):
  """CleanupService provides RPCs to clean up a repository's contents.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ApplyBfgObjectMapStream = channel.stream_stream(
        '/gitaly.CleanupService/ApplyBfgObjectMapStream',
        request_serializer=cleanup__pb2.ApplyBfgObjectMapStreamRequest.SerializeToString,
        response_deserializer=cleanup__pb2.ApplyBfgObjectMapStreamResponse.FromString,
        )


class CleanupServiceServicer(object):
  """CleanupService provides RPCs to clean up a repository's contents.
  """

  def ApplyBfgObjectMapStream(self, request_iterator, context):
    """This comment is left unintentionally blank.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_CleanupServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ApplyBfgObjectMapStream': grpc.stream_stream_rpc_method_handler(
          servicer.ApplyBfgObjectMapStream,
          request_deserializer=cleanup__pb2.ApplyBfgObjectMapStreamRequest.FromString,
          response_serializer=cleanup__pb2.ApplyBfgObjectMapStreamResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'gitaly.CleanupService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
