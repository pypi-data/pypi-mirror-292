# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: envoy/extensions/matching/common_inputs/network/v3/network_inputs.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass

import betterproto


@dataclass(eq=False, repr=False)
class DestinationIpInput(betterproto.Message):
    """
    Specifies that matching should be performed by the destination IP address.
    [#extension: envoy.matching.inputs.destination_ip]
    """

    pass


@dataclass(eq=False, repr=False)
class DestinationPortInput(betterproto.Message):
    """
    Specifies that matching should be performed by the destination port.
    [#extension: envoy.matching.inputs.destination_port]
    """

    pass


@dataclass(eq=False, repr=False)
class SourceIpInput(betterproto.Message):
    """
    Specifies that matching should be performed by the source IP address.
    [#extension: envoy.matching.inputs.source_ip]
    """

    pass


@dataclass(eq=False, repr=False)
class SourcePortInput(betterproto.Message):
    """
    Specifies that matching should be performed by the source port.
    [#extension: envoy.matching.inputs.source_port]
    """

    pass


@dataclass(eq=False, repr=False)
class DirectSourceIpInput(betterproto.Message):
    """
    Input that matches by the directly connected source IP address (this will
    only be different from the source IP address when using a listener filter
    that overrides the source address, such as the :ref:`Proxy Protocol
    listener filter <config_listener_filters_proxy_protocol>`). [#extension:
    envoy.matching.inputs.direct_source_ip]
    """

    pass


@dataclass(eq=False, repr=False)
class SourceTypeInput(betterproto.Message):
    """
    Input that matches by the source IP type. Specifies the source IP match
    type. The values include: * ``local`` - matches a connection originating
    from the same host, [#extension: envoy.matching.inputs.source_type]
    """

    pass


@dataclass(eq=False, repr=False)
class ServerNameInput(betterproto.Message):
    """
    Input that matches by the requested server name (e.g. SNI in TLS).
    :ref:`TLS Inspector <config_listener_filters_tls_inspector>` provides the
    requested server name based on SNI, when TLS protocol is detected.
    [#extension: envoy.matching.inputs.server_name]
    """

    pass


@dataclass(eq=False, repr=False)
class TransportProtocolInput(betterproto.Message):
    """
    Input that matches by the transport protocol. Suggested values include: *
    ``raw_buffer`` - default, used when no transport protocol is detected, *
    ``tls`` - set by :ref:`envoy.filters.listener.tls_inspector
    <config_listener_filters_tls_inspector>`   when TLS protocol is detected.
    [#extension: envoy.matching.inputs.transport_protocol]
    """

    pass


@dataclass(eq=False, repr=False)
class ApplicationProtocolInput(betterproto.Message):
    """
    List of quoted and comma-separated requested application protocols. The
    list consists of a single negotiated application protocol once the network
    stream is established. Examples: * ``'h2','http/1.1'`` * ``'h2c'``
    Suggested values in the list include: * ``http/1.1`` - set by
    :ref:`envoy.filters.listener.tls_inspector
    <config_listener_filters_tls_inspector>` and
    :ref:`envoy.filters.listener.http_inspector
    <config_listener_filters_http_inspector>`, * ``h2`` - set by
    :ref:`envoy.filters.listener.tls_inspector
    <config_listener_filters_tls_inspector>` * ``h2c`` - set by
    :ref:`envoy.filters.listener.http_inspector
    <config_listener_filters_http_inspector>` .. attention::   Currently,
    :ref:`TLS Inspector <config_listener_filters_tls_inspector>` provides
    application protocol detection based on the requested   `ALPN
    <https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation>`_
    values.   However, the use of ALPN is pretty much limited to the HTTP/2
    traffic on the Internet,   and matching on values other than ``h2`` is
    going to lead to a lot of false negatives,   unless all connecting clients
    are known to use ALPN. [#extension:
    envoy.matching.inputs.application_protocol]
    """

    pass


@dataclass(eq=False, repr=False)
class FilterStateInput(betterproto.Message):
    """
    Input that matches by a specific filter state key. The value of the
    provided filter state key will be the raw string representation of the
    filter state object [#extension: envoy.matching.inputs.filter_state]
    """

    key: str = betterproto.string_field(1)
