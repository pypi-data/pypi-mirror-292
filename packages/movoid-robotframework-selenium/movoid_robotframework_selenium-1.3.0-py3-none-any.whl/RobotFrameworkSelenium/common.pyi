##################################################
# This is auto generated by code.
##################################################

import base64
import math
import os
import cv2
import numpy as np
import robot
import selenium
import RobotFrameworkBasic.main
import robot.libraries.BuiltIn
import selenium.webdriver.chrome.webdriver
import typing
import selenium.webdriver.remote.webelement
from Selenium2Library import Selenium2Library
from selenium.webdriver.common.action_chains import ActionChains


class BasicCommon(RobotFrameworkBasic.main.RobotBasic):
    def __init__(self):
        super().__init__()
        self.built: robot.libraries.BuiltIn.BuiltIn = getattr(self, 'built', None)
        self.selenium_lib: Selenium2Library = getattr(self, 'selenium_lib', None)
        self.driver: selenium.webdriver.chrome.webdriver.WebDriver = getattr(self, 'driver', None)
        self.action_chains: ActionChains = getattr(self, 'action_chains', None)
        self.screenshot_root: str = getattr(self, 'screenshot_root', None)
        self.outer_coordinate: typing.Tuple[float] = getattr(self, 'outer_coordinate', None)
        self.inner_coordinate: typing.Tuple[float] = getattr(self, 'inner_coordinate', None)
        self.window_x: float = getattr(self, 'window_x', None)
        self.window_y: float = getattr(self, 'window_y', None)

    def selenium_init(self, screenshot_log: bool = False):    ...

    def selenium_analyse_locator(self, locator: str) -> typing.Tuple[str, str]:    ...

    def selenium_find_elements_by_locator(self, locator) -> typing.List[selenium.webdriver.remote.webelement.WebElement]:    ...

    def selenium_find_element_by_locator(self, locator) -> selenium.webdriver.remote.webelement.WebElement:    ...

    def selenium_execute_js_script(self, js_code: str, *args):    ...

    def analyse_color_function(self, color_function):    ...

    def exchange_list3_to_color_function(self, formula_list):    ...

    def selenium_get_full_screenshot_path(self, screenshot_name):    ...

    def selenium_cut_screenshot(self, screenshot_locator, image_name='element-cut-image.png'):    ...

    def selenium_take_screenshot(self, screenshot_locator=None, image_name='python-screenshot.png', rename=True):    ...

    def selenium_log_screenshot(self, screenshot_locator=None):    ...

    def selenium_log_screenshot_path(self, screenshot_name):    ...

    def selenium_analyse_image(self, image):    ...

    def selenium_analyse_element(self, locator: typing.Union[selenium.webdriver.remote.webelement.WebElement, str]) -> selenium.webdriver.remote.webelement.WebElement:    ...

    def selenium_analyse_elements(self, locator: typing.Union[typing.List[selenium.webdriver.remote.webelement.WebElement], str]) -> typing.List[selenium.webdriver.remote.webelement.WebElement]:    ...

    ...
