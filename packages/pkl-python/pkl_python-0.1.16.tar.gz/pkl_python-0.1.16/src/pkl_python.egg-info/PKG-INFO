Metadata-Version: 2.1
Name: pkl-python
Version: 0.1.16
Summary: Python library for Apple's PKL.
Author-email: Jungwoo Yang <jwyang0213@gmail.com>
License: MIT License
        
        Copyright (c) 2024 Jungwoo Yang
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
        
Project-URL: Homepage, https://github.com/jw-y/pkl-python
Project-URL: Bug Reports, https://github.com/jw-y/pkl-python/issues
Project-URL: Source, https://github.com/jw-y/pkl-python
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: msgpack>=1.0.8
Provides-Extra: dev
Requires-Dist: pre-commit; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: mypy; extra == "dev"
Requires-Dist: pylint; extra == "dev"
Requires-Dist: pytest; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Requires-Dist: tox; extra == "dev"

> [!CAUTION]
>
> # THIS LIBRARY IS CURRENTLY PRE-RELEASE
>
> `pkl-python` is currently major version `v0`, and **breaking changes will happen** between versions.

# pkl-python - Pkl Bindings for Python
Python binding for [Apple's Pkl language](https://pkl-lang.org/index.html).

## Getting Started
### Installation

``` bash
pip install pkl-python
```

### Basic Usage
Here's how you can start using `pkl-python` to load a PKL module:

```python
import pkl

config = pkl.load("path/to/pkl/example_module.pkl")
config = pkl.loads("a: Int = 1 + 1")
```

### Code Generation
As Python is a dynamic language, codegen is not strictly necessary.
However, codegen lets you expect contents of pkl files within Python modules.

```
pkl-gen-python path/to/pkl/example_module.pkl
```

### TODO
* [x] (codgen) pip binary installation
* [ ] (codgen) gatherer depth-first ordering
* [ ] (codgen) clean up code


## Advanced Features

```python
import pkl

config = pkl.load("./tests/types.pkl")
config = pkl.load("./tests/types.pkl", expr="datasize")
config = pkl.load(None, module_text="a: Int = 1 + 1")
config = pkl.load("./tests/types.pkl", debug=True)
```

### `pkl.load` Parameters Detail
For details on the parameters, refer
* [`pkl eval`](https://pkl-lang.org/main/current/pkl-cli/index.html#command-eval)
* [Message Passing API](https://pkl-lang.org/main/current/bindings-specification/message-passing-api.html).

### Custom Readers
It is possible to add module or resource or module readers:
```python
from typing import List
from dataclasses import dataclass

import pkl
from pkl import (
    ModuleReader, ResourceReader, PathElement,
    ModuleSource, PreconfiguredOptions, PklError,
)

class TestModuleReader(ModuleReader):
    def read(self, url) -> str:
        return "foo = 1"

    def list_elements(self, url: str) -> List[PathElement]:
        return [PathElement("foo.pkl", False)]

opts = PreconfiguredOptions(
    moduleReaders=[TestModuleReader("customfs", True, True, True)]
)
opts.allowedModules.append("customfs:")
config = pkl.load("./tests/pkls/myModule.pkl", evaluator_options=opts)
```

## Appendix

### Type Mappings

While in pre-release they are subject to change.

| Pkl type         | TypeScript type            |
| ---------------- | -------------------------- |
| Null             | `None`                     |
| Boolean          | `bool`                     |
| String           | `str`                      |
| Int              | `int`                      |
| Int8             | `int`                      |
| Int16            | `int`                      |
| Int32            | `int`                      |
| UInt             | `int`                      |
| UInt8            | `int`                      |
| UInt16           | `int`                      |
| UInt32           | `int`                      |
| Float            | `float`                    |
| Number           | `float`                    |
| List             | `list`                     |
| Listing          | `list`                     |
| Map              | `dict`                     |
| Mapping          | `dict`                     |
| Set              | `set`                      |
| Pair             | `pkl.Pair`                 |
| Dynamic          | `dataclasses.dataclass`    |
| DataSize         | `pkl.DataSize`             |
| Duration         | `pkl.Duration`             |
| IntSeq           | `pkl.IntSeq`               |
| Class            | `dataclasses.dataclass`    |
| TypeAlias        | `typing`                   |
| Any              | `typing.Any`               |
| Unions (A\|B\|C) | `typing.Union[A\|B\|C]`    |
| Regex            | `pkl.Regex`                |

## Contributing
Contributions are welcome! If you'd like to contribute, please fork the repository and submit a pull request. For major changes, please open an issue first to discuss what you would like to change.

## License
PKL is released under the MIT License. See the LICENSE file for more details.

## Contact
For support or to contribute, please contact jwyang0213@gmail.com or visit our GitHub repository to report issues or submit pull requests.
