Metadata-Version: 2.1
Name: vror
Version: 0.1.3
Summary: A package for solving various optimization problems. Developed by Ramanujan Computing Centre, Anna University.
Home-page: https://github.com/ragu8/vror
Author: Ragu and Team
Author-email: https.ragu@gmail.com
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: networkx
Requires-Dist: matplotlib
Requires-Dist: pandas
Requires-Dist: numpy
Requires-Dist: scipy

VROR

VROR is a Python package designed to solve various optimization problems. It includes implementations for Critical Path Method (CPM), graphical methods for linear programming, simplex method, transportation problems, and assignment problems.
Installation

You can install VROR from PyPI using pip:

```bash

pip install vror
```
Usage
Critical Path Method (CPM)

Find the critical path in a project network.

```python

from vror.cpm import create_graph, add_event, find_critical_path, visualize_graph

# Create a graph and add events
graph = create_graph()
add_event(graph, 'A', 0, 5)
add_event(graph, 'B', 2, 10)
add_event(graph, 'C', 4, 8)
add_event(graph, 'D', 6, 2)
add_event(graph, 'E', 8, 6)

# Find the critical path
critical_path = find_critical_path(graph)
print(f'Critical Path: {critical_path}')

# Visualize the graph
visualize_graph(graph)
```
Graphical Method

Solve linear programming problems using graphical methods.

```python

from vror.graphical_method import graphical_method

# Define constraints and objective function
constraints = [
    (1, 2, 4),  # x + 2y <= 4
    (1, -1, 1), # x - y <= 1
]
objective = (2, 3)  # Maximize 2x + 3y

# Solve the problem
solution = graphical_method(constraints, objective)
print(f'Solution: {solution}')
```
Simplex Method

Solve linear programming problems using the simplex algorithm.

```python

from vror.simplex_method import simplex

# Define the objective function and constraints
objective = [-1, -2]  # Maximize -x - 2y
constraints = [
    [1, 2, 6],   # x + 2y <= 6
    [3, 2, 12],  # 3x + 2y <= 12
]
bounds = [(0, None), (0, None)]  # x >= 0, y >= 0

# Solve the problem
result = simplex(objective, constraints, bounds)
print(f'Result: {result}')
```
Transportation Problems

Solve transportation problems using optimization techniques.

```python

from vror.transportation import transportation

# Define supply, demand, and cost matrix
supply = [20, 30, 25]
demand = [10, 25, 20]
cost_matrix = [
    [8, 6, 10],
    [9, 12, 13],
    [14, 9, 16]
]

# Solve the transportation problem
solution = transportation(supply, demand, cost_matrix)
print(f'Transportation Solution: {solution}')
```
Assignment Problems

Solve assignment problems, typically using the Hungarian algorithm.

```python

from vror.assignment import assignment

# Define cost matrix
cost_matrix = [
    [10, 19, 8, 15],
    [10, 18, 7, 17],
    [13, 16, 9, 14],
    [12, 19, 8, 18]
]

# Solve the assignment problem
solution = assignment(cost_matrix)
print(f'Assignment Solution: {solution}')
```
Contributing

If you'd like to contribute to VROR, please fork the repository and submit a pull request. For more details, refer to the contributing guidelines.
License

VROR is licensed under the MIT License. See the LICENSE file for more details.
Contact

For any questions or issues, please contact:

    Author: Ragu and Team
    Email: https.ragu@gmail.com
