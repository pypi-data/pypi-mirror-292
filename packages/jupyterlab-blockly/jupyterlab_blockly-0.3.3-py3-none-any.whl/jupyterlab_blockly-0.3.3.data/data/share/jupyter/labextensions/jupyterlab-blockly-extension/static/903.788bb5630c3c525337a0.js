"use strict";(self.webpackChunkjupyterlab_blockly_extension=self.webpackChunkjupyterlab_blockly_extension||[]).push([[903],{3903:(e,t,n)=>{n.r(t),n.d(t,{BlocklyEditor:()=>g,BlocklyEditorFactory:()=>K,BlocklyLayout:()=>m,BlocklyManager:()=>T,BlocklyPanel:()=>x,BlocklyRegistry:()=>B,IBlocklyRegistry:()=>E,THEME:()=>h,TOOLBOX:()=>d});var o=n(9994),l=n(1355),a=n(5256),s=n(4602),i=n(2607),r=n(530),c=n(971);const d={kind:"categoryToolbox",contents:[{kind:"category",name:"Logic",colour:"210",contents:[{kind:"block",type:"controls_if"},{kind:"BLOCK",type:"logic_compare"},{kind:"BLOCK",blockxml:'<block type="logic_operation"></block>',type:"logic_operation"},{kind:"BLOCK",blockxml:'<block type="logic_negate"></block>',type:"logic_negate"},{kind:"BLOCK",blockxml:'<block type="logic_boolean"></block>',type:"logic_boolean"},{kind:"BLOCK",blockxml:'<block type="logic_null"></block>',type:"logic_null"},{kind:"BLOCK",blockxml:'<block type="logic_ternary"></block>',type:"logic_ternary"}]},{kind:"category",name:"Loops",colour:"120",contents:[{kind:"BLOCK",blockxml:'<block type="controls_repeat_ext">\n          <value name="TIMES">\n            <shadow type="math_number">\n              <field name="NUM">10</field>\n            </shadow>\n          </value>\n        </block>',type:"controls_repeat_ext"},{kind:"BLOCK",blockxml:'<block type="controls_whileUntil"></block>',type:"controls_whileUntil"},{kind:"BLOCK",blockxml:'<block type="controls_for">\n          <value name="FROM">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n          <value name="TO">\n            <shadow type="math_number">\n              <field name="NUM">10</field>\n            </shadow>\n          </value>\n          <value name="BY">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n        </block>',type:"controls_for"},{kind:"BLOCK",blockxml:'<block type="controls_forEach"></block>',type:"controls_forEach"},{kind:"BLOCK",blockxml:'<block type="controls_flow_statements"></block>',type:"controls_flow_statements"}]},{kind:"CATEGORY",name:"Math",colour:"230",contents:[{kind:"BLOCK",blockxml:'<block type="math_number"></block>',type:"math_number"},{kind:"BLOCK",blockxml:'<block type="math_arithmetic">\n          <value name="A">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n          <value name="B">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n        </block>',type:"math_arithmetic"},{kind:"BLOCK",blockxml:'<block type="math_single">\n          <value name="NUM">\n            <shadow type="math_number">\n              <field name="NUM">9</field>\n            </shadow>\n          </value>\n        </block>',type:"math_single"},{kind:"BLOCK",blockxml:'<block type="math_trig">\n          <value name="NUM">\n            <shadow type="math_number">\n              <field name="NUM">45</field>\n            </shadow>\n          </value>\n        </block>',type:"math_trig"},{kind:"BLOCK",blockxml:'<block type="math_constant"></block>',type:"math_constant"},{kind:"BLOCK",blockxml:'<block type="math_number_property">\n          <value name="NUMBER_TO_CHECK">\n            <shadow type="math_number">\n              <field name="NUM">0</field>\n            </shadow>\n          </value>\n        </block>',type:"math_number_property"},{kind:"BLOCK",blockxml:'<block type="math_change">\n          <value name="DELTA">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n        </block>',type:"math_change"},{kind:"BLOCK",blockxml:'<block type="math_round">\n          <value name="NUM">\n            <shadow type="math_number">\n              <field name="NUM">3.1</field>\n            </shadow>\n          </value>\n        </block>',type:"math_round"},{kind:"BLOCK",blockxml:'<block type="math_on_list"></block>',type:"math_on_list"},{kind:"BLOCK",blockxml:'<block type="math_modulo">\n          <value name="DIVIDEND">\n            <shadow type="math_number">\n              <field name="NUM">64</field>\n            </shadow>\n          </value>\n          <value name="DIVISOR">\n            <shadow type="math_number">\n              <field name="NUM">10</field>\n            </shadow>\n          </value>\n        </block>',type:"math_modulo"},{kind:"BLOCK",blockxml:'<block type="math_constrain">\n          <value name="VALUE">\n            <shadow type="math_number">\n              <field name="NUM">50</field>\n            </shadow>\n          </value>\n          <value name="LOW">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n          <value name="HIGH">\n            <shadow type="math_number">\n              <field name="NUM">100</field>\n            </shadow>\n          </value>\n        </block>',type:"math_constrain"},{kind:"BLOCK",blockxml:'<block type="math_random_int">\n          <value name="FROM">\n            <shadow type="math_number">\n              <field name="NUM">1</field>\n            </shadow>\n          </value>\n          <value name="TO">\n            <shadow type="math_number">\n              <field name="NUM">100</field>\n            </shadow>\n          </value>\n        </block>',type:"math_random_int"},{kind:"BLOCK",blockxml:'<block type="math_random_float"></block>',type:"math_random_float"}]},{kind:"CATEGORY",name:"Text",colour:"160",contents:[{kind:"BLOCK",blockxml:'<block type="text"></block>',type:"text"},{kind:"BLOCK",blockxml:'<block type="text_join"></block>',type:"text_join"},{kind:"BLOCK",blockxml:'<block type="text_append">\n          <value name="TEXT">\n            <shadow type="text"></shadow>\n          </value>\n        </block>',type:"text_append"},{kind:"BLOCK",blockxml:'<block type="text_length">\n          <value name="VALUE">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_length"},{kind:"BLOCK",blockxml:'<block type="text_isEmpty">\n          <value name="VALUE">\n            <shadow type="text">\n              <field name="TEXT"></field>\n            </shadow>\n          </value>\n        </block>',type:"text_isEmpty"},{kind:"BLOCK",blockxml:'<block type="text_indexOf">\n          <value name="VALUE">\n            <block type="variables_get">\n              <field name="VAR">text</field>\n            </block>\n          </value>\n          <value name="FIND">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_indexOf"},{kind:"BLOCK",blockxml:'<block type="text_charAt">\n          <value name="VALUE">\n            <block type="variables_get">\n              <field name="VAR">text</field>\n            </block>\n          </value>\n        </block>',type:"text_charAt"},{kind:"BLOCK",blockxml:'<block type="text_getSubstring">\n          <value name="STRING">\n            <block type="variables_get">\n              <field name="VAR">text</field>\n            </block>\n          </value>\n        </block>',type:"text_getSubstring"},{kind:"BLOCK",blockxml:'<block type="text_changeCase">\n          <value name="TEXT">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_changeCase"},{kind:"BLOCK",blockxml:'<block type="text_trim">\n          <value name="TEXT">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_trim"},{kind:"BLOCK",blockxml:'<block type="text_print">\n          <value name="TEXT">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_print"},{kind:"BLOCK",blockxml:'<block type="text_prompt_ext">\n          <value name="TEXT">\n            <shadow type="text">\n              <field name="TEXT">abc</field>\n            </shadow>\n          </value>\n        </block>',type:"text_prompt_ext"}]},{kind:"CATEGORY",name:"Lists",colour:"260",contents:[{kind:"BLOCK",blockxml:'<block type="lists_create_with">\n          <mutation items="0"></mutation>\n        </block>',type:"lists_create_with"},{kind:"BLOCK",blockxml:'<block type="lists_create_with"></block>',type:"lists_create_with"},{kind:"BLOCK",blockxml:'<block type="lists_repeat">\n          <value name="NUM">\n            <shadow type="math_number">\n              <field name="NUM">5</field>\n            </shadow>\n          </value>\n        </block>',type:"lists_repeat"},{kind:"BLOCK",blockxml:'<block type="lists_length"></block>',type:"lists_length"},{kind:"BLOCK",blockxml:'<block type="lists_isEmpty"></block>',type:"lists_isEmpty"},{kind:"BLOCK",blockxml:'<block type="lists_indexOf">\n          <value name="VALUE">\n            <block type="variables_get">\n              <field name="VAR">list</field>\n            </block>\n          </value>\n        </block>',type:"lists_indexOf"},{kind:"BLOCK",blockxml:'<block type="lists_getIndex">\n          <value name="VALUE">\n            <block type="variables_get">\n              <field name="VAR">list</field>\n            </block>\n          </value>\n        </block>',type:"lists_getIndex"},{kind:"BLOCK",blockxml:'<block type="lists_setIndex">\n          <value name="LIST">\n            <block type="variables_get">\n              <field name="VAR">list</field>\n            </block>\n          </value>\n        </block>',type:"lists_setIndex"},{kind:"BLOCK",blockxml:'<block type="lists_getSublist">\n          <value name="LIST">\n            <block type="variables_get">\n              <field name="VAR">list</field>\n            </block>\n          </value>\n        </block>',type:"lists_getSublist"},{kind:"BLOCK",blockxml:'<block type="lists_split">\n          <value name="DELIM">\n            <shadow type="text">\n              <field name="TEXT">,</field>\n            </shadow>\n          </value>\n        </block>',type:"lists_split"},{kind:"BLOCK",blockxml:'<block type="lists_sort"></block>',type:"lists_sort"}]},{kind:"CATEGORY",name:"Color",colour:"20",contents:[{kind:"BLOCK",blockxml:'<block type="colour_picker"></block>',type:"colour_picker"},{kind:"BLOCK",blockxml:'<block type="colour_random"></block>',type:"colour_random"},{kind:"BLOCK",blockxml:'<block type="colour_rgb">\n          <value name="RED">\n            <shadow type="math_number">\n              <field name="NUM">100</field>\n            </shadow>\n          </value>\n          <value name="GREEN">\n            <shadow type="math_number">\n              <field name="NUM">50</field>\n            </shadow>\n          </value>\n          <value name="BLUE">\n            <shadow type="math_number">\n              <field name="NUM">0</field>\n            </shadow>\n          </value>\n        </block>',type:"colour_rgb"},{kind:"BLOCK",blockxml:'<block type="colour_blend">\n          <value name="COLOUR1">\n            <shadow type="colour_picker">\n              <field name="COLOUR">#ff0000</field>\n            </shadow>\n          </value>\n          <value name="COLOUR2">\n            <shadow type="colour_picker">\n              <field name="COLOUR">#3333ff</field>\n            </shadow>\n          </value>\n          <value name="RATIO">\n            <shadow type="math_number">\n              <field name="NUM">0.5</field>\n            </shadow>\n          </value>\n        </block>',type:"colour_blend"}]},{kind:"SEP"},{kind:"CATEGORY",colour:"330",custom:"VARIABLE",name:"Variables"},{kind:"CATEGORY",colour:"290",custom:"PROCEDURE",name:"Functions"}]},h=c.Theme.defineTheme("jupyterlab",{name:"JupyterLab Blockly",base:c.Themes.Classic,componentStyles:{workspaceBackgroundColour:"var(--jp-layout-color0)",toolboxBackgroundColour:"var(--jp-layout-color2)",toolboxForegroundColour:"var(--jp-ui-font-color0)",flyoutBackgroundColour:"var(--jp-border-color2)",flyoutForegroundColour:"var(--jp-layout-color3)",flyoutOpacity:1,scrollbarColour:"var(--jp-border-color0)",insertionMarkerOpacity:.3,scrollbarOpacity:.4,cursorColour:"var(--jp-scrollbar-background-color)"},fontStyle:{family:"var(--jp-ui-font-family)"}});class m extends a.SplitLayout{constructor(e,t,n,o){super({renderer:a.SplitPanel.defaultRenderer,orientation:"vertical"}),this._manager=e,this._sessionContext=t,this._host=new a.Widget,this._cell=new r.CodeCell({contentFactory:new r.Cell.ContentFactory({editorFactory:o.newInlineEditor}),model:new r.CodeCellModel,rendermime:n,placeholder:!1}).initializeState(),this._cell.addClass("jp-blockly-codeCell"),this._cell.readOnly=!0,this._cell.model.trusted=!0,this._cell.model.mimeType=this._manager.mimeType,this._cell.node.style.overflow="scroll",this._manager.changed.connect(this._onManagerChanged,this)}get cell(){return this._cell}get workspace(){return c.serialization.workspaces.save(this._workspace)}set workspace(e){const t=null===e?{variables:[]}:e;c.serialization.workspaces.load(t,this._workspace)}dispose(){this._manager.changed.disconnect(this._resizeWorkspace,this),s.Signal.clearData(this),this._workspace.dispose(),super.dispose()}init(){super.init(),this.addWidget(this._host),this.addWidget(this._cell)}iter(){return[][Symbol.iterator]()}removeWidget(e){}getBlocksToplevelInit(){let e="";const t=this._workspace.getAllBlocks(!0);for(const n in t){const o=t[n].type;c.Blocks[o].toplevel_init&&(e+=c.Blocks[o].toplevel_init)}return e}run(){const e=this.getBlocksToplevelInit()+this._manager.generator.workspaceToCode(this._workspace);this._cell.model.sharedModel.setSource(e),this._sessionContext.hasNoKernel?(0,i.showErrorMessage)("Select a valid kernel","There is not a valid kernel selected, select one from the dropdown menu in the toolbar.\n        If there isn't a valid kernel please install 'xeus-python' from Pypi.org or using mamba.\n        "):r.CodeCell.execute(this._cell,this._sessionContext).then((()=>this._resizeWorkspace())).catch((e=>console.error(e)))}onUpdateRequest(e){super.onUpdateRequest(e),this._resizeWorkspace()}onResize(e){super.onResize(e),this._resizeWorkspace()}onFitRequest(e){super.onFitRequest(e),this._resizeWorkspace()}onAfterAttach(e){super.onAfterAttach(e),this._workspace=c.inject(this._host.node,{toolbox:this._manager.toolbox,theme:h}),this._workspace.addChangeListener((()=>{const e=this.getBlocksToplevelInit()+this._manager.generator.workspaceToCode(this._workspace);this._cell.model.sharedModel.setSource(e)}))}_resizeWorkspace(){c.svgResize(this._workspace)}_onManagerChanged(e,t){if("kernel"===t){const e=this.getBlocksToplevelInit()+this._manager.generator.workspaceToCode(this._workspace);this._cell.model.sharedModel.setSource(e),this._cell.model.mimeType=this._manager.mimeType}"toolbox"===t&&this._workspace.updateToolbox(this._manager.toolbox)}}class b extends i.ToolbarButton{constructor(e){super(e),this.addClass("jp-blockly-button")}}class k extends a.Widget{constructor(){super(),this.addClass("jp-Toolbar-spacer")}}var p=n(3345),u=n.n(p);class _ extends b{constructor(e){super(e),this.handleChange=e=>{this._manager.setToolbox(e.target.value),this.update()},this._manager=e.manager,this._manager.changed.connect(this.update,this)}dispose(){super.dispose(),this._manager.changed.disconnect(this.update,this)}render(){return u().createElement(l.HTMLSelect,{onChange:this.handleChange,value:this._manager.getToolbox(),options:this._manager.listToolboxes()})}}class y extends b{constructor(e){super(e),this.handleChange=e=>{this._manager.selectKernel(e.target.value),this.update()},this._manager=e.manager,this._manager.changed.connect(this.update,this)}dispose(){super.dispose(),this._manager.changed.disconnect(this.update,this)}render(){const e=this._manager.listKernels();return"No kernel"===this._manager.kernel&&e.push({label:"No kernel",value:"No kernel"}),u().createElement(l.HTMLSelect,{onChange:this.handleChange,value:this._manager.kernel,options:e})}}class g extends o.DocumentWidget{constructor(e){super(e);const t=new b({label:"",icon:l.runIcon,className:"jp-blockly-runButton",onClick:()=>this.content.layout.run(),tooltip:"Run Code"});this.toolbar.addItem("run",t),this.toolbar.addItem("spacer",new k),this.toolbar.addItem("toolbox",new _({label:"Toolbox",tooltip:"Select tollbox",manager:e.manager})),this.toolbar.addItem("generator",new y({label:"Kernel",tooltip:"Select kernel",manager:e.manager}))}dispose(){this.content.dispose(),super.dispose()}}class x extends a.SplitPanel{constructor(e,t,n,o){super({layout:new m(t,e.sessionContext,n,o)}),this.addClass("jp-BlocklyPanel"),this._context=e,this._rendermime=n,this._context.ready.then((()=>this._load())),this._context.saveState.connect(this._onSave,this)}get cell(){return this.layout.cell}get rendermime(){return this._rendermime}dispose(){this.isDisposed||(s.Signal.clearData(this),super.dispose())}_load(){const e=this._context.model.toJSON();this.layout.workspace=e}_onSave(e,t){if("started"===t){const e=this.layout.workspace;this._context.model.fromJSON(e)}}}var v,f=n(547),w=n(2888),C=n(8773),O=n(518),L=n(1856);class B{constructor(){this._toolboxes=new Map,this._toolboxes.set("default",d),this._generators=new Map,this._generators.set("python",f.Ev),this._generators.set("javascript",w.bw),this._generators.set("lua",C.YW),(0,L.installAllBlocks)({javascript:w.bw,python:f.Ev,lua:C.YW})}get toolboxes(){return this._toolboxes}get generators(){return this._generators}registerToolbox(e,t){this._toolboxes.set(e,t)}registerBlocks(e){c.defineBlocksWithJsonArray(e)}registerGenerator(e,t){this._generators.set(e,t)}setlanguage(e){v.importLanguageModule(e)}}!function(e){e.importLanguageModule=async function(e){let t;switch(e){case"En":t=Promise.resolve().then(n.bind(n,518));break;case"Es":t=n.e(851).then(n.bind(n,3851));break;case"Fr":t=n.e(284).then(n.bind(n,2903));break;case"Sa":t=n.e(46).then(n.bind(n,6046));break;case"Cz":t=n.e(225).then(n.bind(n,9225));break;case"Dk":t=n.e(126).then(n.bind(n,3126));break;case"De":t=n.e(650).then(n.bind(n,650));break;case"Gr":t=n.e(828).then(n.bind(n,3828));break;case"Ee":t=n.e(676).then(n.bind(n,9676));break;case"Fi":t=n.e(484).then(n.bind(n,4484));break;case"Il":t=n.e(686).then(n.bind(n,3686));break;case"Hu":t=n.e(902).then(n.bind(n,2902));break;case"Am":t=n.e(658).then(n.bind(n,8658));break;case"Id":t=n.e(816).then(n.bind(n,1816));break;case"It":t=n.e(752).then(n.bind(n,7752));break;case"Jp":t=n.e(304).then(n.bind(n,2304));break;case"Kr":t=n.e(621).then(n.bind(n,3621));break;case"Lt":t=n.e(995).then(n.bind(n,7995));break;case"Nl":t=n.e(9).then(n.bind(n,3009));break;case"Pl":t=n.e(671).then(n.bind(n,8671));break;case"Br":t=n.e(847).then(n.bind(n,1847));break;case"Ro":t=n.e(358).then(n.bind(n,5358));break;case"Ru":t=n.e(908).then(n.bind(n,7908));break;case"Lk":t=n.e(835).then(n.bind(n,3835));break;case"Tr":t=n.e(373).then(n.bind(n,6373));break;case"Ua":t=n.e(275).then(n.bind(n,2275));break;case"Vn":t=n.e(236).then(n.bind(n,5236));break;case"Tw":t=n.e(309).then(n.bind(n,8309));break;case"Cn":t=n.e(506).then(n.bind(n,4506));break;default:console.warn("Language not found. Loading english"),t=Promise.resolve(O)}t.then((e=>{c.setLocale(e)}))}}(v||(v={}));class T{constructor(e,t,n){this._registry=e,this._sessionContext=t,this._mimetypeService=n,this._toolbox="default",this._generator=this._registry.generators.get("python"),this._changed=new s.Signal(this),this._sessionContext.kernelChanged.connect(this._onKernelChanged,this)}get toolbox(){return this._registry.toolboxes.get(this._toolbox)}get mimeType(){return this._selectedKernel?this._mimetypeService.getMimeTypeByLanguage({name:this._selectedKernel.language}):"text/plain"}get kernel(){var e;return(null===(e=this._selectedKernel)||void 0===e?void 0:e.name)||"No kernel"}get generator(){return this._generator}get changed(){return this._changed}dispose(){this._sessionContext.kernelChanged.disconnect(this._onKernelChanged,this)}getToolbox(){return this._toolbox}setToolbox(e){if(this._toolbox!==e){const t=this._registry.toolboxes.get(e);this._toolbox=t?e:"default",this._changed.emit("toolbox")}}listToolboxes(){const e=[];return this._registry.toolboxes.forEach(((t,n)=>{e.push({label:n,value:n})})),e}selectKernel(e){this._sessionContext.changeKernel({name:e})}listKernels(){const e=this._sessionContext.specsManager.specs.kernelspecs,t=[];return Object.keys(e).forEach((n=>{const o=e[n].language;this._registry.generators.has(o)&&t.push({label:e[n].display_name,value:e[n].name})})),t}_onKernelChanged(e,t){const n=this._sessionContext.specsManager.specs.kernelspecs;if(t.newValue&&void 0!==n[t.newValue.name]){this._selectedKernel=n[t.newValue.name];const e=n[t.newValue.name].language;this._generator=this._registry.generators.get(e),this._changed.emit("kernel")}}}class K extends o.ABCWidgetFactory{constructor(e){super(e),this._registry=new B,this._rendermime=e.rendermime,this._mimetypeService=e.mimetypeService,this._factoryService=e.factoryService}get registry(){return this._registry}createNewWidget(e){e.model.metadata=new Map;const t=new T(this._registry,e.sessionContext,this._mimetypeService),n=new x(e,t,this._rendermime,this._factoryService);return new g({context:e,content:n,manager:t})}}const E=new(n(7262).Token)("jupyterlab-blockly/registry")}}]);
//# sourceMappingURL=903.788bb5630c3c525337a0.js.map?v=788bb5630c3c525337a0