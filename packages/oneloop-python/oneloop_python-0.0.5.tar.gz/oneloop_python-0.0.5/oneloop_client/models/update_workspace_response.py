# coding: utf-8

"""
    Oneloop API

    API Key Management

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field
from oneloop_client.models.workspace import Workspace

class UpdateWorkspaceResponse(BaseModel):
    """
    UpdateWorkspaceResponse
    """
    workspace: Workspace = Field(...)
    __properties = ["workspace"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UpdateWorkspaceResponse:
        """Create an instance of UpdateWorkspaceResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of workspace
        if self.workspace:
            _dict['workspace'] = self.workspace.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UpdateWorkspaceResponse:
        """Create an instance of UpdateWorkspaceResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UpdateWorkspaceResponse.parse_obj(obj)

        _obj = UpdateWorkspaceResponse.parse_obj({
            "workspace": Workspace.from_dict(obj.get("workspace")) if obj.get("workspace") is not None else None
        })
        return _obj


