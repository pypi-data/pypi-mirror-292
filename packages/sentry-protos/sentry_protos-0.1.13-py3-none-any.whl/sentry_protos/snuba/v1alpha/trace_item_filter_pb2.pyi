"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class AndFilter(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILTERS_FIELD_NUMBER: builtins.int
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TraceItemFilter]: ...
    def __init__(
        self,
        *,
        filters: collections.abc.Iterable[global___TraceItemFilter] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["filters", b"filters"]) -> None: ...

global___AndFilter = AndFilter

@typing.final
class OrFilter(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILTERS_FIELD_NUMBER: builtins.int
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TraceItemFilter]: ...
    def __init__(
        self,
        *,
        filters: collections.abc.Iterable[global___TraceItemFilter] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["filters", b"filters"]) -> None: ...

global___OrFilter = OrFilter

@typing.final
class NumberFilter(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Op:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _OpEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[NumberFilter._Op.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        OP_UNSPECIFIED: NumberFilter._Op.ValueType  # 0
        OP_LESS_THAN: NumberFilter._Op.ValueType  # 1
        OP_GREATER_THAN: NumberFilter._Op.ValueType  # 2
        OP_LESS_THAN_OR_EQUALS: NumberFilter._Op.ValueType  # 3
        OP_GREATER_THAN_OR_EQUALS: NumberFilter._Op.ValueType  # 4
        OP_EQUALS: NumberFilter._Op.ValueType  # 5
        OP_NOT_EQUALS: NumberFilter._Op.ValueType  # 6

    class Op(_Op, metaclass=_OpEnumTypeWrapper): ...
    OP_UNSPECIFIED: NumberFilter.Op.ValueType  # 0
    OP_LESS_THAN: NumberFilter.Op.ValueType  # 1
    OP_GREATER_THAN: NumberFilter.Op.ValueType  # 2
    OP_LESS_THAN_OR_EQUALS: NumberFilter.Op.ValueType  # 3
    OP_GREATER_THAN_OR_EQUALS: NumberFilter.Op.ValueType  # 4
    OP_EQUALS: NumberFilter.Op.ValueType  # 5
    OP_NOT_EQUALS: NumberFilter.Op.ValueType  # 6

    KEY_FIELD_NUMBER: builtins.int
    OP_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    key: builtins.str
    op: global___NumberFilter.Op.ValueType
    value: builtins.float
    def __init__(
        self,
        *,
        key: builtins.str = ...,
        op: global___NumberFilter.Op.ValueType = ...,
        value: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "op", b"op", "value", b"value"]) -> None: ...

global___NumberFilter = NumberFilter

@typing.final
class StringFilter(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    class _Op:
        ValueType = typing.NewType("ValueType", builtins.int)
        V: typing_extensions.TypeAlias = ValueType

    class _OpEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[StringFilter._Op.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        OP_UNSPECIFIED: StringFilter._Op.ValueType  # 0
        OP_EQUALS: StringFilter._Op.ValueType  # 1
        OP_NOT_EQUALS: StringFilter._Op.ValueType  # 2
        OP_LIKE: StringFilter._Op.ValueType  # 3
        OP_NOT_LIKE: StringFilter._Op.ValueType  # 4

    class Op(_Op, metaclass=_OpEnumTypeWrapper): ...
    OP_UNSPECIFIED: StringFilter.Op.ValueType  # 0
    OP_EQUALS: StringFilter.Op.ValueType  # 1
    OP_NOT_EQUALS: StringFilter.Op.ValueType  # 2
    OP_LIKE: StringFilter.Op.ValueType  # 3
    OP_NOT_LIKE: StringFilter.Op.ValueType  # 4

    KEY_FIELD_NUMBER: builtins.int
    OP_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    key: builtins.str
    op: global___StringFilter.Op.ValueType
    value: builtins.str
    def __init__(
        self,
        *,
        key: builtins.str = ...,
        op: global___StringFilter.Op.ValueType = ...,
        value: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["key", b"key", "op", b"op", "value", b"value"]) -> None: ...

global___StringFilter = StringFilter

@typing.final
class ExistsFilter(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    key: builtins.str
    def __init__(
        self,
        *,
        key: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["key", b"key"]) -> None: ...

global___ExistsFilter = ExistsFilter

@typing.final
class TraceItemFilter(google.protobuf.message.Message):
    """Represents a condition on searching for a particular "trace item"
    (e.g., spans, replays, errors)
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    AND_FILTER_FIELD_NUMBER: builtins.int
    OR_FILTER_FIELD_NUMBER: builtins.int
    NUMBER_FILTER_FIELD_NUMBER: builtins.int
    STRING_FILTER_FIELD_NUMBER: builtins.int
    EXISTS_FILTER_FIELD_NUMBER: builtins.int
    @property
    def and_filter(self) -> global___AndFilter: ...
    @property
    def or_filter(self) -> global___OrFilter: ...
    @property
    def number_filter(self) -> global___NumberFilter: ...
    @property
    def string_filter(self) -> global___StringFilter: ...
    @property
    def exists_filter(self) -> global___ExistsFilter: ...
    def __init__(
        self,
        *,
        and_filter: global___AndFilter | None = ...,
        or_filter: global___OrFilter | None = ...,
        number_filter: global___NumberFilter | None = ...,
        string_filter: global___StringFilter | None = ...,
        exists_filter: global___ExistsFilter | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["and_filter", b"and_filter", "exists_filter", b"exists_filter", "number_filter", b"number_filter", "or_filter", b"or_filter", "string_filter", b"string_filter", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["and_filter", b"and_filter", "exists_filter", b"exists_filter", "number_filter", b"number_filter", "or_filter", b"or_filter", "string_filter", b"string_filter", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["and_filter", "or_filter", "number_filter", "string_filter", "exists_filter"] | None: ...

global___TraceItemFilter = TraceItemFilter
