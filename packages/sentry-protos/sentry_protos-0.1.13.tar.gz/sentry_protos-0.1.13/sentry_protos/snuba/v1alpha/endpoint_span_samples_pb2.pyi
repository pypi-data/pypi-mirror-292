"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sentry_protos.snuba.v1alpha.request_common_pb2
import sentry_protos.snuba.v1alpha.trace_item_filter_pb2
import typing

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing.final
class SpanSamplesRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class OrderBy(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        ATTR_NAME_FIELD_NUMBER: builtins.int
        DESCENDING_FIELD_NUMBER: builtins.int
        attr_name: builtins.str
        descending: builtins.bool
        def __init__(
            self,
            *,
            attr_name: builtins.str = ...,
            descending: builtins.bool = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["attr_name", b"attr_name", "descending", b"descending"]) -> None: ...

    @typing.final
    class ProjectNamesToIdsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.int
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    META_FIELD_NUMBER: builtins.int
    FILTERS_FIELD_NUMBER: builtins.int
    ORDER_BY_FIELD_NUMBER: builtins.int
    REQUESTED_ATTRIBUTES_FIELD_NUMBER: builtins.int
    LIMIT_FIELD_NUMBER: builtins.int
    PROJECT_NAMES_TO_IDS_FIELD_NUMBER: builtins.int
    limit: builtins.int
    @property
    def meta(self) -> sentry_protos.snuba.v1alpha.request_common_pb2.RequestMeta: ...
    @property
    def filters(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[sentry_protos.snuba.v1alpha.trace_item_filter_pb2.TraceItemFilter]: ...
    @property
    def order_by(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpanSamplesRequest.OrderBy]: ...
    @property
    def requested_attributes(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    @property
    def project_names_to_ids(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.int]:
        """required if you want project.name "virtual column" to exist"""

    def __init__(
        self,
        *,
        meta: sentry_protos.snuba.v1alpha.request_common_pb2.RequestMeta | None = ...,
        filters: collections.abc.Iterable[sentry_protos.snuba.v1alpha.trace_item_filter_pb2.TraceItemFilter] | None = ...,
        order_by: collections.abc.Iterable[global___SpanSamplesRequest.OrderBy] | None = ...,
        requested_attributes: collections.abc.Iterable[builtins.str] | None = ...,
        limit: builtins.int = ...,
        project_names_to_ids: collections.abc.Mapping[builtins.str, builtins.int] | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing.Literal["meta", b"meta"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing.Literal["filters", b"filters", "limit", b"limit", "meta", b"meta", "order_by", b"order_by", "project_names_to_ids", b"project_names_to_ids", "requested_attributes", b"requested_attributes"]) -> None: ...

global___SpanSamplesRequest = SpanSamplesRequest

@typing.final
class SpanSample(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing.final
    class Data(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        STR_FIELD_NUMBER: builtins.int
        NUM_FIELD_NUMBER: builtins.int
        str: builtins.str
        num: builtins.float
        def __init__(
            self,
            *,
            str: builtins.str = ...,
            num: builtins.float = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["num", b"num", "str", b"str", "value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["num", b"num", "str", b"str", "value", b"value"]) -> None: ...
        def WhichOneof(self, oneof_group: typing.Literal["value", b"value"]) -> typing.Literal["str", "num"] | None: ...

    @typing.final
    class AttributesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___SpanSample.Data: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___SpanSample.Data | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing.Literal["key", b"key", "value", b"value"]) -> None: ...

    ATTRIBUTES_FIELD_NUMBER: builtins.int
    @property
    def attributes(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___SpanSample.Data]: ...
    def __init__(
        self,
        *,
        attributes: collections.abc.Mapping[builtins.str, global___SpanSample.Data] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["attributes", b"attributes"]) -> None: ...

global___SpanSample = SpanSample

@typing.final
class SpanSamplesResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SPAN_SAMPLES_FIELD_NUMBER: builtins.int
    @property
    def span_samples(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SpanSample]: ...
    def __init__(
        self,
        *,
        span_samples: collections.abc.Iterable[global___SpanSample] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing.Literal["span_samples", b"span_samples"]) -> None: ...

global___SpanSamplesResponse = SpanSamplesResponse
