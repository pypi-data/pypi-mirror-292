[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.autoflake]
in-place = true
recursive = true
expand-star-imports = true
remove-all-unused-imports = true
ignore-init-module-imports = true  # modifies "remove-all-unused-imports"
remove-duplicate-keys = true
remove-unused-variables = true


[tool.black]
line-length = 88
target-version = ["py312", "py311", "py310", "py39"]


[tool.coverage.paths]
source = ["src/", "**/site-packages/"]

[tool.coverage.report]
show_missing = true
skip_covered = true
skip_empty = true

[tool.coverage.run]
branch = true
data_file = ".cache/coverage/data"
parallel = true
source = ["lalib"]

[tool.coverage.xml]
output = ".cache/coverage/report.xml"


[tool.flake8]

select = [

    # violations also covered by `ruff` below
    # ---------------------------------------
    "ANN",     # flake8-annotations => enforce type checking for functions
    "B",       # flake8-bugbear => bugs and design flaws
    "C4",      # flake8-comprehensions => better comprehensions
    "C8",      # flake8-commas => better comma placements ("COM" for `ruff`)
    "C90",     # mccabe => cyclomatic complexity (Source: https://github.com/pycqa/mccabe#plugin-for-flake8)
    "D",       # flake8-docstrings / pydocstyle => PEP257 compliance
    "E", "W",  # pycodestyle => PEP8 compliance (Source: https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes)
    "E800",    # flake8-eradicate / eradicate => no commented out code ("ERA" for `ruff`)
    "F",       # pyflakes => basic errors (Source: https://flake8.pycqa.org/en/latest/user/error-codes.html)
    "I",       # flake8-isort => isort would make changes
    "N",       # pep8-naming
    "PT",      # flake8-pytest-style => enforce a consistent style with pytest
    "Q",       # flake8-quotes => use double quotes everywhere (complying with black)
    "S",       # flake8-bandit => common security issues
    "T10",     # flake8-debugger => no debugger usage

    # violations not covered by `ruff` below
    # --------------------------------------
    "BLK",     # flake8-black => complain if black wants to make changes
    "DOC",     # pydoclint (replaces "darglint") => docstring matches implementation
    "N400",    # flake8-broken-line => no "\" to end a line
    "P",       # flake8-string-format => unify usage of `str.format()` ("FMT" in the future)

]

ignore = []  # by default, flake8 ignores some errors => we don't ignore anything

extend-ignore = [  # never check the following codes

    "ANN101", "ANN102",  # `self` and `cls` in methods need no annotation

    # Comply with black's style
    # Sources: https://black.readthedocs.io/en/stable/guides/using_black_with_other_tools.html#pycodestyle
    "E203", "E701", "E704", "W503",

]

per-file-ignores = [

    # Type hints are not required for tests and `assert`s are normal
    "tests/*.py:ANN,S101",

]

# Explicitly set mccabe's maximum complexity to 10 as recommended by
# Thomas McCabe, the inventor of the McCabe complexity, and the NIST
# Source: https://en.wikipedia.org/wiki/Cyclomatic_complexity#Limiting_complexity_during_development
max-complexity = 10

# Whereas `black` (and `isort`) break the line at 88 characters,
# `flake8` won't complain about anything (e.g., comments) until 100
max-line-length = 99

# Preview the code lines that cause errors
show-source = true

# Plug-in: flake8-docstrings
# Source: https://www.pydocstyle.org/en/latest/error_codes.html#default-conventions
docstring-convention = "google"

# Plug-in: flake8-eradicate
# Source: https://github.com/wemake-services/flake8-eradicate#options
eradicate-aggressive = true

# Plug-in: flake8-pytest-style
# Prefer `@pytest.fixture` over `@pytest.fixture()`
pytest-fixture-no-parentheses = true
# Prefer `@pytest.mark.foobar` over `@pytest.mark.foobar()`
pytest-mark-no-parentheses = true
# Prefer `@pytest.mark.parametrize(['param1', 'param2'], [(1, 2), (3, 4)])`
# over `@pytest.mark.parametrize(('param1', 'param2'), ([1, 2], [3, 4]))`
pytest-parametrize-names-type = "list"
pytest-parametrize-values-row-type = "tuple"
pytest-parametrize-values-type = "list"

# Plug-in: flake8-quotes
# Source: https://github.com/zheller/flake8-quotes#configuration
avoid-escape = true
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"


[tool.isort]
# Generic Source: https://pycqa.github.io/isort/docs/configuration/options.html

known_first_party = ["lalib"]

atomic = true
case_sensitive = true
combine_star = true
force_alphabetical_sort_within_sections = true
lines_after_imports = 2
remove_redundant_aliases = true

# Comply with black's style -> instead of: profile = "black"
# Source: https://pycqa.github.io/isort/docs/configuration/profiles.html
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 88
multi_line_output = 3
split_on_trailing_comma = true
use_parentheses = true

# Comply with Google's Python Style Guide
# -> all imports go on a single line except the ones from the typing module
# Source: https://google.github.io/styleguide/pyguide.html#313-imports-formatting
force_single_line = true
single_line_exclusions = ["collections.abc", "typing"]


[tool.mypy]
cache_dir = ".cache/mypy"

[[tool.mypy.overrides]]
module = [
    "nox",
    "pytest",
    "xdoctest",
]
ignore_missing_imports = true


[tool.poetry]
name = "lalib"
version = "0.1.1"

authors = [
    "Alexander Hess <alexander@webartifex.biz>",
]
description = "A Python library to study linear algebra"
keywords = [
    "python",
    "educational",
    "linear-algebra",
]
license = "MIT"

classifiers = [
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

readme = "README.md"
homepage = "https://github.com/webartifex/lalib"
repository = "https://github.com/webartifex/lalib"
documentation = "https://lalib.readthedocs.io"

[tool.poetry.dependencies]
python = "^3.9"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7"

# Code Formatters
autoflake = "^2.3"
black = "^24.4"
isort = "^5.13"

# Code Linters
flake8 = "^7.1"
flake8-annotations = "^3.1"
flake8-bandit = "^4.1"
flake8-black = "^0.3"
flake8-broken-line = "^1.0"
flake8-bugbear = "^24.8"
flake8-commas = "^4.0"
flake8-comprehensions = "^3.15"
flake8-debugger = "^4.1"
flake8-docstrings = "^1.7"
flake8-eradicate = "^1.5"
flake8-isort = "^6.1"
flake8-quotes = "^3.4"
flake8-string-format = "^0.3"
flake8-pyproject = "^1.2"
flake8-pytest-style = "^2.0"
mypy = "^1.11"
pep8-naming = "^0.14"
pydoclint = {extras = ["flake8"], version = "^0.5"}
ruff = "^0.6"

# Test Suite
coverage = "^7.6"
packaging = "^24.1"  # needed to test the version identifier
pytest = "^8.2"
pytest-cov = "^5.0"
xdoctest = {extras = ["colors"], version = "^1.2"}

# Documentation
sphinx = "^7.4"
sphinx-autodoc-typehints = "^2.2"


[tool.pytest.ini_options]
addopts = "--strict-markers"  # avoid typos in pytest markers
cache_dir = ".cache/pytest"
console_output_style = "count"


[tool.ruff]
cache-dir = ".cache/ruff"
indent-width = 4
line-length = 88
target-version = "py39"

[tool.ruff.format]

# Align with `black`
indent-style = "space"
line-ending = "lf"
quote-style = "double"
skip-magic-trailing-comma = false

# Format docstrings as well
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint]
# For now, `ruff` is used as a faster alternative to `flake8` when developing
# => Align [tool.ruff.lint] with [tool.flake8] (and [tool.isort]) above

select = [

    # violations also covered by `flake8` above
    # -----------------------------------------
    "ANN",     # flake8-annotations => enforce type checking for functions
    "B",       # flake8-bugbear => bugs and design flaws
    "C4",      # flake8-comprehensions => better comprehensions
    "C90",     # mccabe => cyclomatic complexity
    "COM",     # "C8" for flake8-commas => better comma placements
    "D",       # flake8-docstrings / pydocstyle => PEP257 compliance
    "E", "W",  # pycodestyle => PEP8 compliance
    "ERA",     # "E800" for flake8-eradicate / eradicate => no commented out code
    "F",       # pyflakes => basic errors
    "I",       # flake8-isort => isort would make changes
    "N",       # pep8-naming
    "PT",      # flake8-pytest-style => enforce a consistent style with pytest
    "Q",       # flake8-quotes => use double quotes everywhere
    "S",       # flake8-bandit => common security issues
    "T10",     # flake8-debugger => no debugger usage

    # violations not covered by `flake8` above
    # ----------------------------------------
    "T20",     # flake8-print => forbid `[p]print`

]

ignore = []

[tool.ruff.lint.isort]
case-sensitive = true
force-single-line = true
single-line-exclusions = ["collections.abc", "typing"]
lines-after-imports = 2
split-on-trailing-comma = true
known-first-party = ["lalib"]

[tool.ruff.lint.per-file-ignores]

# The "docs/" folder is not a package
"docs/conf.py" = ["INP001"]

# Type hints are not required for tests, `assert`s are normal,
# and (one-line) docstrings may be longer than 72 characters
"tests/*.py" = ["ANN", "S101", "W505"]

[tool.ruff.lint.pycodestyle]
max-doc-length = 72
max-line-length = 99

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-pytest-style]
# Prefer `@pytest.fixture` over `@pytest.fixture()`
fixture-parentheses = false
# Prefer `@pytest.mark.foobar` over `@pytest.mark.foobar()`
mark-parentheses = false
# Prefer `@pytest.mark.parametrize(['param1', 'param2'], [(1, 2), (3, 4)])`
# over `@pytest.mark.parametrize(('param1', 'param2'), ([1, 2], [3, 4]))`
parametrize-names-type = "list"
parametrize-values-row-type = "tuple"
parametrize-values-type = "list"
