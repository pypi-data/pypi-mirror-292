Metadata-Version: 2.1
Name: lalib
Version: 0.1.1
Summary: A Python library to study linear algebra
Home-page: https://github.com/webartifex/lalib
License: MIT
Keywords: python,educational,linear-algebra
Author: Alexander Hess
Author-email: alexander@webartifex.biz
Requires-Python: >=3.9,<4.0
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Project-URL: Documentation, https://lalib.readthedocs.io
Project-URL: Repository, https://github.com/webartifex/lalib
Description-Content-Type: text/markdown

# `lalib` - A Python library to study linear algebra

The goal of this project is to create
    a library written in pure [Python](https://docs.python.org/3/)
    (incl. the [standard library](https://docs.python.org/3/library/index.html))
    and thereby learn about [linear algebra](https://en.wikipedia.org/wiki/Linear_algebra)
    by reading and writing code.


[![PyPI: Package Version](https://img.shields.io/pypi/v/lalib?color=blue)](https://pypi.org/project/lalib/)
[![PyPI: Supported Python Versions](https://img.shields.io/pypi/pyversions/lalib)](https://pypi.org/project/lalib/)
[![PyPI: Number of monthly Downloads](https://img.shields.io/pypi/dm/lalib)](https://pypistats.org/packages/lalib)

[![Documentation: Status](https://readthedocs.org/projects/lalib/badge/?version=latest)](https://lalib.readthedocs.io/en/latest/?badge=latest)
[![Test Suite: Status](https://github.com/webartifex/lalib/actions/workflows/tests.yml/badge.svg)](https://github.com/webartifex/lalib/actions/workflows/tests.yml)
[![Test Coverage: codecov](https://codecov.io/github/webartifex/lalib/graph/badge.svg?token=J4LWOMVP0R)](https://codecov.io/github/webartifex/lalib)
[![Code Style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
[![Type Checking: mypy](https://www.mypy-lang.org/static/mypy_badge.svg)](https://mypy-lang.org/)
[![Code Linting: ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/charliermarsh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)


## Installation

The project is published on [PyPI](https://pypi.org/project/lalib/).
To install it, open any Python prompt and type:

`pip install lalib`

You may want to do so
    within a [virtual environment](https://docs.python.org/3/library/venv.html)
    or a [Jupyter notebook](https://docs.jupyter.org/en/latest/#what-is-a-notebook).


## Contributing & Development

This project is open for any kind of contribution,
    be it by writing code for new features or bugfixes
    or by raising [issues](https://github.com/webartifex/lalib/issues).


### Local Develop Environment

In order to play with the `lalib` codebase,
    you need to set up a develop environment on your own computer.

First, get your own copy of this repository:

`git clone git@github.com:webartifex/lalib.git`

While `lalib` comes without any dependencies
    except core Python and the standard library for the user,
    we assume a couple of mainstream packages be installed
    to ensure code quality during development.
These can be viewed in the [pyproject.toml](pyproject.toml) file
    and are managed with [poetry](https://python-poetry.org/docs/)
    which needs to be installed as well.
[poetry](https://python-poetry.org/docs/) also creates and manages
    [virtual environments](https://docs.python.org/3/tutorial/venv.html).

To replicate the project maintainer's develop environment exactly,
    install the *pinned* dependencies from the [poetry.lock](poetry.lock) file:

`poetry install`


### Testing & Maintenance Tasks

We use [nox](https://nox.thea.codes/en/stable/) to run
    the test suite and other maintenance tasks during development
        in isolated environments.
`nox` is quite similar to [tox](https://tox.readthedocs.io/en/latest/).
It is configured in the [noxfile.py](noxfile.py) file.
Being a generic tool like `poetry`,
    `nox` is assumed to be installed as well and is not a project dependency.

To list all available tasks, called sessions in `nox`, simply run:

`nox --list` or `nox -l`

To execute all default tasks, simply invoke:

`nox`

That includes running the test suite for all supported Python versions.


#### Code Formatting & Linting

We follow [Google's Python Style Guide](https://google.github.io/styleguide/pyguide.html)
    and include [type hints](https://docs.python.org/3/library/typing.html) where possible.

During development,
    `nox -s format` and `nox -s lint` may be helpful.
Both can be speed up by re-using a previously created environment
    with the `-r` flag.

The first task formats all source code files with
    [autoflake](https://pypi.org/project/autoflake/),
    [black](https://pypi.org/project/black/), and
    [isort](https://pypi.org/project/isort/).

The second task lints all source code files with
    [flake8](https://pypi.org/project/flake8/) and
    [mypy](https://pypi.org/project/mypy/).
`flake8` is configured with a couple of plug-ins.

You may want to install the [pre-commit](https://pre-commit.com/) hooks
    that come with the project:

`nox -s pre-commit-install-hooks`

Then, the linting and testing occurs automatically before every commit.


### Branching Strategy

The branches in this repository follow the
    [GitFlow](https://nvie.com/posts/a-successful-git-branching-model/) model.
Feature branches must be rebased onto the "develop" branch *before* being merged.
Whereas after a rebase a simple fast-forward merge is possible,
    all merges are made with explicit and *empty* merge commits.
This ensures that past branches remain visible in the logs,
    for example, with `git log --graph`.

