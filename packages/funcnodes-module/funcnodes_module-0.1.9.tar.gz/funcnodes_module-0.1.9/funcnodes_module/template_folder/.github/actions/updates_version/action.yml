# this is an autogenerated file, do not edit it directly or your changes might be lost.
name: Check and Update Version
description: Check if the current version is the latest on PyPI and update it if it is not.
inputs:
  pypi_token:
    description: "PyPI API token"
    required: true

runs:
  using: "composite"

  steps:
    - name: Install Package
      uses: ./.github/actions/install_package
      with:
        python_version: 3.12

    - name: Get current package version
      shell: bash
      id: get_version
      run: |
        CURRENT_VERSION=$(poetry version --short)
        echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV
        echo "CURRENT_VERSION=${CURRENT_VERSION}"

    - name: Get latest version from PyPI
      shell: bash
      id: get_pypi_version
      run: |
        PACKAGE_NAME=$(poetry version | awk '{print $1}')
        LATEST_VERSION=$(curl -s https://pypi.org/pypi/$PACKAGE_NAME/json | jq -r .info.version)
        echo "LATEST_VERSION=${LATEST_VERSION}" >> $GITHUB_ENV
        echo "LATEST_VERSION=${LATEST_VERSION}"

    - name: Compare versions
      shell: bash
      id: compare_versions
      run: |
        if [ "$CURRENT_VERSION" != "$LATEST_VERSION" ]; then
          echo "should_update=true" >> $GITHUB_OUTPUT
        else
          echo "should_update=false" >> $GITHUB_OUTPUT
        fi

    - name: Publish
      shell: bash
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ inputs.pypi_token }}
      run: |
        echo -n "$POETRY_PYPI_TOKEN_PYPI"|wc -mc
        poetry publish --build

    - name: Check if tag exists
      shell: bash
      id: check_tag
      run: |
        TAG_EXISTS=$(git tag -l "v$CURRENT_VERSION")
        if [ "$TAG_EXISTS" ]; then
          echo "tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "tag_exists=false" >> $GITHUB_OUTPUT
          fi

    - name: Create new tag
      shell: bash
      if: steps.check_tag.outputs.tag_exists == 'false'
      run: |
        git config --local user.name "${GITHUB_ACTOR}"
        git config --local user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        git tag -a v$CURRENT_VERSION -m "Release version $CURRENT_VERSION"
        git push origin v$CURRENT_VERSION
