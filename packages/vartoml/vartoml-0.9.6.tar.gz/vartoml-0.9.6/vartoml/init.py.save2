"""vartoml - Enable variables in a TOML file"""

__version__ = '0.9.5'
__author__ = 'Manfred Lotz <manfred.lotz@posteo.de>'
# __all__ = []

import os
import re
import importlib

from io import TextIOBase
from pathlib import Path
from typing import TextIO, Union, Any




"""
According to the TOML specification (https://toml.io/en/v1.0.0-rc.1)

- naming rules for sections (aka tables) are the same as for keys
- keys may consist of ASCII letters, digits, underscores and dashes


Example:

database = "/var/db/mydb.db"
home_dir = "/home/johndoe"
db-port = 4711
_a = "hey"
-bla = "something"
1ab = true

"""
RE_VAR = re.compile(r"""
             [$][{]
             (
                [a-zA-Z0-9_-]+     # section name
                ([:][a-zA-Z0-9_-]+)+     # variable name
             )
             [}]
""", re.VERBOSE)

class VarToml:
    def __init__(self, which_toml='rtoml') -> None:
        #self.decoder = toml.TomlDecoder()
        self.rtoml = importlib.import_module(which_toml)

    def load(self, toml: Union[str, Path, TextIO]) -> None:
        self.toml = self.rtoml.load(toml)
        self._process(self.toml)

    def loads(self, toml: str) -> None:
        self.toml = self.rtoml.loads(toml)
        print(f'.........{self.toml}')
        self._process(self.toml)
        print(f'<........{self.toml}')

    def show(self):
        return self.toml

    def _var_replace(self, x):
        toml_var = x.groups()[0]
        lst = toml_var.split(':')
        val = self.toml[lst[0]]
        for v in lst[1:]:
            val = val[v]

        return str(val)

    def get(self, *args):
        print(f'{self.toml=}')
        gotten = self.toml
        print(f'>>> : {gotten=}')
        for arg in args:
            gotten = gotten[arg]
            print(f'>>> : {gotten=}')
        print("----------------------------------------")
        print("")
        return gotten

    def _process(self, item: Union[dict, list]) -> None:
        iter_ = None
        if isinstance(item, dict):
            iter_ = item.items()
        elif isinstance(item, list):
            iter_ = enumerate(item)
        for i, val in iter_:
            if isinstance(val, (dict, list)):
                self._process(val)
            elif isinstance(val, str):
                if re.search(RE_VAR, val):
                    r = re.sub(RE_VAR, self._var_replace, val)
                    item[i] = r


