[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "DataSolutions",
        "importPath": "chainalysis.data_solutions",
        "description": "chainalysis.data_solutions",
        "isExtraImport": true,
        "detail": "chainalysis.data_solutions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsClient",
        "importPath": "chainalysis.data_solutions",
        "description": "chainalysis.data_solutions",
        "isExtraImport": true,
        "detail": "chainalysis.data_solutions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsClient",
        "importPath": "chainalysis.data_solutions",
        "description": "chainalysis.data_solutions",
        "isExtraImport": true,
        "detail": "chainalysis.data_solutions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsClient",
        "importPath": "chainalysis.data_solutions",
        "description": "chainalysis.data_solutions",
        "isExtraImport": true,
        "detail": "chainalysis.data_solutions",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "ANALYTICAL_ENDPOINTS",
        "importPath": "chainalysis.constants",
        "description": "chainalysis.constants",
        "isExtraImport": true,
        "detail": "chainalysis.constants",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "importPath": "chainalysis.constants",
        "description": "chainalysis.constants",
        "isExtraImport": true,
        "detail": "chainalysis.constants",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "importPath": "chainalysis.constants",
        "description": "chainalysis.constants",
        "isExtraImport": true,
        "detail": "chainalysis.constants",
        "documentation": {}
    },
    {
        "label": "TRANSACTIONAL_ENDPOINTS",
        "importPath": "chainalysis.constants",
        "description": "chainalysis.constants",
        "isExtraImport": true,
        "detail": "chainalysis.constants",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsAPIException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsSDKException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnhandledException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsSDKException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "ForbiddenException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnhandledException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsAPIException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "ForbiddenException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsAPIException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "InternalServerException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsAPIException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "InternalServerException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnhandledException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsAPIException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsSDKException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "ForbiddenException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "InternalServerException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnhandledException",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "importPath": "chainalysis.util_functions.exceptions",
        "description": "chainalysis.util_functions.exceptions",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "issue_request",
        "importPath": "chainalysis.util_functions.requests",
        "description": "chainalysis.util_functions.requests",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.requests",
        "documentation": {}
    },
    {
        "label": "issue_request",
        "importPath": "chainalysis.util_functions.requests",
        "description": "chainalysis.util_functions.requests",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.requests",
        "documentation": {}
    },
    {
        "label": "get_headers",
        "importPath": "chainalysis.util_functions.requests",
        "description": "chainalysis.util_functions.requests",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.requests",
        "documentation": {}
    },
    {
        "label": "issue_request",
        "importPath": "chainalysis.util_functions.requests",
        "description": "chainalysis.util_functions.requests",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.requests",
        "documentation": {}
    },
    {
        "label": "retry_condition",
        "importPath": "chainalysis.util_functions.requests",
        "description": "chainalysis.util_functions.requests",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.requests",
        "documentation": {}
    },
    {
        "label": "Analytical",
        "importPath": "chainalysis.sql.analytical",
        "description": "chainalysis.sql.analytical",
        "isExtraImport": true,
        "detail": "chainalysis.sql.analytical",
        "documentation": {}
    },
    {
        "label": "Transactional",
        "importPath": "chainalysis.sql.transactional",
        "description": "chainalysis.sql.transactional",
        "isExtraImport": true,
        "detail": "chainalysis.sql.transactional",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Type",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "JSONDecodeError",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "JSONDecodeError",
        "importPath": "json",
        "description": "json",
        "isExtraImport": true,
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "requests",
        "description": "requests",
        "isExtraImport": true,
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "tenacity",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tenacity",
        "description": "tenacity",
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "retry",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "retry_if_exception",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "stop_after_attempt",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "wait_exponential",
        "importPath": "tenacity",
        "description": "tenacity",
        "isExtraImport": true,
        "detail": "tenacity",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "decimal",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "decimal",
        "description": "decimal",
        "detail": "decimal",
        "documentation": {}
    },
    {
        "label": "get_list_type",
        "importPath": "chainalysis.util_functions.check_list_type",
        "description": "chainalysis.util_functions.check_list_type",
        "isExtraImport": true,
        "detail": "chainalysis.util_functions.check_list_type",
        "documentation": {}
    },
    {
        "label": "Stringify",
        "importPath": "chainalysis.utils.stringify",
        "description": "chainalysis.utils.stringify",
        "isExtraImport": true,
        "detail": "chainalysis.utils.stringify",
        "documentation": {}
    },
    {
        "label": "Sql",
        "importPath": "chainalysis.sql.sql",
        "description": "chainalysis.sql.sql",
        "isExtraImport": true,
        "detail": "chainalysis.sql.sql",
        "documentation": {}
    },
    {
        "label": "Utils",
        "importPath": "chainalysis.utils.utils",
        "description": "chainalysis.utils.utils",
        "isExtraImport": true,
        "detail": "chainalysis.utils.utils",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "mock",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "Mock",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "pandas.testing",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas.testing",
        "description": "pandas.testing",
        "detail": "pandas.testing",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "playground.play",
        "description": "playground.play",
        "peekOfCode": "def main():\n    ds = DataSolutions(os.environ.get(\"API_KEY\"))\n    block_numbers = [1, 2, 3]\n    analytical_result = ds.sql.analytical(\n        \"SELECT * from {{chain}}.electrum_observations WHERE block_number in {{block_number}}\",\n        parameters={\n            \"chain\": \"bitcoin\",\n            \"block_number\": ds.utils.stringify.lists(block_numbers),\n        },\n    )",
        "detail": "playground.play",
        "documentation": {}
    },
    {
        "label": "Analytical",
        "kind": 6,
        "importPath": "src.chainalysis.sql.analytical",
        "description": "src.chainalysis.sql.analytical",
        "peekOfCode": "class Analytical:\n    \"\"\"\n    This class provides methods to execute SQL queries on Data Solutions\n    DataBricks tables. It supports fetching results as JSON or a\n    pandas DataFrame, and provides query execution statistics.\n    \"\"\"\n    def __init__(self, api_key: str):\n        \"\"\"\n        Initialize the Analytical class with the provided API key.\n        :param api_key: The API key for accessing the analytical service.",
        "detail": "src.chainalysis.sql.analytical",
        "documentation": {}
    },
    {
        "label": "Sql",
        "kind": 6,
        "importPath": "src.chainalysis.sql.sql",
        "description": "src.chainalysis.sql.sql",
        "peekOfCode": "class Sql:\n    def __init__(self, api_key: str):\n        self.transactional = Transactional(api_key)\n        self.analytical = Analytical(api_key)",
        "detail": "src.chainalysis.sql.sql",
        "documentation": {}
    },
    {
        "label": "Transactional",
        "kind": 6,
        "importPath": "src.chainalysis.sql.transactional",
        "description": "src.chainalysis.sql.transactional",
        "peekOfCode": "class Transactional:\n    \"\"\"\n    This class provides methods to handle transactional queries.\n    It supports fetching results as JSON or pandas DataFrame,\n    and provides query execution statistics.\n    \"\"\"\n    def __init__(self, api_key: str):\n        \"\"\"\n        Initialize the Transactional object with an API key.\n        :param api_key: API key for authenticating requests.",
        "detail": "src.chainalysis.sql.transactional",
        "documentation": {}
    },
    {
        "label": "get_list_type",
        "kind": 2,
        "importPath": "src.chainalysis.util_functions.check_list_type",
        "description": "src.chainalysis.util_functions.check_list_type",
        "peekOfCode": "def get_list_type(_list: List[Any]) -> Type:\n    \"\"\"Return the type of list elements if all are the same type, otherwise raise an error.\"\"\"\n    if not _list:\n        raise ValueError(\"The list is empty and has no element type.\")\n    element_types = {type(item) for item in _list}\n    if len(element_types) > 1:\n        raise BadRequest(\n            f\"The list contains multiple types: {element_types}. Enter a list with only numbers, strings, or bools.\"\n        )\n    return element_types.pop()",
        "detail": "src.chainalysis.util_functions.check_list_type",
        "documentation": {}
    },
    {
        "label": "DataSolutionsSDKException",
        "kind": 6,
        "importPath": "src.chainalysis.util_functions.exceptions",
        "description": "src.chainalysis.util_functions.exceptions",
        "peekOfCode": "class DataSolutionsSDKException(Exception):\n    \"\"\"Base class for SDK exceptions.\"\"\"\n    def __init__(\n        self,\n        message=None,\n        status_code=0,\n    ):\n        super().__init__(message)\n        self.status_code = status_code\n    def get_exception(self):",
        "detail": "src.chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "BadRequest",
        "kind": 6,
        "importPath": "src.chainalysis.util_functions.exceptions",
        "description": "src.chainalysis.util_functions.exceptions",
        "peekOfCode": "class BadRequest(DataSolutionsSDKException):\n    \"\"\"Exception for Bad Request.\"\"\"\n    def __init__(self, message=\"Bad Request\"):\n        super().__init__(\n            message,\n            status_code=400,\n        )\nclass UnauthorizedException(DataSolutionsSDKException):\n    \"\"\"Exception for 401 Unauthorized.\"\"\"\n    def __init__(self, message=\"Unauthorized. Check your API Key.\"):",
        "detail": "src.chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnauthorizedException",
        "kind": 6,
        "importPath": "src.chainalysis.util_functions.exceptions",
        "description": "src.chainalysis.util_functions.exceptions",
        "peekOfCode": "class UnauthorizedException(DataSolutionsSDKException):\n    \"\"\"Exception for 401 Unauthorized.\"\"\"\n    def __init__(self, message=\"Unauthorized. Check your API Key.\"):\n        super().__init__(\n            message,\n            status_code=401,\n        )\nclass ForbiddenException(DataSolutionsSDKException):\n    \"\"\"Exception for 403 Forbidden.\"\"\"\n    def __init__(",
        "detail": "src.chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "ForbiddenException",
        "kind": 6,
        "importPath": "src.chainalysis.util_functions.exceptions",
        "description": "src.chainalysis.util_functions.exceptions",
        "peekOfCode": "class ForbiddenException(DataSolutionsSDKException):\n    \"\"\"Exception for 403 Forbidden.\"\"\"\n    def __init__(\n        self,\n        message=\"Forbidden. Contact Data Solutions if you believe you should have access to this endpoint/data.\",\n    ):\n        super().__init__(\n            message,\n            status_code=403,\n        )",
        "detail": "src.chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "NotFoundException",
        "kind": 6,
        "importPath": "src.chainalysis.util_functions.exceptions",
        "description": "src.chainalysis.util_functions.exceptions",
        "peekOfCode": "class NotFoundException(DataSolutionsSDKException):\n    \"\"\"Exception for 404 Not Found.\"\"\"\n    def __init__(self, message=\"Not Found. Is your query correct?\"):\n        super().__init__(\n            message,\n            status_code=404,\n        )\nclass InternalServerException(DataSolutionsSDKException):\n    \"\"\"Exception for 500 Internal Server Error.\"\"\"\n    def __init__(self, message=\"Internal Server Error\"):",
        "detail": "src.chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "InternalServerException",
        "kind": 6,
        "importPath": "src.chainalysis.util_functions.exceptions",
        "description": "src.chainalysis.util_functions.exceptions",
        "peekOfCode": "class InternalServerException(DataSolutionsSDKException):\n    \"\"\"Exception for 500 Internal Server Error.\"\"\"\n    def __init__(self, message=\"Internal Server Error\"):\n        super().__init__(\n            message,\n            status_code=500,\n        )\nclass DataSolutionsAPIException(DataSolutionsSDKException):\n    \"\"\"Exception for the API returning an unexpected response.\"\"\"\n    def __init__(self, message=\"Unexpected response from the API\"):",
        "detail": "src.chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "DataSolutionsAPIException",
        "kind": 6,
        "importPath": "src.chainalysis.util_functions.exceptions",
        "description": "src.chainalysis.util_functions.exceptions",
        "peekOfCode": "class DataSolutionsAPIException(DataSolutionsSDKException):\n    \"\"\"Exception for the API returning an unexpected response.\"\"\"\n    def __init__(self, message=\"Unexpected response from the API\"):\n        super().__init__(\n            message,\n            status_code=0,\n        )\nclass UnhandledException(DataSolutionsSDKException):\n    \"\"\"Unhandled exception.\"\"\"\n    def __init__(",
        "detail": "src.chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "UnhandledException",
        "kind": 6,
        "importPath": "src.chainalysis.util_functions.exceptions",
        "description": "src.chainalysis.util_functions.exceptions",
        "peekOfCode": "class UnhandledException(DataSolutionsSDKException):\n    \"\"\"Unhandled exception.\"\"\"\n    def __init__(\n        self,\n        message=\"An unhandled exception occured. Please contact the Data Solutions Team.\",\n        details=\"\",\n    ):\n        super().__init__((message, details))",
        "detail": "src.chainalysis.util_functions.exceptions",
        "documentation": {}
    },
    {
        "label": "get_headers",
        "kind": 2,
        "importPath": "src.chainalysis.util_functions.requests",
        "description": "src.chainalysis.util_functions.requests",
        "peekOfCode": "def get_headers(api_key: str) -> dict:\n    \"\"\"\n    Generate headers for an HTTP request.\n    This function creates a dictionary of headers required for an HTTP request,\n    including the API key for authorization and JSON content-type headers which\n    indicate what sort of information will be sent with the request.\n    :param api_key: The API key used for authenticating the request.\n    :return: A dictionary containing the headers for the HTTP request.\n    \"\"\"\n    return {",
        "detail": "src.chainalysis.util_functions.requests",
        "documentation": {}
    },
    {
        "label": "retry_condition",
        "kind": 2,
        "importPath": "src.chainalysis.util_functions.requests",
        "description": "src.chainalysis.util_functions.requests",
        "peekOfCode": "def retry_condition(exception):\n    if isinstance(exception, (BadRequest, UnauthorizedException, ForbiddenException)):\n        return False\n    return True\n@retry(\n    wait=wait_exponential(multiplier=1, min=4, max=10),\n    retry=retry_if_exception(retry_condition),\n    stop=stop_after_attempt(10),\n)\ndef issue_request(",
        "detail": "src.chainalysis.util_functions.requests",
        "documentation": {}
    },
    {
        "label": "issue_request",
        "kind": 2,
        "importPath": "src.chainalysis.util_functions.requests",
        "description": "src.chainalysis.util_functions.requests",
        "peekOfCode": "def issue_request(\n    url: str,\n    api_key: str,\n    params: dict = {},\n    body: dict = {},\n    method: str = \"GET\",\n) -> dict:\n    \"\"\"\n    Helper method to issue a request to the Data Solutions API.\n    This method will automatically retry the request, and handle",
        "detail": "src.chainalysis.util_functions.requests",
        "documentation": {}
    },
    {
        "label": "Stringify",
        "kind": 6,
        "importPath": "src.chainalysis.utils.stringify",
        "description": "src.chainalysis.utils.stringify",
        "peekOfCode": "class Stringify:\n    \"\"\"\n    This class contains functions to transform python objects\n    into formatted string params so they can be used to query\n    Data Solutions' databases without needing to be transformed\n    manually by the user.\n    \"\"\"\n    def lists(self, _list: list) -> str:\n        \"\"\"\n        Convert a list to a formatted string param.",
        "detail": "src.chainalysis.utils.stringify",
        "documentation": {}
    },
    {
        "label": "Utils",
        "kind": 6,
        "importPath": "src.chainalysis.utils.utils",
        "description": "src.chainalysis.utils.utils",
        "peekOfCode": "class Utils:\n    \"\"\"\n    This class contains util/helper functions for users\n    of the SDK.\n    \"\"\"\n    def __init__(self):\n        self.stringify = Stringify()",
        "detail": "src.chainalysis.utils.utils",
        "documentation": {}
    },
    {
        "label": "BASE_URL",
        "kind": 5,
        "importPath": "src.chainalysis.constants",
        "description": "src.chainalysis.constants",
        "peekOfCode": "BASE_URL = {\n    \"base_url\": \"https://api.transpose.io\",\n}\nANALYTICAL_ENDPOINTS = {\n    \"async_query_execution\": \"sql/analytical/async\",\n    \"async_query_status\": \"sql/analytical/status\",\n}\nTRANSACTIONAL_ENDPOINTS = {\n    \"query_execution\": \"sql/transactional\",\n}",
        "detail": "src.chainalysis.constants",
        "documentation": {}
    },
    {
        "label": "ANALYTICAL_ENDPOINTS",
        "kind": 5,
        "importPath": "src.chainalysis.constants",
        "description": "src.chainalysis.constants",
        "peekOfCode": "ANALYTICAL_ENDPOINTS = {\n    \"async_query_execution\": \"sql/analytical/async\",\n    \"async_query_status\": \"sql/analytical/status\",\n}\nTRANSACTIONAL_ENDPOINTS = {\n    \"query_execution\": \"sql/transactional\",\n}",
        "detail": "src.chainalysis.constants",
        "documentation": {}
    },
    {
        "label": "TRANSACTIONAL_ENDPOINTS",
        "kind": 5,
        "importPath": "src.chainalysis.constants",
        "description": "src.chainalysis.constants",
        "peekOfCode": "TRANSACTIONAL_ENDPOINTS = {\n    \"query_execution\": \"sql/transactional\",\n}",
        "detail": "src.chainalysis.constants",
        "documentation": {}
    },
    {
        "label": "DataSolutionsClient",
        "kind": 6,
        "importPath": "src.chainalysis.data_solutions",
        "description": "src.chainalysis.data_solutions",
        "peekOfCode": "class DataSolutionsClient:\n    \"\"\"\n    This class provides SDK functions for users to query\n    Data Solutions databases.\n    The Analytical class queries the Data Solutions Databricks table.\n    The Transactional class queries the Data Solutions Postgres table.\n    \"\"\"\n    def __init__(\n        self,\n        api_key: str,",
        "detail": "src.chainalysis.data_solutions",
        "documentation": {}
    },
    {
        "label": "MockedResponse",
        "kind": 6,
        "importPath": "src.test._requests.tests",
        "description": "src.test._requests.tests",
        "peekOfCode": "class MockedResponse:\n    def __init__(self, status_code, json_data):\n        self.status_code = status_code\n        self._json_data = json_data\n    def json(self):\n        return self._json_data\n    @property\n    def ok(self):\n        return self.status_code < 400\nclass MockedResponseJsonDecodeError:",
        "detail": "src.test._requests.tests",
        "documentation": {}
    },
    {
        "label": "MockedResponseJsonDecodeError",
        "kind": 6,
        "importPath": "src.test._requests.tests",
        "description": "src.test._requests.tests",
        "peekOfCode": "class MockedResponseJsonDecodeError:\n    def __init__(self, status_code, json_data):\n        self.status_code = status_code\n        self._json_data = json_data\n    def json(self):\n        raise JSONDecodeError(\"\", \"\", 1)\n    @property\n    def ok(self):\n        return self.status_code < 400\nclass MockedResponseErrorWithJsonDecoded:",
        "detail": "src.test._requests.tests",
        "documentation": {}
    },
    {
        "label": "MockedResponseErrorWithJsonDecoded",
        "kind": 6,
        "importPath": "src.test._requests.tests",
        "description": "src.test._requests.tests",
        "peekOfCode": "class MockedResponseErrorWithJsonDecoded:\n    def __init__(self, status_code, json_data):\n        self.status_code = status_code\n        self._json_data = json_data\n    def json(self):\n        return self._json_data\n    @property\n    def ok(self):\n        return self.status_code < 400\nclass RequestsTests(unittest.TestCase):",
        "detail": "src.test._requests.tests",
        "documentation": {}
    },
    {
        "label": "RequestsTests",
        "kind": 6,
        "importPath": "src.test._requests.tests",
        "description": "src.test._requests.tests",
        "peekOfCode": "class RequestsTests(unittest.TestCase):\n    @mock.patch(\"chainalysis.util_functions.requests.request\")\n    def test_successful_query(self, mock_request: mock.Mock):\n        mock_request.return_value = MockedResponse(\n            200,\n            mocked_successful_json,\n        )\n        response = issue_request(\n            url=\"success\",\n            api_key=\"dummy_api_key\",",
        "detail": "src.test._requests.tests",
        "documentation": {}
    },
    {
        "label": "mocked_successful_json",
        "kind": 5,
        "importPath": "src.test._requests.tests",
        "description": "src.test._requests.tests",
        "peekOfCode": "mocked_successful_json = {\n    \"status\": \"success\",\n    \"stats\": {\"count\": 1, \"size\": 657, \"time\": 1, \"truncated\": \"false\"},\n    \"results\": [\n        {\n            \"block_number\": 142572,\n            \"block_hash\": \"000000000000057d13a731f556c24a1318bcbb4df7d537ef07c8c813c0dc1b37\",\n            \"timestamp\": \"2011-08-25T22:07:41Z\",\n            \"median_timestamp\": \"2011-08-25T21:28:01Z\",\n            \"parent_blockhash\": \"000000000000048edbb6c004b3fce541b5004fee9729a8b1710cb488a974d959\",",
        "detail": "src.test._requests.tests",
        "documentation": {}
    },
    {
        "label": "AnalyticalTests",
        "kind": 6,
        "importPath": "src.test.analytical.tests",
        "description": "src.test.analytical.tests",
        "peekOfCode": "class AnalyticalTests(unittest.TestCase):\n    @patch(\"chainalysis.sql.analytical.issue_request\")\n    def test_successful_query(self, mocked_issue_request: Mock):\n        ds = DataSolutionsClient(\n            api_key=\"\",\n        )\n        first_successful_response = mocked_async_query_id_response\n        second_successful_response = mocked_async_query_response_1\n        third_successful_response = mocked_async_query_response_2\n        mocked_issue_request.side_effect = (",
        "detail": "src.test.analytical.tests",
        "documentation": {}
    },
    {
        "label": "mocked_async_query_id_response",
        "kind": 5,
        "importPath": "src.test.analytical.tests",
        "description": "src.test.analytical.tests",
        "peekOfCode": "mocked_async_query_id_response = {\n    \"status\": \"pending\",\n    \"query_id\": \"01ef5a51-0e7c-13d6-9383-6412bf7b03cc\",\n}\nmocked_async_query_id_response_no_query_id = {\n    \"status\": \"pending\",\n}\nmocked_async_query_response_1 = {\n    \"status\": \"pending\",\n    \"message\": \"Query is in a pending state\",",
        "detail": "src.test.analytical.tests",
        "documentation": {}
    },
    {
        "label": "mocked_async_query_id_response_no_query_id",
        "kind": 5,
        "importPath": "src.test.analytical.tests",
        "description": "src.test.analytical.tests",
        "peekOfCode": "mocked_async_query_id_response_no_query_id = {\n    \"status\": \"pending\",\n}\nmocked_async_query_response_1 = {\n    \"status\": \"pending\",\n    \"message\": \"Query is in a pending state\",\n}\nmocked_async_query_response_2 = {\n    \"status\": \"success\",\n    \"results\": [{\"chain_id\": \"bip122:000000000019d6689c085ae165831e93\"}],",
        "detail": "src.test.analytical.tests",
        "documentation": {}
    },
    {
        "label": "mocked_async_query_response_1",
        "kind": 5,
        "importPath": "src.test.analytical.tests",
        "description": "src.test.analytical.tests",
        "peekOfCode": "mocked_async_query_response_1 = {\n    \"status\": \"pending\",\n    \"message\": \"Query is in a pending state\",\n}\nmocked_async_query_response_2 = {\n    \"status\": \"success\",\n    \"results\": [{\"chain_id\": \"bip122:000000000019d6689c085ae165831e93\"}],\n    \"stats\": {\n        \"truncated\": \"false\",\n        \"time\": 2317.030191421509,",
        "detail": "src.test.analytical.tests",
        "documentation": {}
    },
    {
        "label": "mocked_async_query_response_2",
        "kind": 5,
        "importPath": "src.test.analytical.tests",
        "description": "src.test.analytical.tests",
        "peekOfCode": "mocked_async_query_response_2 = {\n    \"status\": \"success\",\n    \"results\": [{\"chain_id\": \"bip122:000000000019d6689c085ae165831e93\"}],\n    \"stats\": {\n        \"truncated\": \"false\",\n        \"time\": 2317.030191421509,\n        \"size\": 45,\n        \"total_size\": 45,\n        \"count\": 1,\n        \"starting_row_offset\": 0,",
        "detail": "src.test.analytical.tests",
        "documentation": {}
    },
    {
        "label": "mocked_async_query_response",
        "kind": 5,
        "importPath": "src.test.analytical.tests",
        "description": "src.test.analytical.tests",
        "peekOfCode": "mocked_async_query_response = {\n    \"status\": \"success\",\n    \"results\": [{\"chain_id\": \"bip122:000000000019d6689c085ae165831e93\"}],\n    \"stats\": {\n        \"truncated\": \"false\",\n        \"time\": 2317.030191421509,\n        \"size\": 45,\n        \"total_size\": 45,\n        \"count\": 1,\n        \"starting_row_offset\": 0,",
        "detail": "src.test.analytical.tests",
        "documentation": {}
    },
    {
        "label": "mocked_async_query_response_no_next_url",
        "kind": 5,
        "importPath": "src.test.analytical.tests",
        "description": "src.test.analytical.tests",
        "peekOfCode": "mocked_async_query_response_no_next_url = {\n    \"status\": \"success\",\n    \"results\": [{\"chain_id\": \"bip122:000000000019d6689c085ae165831e93\"}],\n    \"stats\": {\n        \"truncated\": \"false\",\n        \"time\": 2317.030191421509,\n        \"size\": 45,\n        \"total_size\": 45,\n        \"count\": 1,\n        \"starting_row_offset\": 0,",
        "detail": "src.test.analytical.tests",
        "documentation": {}
    },
    {
        "label": "mocked_async_query_error_status",
        "kind": 5,
        "importPath": "src.test.analytical.tests",
        "description": "src.test.analytical.tests",
        "peekOfCode": "mocked_async_query_error_status = {\n    \"status\": \"error\",\n    \"details\": \"error\",\n    \"message\": \"error\",\n}\nclass AnalyticalTests(unittest.TestCase):\n    @patch(\"chainalysis.sql.analytical.issue_request\")\n    def test_successful_query(self, mocked_issue_request: Mock):\n        ds = DataSolutionsClient(\n            api_key=\"\",",
        "detail": "src.test.analytical.tests",
        "documentation": {}
    },
    {
        "label": "TransactionalTests",
        "kind": 6,
        "importPath": "src.test.transactional.tests",
        "description": "src.test.transactional.tests",
        "peekOfCode": "class TransactionalTests(unittest.TestCase):\n    \"\"\"\n    This test suite ensures that the Transactional class runs appropriatel\n    \"\"\"\n    @patch(\"chainalysis.sql.transactional.issue_request\")\n    def test_successful_query(self, mocked_issue_request: Mock):\n        ds = DataSolutionsClient(\n            api_key=\"\",\n        )\n        mocked_issue_request.return_value = mocked_result",
        "detail": "src.test.transactional.tests",
        "documentation": {}
    },
    {
        "label": "mocked_result",
        "kind": 5,
        "importPath": "src.test.transactional.tests",
        "description": "src.test.transactional.tests",
        "peekOfCode": "mocked_result = {\n    \"status\": \"success\",\n    \"stats\": {\"count\": 1, \"size\": 657, \"time\": 2, \"truncated\": \"false\"},\n    \"results\": [\n        {\n            \"block_number\": 142572,\n            \"block_hash\": \"000000000000057d13a731f556c24a1318bcbb4df7d537ef07c8c813c0dc1b37\",\n            \"timestamp\": \"2011-08-25T22:07:41Z\",\n            \"median_timestamp\": \"2011-08-25T21:28:01Z\",\n            \"parent_blockhash\": \"000000000000048edbb6c004b3fce541b5004fee9729a8b1710cb488a974d959\",",
        "detail": "src.test.transactional.tests",
        "documentation": {}
    },
    {
        "label": "utils",
        "kind": 6,
        "importPath": "src.test.utils.tests",
        "description": "src.test.utils.tests",
        "peekOfCode": "class utils(unittest.TestCase):\n    \"\"\"\n    Unit tests for various utility functions in the DataSolutions API.\n    This test suite covers stringifying lists and datetime objects,\n    as well as validating the correct execution of SQL queries using these utilities.\n    \"\"\"\n    def test_list_stringify(self):\n        \"\"\"\n        Test that a list of integers is correctly stringified.\n        Verifies that a list of integers is converted to a string format",
        "detail": "src.test.utils.tests",
        "documentation": {}
    },
    {
        "label": "ds",
        "kind": 5,
        "importPath": "src.test.utils.tests",
        "description": "src.test.utils.tests",
        "peekOfCode": "ds = DataSolutionsClient(\n    api_key=\"\",\n)\nclass utils(unittest.TestCase):\n    \"\"\"\n    Unit tests for various utility functions in the DataSolutions API.\n    This test suite covers stringifying lists and datetime objects,\n    as well as validating the correct execution of SQL queries using these utilities.\n    \"\"\"\n    def test_list_stringify(self):",
        "detail": "src.test.utils.tests",
        "documentation": {}
    }
]