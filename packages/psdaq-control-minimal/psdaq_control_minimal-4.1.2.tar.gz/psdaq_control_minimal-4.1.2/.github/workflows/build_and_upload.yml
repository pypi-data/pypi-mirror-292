name: build and upload

on:
  push:
  pull_request:

jobs:
  conda-build-and-upload:
    defaults:
      run:
        shell: bash --login -eo pipefail {0}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: generate package
      run: ./generate_minimal_package.sh

    - name: download miniconda
      run: |
        wget -q https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
        bash ~/miniconda.sh -b -p ~/miniconda
        echo "source ~/miniconda/etc/profile.d/conda.sh" >> ~/.bash_profile
        echo "conda activate base" >> ~/.bash_profile
        echo "Conda version is $(conda --version)"

    - name: configure miniconda
      run: |
        conda config --set always_yes yes --set changeps1 no
        conda config --set channel_priority strict
        conda config --add channels pcds-tag
        conda config --add channels conda-forge
        conda config --remove channels defaults

    - name: install build tools
      run: |
        conda install -q mamba
        mamba install -q anaconda-client boa setuptools-scm
        echo "Running using python $(which python)"
        echo "Running using mamba $(mamba info -a)"

    - name: Configure setuptools-scm
      run: python -m setuptools_scm

    - name: build conda recipe
      run: |
        mkdir "${HOME}/conda-bld"
        conda mambabuild conda-recipe \
          --quiet \
          --output-folder "${HOME}/conda-bld" \
          --no-anaconda-upload \
          --keep-old-work

    - name: Upload the built package as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: psdaq-control-minimal conda package
        path: ~/conda-bld
        if-no-files-found: error

    - name: pcds-dev deployment
      if: github.event.pull_request.merged == true && github.ref == 'refs/heads/master'
      env:
        ANACONDA_API_TOKEN: ${{ secrets.CONDA_UPLOAD_TOKEN_DEV }}
      run: anaconda upload "${HOME}"/conda-bld/noarch/*.tar.bz2

    - name: pcds-tag deployment
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      env:
        ANACONDA_API_TOKEN: ${{ secrets.CONDA_UPLOAD_TOKEN_TAG }}
      run: anaconda upload "${HOME}"/conda-bld/noarch/*.tar.bz2

  pypi-build-and-upload:
    defaults:
      run:
        shell: bash --login -eo pipefail {0}
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: generate package
      run: ./generate_minimal_package.sh

    - name: Upgrade pip
      run: |
        pip install --upgrade pip

    - name: Build wheel and source distribution
      run: |
        python -m pip install twine build
        export SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct)
        echo "Source date epoch set to ${SOURCE_DATE_EPOCH} for reproducible build"
        # See: https://github.com/python/cpython/pull/5200
        # And: https://reproducible-builds.org/docs/source-date-epoch/
        # (I learned about this from DLS)
        python -m build --sdist --wheel --outdir ./dist

    - name: Check the source distribution
      run: |
        python -m venv test-source-env
        source test-source-env/bin/activate

        python -m pip install ./dist/*.gz
        python -c "import psdaq.control.BlueskyScan; print('Imported psdaq.control.BlueskyScan successfully')"

    - name: Upload the package as an artifact
      if: ${{ always() }}
      uses: actions/upload-artifact@v3
      with:
        name: psdaq-control-minimal pypi package
        path: dist
        if-no-files-found: error

    - name: PyPI deployment
      if: github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        if [ -z "$TWINE_PASSWORD" ]; then
           echo "# No PYPI_TOKEN secret in job!" | tee -a "$GITHUB_STEP_SUMMARY"
           exit 1
        fi
        twine upload --verbose dist/*
