# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..messages import connectivity_pb2 as messages_dot_connectivity__pb2
from ..messages import control_authority_pb2 as messages_dot_control__authority__pb2
from ..messages import mission_log_pb2 as messages_dot_mission__log__pb2
from ..messages import robot_control_pb2 as messages_dot_robot__control__pb2
from ..messages import robot_state_pb2 as messages_dot_robot__state__pb2
from ..messages import video_pb2 as messages_dot_video__pb2
from ..messages import web_pb2 as messages_dot_web__pb2


class WebInterfaceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RobotConnectivity = channel.unary_stream(
                '/com.cognite.robotics.WebInterface/RobotConnectivity',
                request_serializer=messages_dot_connectivity__pb2.RobotConnectionRequest.SerializeToString,
                response_deserializer=messages_dot_connectivity__pb2.RobotConnectionResponse.FromString,
                )
        self.RobotControl = channel.unary_unary(
                '/com.cognite.robotics.WebInterface/RobotControl',
                request_serializer=messages_dot_web__pb2.ControlRequest.SerializeToString,
                response_deserializer=messages_dot_robot__control__pb2.ControlResponse.FromString,
                )
        self.RobotStatus = channel.unary_stream(
                '/com.cognite.robotics.WebInterface/RobotStatus',
                request_serializer=messages_dot_web__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=messages_dot_robot__state__pb2.RobotStateMessage.FromString,
                )
        self.MissionLog = channel.unary_stream(
                '/com.cognite.robotics.WebInterface/MissionLog',
                request_serializer=messages_dot_web__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=messages_dot_mission__log__pb2.MissionLogMessage.FromString,
                )
        self.ControlAuthority = channel.unary_unary(
                '/com.cognite.robotics.WebInterface/ControlAuthority',
                request_serializer=messages_dot_control__authority__pb2.ControlAuthorityRequest.SerializeToString,
                response_deserializer=messages_dot_control__authority__pb2.ControlAuthorityResponse.FromString,
                )
        self.WhoHasControlAuthority = channel.unary_stream(
                '/com.cognite.robotics.WebInterface/WhoHasControlAuthority',
                request_serializer=messages_dot_web__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=messages_dot_control__authority__pb2.WhoHasControlAuthorityMessage.FromString,
                )
        self.VideoSignaling = channel.unary_unary(
                '/com.cognite.robotics.WebInterface/VideoSignaling',
                request_serializer=messages_dot_video__pb2.VideoRequest.SerializeToString,
                response_deserializer=messages_dot_video__pb2.VideoResponse.FromString,
                )


class WebInterfaceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RobotConnectivity(self, request, context):
        """
        RobotConnectivity streams the connection status of robots available to the caller, determined
        by the project_id and data_set_ids from the token. The user requires read access to a specific
        robot data set id in order to receive its connection status within the returned list of active robots.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RobotControl(self, request, context):
        """
        RobotControl is a unary RPC for web clients to send commands to robots.
        Due to the lack of client-side streaming support in gRPC-web, unary RPC commands are sent
        to the WebInterface server, which then forwards them to the robot via an existing long-lived
        RobotControl stream with the RobotInterface service.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RobotStatus(self, request, context):
        """
        RobotStatus serves multiple purposes:
        1. Maintaining the connection robot <-> cloud during inactive periods.
        2. Allowing robot discovery for cloud-connected applications (providing basic robot status information).
        3. Measuring connection latency via RobotStateResponse.
        4. Logging the RobotStateReport during missions, even when the robot is not connected to the cloud.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MissionLog(self, request, context):
        """
        MissionLog is the streaming mechanism for logging a robot's mission events.
        MissionLogMessages should be sent at least once, and they are fire-and-forget, not requiring
        any acknowledgement.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ControlAuthority(self, request, context):
        """
        ControlAuthority allows users to take or release control over a robot. A user needs to have control
        authority in order to send any commands to it. Users can only take control of robots they have access to.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WhoHasControlAuthority(self, request, context):
        """/ WhoHasControlAuthority is a server-side stream that provide the call which user currently has control authority.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VideoSignaling(self, request, context):
        """
        VideoSignaling is the initial bootstrapping process enabling a call between peers.
        Both peers must exchange their `session description`, even if only one is sending media and the other is
        subscribing to it. The `session description` sets up the WebRTC Peer Connection, which manages
        the real-time communication between peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WebInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RobotConnectivity': grpc.unary_stream_rpc_method_handler(
                    servicer.RobotConnectivity,
                    request_deserializer=messages_dot_connectivity__pb2.RobotConnectionRequest.FromString,
                    response_serializer=messages_dot_connectivity__pb2.RobotConnectionResponse.SerializeToString,
            ),
            'RobotControl': grpc.unary_unary_rpc_method_handler(
                    servicer.RobotControl,
                    request_deserializer=messages_dot_web__pb2.ControlRequest.FromString,
                    response_serializer=messages_dot_robot__control__pb2.ControlResponse.SerializeToString,
            ),
            'RobotStatus': grpc.unary_stream_rpc_method_handler(
                    servicer.RobotStatus,
                    request_deserializer=messages_dot_web__pb2.SubscribeRequest.FromString,
                    response_serializer=messages_dot_robot__state__pb2.RobotStateMessage.SerializeToString,
            ),
            'MissionLog': grpc.unary_stream_rpc_method_handler(
                    servicer.MissionLog,
                    request_deserializer=messages_dot_web__pb2.SubscribeRequest.FromString,
                    response_serializer=messages_dot_mission__log__pb2.MissionLogMessage.SerializeToString,
            ),
            'ControlAuthority': grpc.unary_unary_rpc_method_handler(
                    servicer.ControlAuthority,
                    request_deserializer=messages_dot_control__authority__pb2.ControlAuthorityRequest.FromString,
                    response_serializer=messages_dot_control__authority__pb2.ControlAuthorityResponse.SerializeToString,
            ),
            'WhoHasControlAuthority': grpc.unary_stream_rpc_method_handler(
                    servicer.WhoHasControlAuthority,
                    request_deserializer=messages_dot_web__pb2.SubscribeRequest.FromString,
                    response_serializer=messages_dot_control__authority__pb2.WhoHasControlAuthorityMessage.SerializeToString,
            ),
            'VideoSignaling': grpc.unary_unary_rpc_method_handler(
                    servicer.VideoSignaling,
                    request_deserializer=messages_dot_video__pb2.VideoRequest.FromString,
                    response_serializer=messages_dot_video__pb2.VideoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.cognite.robotics.WebInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WebInterface(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RobotConnectivity(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.cognite.robotics.WebInterface/RobotConnectivity',
            messages_dot_connectivity__pb2.RobotConnectionRequest.SerializeToString,
            messages_dot_connectivity__pb2.RobotConnectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RobotControl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.cognite.robotics.WebInterface/RobotControl',
            messages_dot_web__pb2.ControlRequest.SerializeToString,
            messages_dot_robot__control__pb2.ControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RobotStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.cognite.robotics.WebInterface/RobotStatus',
            messages_dot_web__pb2.SubscribeRequest.SerializeToString,
            messages_dot_robot__state__pb2.RobotStateMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MissionLog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.cognite.robotics.WebInterface/MissionLog',
            messages_dot_web__pb2.SubscribeRequest.SerializeToString,
            messages_dot_mission__log__pb2.MissionLogMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ControlAuthority(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.cognite.robotics.WebInterface/ControlAuthority',
            messages_dot_control__authority__pb2.ControlAuthorityRequest.SerializeToString,
            messages_dot_control__authority__pb2.ControlAuthorityResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WhoHasControlAuthority(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/com.cognite.robotics.WebInterface/WhoHasControlAuthority',
            messages_dot_web__pb2.SubscribeRequest.SerializeToString,
            messages_dot_control__authority__pb2.WhoHasControlAuthorityMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VideoSignaling(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.cognite.robotics.WebInterface/VideoSignaling',
            messages_dot_video__pb2.VideoRequest.SerializeToString,
            messages_dot_video__pb2.VideoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
