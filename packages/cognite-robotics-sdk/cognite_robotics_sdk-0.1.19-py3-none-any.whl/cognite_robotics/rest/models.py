# generated by datamodel-codegen:
#   filename:  robotics_local.yml

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from cognite_robotics.rest.base_model import RoboticsBaseModel
from pydantic import Extra, Field


class RobotCapability(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='RobotCapability name',
        example='ptz',
        max_length=255,
        min_length=1,
    )
    external_id: str = Field(
        ...,
        alias='externalId',
        description='RobotCapability external id. Unique for the resource.',
        example='ptz',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    method: str = Field(
        ...,
        description='RobotCapability method, must be unique. The method is used to call the right functionality on the robot.',
        example='ptz',
        max_length=255,
        min_length=1,
    )
    description: Optional[str] = Field(
        None,
        description='Description of the RobotCapability.',
        example='Pan, tilt, zoom camera for visual image capture',
    )
    input_schema: Any = Field(
        ...,
        alias='inputSchema',
        description='Schema that defines what inputs are needed for the RobotCapability. The input are values that configure the RobotCapability, e.g pan, tilt and zoom values.',
        example='{\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "id": "robotics/schemas/0.1.0/capabilities/ptz",\n        "title": "PTZ camera capability input",\n        "type": "object",\n        "properties": {\n            "method": {\n                "type": "string"\n            },\n            "parameters": {\n                "type": "object",\n                "properties": {\n                    "tilt": {\n                        "type": "number",\n                        "minimum": -90.0,\n                        "maximum": 90.0\n                    },\n                    "pan": {\n                        "type": "number",\n                        "minimum": -180.0,\n                        "maximum": 180.0\n                    },\n                    "zoom": {\n                        "type": "number",\n                        "minimum": 0.0,\n                        "maximum": 100.0\n                    }\n                },\n                "required": [\n                    "tilt",\n                    "pan",\n                    "zoom"\n                ]\n            }\n        },\n        "required": [\n            "method",\n            "parameters"\n        ],\n        "additionalProperties": false\n    }',
    )
    data_handling_schema: Any = Field(
        ...,
        alias='dataHandlingSchema',
        description='Schema that defines how the data from a RobotCapability should be handled, including upload instructions.',
        example='{\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "id": "robotics/schemas/0.1.0/data_handling/ptz",\n        "type": "object",\n        "properties": {\n            "uploadInstructions": {\n                "type": "object",\n                "properties": {\n                    "image": {\n                        "type": "object",\n                        "properties": {\n                            "method": {\n                                "const": "uploadFile"\n                            },\n                            "parameters": {\n                                "type": "object",\n                                "properties": {\n                                    "filenamePrefix": {\n                                        "type": "string"\n                                    }\n                                },\n                                "required": [\n                                    "filenamePrefix"\n                                ]\n                            }\n                        },\n                        "required": [\n                            "method",\n                            "parameters"\n                        ],\n                        "additionalProperties": false\n                    }\n                },\n                "additionalProperties": false\n            }\n        },\n        "required": [\n            "uploadInstructions"\n        ]\n    }',
    )


class DbDataPostprocessing(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(..., description='DataPostprocessing name')
    external_id: str = Field(
        ...,
        alias='externalId',
        description='DataPostprocessing external id. Unique for the resource.',
    )
    method: str = Field(
        ...,
        description='DataPostprocessing method. The method is used to call the right functionality on the robot.',
    )
    description: Optional[str] = Field(
        None, description='Description of the data_postprocessing.'
    )
    input_schema: Any = Field(
        ...,
        alias='inputSchema',
        description='Schema that defines what inputs are needed for the data_postprocessing. The input are values that configure the data postprocessing, e.g max and min values for a gauge.',
    )


class ExternalId(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )


class CreateAction(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    external_id: Optional[str] = Field(
        None,
        alias='externalId',
        description='Action external id. Must be unique for the resource type. Will be set to a random value if not set in the request.',
        example='gaugeReading',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the action.',
        example='Action name',
        max_length=255,
        min_length=1,
    )
    robot_capability_external_id: str = Field(
        ...,
        alias='robotCapabilityExternalId',
        description='Id of the robot capability the action is created from.',
        example='ptz',
    )
    robot_capability_input: str = Field(
        ...,
        alias='robotCapabilityInput',
        description='Input to the robot capability. The input are values that configure the action, e.g pan, tilt and zoom values. The format of the input is defined by the input_schema of the robot capability.    #[schemars(example = "example_input")]',
        example='{\n        "method": "ptz",\n        "parameters": {\n            "pan": 90.0,\n            "tilt": 50.5,\n            "zoom": 1.0\n        }\n    }',
    )
    data_handling_input: str = Field(
        ...,
        alias='dataHandlingInput',
        description='Input for data handling. Data handling includes instructions on how to parse data and upload instructions.',
        example='{\n        "uploadInfo": {\n            "image": {.\n                "method": "uploadFile",\n                "parameters": {\n                    "filenamePrefix": "ptz"\n                }\n            }\n        }\n    }',
    )
    data_postprocessing_input: Optional[str] = Field(
        'null',
        alias='dataPostprocessingInput',
        description='Input to configure postprocessing',
    )
    data_postprocessing_external_id: Optional[str] = Field(
        None,
        alias='dataPostprocessingExternalId',
        description='Id of the postprocessing type the action is created from.',
    )
    waypoint_external_id: str = Field(
        ...,
        alias='waypointExternalId',
        description='The external id of the waypoint the action will be executed at.',
        example='waypoint1',
    )
    asset_ids: Optional[List[int]] = Field(
        None,
        alias='assetIds',
        description='Deprecated: Use asset_external_ids instead',
        example=[123456, 654321],
    )
    asset_external_ids: Optional[List[str]] = Field(
        None, alias='assetExternalIds', example=['asset1', 'asset2']
    )


class EmptyResponse(RoboticsBaseModel):
    pass

    class Config:
        allow_population_by_field_name = True


class ValueUpdateForString(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[str] = Field(None, description='Value to set.')


class ValueUpdateForArrayOfCreateAction(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[List[CreateAction]] = Field(None, description='Value to set.')


class RobotType(Enum):
    spot = 'SPOT'
    anymal = 'ANYMAL'
    dji_drone = 'DJI_DRONE'
    taurob = 'TAUROB'
    unknown = 'UNKNOWN'


class CreateRobot(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(
        ..., description='Robot name.', example='Robot 1', max_length=255, min_length=1
    )
    description: Optional[str] = Field(
        None,
        description='A brief description of the robot.',
        example='Legged inspection robot 1',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Custom, application specific metadata. String key -> String value.',
        example={'getEstop': 'true', 'hasPauseMission': 'true', 'powerOn': 'true'},
    )
    robot_type: RobotType = Field(
        ..., alias='robotType', description='Type of robot.', example='UNKNOWN'
    )
    data_set_id: int = Field(
        ...,
        alias='dataSetId',
        description='The id of the data set this asset belongs to.',
        example=9007199254740991,
    )
    location_external_id: Optional[str] = Field(
        None,
        alias='locationExternalId',
        description="External id of the robot's location",
        example='waterTreatmentPlant1',
    )


class DatasetId(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    data_set_id: int = Field(..., alias='dataSetId')


class ValueUpdateForMapOfString(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[Dict[str, str]] = Field(None, description='Value to set.')


class ValueUpdateForRobotType(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[RobotType] = Field(None, description='Value to set.')


class ScheduleStatus(Enum):
    tentative = 'TENTATIVE'
    confirmed = 'CONFIRMED'
    cancelled = 'CANCELLED'


class RecurrenceFrequency(Enum):
    hourly = 'HOURLY'
    daily = 'DAILY'
    weekly = 'WEEKLY'
    monthly = 'MONTHLY'
    yearly = 'YEARLY'


class RecurrenceWeekday(Enum):
    mo = 'MO'
    tu = 'TU'
    we = 'WE'
    th = 'TH'
    fr = 'FR'
    sa = 'SA'
    su = 'SU'


class ValueUpdateForInt64(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[int] = Field(None, description='Value to set.')


class ValueUpdateForDateTime(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[datetime] = Field(None, description='Value to set.')


class ValueUpdateForScheduleStatus(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[ScheduleStatus] = Field(None, description='Value to set.')


class ValueUpdateForArrayOfDateTime(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[List[datetime]] = Field(None, description='Value to set.')


class ItemsForRobotCapability(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[RobotCapability] = Field(..., max_items=10000, min_items=1)


class CreateRobotCapability(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='RobotCapability name',
        example='ptz',
        max_length=255,
        min_length=1,
    )
    external_id: Optional[str] = Field(
        None,
        alias='externalId',
        description='RobotCapability external id. Must be unique for the resource type.',
        example='ptz',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    method: str = Field(
        ...,
        description='RobotCapability method. The method is used to call the right functionality on the robot.',
        example='ptz',
        max_length=255,
        min_length=1,
    )
    description: Optional[str] = Field(
        None,
        description='Description of RobotCapability. Textual description of the RobotCapability.',
        example='Pan, tilt, zoom camera for visual image capture',
    )
    input_schema: Optional[Any] = Field(
        None,
        alias='inputSchema',
        description='Schema that defines what inputs are needed for the action. The input are values that configure the action, e.g pan, tilt and zoom values.',
        example='{\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "id": "robotics/schemas/0.1.0/capabilities/ptz",\n        "title": "PTZ camera capability input",\n        "type": "object",\n        "properties": {\n            "method": {\n                "type": "string"\n            },\n            "parameters": {\n                "type": "object",\n                "properties": {\n                    "tilt": {\n                        "type": "number",\n                        "minimum": -90.0,\n                        "maximum": 90.0\n                    },\n                    "pan": {\n                        "type": "number",\n                        "minimum": -180.0,\n                        "maximum": 180.0\n                    },\n                    "zoom": {\n                        "type": "number",\n                        "minimum": 0.0,\n                        "maximum": 100.0\n                    }\n                },\n                "required": [\n                    "tilt",\n                    "pan",\n                    "zoom"\n                ]\n            }\n        },\n        "required": [\n            "method",\n            "parameters"\n        ],\n        "additionalProperties": false\n    }',
    )
    data_handling_schema: Optional[Any] = Field(
        None,
        alias='dataHandlingSchema',
        description='Schema that defines how the data from a RobotCapability should be handled, including upload instructions.',
        example='{\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "id": "robotics/schemas/0.1.0/data_handling/ptz",\n        "type": "object",\n        "properties": {\n            "uploadInstructions": {\n                "type": "object",\n                "properties": {\n                    "image": {\n                        "type": "object",\n                        "properties": {\n                            "method": {\n                                "const": "uploadFile"\n                            },\n                            "parameters": {\n                                "type": "object",\n                                "properties": {\n                                    "filenamePrefix": {\n                                        "type": "string"\n                                    }\n                                },\n                                "required": [\n                                    "filenamePrefix"\n                                ]\n                            }\n                        },\n                        "required": [\n                            "method",\n                            "parameters"\n                        ],\n                        "additionalProperties": false\n                    }\n                },\n                "additionalProperties": false\n            }\n        },\n        "required": [\n            "uploadInstructions"\n        ]\n    }',
    )


class ValueUpdateForAnyValue(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[Any] = Field(None, description='Value to set.')


class Point3(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    x: float
    y: float
    z: float


class Quaternion(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    x: float
    y: float
    z: float
    w: float


class CreateWaypoint(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    external_id: Optional[str] = Field(
        None,
        alias='externalId',
        description='Waypoint external id',
        example='waypoint1',
    )
    map_external_id: str = Field(
        ...,
        alias='mapExternalId',
        description='Id of the map the waypoint is defined in',
        example='robotMap',
    )
    position: Point3 = Field(
        ...,
        description='Coordinates of waypoint in the frame of the map defined by map_external_id',
        example={'x': 0.0, 'y': 0.0, 'z': 0.0},
    )
    orientation: Quaternion = Field(
        ...,
        description='Rotation of waypoint in the frame of the map defined by map_external_id',
        example={'w': 1.0, 'x': 0.0, 'y': 0.0, 'z': 0.0},
    )


class Transform(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    parent_frame_external_id: str = Field(
        ...,
        alias='parentFrameExternalId',
        description='Parent frame external id',
        example='rootCoordinateFrame',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    translation: Point3 = Field(
        ...,
        description='Transform translation (Point3)',
        example={'x': 0.0, 'y': 0.0, 'z': 0.0},
    )
    orientation: Quaternion = Field(
        ...,
        description='Transform orientation as quaternion (Quaternion)',
        example={'w': 1.0, 'x': 0.0, 'y': 0.0, 'z': 0.0},
    )


class CreateFrame(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='Frame name',
        example='Root coordinate frame of a location',
        max_length=255,
        min_length=1,
    )
    external_id: Optional[str] = Field(
        None,
        alias='externalId',
        description='Frame external id. Must be unique for the resource type. Will be set to a random value if not set in the request.',
        example='rootCoordinateFrame',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    transform: Optional[Transform] = Field(
        None,
        description='Transform of the parent frame to the current frame.',
        example={
            'orientation': {'w': 1.0, 'x': 0.0, 'y': 0.0, 'z': 0.0},
            'parentFrameExternalId': 'rootCoordinateFrame',
            'translation': {'x': 0.0, 'y': 0.0, 'z': 0.0},
        },
    )


class ValueUpdateForTransform(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[Transform] = Field(None, description='Value to set.')


class MapType(Enum):
    threedmodel = 'THREEDMODEL'
    twodmap = 'TWODMAP'
    waypointmap = 'WAYPOINTMAP'
    pointcloud = 'POINTCLOUD'


class CreateMap(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='Map name.',
        example='Robot navigation map',
        max_length=255,
        min_length=1,
    )
    external_id: Optional[str] = Field(
        None,
        alias='externalId',
        description='Map external id. Must be unique for the resource type. Will be set to a random value if not set in the request.',
        example='robotMap',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    description: Optional[str] = Field(
        None,
        description='Map description.',
        example='Robot navigation map',
        max_length=255,
        min_length=1,
    )
    map_type: MapType = Field(
        ...,
        alias='mapType',
        description="Map type. Available robot types are 'WAYPOINTMAP', 'THREEDMODEL', 'TWODMAP', 'POINTCLOUD'.",
        example='WAYPOINTMAP',
    )
    frame_external_id: Optional[str] = Field(
        None,
        alias='frameExternalId',
        description="External id of the map's reference frame.",
        example='rootCoordinateFrame',
        max_length=255,
        min_length=1,
    )
    data: Optional[Any] = Field(
        None, description='Map-specific  data.', example='{"fileId": 1234567891012131}'
    )
    location_external_id: Optional[str] = Field(
        None,
        alias='locationExternalId',
        description="External id of the map's location.",
        example='waterTreatmentPlant1',
    )
    scale: Optional[float] = Field(
        None,
        description='Uniform scaling factor, for example for map unit conversion (centimeter to meter)',
        example=1.0,
    )


class ValueUpdateForDouble(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[float] = Field(None, description='Value to set.')


class Location(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(..., description='Location name', example='Water treatment plant')
    external_id: str = Field(
        ...,
        alias='externalId',
        description='Location external id. Must be unique for the resource type.',
        example='waterTreatmentPlant1',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    description: Optional[str] = Field(
        None, description='Location description', example='Water treatment plant'
    )
    created_time: int = Field(
        ...,
        alias='createdTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    updated_time: int = Field(
        ...,
        alias='updatedTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )


class CreateLocation(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='Location name.',
        example='Water treatment plant',
        max_length=255,
        min_length=1,
    )
    external_id: Optional[str] = Field(
        None,
        alias='externalId',
        description='Location external id. Must be unique for the resource type. Will be set to a random value if not set in the request.',
        example='waterTreatmentPlant1',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    description: Optional[str] = Field(
        None,
        description='Textual description of the location.',
        example='Water treatment plant',
    )


class UpdateLocation(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: Optional[ValueUpdateForString] = Field(
        None, description='Update location name.', example='Water treatment plant'
    )
    description: Optional[ValueUpdateForString] = Field(
        None, description='Update location description', example='Water treatment plant'
    )


class DataPostprocessing(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='DataPostprocessing name',
        example='Read dial gauge',
        max_length=255,
        min_length=1,
    )
    external_id: str = Field(
        ...,
        alias='externalId',
        description='DataPostprocessing external id. Unique for the resource.',
        example='read_dial_gauge',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    method: str = Field(
        ...,
        description='DataPostprocessing method. The method is used to call the right functionality on the robot.',
        example='read_dial_gauge',
        max_length=255,
        min_length=1,
    )
    description: Optional[str] = Field(
        None,
        description='Description of the data postprocessing.',
        example='Read dial gauge from an image using Cognite Vision gauge reader',
        max_length=255,
        min_length=1,
    )
    input_schema: Any = Field(
        ...,
        alias='inputSchema',
        description='Schema that defines what inputs are needed for the data postprocessing. The input are values that configure the data postprocessing, e.g max and min values for a gauge.',
        example='{\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "id": "robotics/schemas/0.1.0/data_postprocessing/read_dial_gauge",\n        "title": "Read dial gauge postprocessing input",\n        "type": "object",\n        "properties": {\n            "image": {\n                "type": "object",\n                "properties": {\n                    "method": {\n                        "type": "string"\n                    },\n                    "parameters": {\n                        "type": "object",\n                        "properties": {\n                            "unit": {\n                                "type": "string"\n                            },\n                            "deadAngle": {\n                                "type": "number"\n                            },\n                            "minLevel": {\n                                "type": "number"\n                            },\n                            "maxLevel": {\n                                "type": "number"\n                            }\n                        }\n                    }\n                },\n                "required": [\n                    "method",\n                    "parameters"\n                ],\n                "additionalProperties": false\n            }\n        },\n        "additionalProperties": false\n    }',
    )


class CreateDataPostprocessing(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='DataPostprocessing name',
        example='Read dial gauge',
        max_length=255,
        min_length=1,
    )
    external_id: Optional[str] = Field(
        None,
        alias='externalId',
        description='DataPostprocessing external id. Must be unique for the resource type.',
        example='read_dial_gauge',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    method: str = Field(
        ...,
        description='DataPostprocessing method. The method is used to call the right functionality on the robot.',
        example='read_dial_gauge',
        max_length=255,
        min_length=1,
    )
    description: Optional[str] = Field(
        None,
        description='Description of data_postprocessing. Textual description of the data_postprocessing.',
        example='Read dial gauge from an image using Cognite Vision gauge reader',
        max_length=255,
        min_length=1,
    )
    input_schema: Optional[Any] = Field(
        None,
        alias='inputSchema',
        description='Schema that defines what inputs are needed for the data postprocessing. The input are values that configure the data postprocessing, e.g max and min values for a gauge.',
        example='{\n        "$schema": "http://json-schema.org/draft-07/schema#",\n        "id": "robotics/schemas/0.1.0/data_postprocessing/read_dial_gauge",\n        "title": "Read dial gauge postprocessing input",\n        "type": "object",\n        "properties": {\n            "image": {\n                "type": "object",\n                "properties": {\n                    "method": {\n                        "type": "string"\n                    },\n                    "parameters": {\n                        "type": "object",\n                        "properties": {\n                            "unit": {\n                                "type": "string"\n                            },\n                            "deadAngle": {\n                                "type": "number"\n                            },\n                            "minLevel": {\n                                "type": "number"\n                            },\n                            "maxLevel": {\n                                "type": "number"\n                            }\n                        }\n                    }\n                },\n                "required": [\n                    "method",\n                    "parameters"\n                ],\n                "additionalProperties": false\n            }\n        },\n        "additionalProperties": false\n    }',
    )


class UpdateDataPostprocessing(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: Optional[ValueUpdateForString] = None
    description: Optional[ValueUpdateForString] = None
    method: Optional[ValueUpdateForString] = None
    input_schema: Optional[ValueUpdateForAnyValue] = Field(None, alias='inputSchema')


class Action(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='Action external id. Must be unique for the resource type..',
        example='gaugeReading',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    name: Optional[str] = Field(
        None,
        description='The name of the action.',
        example='Action name',
        max_length=255,
        min_length=1,
    )
    action_number: int = Field(
        ...,
        alias='actionNumber',
        description='Action number. Defines the ascending chronological order in which actions should be executed.',
        example=1,
    )
    robot_capability: RobotCapability = Field(
        ...,
        alias='robotCapability',
        description='Robot capability the action executes, for example data acquisition or a behavior capability (e.g., docking).',
    )
    data_postprocessing: Optional[DbDataPostprocessing] = Field(
        None,
        alias='dataPostprocessing',
        description='Postprocessing type the action is using, if applicable',
    )
    robot_capability_input: Any = Field(
        ...,
        alias='robotCapabilityInput',
        description='Input to the robot capability. The input are values that configure the action, e.g pan, tilt and zoom values. The format of the input is defined by the input_schema of the robot capability.',
        example='{\n        "method": "ptz",\n        "parameters": {\n            "pan": 90.0,\n            "tilt": 50.5,\n            "zoom": 1.0\n        }\n    }',
    )
    data_handling_input: Any = Field(
        ...,
        alias='dataHandlingInput',
        description='Input for data handling. Data handling includes instructions on how to parse data and upload instructions.',
        example='{\n        "uploadInfo": {\n            "image": {.\n                "method": "uploadFile",\n                "parameters": {\n                    "filenamePrefix": "ptz"\n                }\n            }\n        }\n    }',
    )
    data_postprocessing_input: Optional[Any] = Field(
        None,
        alias='dataPostprocessingInput',
        description='Input to configure postprocessing',
    )
    waypoint_external_id: str = Field(
        ...,
        alias='waypointExternalId',
        description='The external id of the waypoint the action will be executed at.',
        example='waypoint1',
    )
    asset_ids: Optional[List[int]] = Field(
        None,
        alias='assetIds',
        description='Deprecated: Use asset_external_ids instead',
        example=[123456, 654321],
    )
    asset_external_ids: Optional[List[str]] = Field(None, alias='assetExternalIds')


class ItemsForExternalId(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[ExternalId] = Field(..., max_items=10000, min_items=1)


class CreateMission(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='Mission name.',
        example='Inspection mission 1',
        max_length=255,
        min_length=1,
    )
    external_id: Optional[str] = Field(
        None,
        alias='externalId',
        description='Mission external id. Must be unique for the resource type. Will be set to a random value if not set in the request.',
        example='inspectionMission1',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    map_external_id: str = Field(
        ...,
        alias='mapExternalId',
        description='Id of the map the mission is defined in.',
        example='robotMap',
        max_length=255,
        min_length=1,
    )
    description: Optional[str] = Field(
        None,
        description='Textual description of the mission.',
        example='Visual robot inspection of the water treatment plant',
        max_length=255,
        min_length=1,
    )
    actions: List[CreateAction] = Field(
        ...,
        description='Actions to be executed in the mission. The order of the actions in the list defines the execution order.',
    )


class UpdateMission(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: Optional[ValueUpdateForString] = Field(None, description='New mission name')
    description: Optional[ValueUpdateForString] = Field(
        None, description='New mission description'
    )
    actions: Optional[ValueUpdateForArrayOfCreateAction] = Field(
        None,
        description='List of new actions in the mission. All actions must be set when actions in a mission are updated.',
    )


class Robot(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(
        ..., description='Robot name', example='Robot 1', max_length=255, min_length=1
    )
    description: Optional[str] = Field(
        None,
        description='A brief description of the robot',
        example='Legged inspection robot 1',
    )
    capabilities: List[str] = Field(
        ...,
        description='List of externalIds of the capabilities the robot can perform.',
    )
    metadata: Optional[Dict[str, str]] = Field(
        None,
        description='Custom, application specific metadata. String key -> String value.',
        example={'getEstop': 'true', 'hasPauseMission': 'true', 'powerOn': 'true'},
    )
    robot_type: RobotType = Field(
        ..., alias='robotType', description='Type of robot.', example='UNKNOWN'
    )
    data_set_id: int = Field(
        ...,
        alias='dataSetId',
        description='The id of the data set this asset belongs to.',
        example=9007199254740991,
    )
    created_time: int = Field(
        ...,
        alias='createdTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    updated_time: int = Field(
        ...,
        alias='updatedTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    location_external_id: Optional[str] = Field(
        None,
        alias='locationExternalId',
        description='External id of the location',
        example='waterTreatmentPlant1',
    )


class ItemsForCreateRobot(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[CreateRobot] = Field(..., max_items=10000, min_items=1)


class ItemsForDatasetId(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[DatasetId] = Field(..., max_items=10000, min_items=1)


class UpdateRobot(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: Optional[ValueUpdateForString] = Field(None, description='New robot name.')
    description: Optional[ValueUpdateForString] = Field(
        None, description='A brief description of the robot.'
    )
    metadata: Optional[ValueUpdateForMapOfString] = Field(
        None, description='Metadata fields to set'
    )
    robot_type: Optional[ValueUpdateForRobotType] = Field(
        None,
        alias='robotType',
        description="Robot type to set. Available robot types are 'SPOT', 'ANYMAL', 'UNKNOWN'.",
    )
    location_external_id: Optional[ValueUpdateForString] = Field(
        None,
        alias='locationExternalId',
        description="External id of the robot's location",
    )


class RecurrenceRule(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    freq: RecurrenceFrequency = Field(
        ..., description='Recurrence rule frequency', example='DAILY'
    )
    interval: Optional[int] = Field(
        None, description='Recurrence rule interval', example=1
    )
    until: Optional[datetime] = Field(
        None, description='Recurrence rule until date', example='2023-08-01T12:00:00Z'
    )
    by_day: Optional[List[RecurrenceWeekday]] = Field(
        None, alias='byDay', description='Recurrence rule by_day', example=['MO']
    )


class CreateSchedule(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    external_id: Optional[str] = Field(
        None,
        alias='externalId',
        description='Schedule external id. Must be unqiue for the resource type.',
        example='dailySchedule1',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    mission_external_id: str = Field(
        ...,
        alias='missionExternalId',
        description='The external id of the scheduled mission.',
        example='inspectionMission1',
    )
    robot_data_set_id: int = Field(
        ...,
        alias='robotDataSetId',
        description='The robot to that is assigned to perform the mission',
        example=2975365566518130,
    )
    summary: Optional[str] = Field(
        None,
        description='Short description of the schedule',
        example='Daily inspection round',
        max_length=255,
        min_length=1,
    )
    date_time_start: datetime = Field(
        ...,
        alias='dateTimeStart',
        description='The start time of the schedule in UTC. In case of a recurring event, this is the start time of the first event in the recurrence.',
        example='2023-08-01T12:00:00Z',
    )
    date_time_end: datetime = Field(
        ...,
        alias='dateTimeEnd',
        description='The end time of the schedule in UTC. In case of a recurring event, this is the end time of the first event in the recurrence.',
        example='2023-08-01T12:00:00Z',
    )
    status: Optional[ScheduleStatus] = Field(
        None, description='Schedule status', example='CONFIRMED'
    )
    rrule: Optional[RecurrenceRule] = Field(
        None,
        description='Recurrence rule, following the iCalendar RFC5545 standard',
        example={
            'byDay': ['MO'],
            'freq': 'WEEKLY',
            'interval': 1,
            'until': '2023-12-01T12:00:00Z',
        },
    )
    time_zone_id: Optional[str] = Field(
        None,
        alias='timeZoneId',
        description='Time zone following the IANA identifiers',
        example='Europe/Oslo',
    )
    exception_dates: Optional[List[datetime]] = Field(
        None,
        alias='exceptionDates',
        description='Exception dates in UTC. EXDATE in RFC5545.',
        example=['2023-08-01T12:00:00Z', '2023-09-01T12:00:00Z'],
    )


class ValueUpdateForRecurrenceRule(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    set: Optional[RecurrenceRule] = Field(None, description='Value to set.')


class ItemsForCreateRobotCapability(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[CreateRobotCapability] = Field(..., max_items=10000, min_items=1)


class UpdateRobotCapability(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: Optional[ValueUpdateForString] = None
    description: Optional[ValueUpdateForString] = None
    method: Optional[ValueUpdateForString] = None
    input_schema: Optional[ValueUpdateForAnyValue] = Field(None, alias='inputSchema')
    data_handling_schema: Optional[ValueUpdateForAnyValue] = Field(
        None, alias='dataHandlingSchema'
    )


class Waypoint(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    external_id: str = Field(
        ..., alias='externalId', description='Waypoint external id', example='waypoint1'
    )
    map_external_id: str = Field(
        ...,
        alias='mapExternalId',
        description='External id of the map the waypoint is defined in',
        example='robotMap',
        max_length=255,
        min_length=1,
    )
    position: Point3 = Field(
        ...,
        description='Coordinates of waypoint in the frame of the map defined by map_external_id',
        example={'x': 0.0, 'y': 0.0, 'z': 0.0},
    )
    orientation: Quaternion = Field(
        ...,
        description='Rotation of waypoint in the frame of the map defined by map_external_id',
        example={'w': 1.0, 'x': 0.0, 'y': 0.0, 'z': 0.0},
    )


class ItemsForCreateWaypoint(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[CreateWaypoint] = Field(..., max_items=10000, min_items=1)


class Frame(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='Frame name',
        example='Root coordinate frame of a location',
        max_length=255,
        min_length=1,
    )
    external_id: str = Field(
        ...,
        alias='externalId',
        description='Frame external id',
        example='rootCoordinateFrame',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    created_time: int = Field(
        ...,
        alias='createdTime',
        description='Created time in the number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    updated_time: int = Field(
        ...,
        alias='updatedTime',
        description='Updated time in the number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    transform: Optional[Transform] = Field(
        None,
        description='Transform of the parent frame to the current frame',
        example={
            'orientation': {'w': 1.0, 'x': 0.0, 'y': 0.0, 'z': 0.0},
            'parentFrameExternalId': 'rootCoordinateFrame',
            'translation': {'x': 0.0, 'y': 0.0, 'z': 0.0},
        },
    )


class ItemsForCreateFrame(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[CreateFrame] = Field(..., max_items=10000, min_items=1)


class UpdateFrame(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: Optional[ValueUpdateForString] = Field(
        None,
        description='Update frame name',
        example='Root coordinate frame of a location',
    )
    transform: Optional[ValueUpdateForTransform] = Field(
        None,
        description='Update transform',
        example={
            'orientation': {'w': 1.0, 'x': 0.0, 'y': 0.0, 'z': 0.0},
            'parentFrameExternalId': 'rootCoordinateFrame',
            'translation': {'x': 0.0, 'y': 0.0, 'z': 0.0},
        },
    )


class MapInfo(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='Map external id.',
        example='robotMap',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    created_time: int = Field(
        ...,
        alias='createdTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    updated_time: int = Field(
        ...,
        alias='updatedTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    name: str = Field(
        ...,
        description='Map name.',
        example='Robot navigation map',
        max_length=255,
        min_length=1,
    )
    description: Optional[str] = Field(
        None,
        description='Map description.',
        example='Robot navigation map',
        max_length=255,
        min_length=1,
    )
    map_type: MapType = Field(
        ...,
        alias='mapType',
        description="Map type. Available robot types are 'WAYPOINTMAP', 'THREEDMODEL', 'TWODMAP', 'POINTCLOUD'.",
        example='WAYPOINTMAP',
    )
    frame_external_id: Optional[str] = Field(
        None,
        alias='frameExternalId',
        description="External id of the map's reference frame.",
        example='rootCoordinateFrame',
    )
    data: Optional[Any] = Field(
        None, description='Map-specific data.', example='{"fileId": 1234567891012131}'
    )
    location_external_id: Optional[str] = Field(
        None,
        alias='locationExternalId',
        description="External id of the map's location.",
        example='waterTreatmentPlant1',
        max_length=255,
        min_length=1,
    )
    scale: float = Field(
        ...,
        description='Uniform scaling factor, for example for map unit conversion (centimeter to meter)',
        example=1.0,
    )
    base_waypoint_external_id: Optional[str] = Field(
        None,
        alias='baseWaypointExternalId',
        description='Base waypoint point id.',
        example='waypoint1',
    )


class ItemsForCreateMap(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[CreateMap] = Field(..., max_items=10000, min_items=1)


class UpdateMap(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    name: Optional[ValueUpdateForString] = Field(
        None, description='New map name.', example='Robot navigation map'
    )
    description: Optional[ValueUpdateForString] = Field(
        None, description='New map description.', example='Robot navigation map'
    )
    frame_external_id: Optional[ValueUpdateForString] = Field(
        None,
        alias='frameExternalId',
        description='New frame external id.',
        example='rootCoordinateFrame',
    )
    data: Optional[ValueUpdateForAnyValue] = Field(
        None,
        description='Map data fields to set.',
        example='{"fileId": 1234567891012131}',
    )
    location_external_id: Optional[ValueUpdateForString] = Field(
        None,
        alias='locationExternalId',
        description="External id of the map's location.",
        example='waterTreatmentPlant1',
    )
    scale: Optional[ValueUpdateForDouble] = Field(
        None,
        description='Uniform scaling factor, for example for map unit conversion (centimeter to meter)',
        example=1.0,
    )
    base_waypoint_external_id: Optional[ValueUpdateForString] = Field(
        None,
        alias='baseWaypointExternalId',
        description='Base waypoint id.',
        example='waypoint1',
    )


class ItemsForLocation(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[Location] = Field(..., max_items=10000, min_items=1)


class ItemsForCreateLocation(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[CreateLocation] = Field(..., max_items=10000, min_items=1)


class ResourceUpdateForUpdateLocation(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='External id of resource.',
        example='resourceId',
    )
    update: UpdateLocation = Field(..., description='Update.')


class ItemsForDataPostprocessing(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[DataPostprocessing] = Field(..., max_items=10000, min_items=1)


class ItemsForCreateDataPostprocessing(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[CreateDataPostprocessing] = Field(..., max_items=10000, min_items=1)


class ResourceUpdateForUpdateDataPostprocessing(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='External id of resource.',
        example='resourceId',
    )
    update: UpdateDataPostprocessing = Field(..., description='Update.')


class Mission(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    name: str = Field(
        ...,
        description='Mission name.',
        example='Inspection mission 1',
        max_length=255,
        min_length=1,
    )
    external_id: str = Field(
        ...,
        alias='externalId',
        description='Mission external id. Must be unique for the resource type.',
        example='inspectionMission1',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    map_external_id: str = Field(
        ...,
        alias='mapExternalId',
        description='Id of the map the mission is defined in.',
        example='robotMap',
        max_length=255,
        min_length=1,
    )
    description: Optional[str] = Field(
        None,
        description='Textual description of the mission.',
        example='Visual robot inspection of the water treatment plant',
    )
    actions: List[Action] = Field(..., description='List of actions in the mission.')
    created_time: int = Field(
        ...,
        alias='createdTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    updated_time: int = Field(
        ...,
        alias='updatedTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )


class ItemsForCreateMission(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[CreateMission] = Field(..., max_items=10000, min_items=1)


class ResourceUpdateForUpdateMission(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='External id of resource.',
        example='resourceId',
    )
    update: UpdateMission = Field(..., description='Update.')


class ItemsForRobot(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[Robot] = Field(..., max_items=10000, min_items=1)


class RobotResourceUpdateForUpdateRobot(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    data_set_id: int = Field(
        ...,
        alias='dataSetId',
        description='Dataset id of robot.',
        example=2975365566518130,
    )
    update: UpdateRobot = Field(..., description='Update.')


class Schedule(RoboticsBaseModel):
    class Config:
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='Schedule external id. Must be unqiue for the resource type.',
        example='dailySchedule1',
        max_length=255,
        min_length=1,
        regex='^[a-zA-Z0-9]([a-zA-Z0-9_-]{0,253}[a-zA-Z0-9])?$',
    )
    mission_external_id: str = Field(
        ...,
        alias='missionExternalId',
        description='The external id of the scheduled mission.',
        example='inspectionMission1',
        max_length=255,
        min_length=1,
    )
    summary: Optional[str] = Field(
        None,
        description='Short description of the schedule',
        example='Daily inspection round',
        max_length=255,
        min_length=1,
    )
    robot_data_set_id: int = Field(
        ...,
        alias='robotDataSetId',
        description='The robot to that is assigned to perform the mission',
        example=2975365566518130,
    )
    date_time_start: datetime = Field(
        ...,
        alias='dateTimeStart',
        description='The start time of the schedule in UTC. In case of a recurring event, this is the start time of the first event in the recurrence.',
        example='2023-08-01T12:00:00Z',
    )
    date_time_end: datetime = Field(
        ...,
        alias='dateTimeEnd',
        description='The end time of the schedule in UTC. In case of a recurring event, this is the end time of the first event in the recurrence.',
        example='2023-08-01T12:00:00Z',
    )
    status: Optional[ScheduleStatus] = Field(
        None, description='Schedule status', example='CONFIRMED'
    )
    rrule: Optional[RecurrenceRule] = Field(
        None,
        description='Recurrence rule, following the iCalendar RFC5545 standard',
        example={
            'byDay': ['MO'],
            'freq': 'WEEKLY',
            'interval': 1,
            'until': '2023-12-01T12:00:00Z',
        },
    )
    time_zone_id: Optional[str] = Field(
        None,
        alias='timeZoneId',
        description='Time zone following the IANA identifiers',
        example='Europe/Oslo',
        max_length=255,
        min_length=1,
    )
    created_time: int = Field(
        ...,
        alias='createdTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    updated_time: int = Field(
        ...,
        alias='updatedTime',
        description='The number of milliseconds since 00:00:00 Thursday, 1 January 1970, Coordinated Universal Time (UTC), minus leap seconds.',
        example=1649059819000,
    )
    exception_dates: Optional[List[datetime]] = Field(
        None,
        alias='exceptionDates',
        description='Exception dates in UTC. EXDATE in RFC5545.',
        example=['2023-08-01T12:00:00Z', '2023-09-01T12:00:00Z'],
    )


class ItemsForCreateSchedule(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[CreateSchedule] = Field(..., max_items=10000, min_items=1)


class UpdateSchedule(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    mission_external_id: Optional[ValueUpdateForString] = Field(
        None,
        alias='missionExternalId',
        description="Update the schedule's mission.",
        example='inspectionMission1',
    )
    robot_data_set_id: Optional[ValueUpdateForInt64] = Field(
        None,
        alias='robotDataSetId',
        description='Assign another robot to the schedule.',
        example=2975365566518130,
    )
    summary: Optional[ValueUpdateForString] = Field(
        None,
        description="Update the schedule's summary.",
        example='Daily inspection round',
    )
    date_time_start: Optional[ValueUpdateForDateTime] = Field(
        None,
        alias='dateTimeStart',
        description="Update the schedule's start time.",
        example='2023-08-01T12:00:00Z',
    )
    date_time_end: Optional[ValueUpdateForDateTime] = Field(
        None,
        alias='dateTimeEnd',
        description="Update the schedule's end time.",
        example='2023-08-01T12:00:00Z',
    )
    status: Optional[ValueUpdateForScheduleStatus] = Field(
        None, description="Update the schedule's status.", example='CONFIRMED'
    )
    rrule: Optional[ValueUpdateForRecurrenceRule] = Field(
        None,
        description="Update the schedule's recurrence rule, following the iCalendar RFC5545 standard.",
        example={
            'byDay': ['MO'],
            'freq': 'WEEKLY',
            'interval': 1,
            'until': '2023-12-01T12:00:00Z',
        },
    )
    time_zone_id: Optional[ValueUpdateForString] = Field(
        None,
        alias='timeZoneId',
        description="Update the schedule's time zone, IANA.",
        example='Europe/Oslo',
    )
    exception_dates: Optional[ValueUpdateForArrayOfDateTime] = Field(
        None,
        alias='exceptionDates',
        description='Exception dates in UTC. EXDATE in RFC5545.',
        example=['2023-08-01T12:00:00Z', '2023-09-01T12:00:00Z'],
    )


class ResourceUpdateForUpdateRobotCapability(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='External id of resource.',
        example='resourceId',
    )
    update: UpdateRobotCapability = Field(..., description='Update.')


class ItemsForWaypoint(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[Waypoint] = Field(..., max_items=10000, min_items=1)


class ItemsForFrame(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[Frame] = Field(..., max_items=10000, min_items=1)


class ResourceUpdateForUpdateFrame(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='External id of resource.',
        example='resourceId',
    )
    update: UpdateFrame = Field(..., description='Update.')


class ItemsForMapInfo(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[MapInfo] = Field(..., max_items=10000, min_items=1)


class ResourceUpdateForUpdateMap(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='External id of resource.',
        example='resourceId',
    )
    update: UpdateMap = Field(..., description='Update.')


class ItemsForResourceUpdateForUpdateLocation(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[ResourceUpdateForUpdateLocation] = Field(
        ..., max_items=10000, min_items=1
    )


class ItemsForResourceUpdateForUpdateDataPostprocessing(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[ResourceUpdateForUpdateDataPostprocessing] = Field(
        ..., max_items=10000, min_items=1
    )


class ItemsForMission(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[Mission] = Field(..., max_items=10000, min_items=1)


class ItemsForResourceUpdateForUpdateMission(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[ResourceUpdateForUpdateMission] = Field(
        ..., max_items=10000, min_items=1
    )


class ItemsForRobotResourceUpdateForUpdateRobot(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[RobotResourceUpdateForUpdateRobot] = Field(
        ..., max_items=10000, min_items=1
    )


class ItemsForSchedule(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[Schedule] = Field(..., max_items=10000, min_items=1)


class ResourceUpdateForUpdateSchedule(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    external_id: str = Field(
        ...,
        alias='externalId',
        description='External id of resource.',
        example='resourceId',
    )
    update: UpdateSchedule = Field(..., description='Update.')


class ItemsForResourceUpdateForUpdateRobotCapability(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[ResourceUpdateForUpdateRobotCapability] = Field(
        ..., max_items=10000, min_items=1
    )


class ItemsForResourceUpdateForUpdateFrame(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[ResourceUpdateForUpdateFrame] = Field(..., max_items=10000, min_items=1)


class ItemsForResourceUpdateForUpdateMap(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[ResourceUpdateForUpdateMap] = Field(..., max_items=10000, min_items=1)


class ItemsForResourceUpdateForUpdateSchedule(RoboticsBaseModel):
    class Config:
        extra = Extra.forbid
        allow_population_by_field_name = True

    items: List[ResourceUpdateForUpdateSchedule] = Field(
        ..., max_items=10000, min_items=1
    )
