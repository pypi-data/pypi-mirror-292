# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from ..messages import connectivity_pb2 as messages_dot_connectivity__pb2
from ..messages import data_pb2 as messages_dot_data__pb2
from ..messages import metrics_pb2 as messages_dot_metrics__pb2
from ..messages import mission_log_pb2 as messages_dot_mission__log__pb2
from ..messages import robot_control_pb2 as messages_dot_robot__control__pb2
from ..messages import robot_registration_pb2 as messages_dot_robot__registration__pb2
from ..messages import robot_state_pb2 as messages_dot_robot__state__pb2
from ..messages import video_pb2 as messages_dot_video__pb2


class RobotInterfaceStub(object):
    """
    This gRPC interface enables communication between the device agent (on the robot or robot server) and the Cognite Robotics cloud.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RobotRegistration = channel.unary_unary(
                '/com.cognite.robotics.RobotInterface/RobotRegistration',
                request_serializer=messages_dot_robot__registration__pb2.RobotRegistrationRequest.SerializeToString,
                response_deserializer=messages_dot_robot__registration__pb2.RobotRegistrationResponse.FromString,
                )
        self.RobotConnectivity = channel.stream_stream(
                '/com.cognite.robotics.RobotInterface/RobotConnectivity',
                request_serializer=messages_dot_connectivity__pb2.Pong.SerializeToString,
                response_deserializer=messages_dot_connectivity__pb2.Ping.FromString,
                )
        self.RobotControl = channel.stream_stream(
                '/com.cognite.robotics.RobotInterface/RobotControl',
                request_serializer=messages_dot_robot__control__pb2.ControlEvent.SerializeToString,
                response_deserializer=messages_dot_robot__control__pb2.ControlCommand.FromString,
                )
        self.RobotStatus = channel.stream_stream(
                '/com.cognite.robotics.RobotInterface/RobotStatus',
                request_serializer=messages_dot_robot__state__pb2.RobotStateMessage.SerializeToString,
                response_deserializer=messages_dot_robot__state__pb2.RobotStateResponse.FromString,
                )
        self.MissionLog = channel.stream_stream(
                '/com.cognite.robotics.RobotInterface/MissionLog',
                request_serializer=messages_dot_mission__log__pb2.MissionLogMessage.SerializeToString,
                response_deserializer=messages_dot_mission__log__pb2.MissionLogAcknowledge.FromString,
                )
        self.DataUpload = channel.unary_unary(
                '/com.cognite.robotics.RobotInterface/DataUpload',
                request_serializer=messages_dot_data__pb2.DataUploadEvent.SerializeToString,
                response_deserializer=messages_dot_data__pb2.DataUploadResponse.FromString,
                )
        self.VideoSignaling = channel.stream_stream(
                '/com.cognite.robotics.RobotInterface/VideoSignaling',
                request_serializer=messages_dot_video__pb2.VideoRequest.SerializeToString,
                response_deserializer=messages_dot_video__pb2.VideoResponse.FromString,
                )
        self.VideoControl = channel.stream_stream(
                '/com.cognite.robotics.RobotInterface/VideoControl',
                request_serializer=messages_dot_video__pb2.VideoControlRequest.SerializeToString,
                response_deserializer=messages_dot_video__pb2.VideoControlResponse.FromString,
                )
        self.Metrics = channel.stream_stream(
                '/com.cognite.robotics.RobotInterface/Metrics',
                request_serializer=messages_dot_metrics__pb2.MetricsRequest.SerializeToString,
                response_deserializer=messages_dot_metrics__pb2.MetricsResponse.FromString,
                )


class RobotInterfaceServicer(object):
    """
    This gRPC interface enables communication between the device agent (on the robot or robot server) and the Cognite Robotics cloud.
    """

    def RobotRegistration(self, request, context):
        """
        RobotRegistration should be the first endpoint called when the program starts.
        1. Register a robot if it does not exist.
        2. If the robot exists, update the robot to ensure consistency between the agent and the cloud.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RobotConnectivity(self, request_iterator, context):
        """
        RobotConnectivity is used to monitor the connection between the device agent and Cognite Robotics cloud. The endpoint is
        expected to send a ping from the server, and the client responds with a pong to measure the round-trip latency in milliseconds.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RobotControl(self, request_iterator, context):
        """
        RobotControl is the primary stream used for the server to issue commands to the robot.
        To establish the control stream, the agent sends a Connect ControlEvent and then starts receiving
        ControlCommand messages. The agent should respond to each ControlCommand with a
        ControlResponse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RobotStatus(self, request_iterator, context):
        """
        RobotStatus is the primary stream used for the robot to report its status to the server.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MissionLog(self, request_iterator, context):
        """
        MissionLog is the stream used for logging the sequence of events during a robot mission.
        MissionLog messages are sent from the robot to the server. Mission logs are also used to
        create reports of the mission run in Cognite Data Fusion.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DataUpload(self, request, context):
        """
        DataUpload is used for generating reports of uploaded data and to trigger data postprocessing steps in CDF.
        The device agent should upload data to Cognite Data Fusion directly, and subsequently send a DataUploadEvent to the Cognite Robotics cloud.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VideoSignaling(self, request_iterator, context):
        """
        VideoSignaling sets up the WebRTC video stream from the robot.
        Signaling is the initial bootstrapping process that enables a call between peers. Both peers must exchange their
        `session description`, even if only one peer is sending media and the other is only subscribing
        to that media. The `session description` sets up the WebRTC Peer Connection, which is responsible for
        establishing and managing the real-time communication between peers.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def VideoControl(self, request_iterator, context):
        """
        Stateless grpc stream for controller when the video agent will stream video.
        When the video agent recieves a heartbeat response it will then set up a grpc
        connection to VideoSignaling to start streaming
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Metrics(self, request_iterator, context):
        """
        Stream metrics from the robot to robotics-api.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RobotInterfaceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RobotRegistration': grpc.unary_unary_rpc_method_handler(
                    servicer.RobotRegistration,
                    request_deserializer=messages_dot_robot__registration__pb2.RobotRegistrationRequest.FromString,
                    response_serializer=messages_dot_robot__registration__pb2.RobotRegistrationResponse.SerializeToString,
            ),
            'RobotConnectivity': grpc.stream_stream_rpc_method_handler(
                    servicer.RobotConnectivity,
                    request_deserializer=messages_dot_connectivity__pb2.Pong.FromString,
                    response_serializer=messages_dot_connectivity__pb2.Ping.SerializeToString,
            ),
            'RobotControl': grpc.stream_stream_rpc_method_handler(
                    servicer.RobotControl,
                    request_deserializer=messages_dot_robot__control__pb2.ControlEvent.FromString,
                    response_serializer=messages_dot_robot__control__pb2.ControlCommand.SerializeToString,
            ),
            'RobotStatus': grpc.stream_stream_rpc_method_handler(
                    servicer.RobotStatus,
                    request_deserializer=messages_dot_robot__state__pb2.RobotStateMessage.FromString,
                    response_serializer=messages_dot_robot__state__pb2.RobotStateResponse.SerializeToString,
            ),
            'MissionLog': grpc.stream_stream_rpc_method_handler(
                    servicer.MissionLog,
                    request_deserializer=messages_dot_mission__log__pb2.MissionLogMessage.FromString,
                    response_serializer=messages_dot_mission__log__pb2.MissionLogAcknowledge.SerializeToString,
            ),
            'DataUpload': grpc.unary_unary_rpc_method_handler(
                    servicer.DataUpload,
                    request_deserializer=messages_dot_data__pb2.DataUploadEvent.FromString,
                    response_serializer=messages_dot_data__pb2.DataUploadResponse.SerializeToString,
            ),
            'VideoSignaling': grpc.stream_stream_rpc_method_handler(
                    servicer.VideoSignaling,
                    request_deserializer=messages_dot_video__pb2.VideoRequest.FromString,
                    response_serializer=messages_dot_video__pb2.VideoResponse.SerializeToString,
            ),
            'VideoControl': grpc.stream_stream_rpc_method_handler(
                    servicer.VideoControl,
                    request_deserializer=messages_dot_video__pb2.VideoControlRequest.FromString,
                    response_serializer=messages_dot_video__pb2.VideoControlResponse.SerializeToString,
            ),
            'Metrics': grpc.stream_stream_rpc_method_handler(
                    servicer.Metrics,
                    request_deserializer=messages_dot_metrics__pb2.MetricsRequest.FromString,
                    response_serializer=messages_dot_metrics__pb2.MetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'com.cognite.robotics.RobotInterface', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RobotInterface(object):
    """
    This gRPC interface enables communication between the device agent (on the robot or robot server) and the Cognite Robotics cloud.
    """

    @staticmethod
    def RobotRegistration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.cognite.robotics.RobotInterface/RobotRegistration',
            messages_dot_robot__registration__pb2.RobotRegistrationRequest.SerializeToString,
            messages_dot_robot__registration__pb2.RobotRegistrationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RobotConnectivity(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.cognite.robotics.RobotInterface/RobotConnectivity',
            messages_dot_connectivity__pb2.Pong.SerializeToString,
            messages_dot_connectivity__pb2.Ping.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RobotControl(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.cognite.robotics.RobotInterface/RobotControl',
            messages_dot_robot__control__pb2.ControlEvent.SerializeToString,
            messages_dot_robot__control__pb2.ControlCommand.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RobotStatus(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.cognite.robotics.RobotInterface/RobotStatus',
            messages_dot_robot__state__pb2.RobotStateMessage.SerializeToString,
            messages_dot_robot__state__pb2.RobotStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MissionLog(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.cognite.robotics.RobotInterface/MissionLog',
            messages_dot_mission__log__pb2.MissionLogMessage.SerializeToString,
            messages_dot_mission__log__pb2.MissionLogAcknowledge.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DataUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/com.cognite.robotics.RobotInterface/DataUpload',
            messages_dot_data__pb2.DataUploadEvent.SerializeToString,
            messages_dot_data__pb2.DataUploadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VideoSignaling(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.cognite.robotics.RobotInterface/VideoSignaling',
            messages_dot_video__pb2.VideoRequest.SerializeToString,
            messages_dot_video__pb2.VideoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def VideoControl(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.cognite.robotics.RobotInterface/VideoControl',
            messages_dot_video__pb2.VideoControlRequest.SerializeToString,
            messages_dot_video__pb2.VideoControlResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Metrics(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/com.cognite.robotics.RobotInterface/Metrics',
            messages_dot_metrics__pb2.MetricsRequest.SerializeToString,
            messages_dot_metrics__pb2.MetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
