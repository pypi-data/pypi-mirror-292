from bindings import seldoncore
import pathlib
import logging
from typing import Optional

from ._othersettings import Other_Settings

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class Base_Model:
    def __init__(self):
        self.other_settings = Other_Settings()
        self._options = seldoncore.SimulationOptions()
        self._simulation = None
        self.Network = None

    def run(self, output_dir: str = None):
        """
        Run the simulation.

        Parameters
        -----------
        output_dir : str, default="./output"
          The directory to output the files to.
        """
        seldoncore.validate_settings(self._options)
        seldoncore.print_settings(self._options)
        cwd = pathlib.Path.cwd()
        if output_dir is None:
            output_dir = "./output"
        output_path = cwd / pathlib.Path(output_dir)
        if output_path.exists():
            raise Exception(
                "Output Directory already Exists!! Either delete it or change the path!!"
            )
        logger.info(f"Output directory path set to: {output_path}\n")
        output_path.mkdir(parents=True, exist_ok=True)
        self._simulation.run(output_dir)
        self._network = self._simulation.network

    def print_settings(self):
        """
        Print the settings of the simulation.
        """
        seldoncore.print_settings(self._options)

    @property
    def Network(self):
        """
        Access the network generated by the simulation.

        Returns
        -------
        seldoncore.Network
            The network generated by the simulation.
        """
        return self._network

    @Network.setter
    def Network(self, value):
        """
        Set the network for the simulation.

        Parameters
        ----------
        value : seldoncore.Network
            The network to set for the simulation.
        """
        self._network = value
        self._simulation.network = value

    def agent_opinion(self, index: int = None):
        """
        Access the agents data from the simulation.

        Parameters
        -----------
        index : int
          The index of the agent to access. The index is 0-based. If not provided, all agents are returned.
        """
        if index is None:
            result = [agent.data.opinion for agent in self._simulation.network.agent]
            return result
        else:
            if index < 0 or index >= self.Network.n_agents():
                raise IndexError("Agent index is out of range.")
            return self._simulation.network.agent[index].data.opinion

    def set_agent_opinion(self, index: int, opinion: float):
        """
        Set the opinion of a specific agent.

        Parameters
        ----------
        index : int
            The index of the agent whose opinion is to be set.
        opinion : float
            The new opinion value for the agent.
        """
        if index < 0 or index >= self.Network.n_agents():
            raise IndexError("Agent index is out of range.")

        self._simulation.network.agent[index].data.opinion = opinion

    def __getattr__(self, name):
        if "_options" in self.__dict__ and hasattr(
            self.__dict__["_options"].model_settings, name
        ):
            return getattr(self.__dict__["_options"].model_settings, name)
        elif name == "rng_seed":
            return self.__dict__["_options"].rng_seed
        elif name == "other_settings":
            return self.__dict__["other_settings"]
        else:
            return self.__dict__[name]

    def __setattr__(self, name, value):
        if "_options" in self.__dict__ and hasattr(
            self.__dict__["_options"].model_settings, name
        ):
            setattr(self.__dict__["_options"].model_settings, name, value)
        elif name == "rng_seed":
            self.__dict__["_options"].rng_seed = value
        elif name == "other_settings":
            self.__dict__["other_settings"] = value
        else:
            self.__dict__[name] = value
