"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import clappform.proto.clappform.data.v1.update_pb2
import collections.abc
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class UpdateManagementStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ReplaceMany: grpc.UnaryUnaryMultiCallable[
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequestByOid,
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequest,
    ]

    UpdateManyByOid: grpc.UnaryUnaryMultiCallable[
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequestByOid,
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequest,
    ]

    UpdateManyByQuery: grpc.UnaryUnaryMultiCallable[
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequest,
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequest,
    ]

class UpdateManagementAsyncStub:
    ReplaceMany: grpc.aio.UnaryUnaryMultiCallable[
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequestByOid,
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequest,
    ]

    UpdateManyByOid: grpc.aio.UnaryUnaryMultiCallable[
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequestByOid,
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequest,
    ]

    UpdateManyByQuery: grpc.aio.UnaryUnaryMultiCallable[
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequest,
        clappform.proto.clappform.data.v1.update_pb2.UpdateRequest,
    ]

class UpdateManagementServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ReplaceMany(
        self,
        request: clappform.proto.clappform.data.v1.update_pb2.UpdateRequestByOid,
        context: _ServicerContext,
    ) -> typing.Union[clappform.proto.clappform.data.v1.update_pb2.UpdateRequest, collections.abc.Awaitable[clappform.proto.clappform.data.v1.update_pb2.UpdateRequest]]: ...

    @abc.abstractmethod
    def UpdateManyByOid(
        self,
        request: clappform.proto.clappform.data.v1.update_pb2.UpdateRequestByOid,
        context: _ServicerContext,
    ) -> typing.Union[clappform.proto.clappform.data.v1.update_pb2.UpdateRequest, collections.abc.Awaitable[clappform.proto.clappform.data.v1.update_pb2.UpdateRequest]]: ...

    @abc.abstractmethod
    def UpdateManyByQuery(
        self,
        request: clappform.proto.clappform.data.v1.update_pb2.UpdateRequest,
        context: _ServicerContext,
    ) -> typing.Union[clappform.proto.clappform.data.v1.update_pb2.UpdateRequest, collections.abc.Awaitable[clappform.proto.clappform.data.v1.update_pb2.UpdateRequest]]: ...

def add_UpdateManagementServicer_to_server(servicer: UpdateManagementServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
