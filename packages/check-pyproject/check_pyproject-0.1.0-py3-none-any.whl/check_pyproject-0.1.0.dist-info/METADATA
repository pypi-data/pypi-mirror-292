Metadata-Version: 2.3
Name: check_pyproject
Version: 0.1.0
Summary: This tool facilitates syncing of the project and the tool.poetry tables in your pyproject.toml.
Project-URL: check_pyproject, https://github.com/royw/check_pyproject
Author-email: Roy Wright <roy@wright.org>
Maintainer-email: Roy Wright <roy@wright.org>
License: MIT License
        
        Copyright (c) <year> <copyright holders>
        
        Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
Keywords: check,pyproject,python
Classifier: Development Status :: 2 - Pre-Alpha
Classifier: Environment :: Console
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.11
Requires-Dist: loguru<0.8.0,>=0.7.2
Requires-Dist: packaging<25.0.0,>=24.0.0
Requires-Dist: pathvalidate<4.0.0,>=3.2.0
Requires-Dist: tomlkit<0.13.0,>=0.12.5
Provides-Extra: dev
Requires-Dist: blacken-docs<2.0.0,>=1.18.0; extra == 'dev'
Requires-Dist: build<2.0.0,>=1.2.1; extra == 'dev'
Requires-Dist: fawltydeps<0.16.0,>=0.15.0; extra == 'dev'
Requires-Dist: flict<2.0.0,>=1.2.14; extra == 'dev'
Requires-Dist: httpx<0.28.0,>=0.27.0; extra == 'dev'
Requires-Dist: liccheck<0.10.0,>=0.9.2; extra == 'dev'
Requires-Dist: mypy<2.0.0,>=1.10.1; extra == 'dev'
Requires-Dist: pip-tools<8.0.0,>=7.4.1; extra == 'dev'
Requires-Dist: pre-commit<4.0.0,>=3.7.1; extra == 'dev'
Requires-Dist: pyupgrade<4.0.0,>=3.16.0; extra == 'dev'
Requires-Dist: reuse<4.0.0,>=3.0.2; extra == 'dev'
Requires-Dist: ruff<0.5.0,>=0.4.7; extra == 'dev'
Requires-Dist: shellcheck-py<0.11.0,>=0.10.0.1; extra == 'dev'
Requires-Dist: toml-cli<0.8.0,>=0.7.0; extra == 'dev'
Requires-Dist: twine<6.0.0,>=5.1.1; extra == 'dev'
Requires-Dist: validate-pyproject<0.19.0,>=0.18.0; extra == 'dev'
Provides-Extra: docs
Requires-Dist: mkdocs-gen-files<0.6.0,>=0.5.0; extra == 'docs'
Requires-Dist: mkdocs-literate-nav<0.7.0,>=0.6.1; extra == 'docs'
Requires-Dist: mkdocs-material<10.0.0,>=9.5.25; extra == 'docs'
Requires-Dist: mkdocs-section-index<0.4.0,>=0.3.9; extra == 'docs'
Requires-Dist: mkdocs<2.0.0,>=1.6.0; extra == 'docs'
Requires-Dist: mkdocstrings-python<2.0.0,>=1.10.3; extra == 'docs'
Requires-Dist: mkdocstrings<0.26.0,>=0.25.1; extra == 'docs'
Provides-Extra: metrics
Requires-Dist: radon<7.0.0,>=6.0.1; extra == 'metrics'
Provides-Extra: sphinx
Requires-Dist: furo<2025.0.0,>=2024.5.6; extra == 'sphinx'
Requires-Dist: myst-parser<4.0.0,>=3.0.1; extra == 'sphinx'
Requires-Dist: sphinx-autodoc-typehints<3.0.0,>=2.1.1; extra == 'sphinx'
Requires-Dist: sphinx-copybutton<0.6.0,>=0.5.2; extra == 'sphinx'
Requires-Dist: sphinx<8.0.0,>=7.3.7; extra == 'sphinx'
Provides-Extra: test
Requires-Dist: coverage[toml]<8.0.0,>=7.5.4; extra == 'test'
Requires-Dist: pytest-cov<6.0.0,>=5.0.0; extra == 'test'
Requires-Dist: pytest<9.0.0,>=8.2.2; extra == 'test'
Requires-Dist: tox<5.0.0,>=4.14.2; extra == 'test'
Description-Content-Type: text/markdown

<!--
SPDX-FileCopyrightText: 2024 Roy Wright
SPDX-License-Identifier: MIT
-->

# Check PyProject

[![PyPI - Version](https://img.shields.io/pypi/v/check_pyproject.svg)](https://pypi.org/project/check_pyproject)
[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/check_pyproject.svg)](https://pypi.org/project/check_pyproject)

---

## Table of Contents

<!-- TOC -->

- [Check PyProject](#check-pyproject)
  - [Table of Contents](#table-of-contents)
  - [Overview](#overview)
  - [Installation](#installation)
    - [PyPI Installation](#pypi-installation)
    - [Development installation](#development-installation)
      - [Development Prerequisites](#development-prerequisites)
  - [Workflows](#workflows)
    - [Tasks](#tasks)
    - [Switching between development managers](#switching-between-development-managers)
    - [Adding a dependency using poetry](#adding-a-dependency-using-poetry)
    - [Adding a dependency using hatch](#adding-a-dependency-using-hatch)
  - [License](#license)
  - [References](#references) _ [Build tools](#build-tools) _
  [FawltyDeps](#fawltydeps) \* [Documentation tools](#documentation-tools)
  <!-- TOC -->

## Overview

Checks that [project] and [tool.poetry] tables are mostly in-sync in the
`pyproject.toml` file.

The Python Packaging User Guide now specifies `pyproject.toml` metadata.

Poetry <2.0 predates the metadata specification and instead used the then
current standard of [tool.poetry] table. While there is a lot of overlap, there
are some differences (ex. dependency package specifiers). Poetry 2.0 will
support PyPA pyproject.toml specification (formerly PEP 621) which will obsolete
this utility.

So if your project uses poetry and any other tool that requires the current
pyproject.toml metadata, or you are prepping for Poetry 2.0 and do not want to
use the development version of Poetry. then you need to manually maintain sync
between [project] and [tool.poetry] tables.

This tool checks that overlapping metadata, between [project] and [tool.poetry]
tables, are roughly in-sync.

## Installation

### PyPI Installation

`pip install check_pyproject`

### Development installation

#### Development Prerequisites

- Install the task manager: [Task](https://taskfile.dev/)
- Optionally install [pyenv-installer](https://github.com/pyenv/pyenv-installer)

  - Install dependent pythons, example:

    `pyenv local 3.11.9 3.12.3`

  _Note you may need to install some libraries for the pythons to compile
  cleanly._ _For example on ubuntu (note I prefer `nala` over `apt`):_

  `sudo nala install tk-dev libbz2-dev libreadline-dev libsqlite3-dev lzma-dev python3-tk libreadline-dev`

- Recommended to upgrade pip to latest.
- Optionally install [Poetry](https://python-poetry.org/)
- Optionally install [Hatch](https://hatch.pypa.io/)
  - Install [pip-tools](https://pypi.org/project/pip-tools/)
- Optionally install [setuptools](https://setuptools.pypa.io/)
  - Install [build](https://build.pypa.io/)
  - Install [pip-tools](https://pypi.org/project/pip-tools/)
  - Install [twine](https://twine.readthedocs.io/)

Install the package using your favorite dev tool. Examples:

- `git clone git@github.com:royw/check_pyproject.git`
- `cd check_pyproject`
- `task init`
- `task make`

_Note, `task init` will run `git init .`, `git add` the initial project files,
and do a `git commit`. If you are using another VCS, please first edit the init
task in the `Taskfile-*.yml` files._

## Workflows

### Tasks

The `Taskfile.yml` is used to build your workflow as a set of tasks. The initial
workflow is:

    task clean  # removes all build artifacts (metrics, docs,...)
    task make   # lints, formats, checks pyproject.toml, and generates metrics, performs unit tests,
                  performs multi-python version testing, and creates the package.
    task docs   # creates local documentation, starts a local server, opens the home page of the documents in a browser.
    task main   # launches the application in the poetry environment.

This is a starting off point so feel free to CRUD the tasks to fit your needs,
or not even use it.

### Switching between development managers

The tasks that support switching the build system:

    task switch-to-poetry
    task switch-to-hatch
    task switch-to-setuptools

They set the symbolic link for `taskfiles/front-end.yaml` to the appropriate
`taskfiles/poetry.yaml`, `taskfiles/hatch.yaml`, or `taskfiles/setuptools.yaml`.
Note that `taskfiles/front-end.yaml` is imported by `Taskfile.yaml` as `fe`
which stands for "front end":

    includes:
      fe: taskfiles/front-end.yaml

Also, the switch tasks edit the `build-system` table in the `pyproject.toml`
file to the appropriate back-end.

### Adding a dependency using poetry

Add the dependency using the poetry CLI.

    poetry add --group dev some_tool
    task make

The build ought to fail as [project] and [tool.poetry] dependencies are now out
of sync. But the output includes the PEP 508 dependency just added that you can
copy and paste into the [project] table's appropriate dependency.

    task make

Should pass this time.

### Adding a dependency using hatch

Manually edit the `pyproject.toml` file and add the dependency to both [project]
and [tool.poetry] dependency tables. Then running

    task make

Will show any version specifier mismatches...

## License

`check_pyproject` is distributed under the terms of the
[MIT](https://spdx.org/licenses/MIT.html) license.

## References

- The [Python Packaging User Guide](https://packaging.python.org/en/latest)
- The
  [pyproject.toml specification](https://pypi.python.org/pypi/pyproject.toml)
- The [Poetry pyproject.toml metadata](https://python-poetry.org/docs/pyproject)
- [pip documentation](https://pip.pypa.io/en/stable/)
- [Setuptools](https://setuptools.pypa.io/)

### Build tools

- [loguru](https://loguru.readthedocs.io) improved logging.
- [pytest](https://docs.pytest.org) unit testing.
- [pathvalidate](https://pathvalidate.readthedocs.io)
- [tox](https://tox.wiki) multiple python testing.
- [radon](https://radon.readthedocs.io) code metrics.
- [Ruff](https://docs.astral.sh/ruff/) is an extremely fast Python linter and
  code formatter, written in Rust.
- [FawltyDeps](https://github.com/tweag/FawltyDeps) is a dependency checker for
  Python that finds undeclared and/or unused 3rd-party dependencies in your
  Python project.
- [Reuse](https://reuse.readthedocs.io/) is a tool for compliance with the
  [REUSE](https://reuse.software/) recommendations.
- [MyPy](https://www.mypy-lang.org/)

#### FawltyDeps

This tool does a great job in helping keep bloat out of your project. There is
one small issue with it, it does not distinguish project dependencies from
dev/test/doc/... dependencies. So you have to manually add any new tools to the
used list in your [pyproject.toml], like:

    poetry run fawltydeps --detailed --ignore-unused radon pytest-cov pytest tox fawltydeps mkdocs
        mkdocstrings-python mkdocs-literate-nav mkdocs-section-index ruff mkdocs-material

### Documentation tools

After years of suffering with the complexity of sphinx and RST (the PyPA
recommended documentation tool), this project uses MkDocs and MarkDown.
Whoooooop!

**_Here is a big THANK YOU to the MkDocs team, the plugin teams, and the theme
teams!_**

**_Fantastic!_**

Plugins do a nice job of
[automatic code reference](https://mkdocstrings.github.io/recipes/#automatic-code-reference-pages),
and a fantastic theme from the mkdocs-material team!

Configuration is in the `mkdocs.yml` file and the `docs/` and `scripts/`
directories.

The `task docs` will build the documentation into a static site, `site/`, and
run a server at http://localhost:8000/ and open the page in your browser.

- [MkDocs](https://www.mkdocs.org/) Project documentation with Markdown.
- [mkdocs-gen-files](https://github.com/oprypin/mkdocs-gen-files) Plugin for
  MkDocs to programmatically generate documentation pages during the build
- [mkdocs-literate-nav](https://github.com/oprypin/mkdocs-literate-nav) Plugin
  for MkDocs to specify the navigation in Markdown instead of YAML
- [mkdocs-section-index](https://github.com/oprypin/mkdocs-section-index) Plugin
  for MkDocs to allow clickable sections that lead to an index page
- [mkdocstrings](https://mkdocstrings.github.io/) Automatic documentation from
  sources, for MkDocs.
- [catalog](https://github.com/mkdocs/catalog) Catalog of MkDocs plugins.
- [mkdocs-material](https://squidfunk.github.io/mkdocs-material/) Material
  theme.
