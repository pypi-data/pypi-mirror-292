# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountBillingAndPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_email_addresses': 'list[str]',
        'auto_pay': 'bool',
        'bill_cycle_day': 'int',
        'currency': 'str',
        'default_payment_method_id': 'str',
        'invoice_delivery_prefs_email': 'bool',
        'invoice_delivery_prefs_print': 'bool',
        'payment_gateway': 'str',
        'payment_term': 'str',
        'payment_gateway_number': 'str',
        'payment_method_cascading_consent': 'bool',
        'roll_up_usage': 'bool'
    }

    attribute_map = {
        'additional_email_addresses': 'additionalEmailAddresses',
        'auto_pay': 'autoPay',
        'bill_cycle_day': 'billCycleDay',
        'currency': 'currency',
        'default_payment_method_id': 'defaultPaymentMethodId',
        'invoice_delivery_prefs_email': 'invoiceDeliveryPrefsEmail',
        'invoice_delivery_prefs_print': 'invoiceDeliveryPrefsPrint',
        'payment_gateway': 'paymentGateway',
        'payment_term': 'paymentTerm',
        'payment_gateway_number': 'paymentGatewayNumber',
        'payment_method_cascading_consent': 'paymentMethodCascadingConsent',
        'roll_up_usage': 'rollUpUsage'
    }

    def __init__(self, additional_email_addresses=None, auto_pay=None, bill_cycle_day=None, currency=None, default_payment_method_id=None, invoice_delivery_prefs_email=None, invoice_delivery_prefs_print=None, payment_gateway=None, payment_term=None, payment_gateway_number=None, payment_method_cascading_consent=None, roll_up_usage=None):  # noqa: E501
        """AccountBillingAndPayment - a model defined in Swagger"""  # noqa: E501
        self._additional_email_addresses = None
        self._auto_pay = None
        self._bill_cycle_day = None
        self._currency = None
        self._default_payment_method_id = None
        self._invoice_delivery_prefs_email = None
        self._invoice_delivery_prefs_print = None
        self._payment_gateway = None
        self._payment_term = None
        self._payment_gateway_number = None
        self._payment_method_cascading_consent = None
        self._roll_up_usage = None
        self.discriminator = None
        if additional_email_addresses is not None:
            self.additional_email_addresses = additional_email_addresses
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if currency is not None:
            self.currency = currency
        if default_payment_method_id is not None:
            self.default_payment_method_id = default_payment_method_id
        if invoice_delivery_prefs_email is not None:
            self.invoice_delivery_prefs_email = invoice_delivery_prefs_email
        if invoice_delivery_prefs_print is not None:
            self.invoice_delivery_prefs_print = invoice_delivery_prefs_print
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        if payment_term is not None:
            self.payment_term = payment_term
        if payment_gateway_number is not None:
            self.payment_gateway_number = payment_gateway_number
        if payment_method_cascading_consent is not None:
            self.payment_method_cascading_consent = payment_method_cascading_consent
        if roll_up_usage is not None:
            self.roll_up_usage = roll_up_usage

    @property
    def additional_email_addresses(self):
        """Gets the additional_email_addresses of this AccountBillingAndPayment.  # noqa: E501

        A list of additional email addresses to receive email notifications.   # noqa: E501

        :return: The additional_email_addresses of this AccountBillingAndPayment.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_email_addresses

    @additional_email_addresses.setter
    def additional_email_addresses(self, additional_email_addresses):
        """Sets the additional_email_addresses of this AccountBillingAndPayment.

        A list of additional email addresses to receive email notifications.   # noqa: E501

        :param additional_email_addresses: The additional_email_addresses of this AccountBillingAndPayment.  # noqa: E501
        :type: list[str]
        """

        self._additional_email_addresses = additional_email_addresses

    @property
    def auto_pay(self):
        """Gets the auto_pay of this AccountBillingAndPayment.  # noqa: E501

        Whether future payments are automatically collected when they are due during a payment run.    # noqa: E501

        :return: The auto_pay of this AccountBillingAndPayment.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this AccountBillingAndPayment.

        Whether future payments are automatically collected when they are due during a payment run.    # noqa: E501

        :param auto_pay: The auto_pay of this AccountBillingAndPayment.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this AccountBillingAndPayment.  # noqa: E501

        Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.   # noqa: E501

        :return: The bill_cycle_day of this AccountBillingAndPayment.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this AccountBillingAndPayment.

        Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this AccountBillingAndPayment.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def currency(self):
        """Gets the currency of this AccountBillingAndPayment.  # noqa: E501

        A currency defined in the web-based UI administrative settings.   # noqa: E501

        :return: The currency of this AccountBillingAndPayment.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountBillingAndPayment.

        A currency defined in the web-based UI administrative settings.   # noqa: E501

        :param currency: The currency of this AccountBillingAndPayment.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def default_payment_method_id(self):
        """Gets the default_payment_method_id of this AccountBillingAndPayment.  # noqa: E501

        ID of the default payment method for the account.   # noqa: E501

        :return: The default_payment_method_id of this AccountBillingAndPayment.  # noqa: E501
        :rtype: str
        """
        return self._default_payment_method_id

    @default_payment_method_id.setter
    def default_payment_method_id(self, default_payment_method_id):
        """Sets the default_payment_method_id of this AccountBillingAndPayment.

        ID of the default payment method for the account.   # noqa: E501

        :param default_payment_method_id: The default_payment_method_id of this AccountBillingAndPayment.  # noqa: E501
        :type: str
        """

        self._default_payment_method_id = default_payment_method_id

    @property
    def invoice_delivery_prefs_email(self):
        """Gets the invoice_delivery_prefs_email of this AccountBillingAndPayment.  # noqa: E501

        Whether the customer wants to receive invoices through email.    # noqa: E501

        :return: The invoice_delivery_prefs_email of this AccountBillingAndPayment.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_email

    @invoice_delivery_prefs_email.setter
    def invoice_delivery_prefs_email(self, invoice_delivery_prefs_email):
        """Sets the invoice_delivery_prefs_email of this AccountBillingAndPayment.

        Whether the customer wants to receive invoices through email.    # noqa: E501

        :param invoice_delivery_prefs_email: The invoice_delivery_prefs_email of this AccountBillingAndPayment.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_email = invoice_delivery_prefs_email

    @property
    def invoice_delivery_prefs_print(self):
        """Gets the invoice_delivery_prefs_print of this AccountBillingAndPayment.  # noqa: E501

        Whether the customer wants to receive printed invoices, such as through postal mail.   # noqa: E501

        :return: The invoice_delivery_prefs_print of this AccountBillingAndPayment.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_print

    @invoice_delivery_prefs_print.setter
    def invoice_delivery_prefs_print(self, invoice_delivery_prefs_print):
        """Sets the invoice_delivery_prefs_print of this AccountBillingAndPayment.

        Whether the customer wants to receive printed invoices, such as through postal mail.   # noqa: E501

        :param invoice_delivery_prefs_print: The invoice_delivery_prefs_print of this AccountBillingAndPayment.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_print = invoice_delivery_prefs_print

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this AccountBillingAndPayment.  # noqa: E501

        The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.   # noqa: E501

        :return: The payment_gateway of this AccountBillingAndPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this AccountBillingAndPayment.

        The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.   # noqa: E501

        :param payment_gateway: The payment_gateway of this AccountBillingAndPayment.  # noqa: E501
        :type: str
        """

        self._payment_gateway = payment_gateway

    @property
    def payment_term(self):
        """Gets the payment_term of this AccountBillingAndPayment.  # noqa: E501

        A payment-terms indicator defined in the web-based UI administrative settings, e.g., \"Net 30\".   # noqa: E501

        :return: The payment_term of this AccountBillingAndPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this AccountBillingAndPayment.

        A payment-terms indicator defined in the web-based UI administrative settings, e.g., \"Net 30\".   # noqa: E501

        :param payment_term: The payment_term of this AccountBillingAndPayment.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def payment_gateway_number(self):
        """Gets the payment_gateway_number of this AccountBillingAndPayment.  # noqa: E501

        paymentGatewayNumber\".   # noqa: E501

        :return: The payment_gateway_number of this AccountBillingAndPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_number

    @payment_gateway_number.setter
    def payment_gateway_number(self, payment_gateway_number):
        """Sets the payment_gateway_number of this AccountBillingAndPayment.

        paymentGatewayNumber\".   # noqa: E501

        :param payment_gateway_number: The payment_gateway_number of this AccountBillingAndPayment.  # noqa: E501
        :type: str
        """

        self._payment_gateway_number = payment_gateway_number

    @property
    def payment_method_cascading_consent(self):
        """Gets the payment_method_cascading_consent of this AccountBillingAndPayment.  # noqa: E501

        payment method cascading consent   # noqa: E501

        :return: The payment_method_cascading_consent of this AccountBillingAndPayment.  # noqa: E501
        :rtype: bool
        """
        return self._payment_method_cascading_consent

    @payment_method_cascading_consent.setter
    def payment_method_cascading_consent(self, payment_method_cascading_consent):
        """Sets the payment_method_cascading_consent of this AccountBillingAndPayment.

        payment method cascading consent   # noqa: E501

        :param payment_method_cascading_consent: The payment_method_cascading_consent of this AccountBillingAndPayment.  # noqa: E501
        :type: bool
        """

        self._payment_method_cascading_consent = payment_method_cascading_consent

    @property
    def roll_up_usage(self):
        """Gets the roll_up_usage of this AccountBillingAndPayment.  # noqa: E501

        whether roll up usage of the account to its parent account  # noqa: E501

        :return: The roll_up_usage of this AccountBillingAndPayment.  # noqa: E501
        :rtype: bool
        """
        return self._roll_up_usage

    @roll_up_usage.setter
    def roll_up_usage(self, roll_up_usage):
        """Sets the roll_up_usage of this AccountBillingAndPayment.

        whether roll up usage of the account to its parent account  # noqa: E501

        :param roll_up_usage: The roll_up_usage of this AccountBillingAndPayment.  # noqa: E501
        :type: bool
        """

        self._roll_up_usage = roll_up_usage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountBillingAndPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountBillingAndPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
