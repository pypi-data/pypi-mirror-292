# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PreviewOrderAsyncRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'OrderCategory',
        'custom_fields': 'dict(str, object)',
        'description': 'str',
        'existing_account_number': 'str',
        'order_date': 'date',
        'order_line_items': 'list[CreateOrderOrderLineItem]',
        'order_number': 'str',
        'preview_account_info': 'PreviewAccountInfo',
        'preview_options': 'PreviewOptions',
        'reason_code': 'str',
        'subscriptions': 'list[PreviewOrderSubscriptionsAsync]'
    }

    attribute_map = {
        'category': 'category',
        'custom_fields': 'customFields',
        'description': 'description',
        'existing_account_number': 'existingAccountNumber',
        'order_date': 'orderDate',
        'order_line_items': 'orderLineItems',
        'order_number': 'orderNumber',
        'preview_account_info': 'previewAccountInfo',
        'preview_options': 'previewOptions',
        'reason_code': 'reasonCode',
        'subscriptions': 'subscriptions'
    }

    def __init__(self, category=None, custom_fields=None, description=None, existing_account_number=None, order_date=None, order_line_items=None, order_number=None, preview_account_info=None, preview_options=None, reason_code=None, subscriptions=None):  # noqa: E501
        """PreviewOrderAsyncRequest - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._custom_fields = None
        self._description = None
        self._existing_account_number = None
        self._order_date = None
        self._order_line_items = None
        self._order_number = None
        self._preview_account_info = None
        self._preview_options = None
        self._reason_code = None
        self._subscriptions = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if description is not None:
            self.description = description
        if existing_account_number is not None:
            self.existing_account_number = existing_account_number
        self.order_date = order_date
        if order_line_items is not None:
            self.order_line_items = order_line_items
        if order_number is not None:
            self.order_number = order_number
        if preview_account_info is not None:
            self.preview_account_info = preview_account_info
        self.preview_options = preview_options
        if reason_code is not None:
            self.reason_code = reason_code
        if subscriptions is not None:
            self.subscriptions = subscriptions

    @property
    def category(self):
        """Gets the category of this PreviewOrderAsyncRequest.  # noqa: E501


        :return: The category of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: OrderCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PreviewOrderAsyncRequest.


        :param category: The category of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: OrderCategory
        """

        self._category = category

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PreviewOrderAsyncRequest.  # noqa: E501

        Container for custom fields of an Order object.   # noqa: E501

        :return: The custom_fields of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PreviewOrderAsyncRequest.

        Container for custom fields of an Order object.   # noqa: E501

        :param custom_fields: The custom_fields of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this PreviewOrderAsyncRequest.  # noqa: E501

        A description of the order.  # noqa: E501

        :return: The description of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PreviewOrderAsyncRequest.

        A description of the order.  # noqa: E501

        :param description: The description of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def existing_account_number(self):
        """Gets the existing_account_number of this PreviewOrderAsyncRequest.  # noqa: E501

        The account number that this order will be created under. It can be either the accountNumber or the account info. It will return an error if both are specified. Note that invoice owner account of the subscriptions included in this order should be the same with the account of the order.   # noqa: E501

        :return: The existing_account_number of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._existing_account_number

    @existing_account_number.setter
    def existing_account_number(self, existing_account_number):
        """Sets the existing_account_number of this PreviewOrderAsyncRequest.

        The account number that this order will be created under. It can be either the accountNumber or the account info. It will return an error if both are specified. Note that invoice owner account of the subscriptions included in this order should be the same with the account of the order.   # noqa: E501

        :param existing_account_number: The existing_account_number of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: str
        """

        self._existing_account_number = existing_account_number

    @property
    def order_date(self):
        """Gets the order_date of this PreviewOrderAsyncRequest.  # noqa: E501

        The date when the order is signed. All of the order actions under this order will use this order date as the contract effective date.  # noqa: E501

        :return: The order_date of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: date
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this PreviewOrderAsyncRequest.

        The date when the order is signed. All of the order actions under this order will use this order date as the contract effective date.  # noqa: E501

        :param order_date: The order_date of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: date
        """
        if order_date is None:
            raise ValueError("Invalid value for `order_date`, must not be `None`")  # noqa: E501

        self._order_date = order_date

    @property
    def order_line_items(self):
        """Gets the order_line_items of this PreviewOrderAsyncRequest.  # noqa: E501

        [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.   With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.   **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.          # noqa: E501

        :return: The order_line_items of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: list[CreateOrderOrderLineItem]
        """
        return self._order_line_items

    @order_line_items.setter
    def order_line_items(self, order_line_items):
        """Sets the order_line_items of this PreviewOrderAsyncRequest.

        [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.   With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.   **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.          # noqa: E501

        :param order_line_items: The order_line_items of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: list[CreateOrderOrderLineItem]
        """

        self._order_line_items = order_line_items

    @property
    def order_number(self):
        """Gets the order_number of this PreviewOrderAsyncRequest.  # noqa: E501

        The order number of this order.    **Note:** Make sure the order number does not contain a slash.   # noqa: E501

        :return: The order_number of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this PreviewOrderAsyncRequest.

        The order number of this order.    **Note:** Make sure the order number does not contain a slash.   # noqa: E501

        :param order_number: The order_number of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def preview_account_info(self):
        """Gets the preview_account_info of this PreviewOrderAsyncRequest.  # noqa: E501


        :return: The preview_account_info of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: PreviewAccountInfo
        """
        return self._preview_account_info

    @preview_account_info.setter
    def preview_account_info(self, preview_account_info):
        """Sets the preview_account_info of this PreviewOrderAsyncRequest.


        :param preview_account_info: The preview_account_info of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: PreviewAccountInfo
        """

        self._preview_account_info = preview_account_info

    @property
    def preview_options(self):
        """Gets the preview_options of this PreviewOrderAsyncRequest.  # noqa: E501


        :return: The preview_options of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: PreviewOptions
        """
        return self._preview_options

    @preview_options.setter
    def preview_options(self, preview_options):
        """Sets the preview_options of this PreviewOrderAsyncRequest.


        :param preview_options: The preview_options of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: PreviewOptions
        """
        if preview_options is None:
            raise ValueError("Invalid value for `preview_options`, must not be `None`")  # noqa: E501

        self._preview_options = preview_options

    @property
    def reason_code(self):
        """Gets the reason_code of this PreviewOrderAsyncRequest.  # noqa: E501

        Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.   # noqa: E501

        :return: The reason_code of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this PreviewOrderAsyncRequest.

        Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.   # noqa: E501

        :param reason_code: The reason_code of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def subscriptions(self):
        """Gets the subscriptions of this PreviewOrderAsyncRequest.  # noqa: E501

        Each item includes a set of order actions, which will be applied to the same base subscription.  # noqa: E501

        :return: The subscriptions of this PreviewOrderAsyncRequest.  # noqa: E501
        :rtype: list[PreviewOrderSubscriptionsAsync]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this PreviewOrderAsyncRequest.

        Each item includes a set of order actions, which will be applied to the same base subscription.  # noqa: E501

        :param subscriptions: The subscriptions of this PreviewOrderAsyncRequest.  # noqa: E501
        :type: list[PreviewOrderSubscriptionsAsync]
        """

        self._subscriptions = subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreviewOrderAsyncRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreviewOrderAsyncRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
