# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Job(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'import_type': 'JobType',
        'uploaded_file_id': 'str',
        'uploaded_file_name': 'str',
        'uploaded_file_url': 'str',
        'uploaded_file_size': 'str',
        'input_file_size': 'int',
        'output_size': 'str',
        'output_type': 'str',
        'output_file_size': 'int',
        'uploaded_by': 'str',
        'uploaded_on': 'datetime',
        'completed_on': 'datetime',
        'started_processing_on': 'datetime',
        'result_file_id': 'str',
        'result_file_name': 'str',
        'result_file_url': 'str',
        'total_count': 'int',
        'failed_count': 'int',
        'status': 'DataBackfillJobStatus',
        'failure_message': 'str',
        'processed_count': 'int',
        'success_count': 'int',
        'remaining_time': 'int',
        'remaining_time_text': 'str',
        'completed_percentage': 'int'
    }

    attribute_map = {
        'id': 'id',
        'import_type': 'importType',
        'uploaded_file_id': 'uploadedFileId',
        'uploaded_file_name': 'uploadedFileName',
        'uploaded_file_url': 'uploadedFileUrl',
        'uploaded_file_size': 'uploadedFileSize',
        'input_file_size': 'inputFileSize',
        'output_size': 'outputSize',
        'output_type': 'outputType',
        'output_file_size': 'outputFileSize',
        'uploaded_by': 'uploadedBy',
        'uploaded_on': 'uploadedOn',
        'completed_on': 'completedOn',
        'started_processing_on': 'startedProcessingOn',
        'result_file_id': 'resultFileId',
        'result_file_name': 'resultFileName',
        'result_file_url': 'resultFileUrl',
        'total_count': 'totalCount',
        'failed_count': 'failedCount',
        'status': 'status',
        'failure_message': 'failureMessage',
        'processed_count': 'processedCount',
        'success_count': 'successCount',
        'remaining_time': 'remainingTime',
        'remaining_time_text': 'remainingTimeText',
        'completed_percentage': 'completedPercentage'
    }

    def __init__(self, id=None, import_type=None, uploaded_file_id=None, uploaded_file_name=None, uploaded_file_url=None, uploaded_file_size=None, input_file_size=None, output_size=None, output_type=None, output_file_size=None, uploaded_by=None, uploaded_on=None, completed_on=None, started_processing_on=None, result_file_id=None, result_file_name=None, result_file_url=None, total_count=None, failed_count=None, status=None, failure_message=None, processed_count=None, success_count=None, remaining_time=None, remaining_time_text=None, completed_percentage=None):  # noqa: E501
        """Job - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._import_type = None
        self._uploaded_file_id = None
        self._uploaded_file_name = None
        self._uploaded_file_url = None
        self._uploaded_file_size = None
        self._input_file_size = None
        self._output_size = None
        self._output_type = None
        self._output_file_size = None
        self._uploaded_by = None
        self._uploaded_on = None
        self._completed_on = None
        self._started_processing_on = None
        self._result_file_id = None
        self._result_file_name = None
        self._result_file_url = None
        self._total_count = None
        self._failed_count = None
        self._status = None
        self._failure_message = None
        self._processed_count = None
        self._success_count = None
        self._remaining_time = None
        self._remaining_time_text = None
        self._completed_percentage = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if import_type is not None:
            self.import_type = import_type
        if uploaded_file_id is not None:
            self.uploaded_file_id = uploaded_file_id
        if uploaded_file_name is not None:
            self.uploaded_file_name = uploaded_file_name
        if uploaded_file_url is not None:
            self.uploaded_file_url = uploaded_file_url
        if uploaded_file_size is not None:
            self.uploaded_file_size = uploaded_file_size
        if input_file_size is not None:
            self.input_file_size = input_file_size
        if output_size is not None:
            self.output_size = output_size
        if output_type is not None:
            self.output_type = output_type
        if output_file_size is not None:
            self.output_file_size = output_file_size
        if uploaded_by is not None:
            self.uploaded_by = uploaded_by
        if uploaded_on is not None:
            self.uploaded_on = uploaded_on
        if completed_on is not None:
            self.completed_on = completed_on
        if started_processing_on is not None:
            self.started_processing_on = started_processing_on
        if result_file_id is not None:
            self.result_file_id = result_file_id
        if result_file_name is not None:
            self.result_file_name = result_file_name
        if result_file_url is not None:
            self.result_file_url = result_file_url
        if total_count is not None:
            self.total_count = total_count
        if failed_count is not None:
            self.failed_count = failed_count
        if status is not None:
            self.status = status
        if failure_message is not None:
            self.failure_message = failure_message
        if processed_count is not None:
            self.processed_count = processed_count
        if success_count is not None:
            self.success_count = success_count
        if remaining_time is not None:
            self.remaining_time = remaining_time
        if remaining_time_text is not None:
            self.remaining_time_text = remaining_time_text
        if completed_percentage is not None:
            self.completed_percentage = completed_percentage

    @property
    def id(self):
        """Gets the id of this Job.  # noqa: E501

        Job id  # noqa: E501

        :return: The id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        Job id  # noqa: E501

        :param id: The id of this Job.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def import_type(self):
        """Gets the import_type of this Job.  # noqa: E501


        :return: The import_type of this Job.  # noqa: E501
        :rtype: JobType
        """
        return self._import_type

    @import_type.setter
    def import_type(self, import_type):
        """Sets the import_type of this Job.


        :param import_type: The import_type of this Job.  # noqa: E501
        :type: JobType
        """

        self._import_type = import_type

    @property
    def uploaded_file_id(self):
        """Gets the uploaded_file_id of this Job.  # noqa: E501

        Id of uploaded file  # noqa: E501

        :return: The uploaded_file_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_file_id

    @uploaded_file_id.setter
    def uploaded_file_id(self, uploaded_file_id):
        """Sets the uploaded_file_id of this Job.

        Id of uploaded file  # noqa: E501

        :param uploaded_file_id: The uploaded_file_id of this Job.  # noqa: E501
        :type: str
        """

        self._uploaded_file_id = uploaded_file_id

    @property
    def uploaded_file_name(self):
        """Gets the uploaded_file_name of this Job.  # noqa: E501

        Name of uploaded file  # noqa: E501

        :return: The uploaded_file_name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_file_name

    @uploaded_file_name.setter
    def uploaded_file_name(self, uploaded_file_name):
        """Sets the uploaded_file_name of this Job.

        Name of uploaded file  # noqa: E501

        :param uploaded_file_name: The uploaded_file_name of this Job.  # noqa: E501
        :type: str
        """

        self._uploaded_file_name = uploaded_file_name

    @property
    def uploaded_file_url(self):
        """Gets the uploaded_file_url of this Job.  # noqa: E501


        :return: The uploaded_file_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_file_url

    @uploaded_file_url.setter
    def uploaded_file_url(self, uploaded_file_url):
        """Sets the uploaded_file_url of this Job.


        :param uploaded_file_url: The uploaded_file_url of this Job.  # noqa: E501
        :type: str
        """

        self._uploaded_file_url = uploaded_file_url

    @property
    def uploaded_file_size(self):
        """Gets the uploaded_file_size of this Job.  # noqa: E501


        :return: The uploaded_file_size of this Job.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_file_size

    @uploaded_file_size.setter
    def uploaded_file_size(self, uploaded_file_size):
        """Sets the uploaded_file_size of this Job.


        :param uploaded_file_size: The uploaded_file_size of this Job.  # noqa: E501
        :type: str
        """

        self._uploaded_file_size = uploaded_file_size

    @property
    def input_file_size(self):
        """Gets the input_file_size of this Job.  # noqa: E501


        :return: The input_file_size of this Job.  # noqa: E501
        :rtype: int
        """
        return self._input_file_size

    @input_file_size.setter
    def input_file_size(self, input_file_size):
        """Sets the input_file_size of this Job.


        :param input_file_size: The input_file_size of this Job.  # noqa: E501
        :type: int
        """

        self._input_file_size = input_file_size

    @property
    def output_size(self):
        """Gets the output_size of this Job.  # noqa: E501


        :return: The output_size of this Job.  # noqa: E501
        :rtype: str
        """
        return self._output_size

    @output_size.setter
    def output_size(self, output_size):
        """Sets the output_size of this Job.


        :param output_size: The output_size of this Job.  # noqa: E501
        :type: str
        """

        self._output_size = output_size

    @property
    def output_type(self):
        """Gets the output_type of this Job.  # noqa: E501


        :return: The output_type of this Job.  # noqa: E501
        :rtype: str
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this Job.


        :param output_type: The output_type of this Job.  # noqa: E501
        :type: str
        """

        self._output_type = output_type

    @property
    def output_file_size(self):
        """Gets the output_file_size of this Job.  # noqa: E501


        :return: The output_file_size of this Job.  # noqa: E501
        :rtype: int
        """
        return self._output_file_size

    @output_file_size.setter
    def output_file_size(self, output_file_size):
        """Sets the output_file_size of this Job.


        :param output_file_size: The output_file_size of this Job.  # noqa: E501
        :type: int
        """

        self._output_file_size = output_file_size

    @property
    def uploaded_by(self):
        """Gets the uploaded_by of this Job.  # noqa: E501


        :return: The uploaded_by of this Job.  # noqa: E501
        :rtype: str
        """
        return self._uploaded_by

    @uploaded_by.setter
    def uploaded_by(self, uploaded_by):
        """Sets the uploaded_by of this Job.


        :param uploaded_by: The uploaded_by of this Job.  # noqa: E501
        :type: str
        """

        self._uploaded_by = uploaded_by

    @property
    def uploaded_on(self):
        """Gets the uploaded_on of this Job.  # noqa: E501


        :return: The uploaded_on of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._uploaded_on

    @uploaded_on.setter
    def uploaded_on(self, uploaded_on):
        """Sets the uploaded_on of this Job.


        :param uploaded_on: The uploaded_on of this Job.  # noqa: E501
        :type: datetime
        """

        self._uploaded_on = uploaded_on

    @property
    def completed_on(self):
        """Gets the completed_on of this Job.  # noqa: E501


        :return: The completed_on of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_on

    @completed_on.setter
    def completed_on(self, completed_on):
        """Sets the completed_on of this Job.


        :param completed_on: The completed_on of this Job.  # noqa: E501
        :type: datetime
        """

        self._completed_on = completed_on

    @property
    def started_processing_on(self):
        """Gets the started_processing_on of this Job.  # noqa: E501


        :return: The started_processing_on of this Job.  # noqa: E501
        :rtype: datetime
        """
        return self._started_processing_on

    @started_processing_on.setter
    def started_processing_on(self, started_processing_on):
        """Sets the started_processing_on of this Job.


        :param started_processing_on: The started_processing_on of this Job.  # noqa: E501
        :type: datetime
        """

        self._started_processing_on = started_processing_on

    @property
    def result_file_id(self):
        """Gets the result_file_id of this Job.  # noqa: E501


        :return: The result_file_id of this Job.  # noqa: E501
        :rtype: str
        """
        return self._result_file_id

    @result_file_id.setter
    def result_file_id(self, result_file_id):
        """Sets the result_file_id of this Job.


        :param result_file_id: The result_file_id of this Job.  # noqa: E501
        :type: str
        """

        self._result_file_id = result_file_id

    @property
    def result_file_name(self):
        """Gets the result_file_name of this Job.  # noqa: E501


        :return: The result_file_name of this Job.  # noqa: E501
        :rtype: str
        """
        return self._result_file_name

    @result_file_name.setter
    def result_file_name(self, result_file_name):
        """Sets the result_file_name of this Job.


        :param result_file_name: The result_file_name of this Job.  # noqa: E501
        :type: str
        """

        self._result_file_name = result_file_name

    @property
    def result_file_url(self):
        """Gets the result_file_url of this Job.  # noqa: E501


        :return: The result_file_url of this Job.  # noqa: E501
        :rtype: str
        """
        return self._result_file_url

    @result_file_url.setter
    def result_file_url(self, result_file_url):
        """Sets the result_file_url of this Job.


        :param result_file_url: The result_file_url of this Job.  # noqa: E501
        :type: str
        """

        self._result_file_url = result_file_url

    @property
    def total_count(self):
        """Gets the total_count of this Job.  # noqa: E501


        :return: The total_count of this Job.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this Job.


        :param total_count: The total_count of this Job.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def failed_count(self):
        """Gets the failed_count of this Job.  # noqa: E501


        :return: The failed_count of this Job.  # noqa: E501
        :rtype: int
        """
        return self._failed_count

    @failed_count.setter
    def failed_count(self, failed_count):
        """Sets the failed_count of this Job.


        :param failed_count: The failed_count of this Job.  # noqa: E501
        :type: int
        """

        self._failed_count = failed_count

    @property
    def status(self):
        """Gets the status of this Job.  # noqa: E501


        :return: The status of this Job.  # noqa: E501
        :rtype: DataBackfillJobStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.


        :param status: The status of this Job.  # noqa: E501
        :type: DataBackfillJobStatus
        """

        self._status = status

    @property
    def failure_message(self):
        """Gets the failure_message of this Job.  # noqa: E501


        :return: The failure_message of this Job.  # noqa: E501
        :rtype: str
        """
        return self._failure_message

    @failure_message.setter
    def failure_message(self, failure_message):
        """Sets the failure_message of this Job.


        :param failure_message: The failure_message of this Job.  # noqa: E501
        :type: str
        """

        self._failure_message = failure_message

    @property
    def processed_count(self):
        """Gets the processed_count of this Job.  # noqa: E501


        :return: The processed_count of this Job.  # noqa: E501
        :rtype: int
        """
        return self._processed_count

    @processed_count.setter
    def processed_count(self, processed_count):
        """Sets the processed_count of this Job.


        :param processed_count: The processed_count of this Job.  # noqa: E501
        :type: int
        """

        self._processed_count = processed_count

    @property
    def success_count(self):
        """Gets the success_count of this Job.  # noqa: E501


        :return: The success_count of this Job.  # noqa: E501
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this Job.


        :param success_count: The success_count of this Job.  # noqa: E501
        :type: int
        """

        self._success_count = success_count

    @property
    def remaining_time(self):
        """Gets the remaining_time of this Job.  # noqa: E501


        :return: The remaining_time of this Job.  # noqa: E501
        :rtype: int
        """
        return self._remaining_time

    @remaining_time.setter
    def remaining_time(self, remaining_time):
        """Sets the remaining_time of this Job.


        :param remaining_time: The remaining_time of this Job.  # noqa: E501
        :type: int
        """

        self._remaining_time = remaining_time

    @property
    def remaining_time_text(self):
        """Gets the remaining_time_text of this Job.  # noqa: E501


        :return: The remaining_time_text of this Job.  # noqa: E501
        :rtype: str
        """
        return self._remaining_time_text

    @remaining_time_text.setter
    def remaining_time_text(self, remaining_time_text):
        """Sets the remaining_time_text of this Job.


        :param remaining_time_text: The remaining_time_text of this Job.  # noqa: E501
        :type: str
        """

        self._remaining_time_text = remaining_time_text

    @property
    def completed_percentage(self):
        """Gets the completed_percentage of this Job.  # noqa: E501


        :return: The completed_percentage of this Job.  # noqa: E501
        :rtype: int
        """
        return self._completed_percentage

    @completed_percentage.setter
    def completed_percentage(self, completed_percentage):
        """Sets the completed_percentage of this Job.


        :param completed_percentage: The completed_percentage of this Job.  # noqa: E501
        :type: int
        """

        self._completed_percentage = completed_percentage

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Job, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Job):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
