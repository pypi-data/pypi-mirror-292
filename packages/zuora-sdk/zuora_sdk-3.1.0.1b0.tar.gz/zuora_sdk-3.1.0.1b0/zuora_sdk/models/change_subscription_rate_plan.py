# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChangeSubscriptionRatePlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'booking_date': 'date',
        'charge_overrides': 'list[AddSubscriptionComponent]',
        'contract_effective_date': 'date',
        'customer_acceptance_date': 'date',
        'effective_policy': 'str',
        'external_catalog_plan_id': 'str',
        'external_id_source_system': 'str',
        'new_external_catalog_plan_id': 'str',
        'new_external_id_source_system': 'str',
        'new_product_rate_plan_id': 'str',
        'new_product_rate_plan_number': 'str',
        'product_rate_plan_id': 'str',
        'product_rate_plan_number': 'str',
        'rate_plan_id': 'str',
        'reset_bcd': 'bool',
        'service_activation_date': 'date',
        'sub_type': 'str',
        'subscription_rate_plan_number': 'str'
    }

    attribute_map = {
        'booking_date': 'bookingDate',
        'charge_overrides': 'chargeOverrides',
        'contract_effective_date': 'contractEffectiveDate',
        'customer_acceptance_date': 'customerAcceptanceDate',
        'effective_policy': 'effectivePolicy',
        'external_catalog_plan_id': 'externalCatalogPlanId',
        'external_id_source_system': 'externalIdSourceSystem',
        'new_external_catalog_plan_id': 'newExternalCatalogPlanId',
        'new_external_id_source_system': 'newExternalIdSourceSystem',
        'new_product_rate_plan_id': 'newProductRatePlanId',
        'new_product_rate_plan_number': 'newProductRatePlanNumber',
        'product_rate_plan_id': 'productRatePlanId',
        'product_rate_plan_number': 'productRatePlanNumber',
        'rate_plan_id': 'ratePlanId',
        'reset_bcd': 'resetBcd',
        'service_activation_date': 'serviceActivationDate',
        'sub_type': 'subType',
        'subscription_rate_plan_number': 'subscriptionRatePlanNumber'
    }

    def __init__(self, booking_date=None, charge_overrides=None, contract_effective_date=None, customer_acceptance_date=None, effective_policy=None, external_catalog_plan_id=None, external_id_source_system=None, new_external_catalog_plan_id=None, new_external_id_source_system=None, new_product_rate_plan_id=None, new_product_rate_plan_number=None, product_rate_plan_id=None, product_rate_plan_number=None, rate_plan_id=None, reset_bcd=False, service_activation_date=None, sub_type=None, subscription_rate_plan_number=None):  # noqa: E501
        """ChangeSubscriptionRatePlan - a model defined in Swagger"""  # noqa: E501
        self._booking_date = None
        self._charge_overrides = None
        self._contract_effective_date = None
        self._customer_acceptance_date = None
        self._effective_policy = None
        self._external_catalog_plan_id = None
        self._external_id_source_system = None
        self._new_external_catalog_plan_id = None
        self._new_external_id_source_system = None
        self._new_product_rate_plan_id = None
        self._new_product_rate_plan_number = None
        self._product_rate_plan_id = None
        self._product_rate_plan_number = None
        self._rate_plan_id = None
        self._reset_bcd = None
        self._service_activation_date = None
        self._sub_type = None
        self._subscription_rate_plan_number = None
        self.discriminator = None
        if booking_date is not None:
            self.booking_date = booking_date
        if charge_overrides is not None:
            self.charge_overrides = charge_overrides
        if contract_effective_date is not None:
            self.contract_effective_date = contract_effective_date
        if customer_acceptance_date is not None:
            self.customer_acceptance_date = customer_acceptance_date
        if effective_policy is not None:
            self.effective_policy = effective_policy
        if external_catalog_plan_id is not None:
            self.external_catalog_plan_id = external_catalog_plan_id
        if external_id_source_system is not None:
            self.external_id_source_system = external_id_source_system
        if new_external_catalog_plan_id is not None:
            self.new_external_catalog_plan_id = new_external_catalog_plan_id
        if new_external_id_source_system is not None:
            self.new_external_id_source_system = new_external_id_source_system
        if new_product_rate_plan_id is not None:
            self.new_product_rate_plan_id = new_product_rate_plan_id
        if new_product_rate_plan_number is not None:
            self.new_product_rate_plan_number = new_product_rate_plan_number
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if product_rate_plan_number is not None:
            self.product_rate_plan_number = product_rate_plan_number
        if rate_plan_id is not None:
            self.rate_plan_id = rate_plan_id
        if reset_bcd is not None:
            self.reset_bcd = reset_bcd
        if service_activation_date is not None:
            self.service_activation_date = service_activation_date
        if sub_type is not None:
            self.sub_type = sub_type
        if subscription_rate_plan_number is not None:
            self.subscription_rate_plan_number = subscription_rate_plan_number

    @property
    def booking_date(self):
        """Gets the booking_date of this ChangeSubscriptionRatePlan.  # noqa: E501

        The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call.    # noqa: E501

        :return: The booking_date of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: date
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this ChangeSubscriptionRatePlan.

        The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call.    # noqa: E501

        :param booking_date: The booking_date of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: date
        """

        self._booking_date = booking_date

    @property
    def charge_overrides(self):
        """Gets the charge_overrides of this ChangeSubscriptionRatePlan.  # noqa: E501

        This optional container is used to override one or more product rate plan charges for this subscription.  # noqa: E501

        :return: The charge_overrides of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: list[AddSubscriptionComponent]
        """
        return self._charge_overrides

    @charge_overrides.setter
    def charge_overrides(self, charge_overrides):
        """Sets the charge_overrides of this ChangeSubscriptionRatePlan.

        This optional container is used to override one or more product rate plan charges for this subscription.  # noqa: E501

        :param charge_overrides: The charge_overrides of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: list[AddSubscriptionComponent]
        """

        self._charge_overrides = charge_overrides

    @property
    def contract_effective_date(self):
        """Gets the contract_effective_date of this ChangeSubscriptionRatePlan.  # noqa: E501

        Effective date of the new subscription, as yyyy-mm-dd.  # noqa: E501

        :return: The contract_effective_date of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: date
        """
        return self._contract_effective_date

    @contract_effective_date.setter
    def contract_effective_date(self, contract_effective_date):
        """Sets the contract_effective_date of this ChangeSubscriptionRatePlan.

        Effective date of the new subscription, as yyyy-mm-dd.  # noqa: E501

        :param contract_effective_date: The contract_effective_date of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: date
        """

        self._contract_effective_date = contract_effective_date

    @property
    def customer_acceptance_date(self):
        """Gets the customer_acceptance_date of this ChangeSubscriptionRatePlan.  # noqa: E501

        The date when the customer accepts the contract in yyyy-mm-dd format. When this field is not set: * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date. * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.  The billing trigger dates must follow this rule: contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :return: The customer_acceptance_date of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: date
        """
        return self._customer_acceptance_date

    @customer_acceptance_date.setter
    def customer_acceptance_date(self, customer_acceptance_date):
        """Sets the customer_acceptance_date of this ChangeSubscriptionRatePlan.

        The date when the customer accepts the contract in yyyy-mm-dd format. When this field is not set: * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date. * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.  The billing trigger dates must follow this rule: contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :param customer_acceptance_date: The customer_acceptance_date of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: date
        """

        self._customer_acceptance_date = customer_acceptance_date

    @property
    def effective_policy(self):
        """Gets the effective_policy of this ChangeSubscriptionRatePlan.  # noqa: E501

        The default value for the `effectivePolicy` field is as follows:   * If the rate plan change (from old to new) is an upgrade, the effective policy is `EffectiveImmediately` by default.   * If the rate plan change (from old to new) is a downgrade, the effective policy is `EffectiveEndOfBillingPeriod` by default.   * Otherwise, the effective policy is `SpecificDate` by default.  Note that if the `effectivePolicy` field is set to `EffectiveEndOfBillingPeriod`, you cannot set the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/W_Subscription_and_Amendment_Dates#Billing_Trigger_Dates\" target=\"_blank\">billing trigger dates</a> for the subscription as the system will automatically set the trigger dates to the end of billing period.   # noqa: E501

        :return: The effective_policy of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._effective_policy

    @effective_policy.setter
    def effective_policy(self, effective_policy):
        """Sets the effective_policy of this ChangeSubscriptionRatePlan.

        The default value for the `effectivePolicy` field is as follows:   * If the rate plan change (from old to new) is an upgrade, the effective policy is `EffectiveImmediately` by default.   * If the rate plan change (from old to new) is a downgrade, the effective policy is `EffectiveEndOfBillingPeriod` by default.   * Otherwise, the effective policy is `SpecificDate` by default.  Note that if the `effectivePolicy` field is set to `EffectiveEndOfBillingPeriod`, you cannot set the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/W_Subscription_and_Amendment_Dates#Billing_Trigger_Dates\" target=\"_blank\">billing trigger dates</a> for the subscription as the system will automatically set the trigger dates to the end of billing period.   # noqa: E501

        :param effective_policy: The effective_policy of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["EffectiveImmediately", "EffectiveEndOfBillingPeriod", "SpecificDate"]  # noqa: E501
        if effective_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `effective_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(effective_policy, allowed_values)
            )

        self._effective_policy = effective_policy

    @property
    def external_catalog_plan_id(self):
        """Gets the external_catalog_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501

        An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** Provide only one of `externalCatalogPlanId`, `ratePlanId` or `productRatePlanId`. If more than one field is provided then the request would fail.   # noqa: E501

        :return: The external_catalog_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._external_catalog_plan_id

    @external_catalog_plan_id.setter
    def external_catalog_plan_id(self, external_catalog_plan_id):
        """Sets the external_catalog_plan_id of this ChangeSubscriptionRatePlan.

        An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** Provide only one of `externalCatalogPlanId`, `ratePlanId` or `productRatePlanId`. If more than one field is provided then the request would fail.   # noqa: E501

        :param external_catalog_plan_id: The external_catalog_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._external_catalog_plan_id = external_catalog_plan_id

    @property
    def external_id_source_system(self):
        """Gets the external_id_source_system of this ChangeSubscriptionRatePlan.  # noqa: E501

        The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :return: The external_id_source_system of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._external_id_source_system

    @external_id_source_system.setter
    def external_id_source_system(self, external_id_source_system):
        """Sets the external_id_source_system of this ChangeSubscriptionRatePlan.

        The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :param external_id_source_system: The external_id_source_system of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._external_id_source_system = external_id_source_system

    @property
    def new_external_catalog_plan_id(self):
        """Gets the new_external_catalog_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501

        An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.  **Note:** Provide only one of `newExternalCatalogPlanId` or `newProductRatePlanId`. If both fields are provided then the request would fail.   # noqa: E501

        :return: The new_external_catalog_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._new_external_catalog_plan_id

    @new_external_catalog_plan_id.setter
    def new_external_catalog_plan_id(self, new_external_catalog_plan_id):
        """Sets the new_external_catalog_plan_id of this ChangeSubscriptionRatePlan.

        An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.  **Note:** Provide only one of `newExternalCatalogPlanId` or `newProductRatePlanId`. If both fields are provided then the request would fail.   # noqa: E501

        :param new_external_catalog_plan_id: The new_external_catalog_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._new_external_catalog_plan_id = new_external_catalog_plan_id

    @property
    def new_external_id_source_system(self):
        """Gets the new_external_id_source_system of this ChangeSubscriptionRatePlan.  # noqa: E501

        The ID of the external source system. You can use this field and `newExternalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `newExternalCatalogPlanId`, `newExternalIdSourceSystem` and `newProductRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :return: The new_external_id_source_system of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._new_external_id_source_system

    @new_external_id_source_system.setter
    def new_external_id_source_system(self, new_external_id_source_system):
        """Sets the new_external_id_source_system of this ChangeSubscriptionRatePlan.

        The ID of the external source system. You can use this field and `newExternalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `newExternalCatalogPlanId`, `newExternalIdSourceSystem` and `newProductRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :param new_external_id_source_system: The new_external_id_source_system of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._new_external_id_source_system = new_external_id_source_system

    @property
    def new_product_rate_plan_id(self):
        """Gets the new_product_rate_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501

        ID of a product rate plan for this subscription.  # noqa: E501

        :return: The new_product_rate_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._new_product_rate_plan_id

    @new_product_rate_plan_id.setter
    def new_product_rate_plan_id(self, new_product_rate_plan_id):
        """Sets the new_product_rate_plan_id of this ChangeSubscriptionRatePlan.

        ID of a product rate plan for this subscription.  # noqa: E501

        :param new_product_rate_plan_id: The new_product_rate_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._new_product_rate_plan_id = new_product_rate_plan_id

    @property
    def new_product_rate_plan_number(self):
        """Gets the new_product_rate_plan_number of this ChangeSubscriptionRatePlan.  # noqa: E501

        Number of a product rate plan for this subscription.  # noqa: E501

        :return: The new_product_rate_plan_number of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._new_product_rate_plan_number

    @new_product_rate_plan_number.setter
    def new_product_rate_plan_number(self, new_product_rate_plan_number):
        """Sets the new_product_rate_plan_number of this ChangeSubscriptionRatePlan.

        Number of a product rate plan for this subscription.  # noqa: E501

        :param new_product_rate_plan_number: The new_product_rate_plan_number of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._new_product_rate_plan_number = new_product_rate_plan_number

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501

        ID of the product rate plan that the removed rate plan is based on.   # noqa: E501

        :return: The product_rate_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this ChangeSubscriptionRatePlan.

        ID of the product rate plan that the removed rate plan is based on.   # noqa: E501

        :param product_rate_plan_id: The product_rate_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def product_rate_plan_number(self):
        """Gets the product_rate_plan_number of this ChangeSubscriptionRatePlan.  # noqa: E501

        Number of a product rate plan for this subscription.      # noqa: E501

        :return: The product_rate_plan_number of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_number

    @product_rate_plan_number.setter
    def product_rate_plan_number(self, product_rate_plan_number):
        """Sets the product_rate_plan_number of this ChangeSubscriptionRatePlan.

        Number of a product rate plan for this subscription.      # noqa: E501

        :param product_rate_plan_number: The product_rate_plan_number of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_number = product_rate_plan_number

    @property
    def rate_plan_id(self):
        """Gets the rate_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501

        ID of a rate plan to remove. Note that the removal of a rate plan through the Change Plan amendment supports the function of <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Subscribe_and_Amend/E_Amendments/EB_Remove_rate_plan_on_subscription_before_future-dated_removals\" target=\"_blank\">removal before future-dated removals</a>, as in a Remove Product amendment.   # noqa: E501

        :return: The rate_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_id

    @rate_plan_id.setter
    def rate_plan_id(self, rate_plan_id):
        """Sets the rate_plan_id of this ChangeSubscriptionRatePlan.

        ID of a rate plan to remove. Note that the removal of a rate plan through the Change Plan amendment supports the function of <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Subscribe_and_Amend/E_Amendments/EB_Remove_rate_plan_on_subscription_before_future-dated_removals\" target=\"_blank\">removal before future-dated removals</a>, as in a Remove Product amendment.   # noqa: E501

        :param rate_plan_id: The rate_plan_id of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._rate_plan_id = rate_plan_id

    @property
    def reset_bcd(self):
        """Gets the reset_bcd of this ChangeSubscriptionRatePlan.  # noqa: E501

        If resetBcd is true then reset the Account BCD to the effective date; if it is false keep the original BCD.   # noqa: E501

        :return: The reset_bcd of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: bool
        """
        return self._reset_bcd

    @reset_bcd.setter
    def reset_bcd(self, reset_bcd):
        """Sets the reset_bcd of this ChangeSubscriptionRatePlan.

        If resetBcd is true then reset the Account BCD to the effective date; if it is false keep the original BCD.   # noqa: E501

        :param reset_bcd: The reset_bcd of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: bool
        """

        self._reset_bcd = reset_bcd

    @property
    def service_activation_date(self):
        """Gets the service_activation_date of this ChangeSubscriptionRatePlan.  # noqa: E501

        The date when the change in the subscription is activated in yyyy-mm-dd format. You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date. The billing trigger dates must follow this rule: contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate  # noqa: E501

        :return: The service_activation_date of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: date
        """
        return self._service_activation_date

    @service_activation_date.setter
    def service_activation_date(self, service_activation_date):
        """Sets the service_activation_date of this ChangeSubscriptionRatePlan.

        The date when the change in the subscription is activated in yyyy-mm-dd format. You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date. The billing trigger dates must follow this rule: contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate  # noqa: E501

        :param service_activation_date: The service_activation_date of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: date
        """

        self._service_activation_date = service_activation_date

    @property
    def sub_type(self):
        """Gets the sub_type of this ChangeSubscriptionRatePlan.  # noqa: E501

        Use this field to choose the sub type for your change plan amendment.   However, if you do not set this field, the field will be automatically generated by the system according to the following rules:  When the old and new rate plans are within the same Grading catalog group: * If the grade of new plan is greater than that of the old plan, this is an \"Upgrade\". * If the grade of new plan is less than that of the old plan, this is a \"Downgrade\". * If the grade of new plan equals that of the old plan, this is a \"Crossgrade\".  When the old and new rate plans are not in the same Grading catalog group, or either has no group, this is \"PlanChanged\".   # noqa: E501

        :return: The sub_type of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this ChangeSubscriptionRatePlan.

        Use this field to choose the sub type for your change plan amendment.   However, if you do not set this field, the field will be automatically generated by the system according to the following rules:  When the old and new rate plans are within the same Grading catalog group: * If the grade of new plan is greater than that of the old plan, this is an \"Upgrade\". * If the grade of new plan is less than that of the old plan, this is a \"Downgrade\". * If the grade of new plan equals that of the old plan, this is a \"Crossgrade\".  When the old and new rate plans are not in the same Grading catalog group, or either has no group, this is \"PlanChanged\".   # noqa: E501

        :param sub_type: The sub_type of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["Upgrade", "Downgrade", "Crossgrade", "PlanChanged"]  # noqa: E501
        if sub_type not in allowed_values:
            raise ValueError(
                "Invalid value for `sub_type` ({0}), must be one of {1}"  # noqa: E501
                .format(sub_type, allowed_values)
            )

        self._sub_type = sub_type

    @property
    def subscription_rate_plan_number(self):
        """Gets the subscription_rate_plan_number of this ChangeSubscriptionRatePlan.  # noqa: E501

        Number of a rate plan for this subscription.    # noqa: E501

        :return: The subscription_rate_plan_number of this ChangeSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._subscription_rate_plan_number

    @subscription_rate_plan_number.setter
    def subscription_rate_plan_number(self, subscription_rate_plan_number):
        """Sets the subscription_rate_plan_number of this ChangeSubscriptionRatePlan.

        Number of a rate plan for this subscription.    # noqa: E501

        :param subscription_rate_plan_number: The subscription_rate_plan_number of this ChangeSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._subscription_rate_plan_number = subscription_rate_plan_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChangeSubscriptionRatePlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChangeSubscriptionRatePlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
