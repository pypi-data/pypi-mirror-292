# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'sku': 'str',
        'product_number': 'str',
        'name': 'str',
        'category': 'ProductCategory',
        'description': 'str',
        'effective_start_date': 'date',
        'effective_end_date': 'date',
        'product_rate_plans': 'str',
        'product_features': 'list[ProductFeature]',
        'tags': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'item_type__ns': 'ProductObjectNSFieldsItemTypeNS',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'id': 'id',
        'sku': 'sku',
        'product_number': 'productNumber',
        'name': 'name',
        'category': 'category',
        'description': 'description',
        'effective_start_date': 'effectiveStartDate',
        'effective_end_date': 'effectiveEndDate',
        'product_rate_plans': 'productRatePlans',
        'product_features': 'productFeatures',
        'tags': 'tags',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'item_type__ns': 'ItemType__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, id=None, sku=None, product_number=None, name=None, category=None, description=None, effective_start_date=None, effective_end_date=None, product_rate_plans=None, product_features=None, tags=None, integration_id__ns=None, integration_status__ns=None, item_type__ns=None, sync_date__ns=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._sku = None
        self._product_number = None
        self._name = None
        self._category = None
        self._description = None
        self._effective_start_date = None
        self._effective_end_date = None
        self._product_rate_plans = None
        self._product_features = None
        self._tags = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._item_type__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if sku is not None:
            self.sku = sku
        if product_number is not None:
            self.product_number = product_number
        if name is not None:
            self.name = name
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if effective_start_date is not None:
            self.effective_start_date = effective_start_date
        if effective_end_date is not None:
            self.effective_end_date = effective_end_date
        if product_rate_plans is not None:
            self.product_rate_plans = product_rate_plans
        if product_features is not None:
            self.product_features = product_features
        if tags is not None:
            self.tags = tags
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if item_type__ns is not None:
            self.item_type__ns = item_type__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def id(self):
        """Gets the id of this Product.  # noqa: E501

        Product ID.   # noqa: E501

        :return: The id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.

        Product ID.   # noqa: E501

        :param id: The id of this Product.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def sku(self):
        """Gets the sku of this Product.  # noqa: E501

        Unique product SKU, up to 50 characters.   # noqa: E501

        :return: The sku of this Product.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this Product.

        Unique product SKU, up to 50 characters.   # noqa: E501

        :param sku: The sku of this Product.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def product_number(self):
        """Gets the product_number of this Product.  # noqa: E501

        The natural key of the product.   # noqa: E501

        :return: The product_number of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_number

    @product_number.setter
    def product_number(self, product_number):
        """Sets the product_number of this Product.

        The natural key of the product.   # noqa: E501

        :param product_number: The product_number of this Product.  # noqa: E501
        :type: str
        """

        self._product_number = product_number

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501

        Product name, up to 100 characters.   # noqa: E501

        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.

        Product name, up to 100 characters.   # noqa: E501

        :param name: The name of this Product.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def category(self):
        """Gets the category of this Product.  # noqa: E501


        :return: The category of this Product.  # noqa: E501
        :rtype: ProductCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Product.


        :param category: The category of this Product.  # noqa: E501
        :type: ProductCategory
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this Product.  # noqa: E501

        Optional product description.   # noqa: E501

        :return: The description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Product.

        Optional product description.   # noqa: E501

        :param description: The description of this Product.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def effective_start_date(self):
        """Gets the effective_start_date of this Product.  # noqa: E501

        The date when the product becomes available and can be subscribed to, as `yyyy-mm-dd`.   # noqa: E501

        :return: The effective_start_date of this Product.  # noqa: E501
        :rtype: date
        """
        return self._effective_start_date

    @effective_start_date.setter
    def effective_start_date(self, effective_start_date):
        """Sets the effective_start_date of this Product.

        The date when the product becomes available and can be subscribed to, as `yyyy-mm-dd`.   # noqa: E501

        :param effective_start_date: The effective_start_date of this Product.  # noqa: E501
        :type: date
        """

        self._effective_start_date = effective_start_date

    @property
    def effective_end_date(self):
        """Gets the effective_end_date of this Product.  # noqa: E501

        The date when the product expires and cannot be subscribed to anymore, as `yyyy-mm-dd`.   # noqa: E501

        :return: The effective_end_date of this Product.  # noqa: E501
        :rtype: date
        """
        return self._effective_end_date

    @effective_end_date.setter
    def effective_end_date(self, effective_end_date):
        """Sets the effective_end_date of this Product.

        The date when the product expires and cannot be subscribed to anymore, as `yyyy-mm-dd`.   # noqa: E501

        :param effective_end_date: The effective_end_date of this Product.  # noqa: E501
        :type: date
        """

        self._effective_end_date = effective_end_date

    @property
    def product_rate_plans(self):
        """Gets the product_rate_plans of this Product.  # noqa: E501

        URL to retrieve information about all product rate plans of a specific product. For example, `/v1/rateplan/40289f466463d683016463ef8b7301a0/productRatePlan`. If you want to view the product rate plan details, call [List all product rate plans of a product](https://www.zuora.com/developer/api-references/api/operation/Get_ProductRatePlans) #FIXME with the returned URL.  This field is in Zuora REST API version control. If you set the `zuora-version` request header to `230.0` or later, the value of this field is a URL. Zuora recommends that you use the latest behavior to retrieve product information.  If you do not set the `zuora-version` request header or you set this header to `229.0` or earlier, the value of this field is an array of product rate plan details. For more information about the array, see the response body of [List all product rate plans of a product](https://www.zuora.com/developer/api-references/api/operation/Get_ProductRatePlans). **Note**: The array contains a maximum of 300 product rate plans. Additionally, across all product rate plans, at most 300 product rate plan charges are returned.   # noqa: E501

        :return: The product_rate_plans of this Product.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plans

    @product_rate_plans.setter
    def product_rate_plans(self, product_rate_plans):
        """Sets the product_rate_plans of this Product.

        URL to retrieve information about all product rate plans of a specific product. For example, `/v1/rateplan/40289f466463d683016463ef8b7301a0/productRatePlan`. If you want to view the product rate plan details, call [List all product rate plans of a product](https://www.zuora.com/developer/api-references/api/operation/Get_ProductRatePlans) #FIXME with the returned URL.  This field is in Zuora REST API version control. If you set the `zuora-version` request header to `230.0` or later, the value of this field is a URL. Zuora recommends that you use the latest behavior to retrieve product information.  If you do not set the `zuora-version` request header or you set this header to `229.0` or earlier, the value of this field is an array of product rate plan details. For more information about the array, see the response body of [List all product rate plans of a product](https://www.zuora.com/developer/api-references/api/operation/Get_ProductRatePlans). **Note**: The array contains a maximum of 300 product rate plans. Additionally, across all product rate plans, at most 300 product rate plan charges are returned.   # noqa: E501

        :param product_rate_plans: The product_rate_plans of this Product.  # noqa: E501
        :type: str
        """

        self._product_rate_plans = product_rate_plans

    @property
    def product_features(self):
        """Gets the product_features of this Product.  # noqa: E501

        Container for one or more product features. Only available when the following settings are enabled: - The Entitlements feature in your tenant - The Enable Feature Specification in Product and Subscriptions setting in Settings > Billing   # noqa: E501

        :return: The product_features of this Product.  # noqa: E501
        :rtype: list[ProductFeature]
        """
        return self._product_features

    @product_features.setter
    def product_features(self, product_features):
        """Sets the product_features of this Product.

        Container for one or more product features. Only available when the following settings are enabled: - The Entitlements feature in your tenant - The Enable Feature Specification in Product and Subscriptions setting in Settings > Billing   # noqa: E501

        :param product_features: The product_features of this Product.  # noqa: E501
        :type: list[ProductFeature]
        """

        self._product_features = product_features

    @property
    def tags(self):
        """Gets the tags of this Product.  # noqa: E501


        :return: The tags of this Product.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Product.


        :param tags: The tags of this Product.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this Product.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this Product.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this Product.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this Product.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this Product.  # noqa: E501

        Status of the product's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this Product.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this Product.

        Status of the product's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this Product.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def item_type__ns(self):
        """Gets the item_type__ns of this Product.  # noqa: E501


        :return: The item_type__ns of this Product.  # noqa: E501
        :rtype: ProductObjectNSFieldsItemTypeNS
        """
        return self._item_type__ns

    @item_type__ns.setter
    def item_type__ns(self, item_type__ns):
        """Sets the item_type__ns of this Product.


        :param item_type__ns: The item_type__ns of this Product.  # noqa: E501
        :type: ProductObjectNSFieldsItemTypeNS
        """

        self._item_type__ns = item_type__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this Product.  # noqa: E501

        Date when the product was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this Product.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this Product.

        Date when the product was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this Product.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
