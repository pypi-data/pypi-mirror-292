# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomObjectAllFieldsDefinitionAllOfCreatedDate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'CustomObjectAllFieldsDefinitionAllOfCreatedDateFormat',
        'origin': 'CustomObjectAllFieldsDefinitionAllOfCreatedDateOrigin',
        'type': 'CustomObjectAllFieldsDefinitionAllOfCreatedDateType'
    }

    attribute_map = {
        'format': 'format',
        'origin': 'origin',
        'type': 'type'
    }

    def __init__(self, format=None, origin=None, type=None):  # noqa: E501
        """CustomObjectAllFieldsDefinitionAllOfCreatedDate - a model defined in Swagger"""  # noqa: E501
        self._format = None
        self._origin = None
        self._type = None
        self.discriminator = None
        if format is not None:
            self.format = format
        if origin is not None:
            self.origin = origin
        if type is not None:
            self.type = type

    @property
    def format(self):
        """Gets the format of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.  # noqa: E501


        :return: The format of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.  # noqa: E501
        :rtype: CustomObjectAllFieldsDefinitionAllOfCreatedDateFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.


        :param format: The format of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.  # noqa: E501
        :type: CustomObjectAllFieldsDefinitionAllOfCreatedDateFormat
        """

        self._format = format

    @property
    def origin(self):
        """Gets the origin of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.  # noqa: E501


        :return: The origin of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.  # noqa: E501
        :rtype: CustomObjectAllFieldsDefinitionAllOfCreatedDateOrigin
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.


        :param origin: The origin of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.  # noqa: E501
        :type: CustomObjectAllFieldsDefinitionAllOfCreatedDateOrigin
        """

        self._origin = origin

    @property
    def type(self):
        """Gets the type of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.  # noqa: E501


        :return: The type of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.  # noqa: E501
        :rtype: CustomObjectAllFieldsDefinitionAllOfCreatedDateType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.


        :param type: The type of this CustomObjectAllFieldsDefinitionAllOfCreatedDate.  # noqa: E501
        :type: CustomObjectAllFieldsDefinitionAllOfCreatedDateType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomObjectAllFieldsDefinitionAllOfCreatedDate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomObjectAllFieldsDefinitionAllOfCreatedDate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
