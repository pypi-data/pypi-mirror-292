# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SignUpRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_data': 'AccountData',
        'account_identifier_field': 'str',
        'custom_fields': 'dict(str, object)',
        'options': 'Options',
        'payment_data': 'PaymentData',
        'subscription_data': 'SubscriptionData'
    }

    attribute_map = {
        'account_data': 'accountData',
        'account_identifier_field': 'accountIdentifierField',
        'custom_fields': 'customFields',
        'options': 'options',
        'payment_data': 'paymentData',
        'subscription_data': 'subscriptionData'
    }

    def __init__(self, account_data=None, account_identifier_field=None, custom_fields=None, options=None, payment_data=None, subscription_data=None):  # noqa: E501
        """SignUpRequest - a model defined in Swagger"""  # noqa: E501
        self._account_data = None
        self._account_identifier_field = None
        self._custom_fields = None
        self._options = None
        self._payment_data = None
        self._subscription_data = None
        self.discriminator = None
        if account_data is not None:
            self.account_data = account_data
        if account_identifier_field is not None:
            self.account_identifier_field = account_identifier_field
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if options is not None:
            self.options = options
        if payment_data is not None:
            self.payment_data = payment_data
        if subscription_data is not None:
            self.subscription_data = subscription_data

    @property
    def account_data(self):
        """Gets the account_data of this SignUpRequest.  # noqa: E501


        :return: The account_data of this SignUpRequest.  # noqa: E501
        :rtype: AccountData
        """
        return self._account_data

    @account_data.setter
    def account_data(self, account_data):
        """Sets the account_data of this SignUpRequest.


        :param account_data: The account_data of this SignUpRequest.  # noqa: E501
        :type: AccountData
        """

        self._account_data = account_data

    @property
    def account_identifier_field(self):
        """Gets the account_identifier_field of this SignUpRequest.  # noqa: E501

        Specify the name of the field that holds external account id  # noqa: E501

        :return: The account_identifier_field of this SignUpRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_identifier_field

    @account_identifier_field.setter
    def account_identifier_field(self, account_identifier_field):
        """Sets the account_identifier_field of this SignUpRequest.

        Specify the name of the field that holds external account id  # noqa: E501

        :param account_identifier_field: The account_identifier_field of this SignUpRequest.  # noqa: E501
        :type: str
        """

        self._account_identifier_field = account_identifier_field

    @property
    def custom_fields(self):
        """Gets the custom_fields of this SignUpRequest.  # noqa: E501

        Container for custom fields.   # noqa: E501

        :return: The custom_fields of this SignUpRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this SignUpRequest.

        Container for custom fields.   # noqa: E501

        :param custom_fields: The custom_fields of this SignUpRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def options(self):
        """Gets the options of this SignUpRequest.  # noqa: E501


        :return: The options of this SignUpRequest.  # noqa: E501
        :rtype: Options
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this SignUpRequest.


        :param options: The options of this SignUpRequest.  # noqa: E501
        :type: Options
        """

        self._options = options

    @property
    def payment_data(self):
        """Gets the payment_data of this SignUpRequest.  # noqa: E501


        :return: The payment_data of this SignUpRequest.  # noqa: E501
        :rtype: PaymentData
        """
        return self._payment_data

    @payment_data.setter
    def payment_data(self, payment_data):
        """Sets the payment_data of this SignUpRequest.


        :param payment_data: The payment_data of this SignUpRequest.  # noqa: E501
        :type: PaymentData
        """

        self._payment_data = payment_data

    @property
    def subscription_data(self):
        """Gets the subscription_data of this SignUpRequest.  # noqa: E501


        :return: The subscription_data of this SignUpRequest.  # noqa: E501
        :rtype: SubscriptionData
        """
        return self._subscription_data

    @subscription_data.setter
    def subscription_data(self, subscription_data):
        """Sets the subscription_data of this SignUpRequest.


        :param subscription_data: The subscription_data of this SignUpRequest.  # noqa: E501
        :type: SubscriptionData
        """

        self._subscription_data = subscription_data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignUpRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignUpRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
