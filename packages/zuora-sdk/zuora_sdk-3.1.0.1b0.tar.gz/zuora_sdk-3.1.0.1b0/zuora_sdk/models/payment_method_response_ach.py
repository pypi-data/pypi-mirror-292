# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentMethodResponseACH(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bank_aba_code': 'str',
        'bank_account_name': 'str',
        'bank_account_number': 'str',
        'bank_account_mask_number': 'str',
        'bank_account_type': 'PaymentMethodACHBankAccountType',
        'bank_name': 'str'
    }

    attribute_map = {
        'bank_aba_code': 'bankABACode',
        'bank_account_name': 'bankAccountName',
        'bank_account_number': 'bankAccountNumber',
        'bank_account_mask_number': 'bankAccountMaskNumber',
        'bank_account_type': 'bankAccountType',
        'bank_name': 'bankName'
    }

    def __init__(self, bank_aba_code=None, bank_account_name=None, bank_account_number=None, bank_account_mask_number=None, bank_account_type=None, bank_name=None):  # noqa: E501
        """PaymentMethodResponseACH - a model defined in Swagger"""  # noqa: E501
        self._bank_aba_code = None
        self._bank_account_name = None
        self._bank_account_number = None
        self._bank_account_mask_number = None
        self._bank_account_type = None
        self._bank_name = None
        self.discriminator = None
        if bank_aba_code is not None:
            self.bank_aba_code = bank_aba_code
        if bank_account_name is not None:
            self.bank_account_name = bank_account_name
        if bank_account_number is not None:
            self.bank_account_number = bank_account_number
        if bank_account_mask_number is not None:
            self.bank_account_mask_number = bank_account_mask_number
        if bank_account_type is not None:
            self.bank_account_type = bank_account_type
        if bank_name is not None:
            self.bank_name = bank_name

    @property
    def bank_aba_code(self):
        """Gets the bank_aba_code of this PaymentMethodResponseACH.  # noqa: E501

        The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :return: The bank_aba_code of this PaymentMethodResponseACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_aba_code

    @bank_aba_code.setter
    def bank_aba_code(self, bank_aba_code):
        """Sets the bank_aba_code of this PaymentMethodResponseACH.

        The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :param bank_aba_code: The bank_aba_code of this PaymentMethodResponseACH.  # noqa: E501
        :type: str
        """

        self._bank_aba_code = bank_aba_code

    @property
    def bank_account_name(self):
        """Gets the bank_account_name of this PaymentMethodResponseACH.  # noqa: E501

        The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :return: The bank_account_name of this PaymentMethodResponseACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_name

    @bank_account_name.setter
    def bank_account_name(self, bank_account_name):
        """Sets the bank_account_name of this PaymentMethodResponseACH.

        The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :param bank_account_name: The bank_account_name of this PaymentMethodResponseACH.  # noqa: E501
        :type: str
        """

        self._bank_account_name = bank_account_name

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this PaymentMethodResponseACH.  # noqa: E501

        The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`. However, for creating tokenized ACH payment methods on  Stripe v2, this field is optional if the `tokens` and `bankAccountMaskNumber` fields are specified.   # noqa: E501

        :return: The bank_account_number of this PaymentMethodResponseACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this PaymentMethodResponseACH.

        The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`. However, for creating tokenized ACH payment methods on  Stripe v2, this field is optional if the `tokens` and `bankAccountMaskNumber` fields are specified.   # noqa: E501

        :param bank_account_number: The bank_account_number of this PaymentMethodResponseACH.  # noqa: E501
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_account_mask_number(self):
        """Gets the bank_account_mask_number of this PaymentMethodResponseACH.  # noqa: E501

        The masked bank account number associated with the ACH payment. This field is only required if the ACH payment method is created using tokens.   # noqa: E501

        :return: The bank_account_mask_number of this PaymentMethodResponseACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_mask_number

    @bank_account_mask_number.setter
    def bank_account_mask_number(self, bank_account_mask_number):
        """Sets the bank_account_mask_number of this PaymentMethodResponseACH.

        The masked bank account number associated with the ACH payment. This field is only required if the ACH payment method is created using tokens.   # noqa: E501

        :param bank_account_mask_number: The bank_account_mask_number of this PaymentMethodResponseACH.  # noqa: E501
        :type: str
        """

        self._bank_account_mask_number = bank_account_mask_number

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this PaymentMethodResponseACH.  # noqa: E501


        :return: The bank_account_type of this PaymentMethodResponseACH.  # noqa: E501
        :rtype: PaymentMethodACHBankAccountType
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this PaymentMethodResponseACH.


        :param bank_account_type: The bank_account_type of this PaymentMethodResponseACH.  # noqa: E501
        :type: PaymentMethodACHBankAccountType
        """

        self._bank_account_type = bank_account_type

    @property
    def bank_name(self):
        """Gets the bank_name of this PaymentMethodResponseACH.  # noqa: E501

        The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`.  When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.   # noqa: E501

        :return: The bank_name of this PaymentMethodResponseACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this PaymentMethodResponseACH.

        The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`.  When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.   # noqa: E501

        :param bank_name: The bank_name of this PaymentMethodResponseACH.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentMethodResponseACH, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodResponseACH):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
