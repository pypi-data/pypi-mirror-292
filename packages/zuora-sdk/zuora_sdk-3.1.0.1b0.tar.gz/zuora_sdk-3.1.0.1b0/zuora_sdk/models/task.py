# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Task(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'str',
        'call_type': 'str',
        'concurrent_limit': 'int',
        'id': 'int',
        'name': 'str',
        'object': 'str',
        'object_id': 'str',
        'status': 'UpdateTaskStatus',
        'tags': 'list[str]',
        'workflow_id': 'int'
    }

    attribute_map = {
        'action_type': 'action_type',
        'call_type': 'call_type',
        'concurrent_limit': 'concurrent_limit',
        'id': 'id',
        'name': 'name',
        'object': 'object',
        'object_id': 'object_id',
        'status': 'status',
        'tags': 'tags',
        'workflow_id': 'workflow_id'
    }

    def __init__(self, action_type=None, call_type=None, concurrent_limit=None, id=None, name=None, object=None, object_id=None, status=None, tags=None, workflow_id=None):  # noqa: E501
        """Task - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._call_type = None
        self._concurrent_limit = None
        self._id = None
        self._name = None
        self._object = None
        self._object_id = None
        self._status = None
        self._tags = None
        self._workflow_id = None
        self.discriminator = None
        if action_type is not None:
            self.action_type = action_type
        if call_type is not None:
            self.call_type = call_type
        if concurrent_limit is not None:
            self.concurrent_limit = concurrent_limit
        self.id = id
        if name is not None:
            self.name = name
        if object is not None:
            self.object = object
        if object_id is not None:
            self.object_id = object_id
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if workflow_id is not None:
            self.workflow_id = workflow_id

    @property
    def action_type(self):
        """Gets the action_type of this Task.  # noqa: E501

        The type of task.   # noqa: E501

        :return: The action_type of this Task.  # noqa: E501
        :rtype: str
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this Task.

        The type of task.   # noqa: E501

        :param action_type: The action_type of this Task.  # noqa: E501
        :type: str
        """

        self._action_type = action_type

    @property
    def call_type(self):
        """Gets the call_type of this Task.  # noqa: E501

        The type of the API used.   # noqa: E501

        :return: The call_type of this Task.  # noqa: E501
        :rtype: str
        """
        return self._call_type

    @call_type.setter
    def call_type(self, call_type):
        """Sets the call_type of this Task.

        The type of the API used.   # noqa: E501

        :param call_type: The call_type of this Task.  # noqa: E501
        :type: str
        """

        self._call_type = call_type

    @property
    def concurrent_limit(self):
        """Gets the concurrent_limit of this Task.  # noqa: E501

        The maximum number of this task that can run concurrently.   # noqa: E501

        :return: The concurrent_limit of this Task.  # noqa: E501
        :rtype: int
        """
        return self._concurrent_limit

    @concurrent_limit.setter
    def concurrent_limit(self, concurrent_limit):
        """Sets the concurrent_limit of this Task.

        The maximum number of this task that can run concurrently.   # noqa: E501

        :param concurrent_limit: The concurrent_limit of this Task.  # noqa: E501
        :type: int
        """

        self._concurrent_limit = concurrent_limit

    @property
    def id(self):
        """Gets the id of this Task.  # noqa: E501

        The unique ID of the task.   # noqa: E501

        :return: The id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Task.

        The unique ID of the task.   # noqa: E501

        :param id: The id of this Task.  # noqa: E501
        :type: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this Task.  # noqa: E501

        The name of the task.   # noqa: E501

        :return: The name of this Task.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Task.

        The name of the task.   # noqa: E501

        :param name: The name of this Task.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def object(self):
        """Gets the object of this Task.  # noqa: E501

        The selected object for the task.   # noqa: E501

        :return: The object of this Task.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this Task.

        The selected object for the task.   # noqa: E501

        :param object: The object of this Task.  # noqa: E501
        :type: str
        """

        self._object = object

    @property
    def object_id(self):
        """Gets the object_id of this Task.  # noqa: E501

        The ID of the selected object of the task.   # noqa: E501

        :return: The object_id of this Task.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this Task.

        The ID of the selected object of the task.   # noqa: E501

        :param object_id: The object_id of this Task.  # noqa: E501
        :type: str
        """

        self._object_id = object_id

    @property
    def status(self):
        """Gets the status of this Task.  # noqa: E501


        :return: The status of this Task.  # noqa: E501
        :rtype: UpdateTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Task.


        :param status: The status of this Task.  # noqa: E501
        :type: UpdateTaskStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this Task.  # noqa: E501

        The array of filter tags.   # noqa: E501

        :return: The tags of this Task.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Task.

        The array of filter tags.   # noqa: E501

        :param tags: The tags of this Task.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def workflow_id(self):
        """Gets the workflow_id of this Task.  # noqa: E501

        The ID of the workflow the task belongs to.   # noqa: E501

        :return: The workflow_id of this Task.  # noqa: E501
        :rtype: int
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this Task.

        The ID of the workflow the task belongs to.   # noqa: E501

        :param workflow_id: The workflow_id of this Task.  # noqa: E501
        :type: int
        """

        self._workflow_id = workflow_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Task, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Task):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
