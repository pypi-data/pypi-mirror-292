# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateOrderCustomFieldsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_fields': 'dict(str, object)',
        'subscriptions': 'list[UpdateOrderSubscriptionsCustomFields]'
    }

    attribute_map = {
        'custom_fields': 'customFields',
        'subscriptions': 'subscriptions'
    }

    def __init__(self, custom_fields=None, subscriptions=None):  # noqa: E501
        """UpdateOrderCustomFieldsRequest - a model defined in Swagger"""  # noqa: E501
        self._custom_fields = None
        self._subscriptions = None
        self.discriminator = None
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if subscriptions is not None:
            self.subscriptions = subscriptions

    @property
    def custom_fields(self):
        """Gets the custom_fields of this UpdateOrderCustomFieldsRequest.  # noqa: E501

        Container for custom fields of an Order object.   # noqa: E501

        :return: The custom_fields of this UpdateOrderCustomFieldsRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this UpdateOrderCustomFieldsRequest.

        Container for custom fields of an Order object.   # noqa: E501

        :param custom_fields: The custom_fields of this UpdateOrderCustomFieldsRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def subscriptions(self):
        """Gets the subscriptions of this UpdateOrderCustomFieldsRequest.  # noqa: E501


        :return: The subscriptions of this UpdateOrderCustomFieldsRequest.  # noqa: E501
        :rtype: list[UpdateOrderSubscriptionsCustomFields]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this UpdateOrderCustomFieldsRequest.


        :param subscriptions: The subscriptions of this UpdateOrderCustomFieldsRequest.  # noqa: E501
        :type: list[UpdateOrderSubscriptionsCustomFields]
        """

        self._subscriptions = subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateOrderCustomFieldsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOrderCustomFieldsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
