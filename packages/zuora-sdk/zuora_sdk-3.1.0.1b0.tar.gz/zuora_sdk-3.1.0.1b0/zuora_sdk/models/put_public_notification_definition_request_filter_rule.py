# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PutPublicNotificationDefinitionRequestFilterRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'condition': 'str',
        'description': 'str',
        'parameters': 'dict(str, FilterRuleParameterDefinition)'
    }

    attribute_map = {
        'condition': 'condition',
        'description': 'description',
        'parameters': 'parameters'
    }

    def __init__(self, condition=None, description=None, parameters=None):  # noqa: E501
        """PutPublicNotificationDefinitionRequestFilterRule - a model defined in Swagger"""  # noqa: E501
        self._condition = None
        self._description = None
        self._parameters = None
        self.discriminator = None
        self.condition = condition
        if description is not None:
            self.description = description
        self.parameters = parameters

    @property
    def condition(self):
        """Gets the condition of this PutPublicNotificationDefinitionRequestFilterRule.  # noqa: E501

        The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Notifications with invalid merge fields will fail to evaluate, thus will not be invoked. For example, to trigger an event when an invoice is posted with the amount over 1000, you would define the following condition on the `Invoice` object:  ```changeType == 'UPDATE' && Invoice.Status == 'Posted' && Invoice.Status_old != 'Posted' && Invoice.Amount > 1000```  There are conventions and keywords you need to be aware of. For example:  * `changeType` is a keyword to specify what kind of change happened to the object. Allowed values are `INSERT`, `UPDATE` or `Delete`.  * `Invoice.Status` refers to field `Status` of the Zuora object `Invoice`.  * A variable with the `_old` suffix means it’s a previous value of the corresponding object field. The \"_old\" fields are only available on the base objects.   # noqa: E501

        :return: The condition of this PutPublicNotificationDefinitionRequestFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this PutPublicNotificationDefinitionRequestFilterRule.

        The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Notifications with invalid merge fields will fail to evaluate, thus will not be invoked. For example, to trigger an event when an invoice is posted with the amount over 1000, you would define the following condition on the `Invoice` object:  ```changeType == 'UPDATE' && Invoice.Status == 'Posted' && Invoice.Status_old != 'Posted' && Invoice.Amount > 1000```  There are conventions and keywords you need to be aware of. For example:  * `changeType` is a keyword to specify what kind of change happened to the object. Allowed values are `INSERT`, `UPDATE` or `Delete`.  * `Invoice.Status` refers to field `Status` of the Zuora object `Invoice`.  * A variable with the `_old` suffix means it’s a previous value of the corresponding object field. The \"_old\" fields are only available on the base objects.   # noqa: E501

        :param condition: The condition of this PutPublicNotificationDefinitionRequestFilterRule.  # noqa: E501
        :type: str
        """
        if condition is None:
            raise ValueError("Invalid value for `condition`, must not be `None`")  # noqa: E501

        self._condition = condition

    @property
    def description(self):
        """Gets the description of this PutPublicNotificationDefinitionRequestFilterRule.  # noqa: E501

        The description of the filter rule.  # noqa: E501

        :return: The description of this PutPublicNotificationDefinitionRequestFilterRule.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PutPublicNotificationDefinitionRequestFilterRule.

        The description of the filter rule.  # noqa: E501

        :param description: The description of this PutPublicNotificationDefinitionRequestFilterRule.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def parameters(self):
        """Gets the parameters of this PutPublicNotificationDefinitionRequestFilterRule.  # noqa: E501

        The parameters of the filter rule and their name must match those in the filter rule. And all parameters must be defined in the event type payload. The name of parameters can't be duplicate. The following reserved keywords should not be used as a parameter name: `AttachmentList`, `RecipientList`, `RecipientType`, `Exceptions`, `OCP_OBJECT_TYPE`, `OCP_OBJECT_ID`, `OCP_TRIGGER_BY`   # noqa: E501

        :return: The parameters of this PutPublicNotificationDefinitionRequestFilterRule.  # noqa: E501
        :rtype: dict(str, FilterRuleParameterDefinition)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this PutPublicNotificationDefinitionRequestFilterRule.

        The parameters of the filter rule and their name must match those in the filter rule. And all parameters must be defined in the event type payload. The name of parameters can't be duplicate. The following reserved keywords should not be used as a parameter name: `AttachmentList`, `RecipientList`, `RecipientType`, `Exceptions`, `OCP_OBJECT_TYPE`, `OCP_OBJECT_ID`, `OCP_TRIGGER_BY`   # noqa: E501

        :param parameters: The parameters of this PutPublicNotificationDefinitionRequestFilterRule.  # noqa: E501
        :type: dict(str, FilterRuleParameterDefinition)
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")  # noqa: E501

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PutPublicNotificationDefinitionRequestFilterRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PutPublicNotificationDefinitionRequestFilterRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
