# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IntervalPricing(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sequence': 'int',
        'type': 'str',
        'duration': 'int',
        'price': 'float',
        'subscription_charge_interval_price_tiers': 'IntervalPricingTier'
    }

    attribute_map = {
        'sequence': 'sequence',
        'type': 'type',
        'duration': 'duration',
        'price': 'price',
        'subscription_charge_interval_price_tiers': 'subscriptionChargeIntervalPriceTiers'
    }

    def __init__(self, sequence=None, type=None, duration=None, price=None, subscription_charge_interval_price_tiers=None):  # noqa: E501
        """IntervalPricing - a model defined in Swagger"""  # noqa: E501
        self._sequence = None
        self._type = None
        self._duration = None
        self._price = None
        self._subscription_charge_interval_price_tiers = None
        self.discriminator = None
        if sequence is not None:
            self.sequence = sequence
        if type is not None:
            self.type = type
        if duration is not None:
            self.duration = duration
        if price is not None:
            self.price = price
        if subscription_charge_interval_price_tiers is not None:
            self.subscription_charge_interval_price_tiers = subscription_charge_interval_price_tiers

    @property
    def sequence(self):
        """Gets the sequence of this IntervalPricing.  # noqa: E501


        :return: The sequence of this IntervalPricing.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this IntervalPricing.


        :param sequence: The sequence of this IntervalPricing.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def type(self):
        """Gets the type of this IntervalPricing.  # noqa: E501


        :return: The type of this IntervalPricing.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this IntervalPricing.


        :param type: The type of this IntervalPricing.  # noqa: E501
        :type: str
        """
        allowed_values = ["Day", "Month", "Infinity"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def duration(self):
        """Gets the duration of this IntervalPricing.  # noqa: E501


        :return: The duration of this IntervalPricing.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this IntervalPricing.


        :param duration: The duration of this IntervalPricing.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def price(self):
        """Gets the price of this IntervalPricing.  # noqa: E501


        :return: The price of this IntervalPricing.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this IntervalPricing.


        :param price: The price of this IntervalPricing.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def subscription_charge_interval_price_tiers(self):
        """Gets the subscription_charge_interval_price_tiers of this IntervalPricing.  # noqa: E501


        :return: The subscription_charge_interval_price_tiers of this IntervalPricing.  # noqa: E501
        :rtype: IntervalPricingTier
        """
        return self._subscription_charge_interval_price_tiers

    @subscription_charge_interval_price_tiers.setter
    def subscription_charge_interval_price_tiers(self, subscription_charge_interval_price_tiers):
        """Sets the subscription_charge_interval_price_tiers of this IntervalPricing.


        :param subscription_charge_interval_price_tiers: The subscription_charge_interval_price_tiers of this IntervalPricing.  # noqa: E501
        :type: IntervalPricingTier
        """

        self._subscription_charge_interval_price_tiers = subscription_charge_interval_price_tiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IntervalPricing, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IntervalPricing):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
