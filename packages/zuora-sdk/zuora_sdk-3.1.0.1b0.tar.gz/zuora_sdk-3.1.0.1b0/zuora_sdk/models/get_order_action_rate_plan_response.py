# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from zuora_sdk.models.common_response import CommonResponse  # noqa: F401,E501

class GetOrderActionRatePlanResponse(CommonResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amendment': 'OrderActionRatePlanAmendment',
        'externally_managed_plan_id': 'str',
        'id': 'str',
        'last_change_type': 'str',
        'order': 'OrderActionRatePlanOrder',
        'product_id': 'str',
        'product_name': 'str',
        'product_rate_plan_id': 'str',
        'product_sku': 'str',
        'rate_plan_name': 'str',
        'subscription_id': 'str',
        'subscription_version': 'object'
    }
    if hasattr(CommonResponse, "swagger_types"):
        swagger_types.update(CommonResponse.swagger_types)

    attribute_map = {
        'amendment': 'amendment',
        'externally_managed_plan_id': 'externallyManagedPlanId',
        'id': 'id',
        'last_change_type': 'lastChangeType',
        'order': 'order',
        'product_id': 'productId',
        'product_name': 'productName',
        'product_rate_plan_id': 'productRatePlanId',
        'product_sku': 'productSku',
        'rate_plan_name': 'ratePlanName',
        'subscription_id': 'subscriptionId',
        'subscription_version': 'subscriptionVersion'
    }
    if hasattr(CommonResponse, "attribute_map"):
        attribute_map.update(CommonResponse.attribute_map)

    def __init__(self, amendment=None, externally_managed_plan_id=None, id=None, last_change_type=None, order=None, product_id=None, product_name=None, product_rate_plan_id=None, product_sku=None, rate_plan_name=None, subscription_id=None, subscription_version=None, *args, **kwargs):  # noqa: E501
        """GetOrderActionRatePlanResponse - a model defined in Swagger"""  # noqa: E501
        self._amendment = None
        self._externally_managed_plan_id = None
        self._id = None
        self._last_change_type = None
        self._order = None
        self._product_id = None
        self._product_name = None
        self._product_rate_plan_id = None
        self._product_sku = None
        self._rate_plan_name = None
        self._subscription_id = None
        self._subscription_version = None
        self.discriminator = None
        if amendment is not None:
            self.amendment = amendment
        if externally_managed_plan_id is not None:
            self.externally_managed_plan_id = externally_managed_plan_id
        if id is not None:
            self.id = id
        if last_change_type is not None:
            self.last_change_type = last_change_type
        if order is not None:
            self.order = order
        if product_id is not None:
            self.product_id = product_id
        if product_name is not None:
            self.product_name = product_name
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if product_sku is not None:
            self.product_sku = product_sku
        if rate_plan_name is not None:
            self.rate_plan_name = rate_plan_name
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_version is not None:
            self.subscription_version = subscription_version
        CommonResponse.__init__(self, *args, **kwargs)

    @property
    def amendment(self):
        """Gets the amendment of this GetOrderActionRatePlanResponse.  # noqa: E501


        :return: The amendment of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: OrderActionRatePlanAmendment
        """
        return self._amendment

    @amendment.setter
    def amendment(self, amendment):
        """Sets the amendment of this GetOrderActionRatePlanResponse.


        :param amendment: The amendment of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: OrderActionRatePlanAmendment
        """

        self._amendment = amendment

    @property
    def externally_managed_plan_id(self):
        """Gets the externally_managed_plan_id of this GetOrderActionRatePlanResponse.  # noqa: E501

        The unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.   # noqa: E501

        :return: The externally_managed_plan_id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._externally_managed_plan_id

    @externally_managed_plan_id.setter
    def externally_managed_plan_id(self, externally_managed_plan_id):
        """Sets the externally_managed_plan_id of this GetOrderActionRatePlanResponse.

        The unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.   # noqa: E501

        :param externally_managed_plan_id: The externally_managed_plan_id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: str
        """

        self._externally_managed_plan_id = externally_managed_plan_id

    @property
    def id(self):
        """Gets the id of this GetOrderActionRatePlanResponse.  # noqa: E501

        Unique subscription rate-plan ID.  # noqa: E501

        :return: The id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetOrderActionRatePlanResponse.

        Unique subscription rate-plan ID.  # noqa: E501

        :param id: The id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_change_type(self):
        """Gets the last_change_type of this GetOrderActionRatePlanResponse.  # noqa: E501

        Latest change type. Possible values are:  - New - Update - Remove   # noqa: E501

        :return: The last_change_type of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_change_type

    @last_change_type.setter
    def last_change_type(self, last_change_type):
        """Sets the last_change_type of this GetOrderActionRatePlanResponse.

        Latest change type. Possible values are:  - New - Update - Remove   # noqa: E501

        :param last_change_type: The last_change_type of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: str
        """

        self._last_change_type = last_change_type

    @property
    def order(self):
        """Gets the order of this GetOrderActionRatePlanResponse.  # noqa: E501


        :return: The order of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: OrderActionRatePlanOrder
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this GetOrderActionRatePlanResponse.


        :param order: The order of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: OrderActionRatePlanOrder
        """

        self._order = order

    @property
    def product_id(self):
        """Gets the product_id of this GetOrderActionRatePlanResponse.  # noqa: E501

        Product ID   # noqa: E501

        :return: The product_id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this GetOrderActionRatePlanResponse.

        Product ID   # noqa: E501

        :param product_id: The product_id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def product_name(self):
        """Gets the product_name of this GetOrderActionRatePlanResponse.  # noqa: E501

        The name of the product.   # noqa: E501

        :return: The product_name of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this GetOrderActionRatePlanResponse.

        The name of the product.   # noqa: E501

        :param product_name: The product_name of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this GetOrderActionRatePlanResponse.  # noqa: E501

        Product rate plan ID   # noqa: E501

        :return: The product_rate_plan_id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this GetOrderActionRatePlanResponse.

        Product rate plan ID   # noqa: E501

        :param product_rate_plan_id: The product_rate_plan_id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def product_sku(self):
        """Gets the product_sku of this GetOrderActionRatePlanResponse.  # noqa: E501

        The unique SKU for the product.   # noqa: E501

        :return: The product_sku of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """Sets the product_sku of this GetOrderActionRatePlanResponse.

        The unique SKU for the product.   # noqa: E501

        :param product_sku: The product_sku of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: str
        """

        self._product_sku = product_sku

    @property
    def rate_plan_name(self):
        """Gets the rate_plan_name of this GetOrderActionRatePlanResponse.  # noqa: E501

        The name of the rate plan.   # noqa: E501

        :return: The rate_plan_name of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_name

    @rate_plan_name.setter
    def rate_plan_name(self, rate_plan_name):
        """Sets the rate_plan_name of this GetOrderActionRatePlanResponse.

        The name of the rate plan.   # noqa: E501

        :param rate_plan_name: The rate_plan_name of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: str
        """

        self._rate_plan_name = rate_plan_name

    @property
    def subscription_id(self):
        """Gets the subscription_id of this GetOrderActionRatePlanResponse.  # noqa: E501

        Subscription ID.   # noqa: E501

        :return: The subscription_id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this GetOrderActionRatePlanResponse.

        Subscription ID.   # noqa: E501

        :param subscription_id: The subscription_id of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_version(self):
        """Gets the subscription_version of this GetOrderActionRatePlanResponse.  # noqa: E501

        The version of the subscription.   # noqa: E501

        :return: The subscription_version of this GetOrderActionRatePlanResponse.  # noqa: E501
        :rtype: object
        """
        return self._subscription_version

    @subscription_version.setter
    def subscription_version(self, subscription_version):
        """Sets the subscription_version of this GetOrderActionRatePlanResponse.

        The version of the subscription.   # noqa: E501

        :param subscription_version: The subscription_version of this GetOrderActionRatePlanResponse.  # noqa: E501
        :type: object
        """

        self._subscription_version = subscription_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetOrderActionRatePlanResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetOrderActionRatePlanResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
