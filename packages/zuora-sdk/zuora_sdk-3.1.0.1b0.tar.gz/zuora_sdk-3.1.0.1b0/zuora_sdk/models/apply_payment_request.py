# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplyPaymentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'debit_memos': 'list[ApplyPaymentDebitMemoApplication]',
        'effective_date': 'str',
        'invoices': 'list[ApplyPaymentInvoiceApplication]'
    }

    attribute_map = {
        'debit_memos': 'debitMemos',
        'effective_date': 'effectiveDate',
        'invoices': 'invoices'
    }

    def __init__(self, debit_memos=None, effective_date=None, invoices=None):  # noqa: E501
        """ApplyPaymentRequest - a model defined in Swagger"""  # noqa: E501
        self._debit_memos = None
        self._effective_date = None
        self._invoices = None
        self.discriminator = None
        if debit_memos is not None:
            self.debit_memos = debit_memos
        if effective_date is not None:
            self.effective_date = effective_date
        if invoices is not None:
            self.invoices = invoices

    @property
    def debit_memos(self):
        """Gets the debit_memos of this ApplyPaymentRequest.  # noqa: E501

        Container for debit memos. The maximum number of debit memos is 1,000.   # noqa: E501

        :return: The debit_memos of this ApplyPaymentRequest.  # noqa: E501
        :rtype: list[ApplyPaymentDebitMemoApplication]
        """
        return self._debit_memos

    @debit_memos.setter
    def debit_memos(self, debit_memos):
        """Sets the debit_memos of this ApplyPaymentRequest.

        Container for debit memos. The maximum number of debit memos is 1,000.   # noqa: E501

        :param debit_memos: The debit_memos of this ApplyPaymentRequest.  # noqa: E501
        :type: list[ApplyPaymentDebitMemoApplication]
        """

        self._debit_memos = debit_memos

    @property
    def effective_date(self):
        """Gets the effective_date of this ApplyPaymentRequest.  # noqa: E501

        The date when the payment application takes effect, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The effective_date of this ApplyPaymentRequest.  # noqa: E501
        :rtype: str
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this ApplyPaymentRequest.

        The date when the payment application takes effect, in `yyyy-mm-dd` format.   # noqa: E501

        :param effective_date: The effective_date of this ApplyPaymentRequest.  # noqa: E501
        :type: str
        """

        self._effective_date = effective_date

    @property
    def invoices(self):
        """Gets the invoices of this ApplyPaymentRequest.  # noqa: E501

        Container for invoices. The maximum number of invoices is 1,000.   # noqa: E501

        :return: The invoices of this ApplyPaymentRequest.  # noqa: E501
        :rtype: list[ApplyPaymentInvoiceApplication]
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this ApplyPaymentRequest.

        Container for invoices. The maximum number of invoices is 1,000.   # noqa: E501

        :param invoices: The invoices of this ApplyPaymentRequest.  # noqa: E501
        :type: list[ApplyPaymentInvoiceApplication]
        """

        self._invoices = invoices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplyPaymentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplyPaymentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
