# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SignUpPaymentMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'second_token_id': 'str',
        'token_id': 'str',
        'baid': 'str',
        'email': 'str',
        'preapproval_key': 'str',
        'card_holder_info': 'SignUpCreatePaymentMethodCardholderInfo',
        'card_number': 'str',
        'card_type': 'str',
        'check_duplicated': 'bool',
        'expiration_month': 'str',
        'expiration_year': 'str',
        'mit_consent_agreement_ref': 'str',
        'mit_consent_agreement_src': 'StoredCredentialProfileConsentAgreementSrc',
        'mit_network_transaction_id': 'str',
        'mit_profile_action': 'StoredCredentialProfileAction',
        'mit_profile_agreed_on': 'date',
        'mit_profile_type': 'SignUpCreatePaymentMethodCreditCardMitProfileType',
        'security_code': 'str',
        'account_key': 'str',
        'auth_gateway': 'str',
        'ip_address': 'str',
        'make_default': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'second_token_id': 'secondTokenId',
        'token_id': 'tokenId',
        'baid': 'BAID',
        'email': 'email',
        'preapproval_key': 'preapprovalKey',
        'card_holder_info': 'cardHolderInfo',
        'card_number': 'cardNumber',
        'card_type': 'cardType',
        'check_duplicated': 'checkDuplicated',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'mit_consent_agreement_ref': 'mitConsentAgreementRef',
        'mit_consent_agreement_src': 'mitConsentAgreementSrc',
        'mit_network_transaction_id': 'mitNetworkTransactionId',
        'mit_profile_action': 'mitProfileAction',
        'mit_profile_agreed_on': 'mitProfileAgreedOn',
        'mit_profile_type': 'mitProfileType',
        'security_code': 'securityCode',
        'account_key': 'accountKey',
        'auth_gateway': 'authGateway',
        'ip_address': 'ipAddress',
        'make_default': 'makeDefault'
    }

    def __init__(self, type=None, second_token_id=None, token_id=None, baid=None, email=None, preapproval_key=None, card_holder_info=None, card_number=None, card_type=None, check_duplicated=None, expiration_month=None, expiration_year=None, mit_consent_agreement_ref=None, mit_consent_agreement_src=None, mit_network_transaction_id=None, mit_profile_action=None, mit_profile_agreed_on=None, mit_profile_type=None, security_code=None, account_key=None, auth_gateway=None, ip_address=None, make_default=False):  # noqa: E501
        """SignUpPaymentMethod - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._second_token_id = None
        self._token_id = None
        self._baid = None
        self._email = None
        self._preapproval_key = None
        self._card_holder_info = None
        self._card_number = None
        self._card_type = None
        self._check_duplicated = None
        self._expiration_month = None
        self._expiration_year = None
        self._mit_consent_agreement_ref = None
        self._mit_consent_agreement_src = None
        self._mit_network_transaction_id = None
        self._mit_profile_action = None
        self._mit_profile_agreed_on = None
        self._mit_profile_type = None
        self._security_code = None
        self._account_key = None
        self._auth_gateway = None
        self._ip_address = None
        self._make_default = None
        self.discriminator = None
        self.type = type
        if second_token_id is not None:
            self.second_token_id = second_token_id
        if token_id is not None:
            self.token_id = token_id
        if baid is not None:
            self.baid = baid
        if email is not None:
            self.email = email
        if preapproval_key is not None:
            self.preapproval_key = preapproval_key
        if card_holder_info is not None:
            self.card_holder_info = card_holder_info
        if card_number is not None:
            self.card_number = card_number
        if card_type is not None:
            self.card_type = card_type
        if check_duplicated is not None:
            self.check_duplicated = check_duplicated
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        if mit_consent_agreement_ref is not None:
            self.mit_consent_agreement_ref = mit_consent_agreement_ref
        if mit_consent_agreement_src is not None:
            self.mit_consent_agreement_src = mit_consent_agreement_src
        if mit_network_transaction_id is not None:
            self.mit_network_transaction_id = mit_network_transaction_id
        if mit_profile_action is not None:
            self.mit_profile_action = mit_profile_action
        if mit_profile_agreed_on is not None:
            self.mit_profile_agreed_on = mit_profile_agreed_on
        if mit_profile_type is not None:
            self.mit_profile_type = mit_profile_type
        if security_code is not None:
            self.security_code = security_code
        if account_key is not None:
            self.account_key = account_key
        if auth_gateway is not None:
            self.auth_gateway = auth_gateway
        if ip_address is not None:
            self.ip_address = ip_address
        if make_default is not None:
            self.make_default = make_default

    @property
    def type(self):
        """Gets the type of this SignUpPaymentMethod.  # noqa: E501

        Type of payment method. The following types of the payment method are supported:   # noqa: E501

        :return: The type of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SignUpPaymentMethod.

        Type of payment method. The following types of the payment method are supported:   # noqa: E501

        :param type: The type of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["PayPalEC", "PayPalNativeEC", "PayPalAdaptive", "CreditCard", "CreditCardReferenceTransaction"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def second_token_id(self):
        """Gets the second_token_id of this SignUpPaymentMethod.  # noqa: E501

        The second token id of CreditCardReferenceTransaction.   # noqa: E501

        :return: The second_token_id of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._second_token_id

    @second_token_id.setter
    def second_token_id(self, second_token_id):
        """Sets the second_token_id of this SignUpPaymentMethod.

        The second token id of CreditCardReferenceTransaction.   # noqa: E501

        :param second_token_id: The second_token_id of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._second_token_id = second_token_id

    @property
    def token_id(self):
        """Gets the token_id of this SignUpPaymentMethod.  # noqa: E501

        The token id of payment method, required field of CreditCardReferenceTransaction type.   # noqa: E501

        :return: The token_id of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this SignUpPaymentMethod.

        The token id of payment method, required field of CreditCardReferenceTransaction type.   # noqa: E501

        :param token_id: The token_id of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def baid(self):
        """Gets the baid of this SignUpPaymentMethod.  # noqa: E501

        ID of a PayPal billing agreement, for example, I-1TJ3GAGG82Y9.   # noqa: E501

        :return: The baid of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._baid

    @baid.setter
    def baid(self, baid):
        """Sets the baid of this SignUpPaymentMethod.

        ID of a PayPal billing agreement, for example, I-1TJ3GAGG82Y9.   # noqa: E501

        :param baid: The baid of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._baid = baid

    @property
    def email(self):
        """Gets the email of this SignUpPaymentMethod.  # noqa: E501

        Email address associated with the payment method. This field is only supported for PayPal payment methods and is required if you want to create any of the following PayPal payment methods:   - PayPal Express Checkout payment method    - PayPal Adaptive payment method   - PayPal Commerce Platform payment method   # noqa: E501

        :return: The email of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SignUpPaymentMethod.

        Email address associated with the payment method. This field is only supported for PayPal payment methods and is required if you want to create any of the following PayPal payment methods:   - PayPal Express Checkout payment method    - PayPal Adaptive payment method   - PayPal Commerce Platform payment method   # noqa: E501

        :param email: The email of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def preapproval_key(self):
        """Gets the preapproval_key of this SignUpPaymentMethod.  # noqa: E501

        The PayPal preapproval key.   # noqa: E501

        :return: The preapproval_key of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._preapproval_key

    @preapproval_key.setter
    def preapproval_key(self, preapproval_key):
        """Sets the preapproval_key of this SignUpPaymentMethod.

        The PayPal preapproval key.   # noqa: E501

        :param preapproval_key: The preapproval_key of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._preapproval_key = preapproval_key

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this SignUpPaymentMethod.  # noqa: E501


        :return: The card_holder_info of this SignUpPaymentMethod.  # noqa: E501
        :rtype: SignUpCreatePaymentMethodCardholderInfo
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this SignUpPaymentMethod.


        :param card_holder_info: The card_holder_info of this SignUpPaymentMethod.  # noqa: E501
        :type: SignUpCreatePaymentMethodCardholderInfo
        """

        self._card_holder_info = card_holder_info

    @property
    def card_number(self):
        """Gets the card_number of this SignUpPaymentMethod.  # noqa: E501

        Credit card number.   # noqa: E501

        :return: The card_number of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this SignUpPaymentMethod.

        Credit card number.   # noqa: E501

        :param card_number: The card_number of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def card_type(self):
        """Gets the card_type of this SignUpPaymentMethod.  # noqa: E501

        The type of the credit card.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :return: The card_type of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this SignUpPaymentMethod.

        The type of the credit card.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :param card_type: The card_type of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def check_duplicated(self):
        """Gets the check_duplicated of this SignUpPaymentMethod.  # noqa: E501


        :return: The check_duplicated of this SignUpPaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._check_duplicated

    @check_duplicated.setter
    def check_duplicated(self, check_duplicated):
        """Sets the check_duplicated of this SignUpPaymentMethod.


        :param check_duplicated: The check_duplicated of this SignUpPaymentMethod.  # noqa: E501
        :type: bool
        """

        self._check_duplicated = check_duplicated

    @property
    def expiration_month(self):
        """Gets the expiration_month of this SignUpPaymentMethod.  # noqa: E501

        One or two digit expiration month (1-12) of the credit card.   # noqa: E501

        :return: The expiration_month of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this SignUpPaymentMethod.

        One or two digit expiration month (1-12) of the credit card.   # noqa: E501

        :param expiration_month: The expiration_month of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this SignUpPaymentMethod.  # noqa: E501

        Four-digit expiration year of the credit card.   # noqa: E501

        :return: The expiration_year of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this SignUpPaymentMethod.

        Four-digit expiration year of the credit card.   # noqa: E501

        :param expiration_year: The expiration_year of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._expiration_year = expiration_year

    @property
    def mit_consent_agreement_ref(self):
        """Gets the mit_consent_agreement_ref of this SignUpPaymentMethod.  # noqa: E501

        Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.   # noqa: E501

        :return: The mit_consent_agreement_ref of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._mit_consent_agreement_ref

    @mit_consent_agreement_ref.setter
    def mit_consent_agreement_ref(self, mit_consent_agreement_ref):
        """Sets the mit_consent_agreement_ref of this SignUpPaymentMethod.

        Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.   # noqa: E501

        :param mit_consent_agreement_ref: The mit_consent_agreement_ref of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._mit_consent_agreement_ref = mit_consent_agreement_ref

    @property
    def mit_consent_agreement_src(self):
        """Gets the mit_consent_agreement_src of this SignUpPaymentMethod.  # noqa: E501


        :return: The mit_consent_agreement_src of this SignUpPaymentMethod.  # noqa: E501
        :rtype: StoredCredentialProfileConsentAgreementSrc
        """
        return self._mit_consent_agreement_src

    @mit_consent_agreement_src.setter
    def mit_consent_agreement_src(self, mit_consent_agreement_src):
        """Sets the mit_consent_agreement_src of this SignUpPaymentMethod.


        :param mit_consent_agreement_src: The mit_consent_agreement_src of this SignUpPaymentMethod.  # noqa: E501
        :type: StoredCredentialProfileConsentAgreementSrc
        """

        self._mit_consent_agreement_src = mit_consent_agreement_src

    @property
    def mit_network_transaction_id(self):
        """Gets the mit_network_transaction_id of this SignUpPaymentMethod.  # noqa: E501

        Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.   # noqa: E501

        :return: The mit_network_transaction_id of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._mit_network_transaction_id

    @mit_network_transaction_id.setter
    def mit_network_transaction_id(self, mit_network_transaction_id):
        """Sets the mit_network_transaction_id of this SignUpPaymentMethod.

        Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.   # noqa: E501

        :param mit_network_transaction_id: The mit_network_transaction_id of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._mit_network_transaction_id = mit_network_transaction_id

    @property
    def mit_profile_action(self):
        """Gets the mit_profile_action of this SignUpPaymentMethod.  # noqa: E501


        :return: The mit_profile_action of this SignUpPaymentMethod.  # noqa: E501
        :rtype: StoredCredentialProfileAction
        """
        return self._mit_profile_action

    @mit_profile_action.setter
    def mit_profile_action(self, mit_profile_action):
        """Sets the mit_profile_action of this SignUpPaymentMethod.


        :param mit_profile_action: The mit_profile_action of this SignUpPaymentMethod.  # noqa: E501
        :type: StoredCredentialProfileAction
        """

        self._mit_profile_action = mit_profile_action

    @property
    def mit_profile_agreed_on(self):
        """Gets the mit_profile_agreed_on of this SignUpPaymentMethod.  # noqa: E501

        The date on which the profile is agreed. The date format is `yyyy-mm-dd`.   # noqa: E501

        :return: The mit_profile_agreed_on of this SignUpPaymentMethod.  # noqa: E501
        :rtype: date
        """
        return self._mit_profile_agreed_on

    @mit_profile_agreed_on.setter
    def mit_profile_agreed_on(self, mit_profile_agreed_on):
        """Sets the mit_profile_agreed_on of this SignUpPaymentMethod.

        The date on which the profile is agreed. The date format is `yyyy-mm-dd`.   # noqa: E501

        :param mit_profile_agreed_on: The mit_profile_agreed_on of this SignUpPaymentMethod.  # noqa: E501
        :type: date
        """

        self._mit_profile_agreed_on = mit_profile_agreed_on

    @property
    def mit_profile_type(self):
        """Gets the mit_profile_type of this SignUpPaymentMethod.  # noqa: E501


        :return: The mit_profile_type of this SignUpPaymentMethod.  # noqa: E501
        :rtype: SignUpCreatePaymentMethodCreditCardMitProfileType
        """
        return self._mit_profile_type

    @mit_profile_type.setter
    def mit_profile_type(self, mit_profile_type):
        """Sets the mit_profile_type of this SignUpPaymentMethod.


        :param mit_profile_type: The mit_profile_type of this SignUpPaymentMethod.  # noqa: E501
        :type: SignUpCreatePaymentMethodCreditCardMitProfileType
        """

        self._mit_profile_type = mit_profile_type

    @property
    def security_code(self):
        """Gets the security_code of this SignUpPaymentMethod.  # noqa: E501

        CVV or CVV2 security code of the credit card.  To ensure PCI compliance, this value is not stored and cannot be queried.   # noqa: E501

        :return: The security_code of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this SignUpPaymentMethod.

        CVV or CVV2 security code of the credit card.  To ensure PCI compliance, this value is not stored and cannot be queried.   # noqa: E501

        :param security_code: The security_code of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    @property
    def account_key(self):
        """Gets the account_key of this SignUpPaymentMethod.  # noqa: E501

        Internal ID of the customer account that will own the payment method.   # noqa: E501

        :return: The account_key of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this SignUpPaymentMethod.

        Internal ID of the customer account that will own the payment method.   # noqa: E501

        :param account_key: The account_key of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._account_key = account_key

    @property
    def auth_gateway(self):
        """Gets the auth_gateway of this SignUpPaymentMethod.  # noqa: E501

        Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.   # noqa: E501

        :return: The auth_gateway of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._auth_gateway

    @auth_gateway.setter
    def auth_gateway(self, auth_gateway):
        """Sets the auth_gateway of this SignUpPaymentMethod.

        Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.   # noqa: E501

        :param auth_gateway: The auth_gateway of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._auth_gateway = auth_gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this SignUpPaymentMethod.  # noqa: E501

        The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways.   If the IP address length is beyond 45 characters, a validation error occurs.   # noqa: E501

        :return: The ip_address of this SignUpPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this SignUpPaymentMethod.

        The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways.   If the IP address length is beyond 45 characters, a validation error occurs.   # noqa: E501

        :param ip_address: The ip_address of this SignUpPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def make_default(self):
        """Gets the make_default of this SignUpPaymentMethod.  # noqa: E501

        Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.   # noqa: E501

        :return: The make_default of this SignUpPaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._make_default

    @make_default.setter
    def make_default(self, make_default):
        """Sets the make_default of this SignUpPaymentMethod.

        Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.   # noqa: E501

        :param make_default: The make_default of this SignUpPaymentMethod.  # noqa: E501
        :type: bool
        """

        self._make_default = make_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignUpPaymentMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignUpPaymentMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
