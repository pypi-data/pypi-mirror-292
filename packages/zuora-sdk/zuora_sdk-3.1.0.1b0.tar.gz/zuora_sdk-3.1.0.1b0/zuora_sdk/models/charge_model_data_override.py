# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChargeModelDataOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_model_configuration': 'ChargeModelConfigurationForSubscription',
        'quantity': 'float',
        'tiers': 'list[ChargeTier]'
    }

    attribute_map = {
        'charge_model_configuration': 'chargeModelConfiguration',
        'quantity': 'quantity',
        'tiers': 'tiers'
    }

    def __init__(self, charge_model_configuration=None, quantity=None, tiers=None):  # noqa: E501
        """ChargeModelDataOverride - a model defined in Swagger"""  # noqa: E501
        self._charge_model_configuration = None
        self._quantity = None
        self._tiers = None
        self.discriminator = None
        if charge_model_configuration is not None:
            self.charge_model_configuration = charge_model_configuration
        if quantity is not None:
            self.quantity = quantity
        if tiers is not None:
            self.tiers = tiers

    @property
    def charge_model_configuration(self):
        """Gets the charge_model_configuration of this ChargeModelDataOverride.  # noqa: E501


        :return: The charge_model_configuration of this ChargeModelDataOverride.  # noqa: E501
        :rtype: ChargeModelConfigurationForSubscription
        """
        return self._charge_model_configuration

    @charge_model_configuration.setter
    def charge_model_configuration(self, charge_model_configuration):
        """Sets the charge_model_configuration of this ChargeModelDataOverride.


        :param charge_model_configuration: The charge_model_configuration of this ChargeModelDataOverride.  # noqa: E501
        :type: ChargeModelConfigurationForSubscription
        """

        self._charge_model_configuration = charge_model_configuration

    @property
    def quantity(self):
        """Gets the quantity of this ChargeModelDataOverride.  # noqa: E501

        Number of units purchased. This field is used if the Multi-Attribute Pricing formula uses the `quantity()` function.  This field is only available for one-time and recurring charges that use the Multi-Attribute Pricing charge model.   # noqa: E501

        :return: The quantity of this ChargeModelDataOverride.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ChargeModelDataOverride.

        Number of units purchased. This field is used if the Multi-Attribute Pricing formula uses the `quantity()` function.  This field is only available for one-time and recurring charges that use the Multi-Attribute Pricing charge model.   # noqa: E501

        :param quantity: The quantity of this ChargeModelDataOverride.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def tiers(self):
        """Gets the tiers of this ChargeModelDataOverride.  # noqa: E501

        List of cumulative pricing tiers in the charge.  **Note**: When you override the tiers of a usage-based charge using High Water Mark Pricing charge model, you have to provide all of the tiers, including the ones you do not want to change. The new tiers will completely override the previous ones. The High Water Mark Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.   # noqa: E501

        :return: The tiers of this ChargeModelDataOverride.  # noqa: E501
        :rtype: list[ChargeTier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this ChargeModelDataOverride.

        List of cumulative pricing tiers in the charge.  **Note**: When you override the tiers of a usage-based charge using High Water Mark Pricing charge model, you have to provide all of the tiers, including the ones you do not want to change. The new tiers will completely override the previous ones. The High Water Mark Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.   # noqa: E501

        :param tiers: The tiers of this ChargeModelDataOverride.  # noqa: E501
        :type: list[ChargeTier]
        """

        self._tiers = tiers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChargeModelDataOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargeModelDataOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
