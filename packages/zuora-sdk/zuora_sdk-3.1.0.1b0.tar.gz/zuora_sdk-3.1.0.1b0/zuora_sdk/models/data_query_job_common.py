# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DataQueryJobCommon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_by': 'str',
        'id': 'str',
        'query': 'str',
        'remaining_retries': 'int',
        'updated_on': 'datetime'
    }

    attribute_map = {
        'created_by': 'createdBy',
        'id': 'id',
        'query': 'query',
        'remaining_retries': 'remainingRetries',
        'updated_on': 'updatedOn'
    }

    def __init__(self, created_by=None, id=None, query=None, remaining_retries=None, updated_on=None):  # noqa: E501
        """DataQueryJobCommon - a model defined in Swagger"""  # noqa: E501
        self._created_by = None
        self._id = None
        self._query = None
        self._remaining_retries = None
        self._updated_on = None
        self.discriminator = None
        if created_by is not None:
            self.created_by = created_by
        if id is not None:
            self.id = id
        if query is not None:
            self.query = query
        if remaining_retries is not None:
            self.remaining_retries = remaining_retries
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def created_by(self):
        """Gets the created_by of this DataQueryJobCommon.  # noqa: E501

        The query job creator's Id.   # noqa: E501

        :return: The created_by of this DataQueryJobCommon.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this DataQueryJobCommon.

        The query job creator's Id.   # noqa: E501

        :param created_by: The created_by of this DataQueryJobCommon.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def id(self):
        """Gets the id of this DataQueryJobCommon.  # noqa: E501

        Internal identifier of the query job.   # noqa: E501

        :return: The id of this DataQueryJobCommon.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataQueryJobCommon.

        Internal identifier of the query job.   # noqa: E501

        :param id: The id of this DataQueryJobCommon.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def query(self):
        """Gets the query of this DataQueryJobCommon.  # noqa: E501

        The query that was submitted.   # noqa: E501

        :return: The query of this DataQueryJobCommon.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this DataQueryJobCommon.

        The query that was submitted.   # noqa: E501

        :param query: The query of this DataQueryJobCommon.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def remaining_retries(self):
        """Gets the remaining_retries of this DataQueryJobCommon.  # noqa: E501

        The number of times that Zuora will retry the query if Zuora is unable to perform the query.   # noqa: E501

        :return: The remaining_retries of this DataQueryJobCommon.  # noqa: E501
        :rtype: int
        """
        return self._remaining_retries

    @remaining_retries.setter
    def remaining_retries(self, remaining_retries):
        """Sets the remaining_retries of this DataQueryJobCommon.

        The number of times that Zuora will retry the query if Zuora is unable to perform the query.   # noqa: E501

        :param remaining_retries: The remaining_retries of this DataQueryJobCommon.  # noqa: E501
        :type: int
        """

        self._remaining_retries = remaining_retries

    @property
    def updated_on(self):
        """Gets the updated_on of this DataQueryJobCommon.  # noqa: E501

        Date and time when the query job was last updated, in ISO 8601 format.   # noqa: E501

        :return: The updated_on of this DataQueryJobCommon.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this DataQueryJobCommon.

        Date and time when the query job was last updated, in ISO 8601 format.   # noqa: E501

        :param updated_on: The updated_on of this DataQueryJobCommon.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataQueryJobCommon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataQueryJobCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
