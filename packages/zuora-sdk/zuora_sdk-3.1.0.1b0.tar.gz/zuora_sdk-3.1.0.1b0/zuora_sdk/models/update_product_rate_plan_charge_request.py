# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateProductRatePlanChargeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_rate_plan_id': 'str',
        'accounting_code': 'str',
        'apply_discount_to': 'ApplyDiscountTo',
        'bill_cycle_day': 'int',
        'bill_cycle_type': 'BillCycleType',
        'billing_period': 'BillingPeriodProductRatePlanChargeRest',
        'billing_period_alignment': 'BillingPeriodAlignmentProductRatePlanChargeRest',
        'billing_timing': 'BillingTimingProductRatePlanChargeRest',
        'charge_function': 'ChargeFunction',
        'charge_model': 'ChargeModelProductRatePlanChargeRest',
        'charge_model_configuration': 'ChargeModelConfiguration',
        'commitment_type': 'CommitmentType',
        'credit_option': 'PrepaidDrawdownCreditOption',
        'default_quantity': 'float',
        'deferred_revenue_account': 'str',
        'delivery_schedule': 'DeliveryScheduleProductRatePlanCharge',
        'description': 'str',
        'discount_level': 'DiscountLevel',
        'drawdown_rate': 'float',
        'drawdown_uom': 'str',
        'end_date_condition': 'EndDateConditionProductRatePlanChargeRest',
        'exclude_item_billing_from_revenue_accounting': 'bool',
        'exclude_item_booking_from_revenue_accounting': 'bool',
        'revenue_recognition_timing': 'str',
        'revenue_amortization_method': 'str',
        'included_units': 'float',
        'is_prepaid': 'bool',
        'is_rollover': 'bool',
        'is_stacked_discount': 'bool',
        'legacy_revenue_reporting': 'bool',
        'list_price_base': 'ListPriceBase',
        'min_quantity': 'float',
        'max_quantity': 'float',
        'name': 'str',
        'number_of_period': 'int',
        'overage_calculation_option': 'OverageCalculationOption',
        'overage_unused_units_credit_option': 'OverageUnusedUnitsCreditOption',
        'prepaid_quantity': 'float',
        'prepaid_uom': 'str',
        'price_change_option': 'PriceChangeOption',
        'price_increase_option': 'PriceIncreaseOption',
        'price_increase_percentage': 'float',
        'product_rate_plan_charge_number': 'str',
        'product_rate_plan_charge_tier_data': 'list[ProductRatePlanChargeTier]',
        'rating_group': 'RatingGroup',
        'recognized_revenue_account': 'str',
        'rev_rec_code': 'str',
        'rev_rec_trigger_condition': 'RevRecTriggerConditionProductRatePlanChargeRest',
        'revenue_recognition_rule_name': 'RevenueRecognitionRuleName',
        'rollover_apply': 'RolloverApply',
        'rollover_periods': 'float',
        'smoothing_model': 'SmoothingModel',
        'specific_billing_period': 'int',
        'specific_list_price_base': 'int',
        'tax_code': 'str',
        'tax_mode': 'TaxMode',
        'taxable': 'bool',
        'trigger_event': 'TriggerEventProductRatePlanChargeRest',
        'uom': 'str',
        'up_to_periods': 'int',
        'up_to_periods_type': 'UpToPeriodsTypeProductRatePlanChargeRest',
        'usage_record_rating_option': 'UsageRecordRatingOption',
        'use_discount_specific_accounting_code': 'bool',
        'use_tenant_default_for_price_change': 'bool',
        'validity_period_type': 'ValidityPeriodType',
        'weekly_bill_cycle_day': 'WeeklyBillCycleDay',
        'class__ns': 'str',
        'deferred_rev_account__ns': 'str',
        'department__ns': 'str',
        'include_children__ns': 'ProductRatePlanChargeObjectNSFieldsIncludeChildrenNS',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'item_type__ns': 'ProductRatePlanChargeObjectNSFieldsItemTypeNS',
        'location__ns': 'str',
        'recognized_rev_account__ns': 'str',
        'rev_rec_end__ns': 'ProductRatePlanChargeObjectNSFieldsRevRecEndNS',
        'rev_rec_start__ns': 'ProductRatePlanChargeObjectNSFieldsRevRecStartNS',
        'rev_rec_template_type__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'product_rate_plan_id': 'ProductRatePlanId',
        'accounting_code': 'AccountingCode',
        'apply_discount_to': 'ApplyDiscountTo',
        'bill_cycle_day': 'BillCycleDay',
        'bill_cycle_type': 'BillCycleType',
        'billing_period': 'BillingPeriod',
        'billing_period_alignment': 'BillingPeriodAlignment',
        'billing_timing': 'BillingTiming',
        'charge_function': 'ChargeFunction',
        'charge_model': 'ChargeModel',
        'charge_model_configuration': 'ChargeModelConfiguration',
        'commitment_type': 'CommitmentType',
        'credit_option': 'CreditOption',
        'default_quantity': 'DefaultQuantity',
        'deferred_revenue_account': 'DeferredRevenueAccount',
        'delivery_schedule': 'DeliverySchedule',
        'description': 'Description',
        'discount_level': 'DiscountLevel',
        'drawdown_rate': 'DrawdownRate',
        'drawdown_uom': 'DrawdownUom',
        'end_date_condition': 'EndDateCondition',
        'exclude_item_billing_from_revenue_accounting': 'ExcludeItemBillingFromRevenueAccounting',
        'exclude_item_booking_from_revenue_accounting': 'ExcludeItemBookingFromRevenueAccounting',
        'revenue_recognition_timing': 'RevenueRecognitionTiming',
        'revenue_amortization_method': 'RevenueAmortizationMethod',
        'included_units': 'IncludedUnits',
        'is_prepaid': 'IsPrepaid',
        'is_rollover': 'IsRollover',
        'is_stacked_discount': 'IsStackedDiscount',
        'legacy_revenue_reporting': 'LegacyRevenueReporting',
        'list_price_base': 'ListPriceBase',
        'min_quantity': 'MinQuantity',
        'max_quantity': 'MaxQuantity',
        'name': 'Name',
        'number_of_period': 'NumberOfPeriod',
        'overage_calculation_option': 'OverageCalculationOption',
        'overage_unused_units_credit_option': 'OverageUnusedUnitsCreditOption',
        'prepaid_quantity': 'PrepaidQuantity',
        'prepaid_uom': 'PrepaidUom',
        'price_change_option': 'PriceChangeOption',
        'price_increase_option': 'PriceIncreaseOption',
        'price_increase_percentage': 'PriceIncreasePercentage',
        'product_rate_plan_charge_number': 'ProductRatePlanChargeNumber',
        'product_rate_plan_charge_tier_data': 'ProductRatePlanChargeTierData',
        'rating_group': 'RatingGroup',
        'recognized_revenue_account': 'RecognizedRevenueAccount',
        'rev_rec_code': 'RevRecCode',
        'rev_rec_trigger_condition': 'RevRecTriggerCondition',
        'revenue_recognition_rule_name': 'RevenueRecognitionRuleName',
        'rollover_apply': 'RolloverApply',
        'rollover_periods': 'RolloverPeriods',
        'smoothing_model': 'SmoothingModel',
        'specific_billing_period': 'SpecificBillingPeriod',
        'specific_list_price_base': 'SpecificListPriceBase',
        'tax_code': 'TaxCode',
        'tax_mode': 'TaxMode',
        'taxable': 'Taxable',
        'trigger_event': 'TriggerEvent',
        'uom': 'UOM',
        'up_to_periods': 'UpToPeriods',
        'up_to_periods_type': 'UpToPeriodsType',
        'usage_record_rating_option': 'UsageRecordRatingOption',
        'use_discount_specific_accounting_code': 'UseDiscountSpecificAccountingCode',
        'use_tenant_default_for_price_change': 'UseTenantDefaultForPriceChange',
        'validity_period_type': 'ValidityPeriodType',
        'weekly_bill_cycle_day': 'WeeklyBillCycleDay',
        'class__ns': 'Class__NS',
        'deferred_rev_account__ns': 'DeferredRevAccount__NS',
        'department__ns': 'Department__NS',
        'include_children__ns': 'IncludeChildren__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'item_type__ns': 'ItemType__NS',
        'location__ns': 'Location__NS',
        'recognized_rev_account__ns': 'RecognizedRevAccount__NS',
        'rev_rec_end__ns': 'RevRecEnd__NS',
        'rev_rec_start__ns': 'RevRecStart__NS',
        'rev_rec_template_type__ns': 'RevRecTemplateType__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, product_rate_plan_id=None, accounting_code=None, apply_discount_to=None, bill_cycle_day=None, bill_cycle_type=None, billing_period=None, billing_period_alignment=None, billing_timing=None, charge_function=None, charge_model=None, charge_model_configuration=None, commitment_type=None, credit_option=None, default_quantity=None, deferred_revenue_account=None, delivery_schedule=None, description=None, discount_level=None, drawdown_rate=None, drawdown_uom=None, end_date_condition=None, exclude_item_billing_from_revenue_accounting=False, exclude_item_booking_from_revenue_accounting=False, revenue_recognition_timing=None, revenue_amortization_method=None, included_units=None, is_prepaid=None, is_rollover=None, is_stacked_discount=None, legacy_revenue_reporting=None, list_price_base=None, min_quantity=None, max_quantity=None, name=None, number_of_period=None, overage_calculation_option=None, overage_unused_units_credit_option=None, prepaid_quantity=None, prepaid_uom=None, price_change_option=None, price_increase_option=None, price_increase_percentage=None, product_rate_plan_charge_number=None, product_rate_plan_charge_tier_data=None, rating_group=None, recognized_revenue_account=None, rev_rec_code=None, rev_rec_trigger_condition=None, revenue_recognition_rule_name=None, rollover_apply=None, rollover_periods=None, smoothing_model=None, specific_billing_period=None, specific_list_price_base=None, tax_code=None, tax_mode=None, taxable=None, trigger_event=None, uom=None, up_to_periods=None, up_to_periods_type=None, usage_record_rating_option=None, use_discount_specific_accounting_code=None, use_tenant_default_for_price_change=None, validity_period_type=None, weekly_bill_cycle_day=None, class__ns=None, deferred_rev_account__ns=None, department__ns=None, include_children__ns=None, integration_id__ns=None, integration_status__ns=None, item_type__ns=None, location__ns=None, recognized_rev_account__ns=None, rev_rec_end__ns=None, rev_rec_start__ns=None, rev_rec_template_type__ns=None, subsidiary__ns=None, sync_date__ns=None):  # noqa: E501
        """UpdateProductRatePlanChargeRequest - a model defined in Swagger"""  # noqa: E501
        self._product_rate_plan_id = None
        self._accounting_code = None
        self._apply_discount_to = None
        self._bill_cycle_day = None
        self._bill_cycle_type = None
        self._billing_period = None
        self._billing_period_alignment = None
        self._billing_timing = None
        self._charge_function = None
        self._charge_model = None
        self._charge_model_configuration = None
        self._commitment_type = None
        self._credit_option = None
        self._default_quantity = None
        self._deferred_revenue_account = None
        self._delivery_schedule = None
        self._description = None
        self._discount_level = None
        self._drawdown_rate = None
        self._drawdown_uom = None
        self._end_date_condition = None
        self._exclude_item_billing_from_revenue_accounting = None
        self._exclude_item_booking_from_revenue_accounting = None
        self._revenue_recognition_timing = None
        self._revenue_amortization_method = None
        self._included_units = None
        self._is_prepaid = None
        self._is_rollover = None
        self._is_stacked_discount = None
        self._legacy_revenue_reporting = None
        self._list_price_base = None
        self._min_quantity = None
        self._max_quantity = None
        self._name = None
        self._number_of_period = None
        self._overage_calculation_option = None
        self._overage_unused_units_credit_option = None
        self._prepaid_quantity = None
        self._prepaid_uom = None
        self._price_change_option = None
        self._price_increase_option = None
        self._price_increase_percentage = None
        self._product_rate_plan_charge_number = None
        self._product_rate_plan_charge_tier_data = None
        self._rating_group = None
        self._recognized_revenue_account = None
        self._rev_rec_code = None
        self._rev_rec_trigger_condition = None
        self._revenue_recognition_rule_name = None
        self._rollover_apply = None
        self._rollover_periods = None
        self._smoothing_model = None
        self._specific_billing_period = None
        self._specific_list_price_base = None
        self._tax_code = None
        self._tax_mode = None
        self._taxable = None
        self._trigger_event = None
        self._uom = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self._usage_record_rating_option = None
        self._use_discount_specific_accounting_code = None
        self._use_tenant_default_for_price_change = None
        self._validity_period_type = None
        self._weekly_bill_cycle_day = None
        self._class__ns = None
        self._deferred_rev_account__ns = None
        self._department__ns = None
        self._include_children__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._item_type__ns = None
        self._location__ns = None
        self._recognized_rev_account__ns = None
        self._rev_rec_end__ns = None
        self._rev_rec_start__ns = None
        self._rev_rec_template_type__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        self.product_rate_plan_id = product_rate_plan_id
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if apply_discount_to is not None:
            self.apply_discount_to = apply_discount_to
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        self.bill_cycle_type = bill_cycle_type
        self.billing_period = billing_period
        if billing_period_alignment is not None:
            self.billing_period_alignment = billing_period_alignment
        if billing_timing is not None:
            self.billing_timing = billing_timing
        if charge_function is not None:
            self.charge_function = charge_function
        self.charge_model = charge_model
        if charge_model_configuration is not None:
            self.charge_model_configuration = charge_model_configuration
        if commitment_type is not None:
            self.commitment_type = commitment_type
        if credit_option is not None:
            self.credit_option = credit_option
        if default_quantity is not None:
            self.default_quantity = default_quantity
        if deferred_revenue_account is not None:
            self.deferred_revenue_account = deferred_revenue_account
        if delivery_schedule is not None:
            self.delivery_schedule = delivery_schedule
        if description is not None:
            self.description = description
        if discount_level is not None:
            self.discount_level = discount_level
        if drawdown_rate is not None:
            self.drawdown_rate = drawdown_rate
        if drawdown_uom is not None:
            self.drawdown_uom = drawdown_uom
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if exclude_item_billing_from_revenue_accounting is not None:
            self.exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting
        if exclude_item_booking_from_revenue_accounting is not None:
            self.exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting
        if revenue_recognition_timing is not None:
            self.revenue_recognition_timing = revenue_recognition_timing
        if revenue_amortization_method is not None:
            self.revenue_amortization_method = revenue_amortization_method
        if included_units is not None:
            self.included_units = included_units
        if is_prepaid is not None:
            self.is_prepaid = is_prepaid
        if is_rollover is not None:
            self.is_rollover = is_rollover
        if is_stacked_discount is not None:
            self.is_stacked_discount = is_stacked_discount
        if legacy_revenue_reporting is not None:
            self.legacy_revenue_reporting = legacy_revenue_reporting
        if list_price_base is not None:
            self.list_price_base = list_price_base
        if min_quantity is not None:
            self.min_quantity = min_quantity
        if max_quantity is not None:
            self.max_quantity = max_quantity
        if name is not None:
            self.name = name
        if number_of_period is not None:
            self.number_of_period = number_of_period
        if overage_calculation_option is not None:
            self.overage_calculation_option = overage_calculation_option
        if overage_unused_units_credit_option is not None:
            self.overage_unused_units_credit_option = overage_unused_units_credit_option
        if prepaid_quantity is not None:
            self.prepaid_quantity = prepaid_quantity
        if prepaid_uom is not None:
            self.prepaid_uom = prepaid_uom
        if price_change_option is not None:
            self.price_change_option = price_change_option
        if price_increase_option is not None:
            self.price_increase_option = price_increase_option
        if price_increase_percentage is not None:
            self.price_increase_percentage = price_increase_percentage
        if product_rate_plan_charge_number is not None:
            self.product_rate_plan_charge_number = product_rate_plan_charge_number
        self.product_rate_plan_charge_tier_data = product_rate_plan_charge_tier_data
        if rating_group is not None:
            self.rating_group = rating_group
        if recognized_revenue_account is not None:
            self.recognized_revenue_account = recognized_revenue_account
        if rev_rec_code is not None:
            self.rev_rec_code = rev_rec_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if rollover_apply is not None:
            self.rollover_apply = rollover_apply
        if rollover_periods is not None:
            self.rollover_periods = rollover_periods
        if smoothing_model is not None:
            self.smoothing_model = smoothing_model
        if specific_billing_period is not None:
            self.specific_billing_period = specific_billing_period
        if specific_list_price_base is not None:
            self.specific_list_price_base = specific_list_price_base
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_mode is not None:
            self.tax_mode = tax_mode
        if taxable is not None:
            self.taxable = taxable
        self.trigger_event = trigger_event
        if uom is not None:
            self.uom = uom
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type
        if usage_record_rating_option is not None:
            self.usage_record_rating_option = usage_record_rating_option
        self.use_discount_specific_accounting_code = use_discount_specific_accounting_code
        if use_tenant_default_for_price_change is not None:
            self.use_tenant_default_for_price_change = use_tenant_default_for_price_change
        if validity_period_type is not None:
            self.validity_period_type = validity_period_type
        if weekly_bill_cycle_day is not None:
            self.weekly_bill_cycle_day = weekly_bill_cycle_day
        if class__ns is not None:
            self.class__ns = class__ns
        if deferred_rev_account__ns is not None:
            self.deferred_rev_account__ns = deferred_rev_account__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if include_children__ns is not None:
            self.include_children__ns = include_children__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if item_type__ns is not None:
            self.item_type__ns = item_type__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if recognized_rev_account__ns is not None:
            self.recognized_rev_account__ns = recognized_rev_account__ns
        if rev_rec_end__ns is not None:
            self.rev_rec_end__ns = rev_rec_end__ns
        if rev_rec_start__ns is not None:
            self.rev_rec_start__ns = rev_rec_start__ns
        if rev_rec_template_type__ns is not None:
            self.rev_rec_template_type__ns = rev_rec_template_type__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The ID of the product rate plan associated with this product rate plan charge.   # noqa: E501

        :return: The product_rate_plan_id of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this UpdateProductRatePlanChargeRequest.

        The ID of the product rate plan associated with this product rate plan charge.   # noqa: E501

        :param product_rate_plan_id: The product_rate_plan_id of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """
        if product_rate_plan_id is None:
            raise ValueError("Invalid value for `product_rate_plan_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def accounting_code(self):
        """Gets the accounting_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.   # noqa: E501

        :return: The accounting_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this UpdateProductRatePlanChargeRequest.

        The accounting code for the charge. Accounting codes group transactions that contain similar accounting attributes.   # noqa: E501

        :param accounting_code: The accounting_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def apply_discount_to(self):
        """Gets the apply_discount_to of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The apply_discount_to of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ApplyDiscountTo
        """
        return self._apply_discount_to

    @apply_discount_to.setter
    def apply_discount_to(self, apply_discount_to):
        """Sets the apply_discount_to of this UpdateProductRatePlanChargeRequest.


        :param apply_discount_to: The apply_discount_to of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ApplyDiscountTo
        """

        self._apply_discount_to = apply_discount_to

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed. The BCD value in the account can override the BCD in this object.  **Character limit**: 2  **Values**: a valid BCD integer, 1 - 31   # noqa: E501

        :return: The bill_cycle_day of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this UpdateProductRatePlanChargeRequest.

        Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed. The BCD value in the account can override the BCD in this object.  **Character limit**: 2  **Values**: a valid BCD integer, 1 - 31   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_cycle_type(self):
        """Gets the bill_cycle_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The bill_cycle_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: BillCycleType
        """
        return self._bill_cycle_type

    @bill_cycle_type.setter
    def bill_cycle_type(self, bill_cycle_type):
        """Sets the bill_cycle_type of this UpdateProductRatePlanChargeRequest.


        :param bill_cycle_type: The bill_cycle_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: BillCycleType
        """
        if bill_cycle_type is None:
            raise ValueError("Invalid value for `bill_cycle_type`, must not be `None`")  # noqa: E501

        self._bill_cycle_type = bill_cycle_type

    @property
    def billing_period(self):
        """Gets the billing_period of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The billing_period of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: BillingPeriodProductRatePlanChargeRest
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this UpdateProductRatePlanChargeRequest.


        :param billing_period: The billing_period of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: BillingPeriodProductRatePlanChargeRest
        """
        if billing_period is None:
            raise ValueError("Invalid value for `billing_period`, must not be `None`")  # noqa: E501

        self._billing_period = billing_period

    @property
    def billing_period_alignment(self):
        """Gets the billing_period_alignment of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The billing_period_alignment of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: BillingPeriodAlignmentProductRatePlanChargeRest
        """
        return self._billing_period_alignment

    @billing_period_alignment.setter
    def billing_period_alignment(self, billing_period_alignment):
        """Sets the billing_period_alignment of this UpdateProductRatePlanChargeRequest.


        :param billing_period_alignment: The billing_period_alignment of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: BillingPeriodAlignmentProductRatePlanChargeRest
        """

        self._billing_period_alignment = billing_period_alignment

    @property
    def billing_timing(self):
        """Gets the billing_timing of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The billing_timing of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: BillingTimingProductRatePlanChargeRest
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this UpdateProductRatePlanChargeRequest.


        :param billing_timing: The billing_timing of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: BillingTimingProductRatePlanChargeRest
        """

        self._billing_timing = billing_timing

    @property
    def charge_function(self):
        """Gets the charge_function of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The charge_function of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ChargeFunction
        """
        return self._charge_function

    @charge_function.setter
    def charge_function(self, charge_function):
        """Sets the charge_function of this UpdateProductRatePlanChargeRequest.


        :param charge_function: The charge_function of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ChargeFunction
        """

        self._charge_function = charge_function

    @property
    def charge_model(self):
        """Gets the charge_model of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The charge_model of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ChargeModelProductRatePlanChargeRest
        """
        return self._charge_model

    @charge_model.setter
    def charge_model(self, charge_model):
        """Sets the charge_model of this UpdateProductRatePlanChargeRequest.


        :param charge_model: The charge_model of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ChargeModelProductRatePlanChargeRest
        """
        if charge_model is None:
            raise ValueError("Invalid value for `charge_model`, must not be `None`")  # noqa: E501

        self._charge_model = charge_model

    @property
    def charge_model_configuration(self):
        """Gets the charge_model_configuration of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The charge_model_configuration of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ChargeModelConfiguration
        """
        return self._charge_model_configuration

    @charge_model_configuration.setter
    def charge_model_configuration(self, charge_model_configuration):
        """Sets the charge_model_configuration of this UpdateProductRatePlanChargeRequest.


        :param charge_model_configuration: The charge_model_configuration of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ChargeModelConfiguration
        """

        self._charge_model_configuration = charge_model_configuration

    @property
    def commitment_type(self):
        """Gets the commitment_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The commitment_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: CommitmentType
        """
        return self._commitment_type

    @commitment_type.setter
    def commitment_type(self, commitment_type):
        """Sets the commitment_type of this UpdateProductRatePlanChargeRequest.


        :param commitment_type: The commitment_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: CommitmentType
        """

        self._commitment_type = commitment_type

    @property
    def credit_option(self):
        """Gets the credit_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The credit_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: PrepaidDrawdownCreditOption
        """
        return self._credit_option

    @credit_option.setter
    def credit_option(self, credit_option):
        """Sets the credit_option of this UpdateProductRatePlanChargeRequest.


        :param credit_option: The credit_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: PrepaidDrawdownCreditOption
        """

        self._credit_option = credit_option

    @property
    def default_quantity(self):
        """Gets the default_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The default quantity of units, such as the number of authors in a hosted wiki service. This field is required if you use a per-unit pricing model.   **Character limit**: 16  **Values**: a valid quantity value.   **Note:** When the `ChargeModel` field is set to `Tiered Pricing` or `Volume Pricing`, if this field is not specified, the value will default to `0`.   # noqa: E501

        :return: The default_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._default_quantity

    @default_quantity.setter
    def default_quantity(self, default_quantity):
        """Sets the default_quantity of this UpdateProductRatePlanChargeRequest.

        The default quantity of units, such as the number of authors in a hosted wiki service. This field is required if you use a per-unit pricing model.   **Character limit**: 16  **Values**: a valid quantity value.   **Note:** When the `ChargeModel` field is set to `Tiered Pricing` or `Volume Pricing`, if this field is not specified, the value will default to `0`.   # noqa: E501

        :param default_quantity: The default_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: float
        """

        self._default_quantity = default_quantity

    @property
    def deferred_revenue_account(self):
        """Gets the deferred_revenue_account of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The name of the deferred revenue account for this charge.  This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :return: The deferred_revenue_account of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_account

    @deferred_revenue_account.setter
    def deferred_revenue_account(self, deferred_revenue_account):
        """Sets the deferred_revenue_account of this UpdateProductRatePlanChargeRequest.

        The name of the deferred revenue account for this charge.  This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :param deferred_revenue_account: The deferred_revenue_account of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_account = deferred_revenue_account

    @property
    def delivery_schedule(self):
        """Gets the delivery_schedule of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The delivery_schedule of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: DeliveryScheduleProductRatePlanCharge
        """
        return self._delivery_schedule

    @delivery_schedule.setter
    def delivery_schedule(self, delivery_schedule):
        """Sets the delivery_schedule of this UpdateProductRatePlanChargeRequest.


        :param delivery_schedule: The delivery_schedule of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: DeliveryScheduleProductRatePlanCharge
        """

        self._delivery_schedule = delivery_schedule

    @property
    def description(self):
        """Gets the description of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        A description of the charge.   # noqa: E501

        :return: The description of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProductRatePlanChargeRequest.

        A description of the charge.   # noqa: E501

        :param description: The description of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount_level(self):
        """Gets the discount_level of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The discount_level of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: DiscountLevel
        """
        return self._discount_level

    @discount_level.setter
    def discount_level(self, discount_level):
        """Sets the discount_level of this UpdateProductRatePlanChargeRequest.


        :param discount_level: The discount_level of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: DiscountLevel
        """

        self._discount_level = discount_level

    @property
    def drawdown_rate(self):
        """Gets the drawdown_rate of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). See [Fields related to Prepaid with Drawdown](https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/ProductRatePlanCharge#Fields_related_to_Prepaid_with_Drawdown) for more information.   # noqa: E501

        :return: The drawdown_rate of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._drawdown_rate

    @drawdown_rate.setter
    def drawdown_rate(self, drawdown_rate):
        """Sets the drawdown_rate of this UpdateProductRatePlanChargeRequest.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). See [Fields related to Prepaid with Drawdown](https://knowledgecenter.zuora.com/Central_Platform/API/G_SOAP_API/E1_SOAP_API_Object_Reference/ProductRatePlanCharge#Fields_related_to_Prepaid_with_Drawdown) for more information.   # noqa: E501

        :param drawdown_rate: The drawdown_rate of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: float
        """

        self._drawdown_rate = drawdown_rate

    @property
    def drawdown_uom(self):
        """Gets the drawdown_uom of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.   Unit of measurement for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge).    # noqa: E501

        :return: The drawdown_uom of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._drawdown_uom

    @drawdown_uom.setter
    def drawdown_uom(self, drawdown_uom):
        """Sets the drawdown_uom of this UpdateProductRatePlanChargeRequest.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.   Unit of measurement for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge).    # noqa: E501

        :param drawdown_uom: The drawdown_uom of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._drawdown_uom = drawdown_uom

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The end_date_condition of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: EndDateConditionProductRatePlanChargeRest
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this UpdateProductRatePlanChargeRequest.


        :param end_date_condition: The end_date_condition of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: EndDateConditionProductRatePlanChargeRest
        """

        self._end_date_condition = end_date_condition

    @property
    def exclude_item_billing_from_revenue_accounting(self):
        """Gets the exclude_item_billing_from_revenue_accounting of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The flag to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Notes**:    - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.   - This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The exclude_item_billing_from_revenue_accounting of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_billing_from_revenue_accounting

    @exclude_item_billing_from_revenue_accounting.setter
    def exclude_item_billing_from_revenue_accounting(self, exclude_item_billing_from_revenue_accounting):
        """Sets the exclude_item_billing_from_revenue_accounting of this UpdateProductRatePlanChargeRequest.

        The flag to exclude the related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Notes**:    - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.   - This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param exclude_item_billing_from_revenue_accounting: The exclude_item_billing_from_revenue_accounting of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: bool
        """

        self._exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting

    @property
    def exclude_item_booking_from_revenue_accounting(self):
        """Gets the exclude_item_booking_from_revenue_accounting of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The flag to exclude the related rate plan charges and order line items from revenue accounting.  **Notes**:    - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.   - This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The exclude_item_booking_from_revenue_accounting of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_booking_from_revenue_accounting

    @exclude_item_booking_from_revenue_accounting.setter
    def exclude_item_booking_from_revenue_accounting(self, exclude_item_booking_from_revenue_accounting):
        """Sets the exclude_item_booking_from_revenue_accounting of this UpdateProductRatePlanChargeRequest.

        The flag to exclude the related rate plan charges and order line items from revenue accounting.  **Notes**:    - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `115` or later. Otherwise, an error occurs.   - This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param exclude_item_booking_from_revenue_accounting: The exclude_item_booking_from_revenue_accounting of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: bool
        """

        self._exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting

    @property
    def revenue_recognition_timing(self):
        """Gets the revenue_recognition_timing of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        This field is used to dictate the type of revenue recognition timing.   # noqa: E501

        :return: The revenue_recognition_timing of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_timing

    @revenue_recognition_timing.setter
    def revenue_recognition_timing(self, revenue_recognition_timing):
        """Sets the revenue_recognition_timing of this UpdateProductRatePlanChargeRequest.

        This field is used to dictate the type of revenue recognition timing.   # noqa: E501

        :param revenue_recognition_timing: The revenue_recognition_timing of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_timing = revenue_recognition_timing

    @property
    def revenue_amortization_method(self):
        """Gets the revenue_amortization_method of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        This field is used to dictate the type of revenue amortization method.   # noqa: E501

        :return: The revenue_amortization_method of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._revenue_amortization_method

    @revenue_amortization_method.setter
    def revenue_amortization_method(self, revenue_amortization_method):
        """Sets the revenue_amortization_method of this UpdateProductRatePlanChargeRequest.

        This field is used to dictate the type of revenue amortization method.   # noqa: E501

        :param revenue_amortization_method: The revenue_amortization_method of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._revenue_amortization_method = revenue_amortization_method

    @property
    def included_units(self):
        """Gets the included_units of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Specifies the number of units in the base set of units.  **Character limit**: 16  **Values**: a positive decimal value   # noqa: E501

        :return: The included_units of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._included_units

    @included_units.setter
    def included_units(self, included_units):
        """Sets the included_units of this UpdateProductRatePlanChargeRequest.

        Specifies the number of units in the base set of units.  **Character limit**: 16  **Values**: a positive decimal value   # noqa: E501

        :param included_units: The included_units of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: float
        """

        self._included_units = included_units

    @property
    def is_prepaid(self):
        """Gets the is_prepaid of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.   Indicates whether this charge is a prepayment (topup) charge or a drawdown charge. Values: `true` or `false`.   # noqa: E501

        :return: The is_prepaid of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_prepaid

    @is_prepaid.setter
    def is_prepaid(self, is_prepaid):
        """Sets the is_prepaid of this UpdateProductRatePlanChargeRequest.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.   Indicates whether this charge is a prepayment (topup) charge or a drawdown charge. Values: `true` or `false`.   # noqa: E501

        :param is_prepaid: The is_prepaid of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: bool
        """

        self._is_prepaid = is_prepaid

    @property
    def is_rollover(self):
        """Gets the is_rollover of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The value is either \"True\" or \"False\". It determines whether the rollover fields are needed.   # noqa: E501

        :return: The is_rollover of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_rollover

    @is_rollover.setter
    def is_rollover(self, is_rollover):
        """Sets the is_rollover of this UpdateProductRatePlanChargeRequest.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The value is either \"True\" or \"False\". It determines whether the rollover fields are needed.   # noqa: E501

        :param is_rollover: The is_rollover of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: bool
        """

        self._is_rollover = is_rollover

    @property
    def is_stacked_discount(self):
        """Gets the is_stacked_discount of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        **Note**: This field is only applicable to the Discount - Percentage charge model.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 130 or higher. Otherwise, an error occurs.  This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:   - `True`: This is a stacked discount, which should be calculated by stacking with other discounts.   - `False`: This is not a stacked discount, which should be calculated in sequence with other discounts.  For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).   # noqa: E501

        :return: The is_stacked_discount of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._is_stacked_discount

    @is_stacked_discount.setter
    def is_stacked_discount(self, is_stacked_discount):
        """Sets the is_stacked_discount of this UpdateProductRatePlanChargeRequest.

        **Note**: This field is only applicable to the Discount - Percentage charge model.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 130 or higher. Otherwise, an error occurs.  This field indicates whether the discount is to be calculated as stacked discount. Possible values are as follows:   - `True`: This is a stacked discount, which should be calculated by stacking with other discounts.   - `False`: This is not a stacked discount, which should be calculated in sequence with other discounts.  For more information, see [Stacked discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Products/Product_Catalog/B_Charge_Models/B_Discount_Charge_Models).   # noqa: E501

        :param is_stacked_discount: The is_stacked_discount of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: bool
        """

        self._is_stacked_discount = is_stacked_discount

    @property
    def legacy_revenue_reporting(self):
        """Gets the legacy_revenue_reporting of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The legacy_revenue_reporting of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._legacy_revenue_reporting

    @legacy_revenue_reporting.setter
    def legacy_revenue_reporting(self, legacy_revenue_reporting):
        """Sets the legacy_revenue_reporting of this UpdateProductRatePlanChargeRequest.


        :param legacy_revenue_reporting: The legacy_revenue_reporting of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: bool
        """

        self._legacy_revenue_reporting = legacy_revenue_reporting

    @property
    def list_price_base(self):
        """Gets the list_price_base of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The list_price_base of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ListPriceBase
        """
        return self._list_price_base

    @list_price_base.setter
    def list_price_base(self, list_price_base):
        """Sets the list_price_base of this UpdateProductRatePlanChargeRequest.


        :param list_price_base: The list_price_base of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ListPriceBase
        """

        self._list_price_base = list_price_base

    @property
    def min_quantity(self):
        """Gets the min_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Specifies the minimum number of units for this charge. Use this field and the `MaxQuantity` field to create a range of units allowed in a product rate plan charge.  **Character limit**: 16  **Values**: a positive decimal value   # noqa: E501

        :return: The min_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this UpdateProductRatePlanChargeRequest.

        Specifies the minimum number of units for this charge. Use this field and the `MaxQuantity` field to create a range of units allowed in a product rate plan charge.  **Character limit**: 16  **Values**: a positive decimal value   # noqa: E501

        :param min_quantity: The min_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: float
        """

        self._min_quantity = min_quantity

    @property
    def max_quantity(self):
        """Gets the max_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Specifies the maximum number of units for this charge. Use this field and the `MinQuantity` field to create a range of units allowed in a product rate plan charge.  **Character limit**: 16  **Values**: a positive decimal value   # noqa: E501

        :return: The max_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """Sets the max_quantity of this UpdateProductRatePlanChargeRequest.

        Specifies the maximum number of units for this charge. Use this field and the `MinQuantity` field to create a range of units allowed in a product rate plan charge.  **Character limit**: 16  **Values**: a positive decimal value   # noqa: E501

        :param max_quantity: The max_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: float
        """

        self._max_quantity = max_quantity

    @property
    def name(self):
        """Gets the name of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The name of the product rate plan charge.   # noqa: E501

        :return: The name of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateProductRatePlanChargeRequest.

        The name of the product rate plan charge.   # noqa: E501

        :param name: The name of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number_of_period(self):
        """Gets the number_of_period of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model. The valid value must be a positive whole number.   # noqa: E501

        :return: The number_of_period of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._number_of_period

    @number_of_period.setter
    def number_of_period(self, number_of_period):
        """Sets the number_of_period of this UpdateProductRatePlanChargeRequest.

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model. The valid value must be a positive whole number.   # noqa: E501

        :param number_of_period: The number_of_period of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: int
        """

        self._number_of_period = number_of_period

    @property
    def overage_calculation_option(self):
        """Gets the overage_calculation_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The overage_calculation_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: OverageCalculationOption
        """
        return self._overage_calculation_option

    @overage_calculation_option.setter
    def overage_calculation_option(self, overage_calculation_option):
        """Sets the overage_calculation_option of this UpdateProductRatePlanChargeRequest.


        :param overage_calculation_option: The overage_calculation_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: OverageCalculationOption
        """

        self._overage_calculation_option = overage_calculation_option

    @property
    def overage_unused_units_credit_option(self):
        """Gets the overage_unused_units_credit_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The overage_unused_units_credit_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: OverageUnusedUnitsCreditOption
        """
        return self._overage_unused_units_credit_option

    @overage_unused_units_credit_option.setter
    def overage_unused_units_credit_option(self, overage_unused_units_credit_option):
        """Sets the overage_unused_units_credit_option of this UpdateProductRatePlanChargeRequest.


        :param overage_unused_units_credit_option: The overage_unused_units_credit_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: OverageUnusedUnitsCreditOption
        """

        self._overage_unused_units_credit_option = overage_unused_units_credit_option

    @property
    def prepaid_quantity(self):
        """Gets the prepaid_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.   The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number.   # noqa: E501

        :return: The prepaid_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._prepaid_quantity

    @prepaid_quantity.setter
    def prepaid_quantity(self, prepaid_quantity):
        """Sets the prepaid_quantity of this UpdateProductRatePlanChargeRequest.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.   The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number.   # noqa: E501

        :param prepaid_quantity: The prepaid_quantity of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: float
        """

        self._prepaid_quantity = prepaid_quantity

    @property
    def prepaid_uom(self):
        """Gets the prepaid_uom of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  Unit of measurement for a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).   # noqa: E501

        :return: The prepaid_uom of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._prepaid_uom

    @prepaid_uom.setter
    def prepaid_uom(self, prepaid_uom):
        """Sets the prepaid_uom of this UpdateProductRatePlanChargeRequest.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  Unit of measurement for a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge).   # noqa: E501

        :param prepaid_uom: The prepaid_uom of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._prepaid_uom = prepaid_uom

    @property
    def price_change_option(self):
        """Gets the price_change_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The price_change_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: PriceChangeOption
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this UpdateProductRatePlanChargeRequest.


        :param price_change_option: The price_change_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: PriceChangeOption
        """

        self._price_change_option = price_change_option

    @property
    def price_increase_option(self):
        """Gets the price_increase_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The price_increase_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: PriceIncreaseOption
        """
        return self._price_increase_option

    @price_increase_option.setter
    def price_increase_option(self, price_increase_option):
        """Sets the price_increase_option of this UpdateProductRatePlanChargeRequest.


        :param price_increase_option: The price_increase_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: PriceIncreaseOption
        """

        self._price_increase_option = price_increase_option

    @property
    def price_increase_percentage(self):
        """Gets the price_increase_percentage of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the value to `SpecificPercentageValue`.  **Character limit**: 16  **Values**: a decimal value between -100 and 100   # noqa: E501

        :return: The price_increase_percentage of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._price_increase_percentage

    @price_increase_percentage.setter
    def price_increase_percentage(self, price_increase_percentage):
        """Sets the price_increase_percentage of this UpdateProductRatePlanChargeRequest.

        Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Use this field if you set the value to `SpecificPercentageValue`.  **Character limit**: 16  **Values**: a decimal value between -100 and 100   # noqa: E501

        :param price_increase_percentage: The price_increase_percentage of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: float
        """

        self._price_increase_percentage = price_increase_percentage

    @property
    def product_rate_plan_charge_number(self):
        """Gets the product_rate_plan_charge_number of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The natural key of the product rate plan charge.   For existing Product Rate Plan Charge objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).  **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.   # noqa: E501

        :return: The product_rate_plan_charge_number of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_number

    @product_rate_plan_charge_number.setter
    def product_rate_plan_charge_number(self, product_rate_plan_charge_number):
        """Sets the product_rate_plan_charge_number of this UpdateProductRatePlanChargeRequest.

        The natural key of the product rate plan charge.   For existing Product Rate Plan Charge objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).  **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.   # noqa: E501

        :param product_rate_plan_charge_number: The product_rate_plan_charge_number of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_number = product_rate_plan_charge_number

    @property
    def product_rate_plan_charge_tier_data(self):
        """Gets the product_rate_plan_charge_tier_data of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The product_rate_plan_charge_tier_data of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: list[ProductRatePlanChargeTier]
        """
        return self._product_rate_plan_charge_tier_data

    @product_rate_plan_charge_tier_data.setter
    def product_rate_plan_charge_tier_data(self, product_rate_plan_charge_tier_data):
        """Sets the product_rate_plan_charge_tier_data of this UpdateProductRatePlanChargeRequest.


        :param product_rate_plan_charge_tier_data: The product_rate_plan_charge_tier_data of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: list[ProductRatePlanChargeTier]
        """
        if product_rate_plan_charge_tier_data is None:
            raise ValueError("Invalid value for `product_rate_plan_charge_tier_data`, must not be `None`")  # noqa: E501

        self._product_rate_plan_charge_tier_data = product_rate_plan_charge_tier_data

    @property
    def rating_group(self):
        """Gets the rating_group of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The rating_group of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: RatingGroup
        """
        return self._rating_group

    @rating_group.setter
    def rating_group(self, rating_group):
        """Sets the rating_group of this UpdateProductRatePlanChargeRequest.


        :param rating_group: The rating_group of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: RatingGroup
        """

        self._rating_group = rating_group

    @property
    def recognized_revenue_account(self):
        """Gets the recognized_revenue_account of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The name of the recognized revenue account for this charge.   - Required when the Allow Blank Accounting Code setting is No.   - Optional when the Allow Blank Accounting Code setting is Yes.    This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :return: The recognized_revenue_account of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_account

    @recognized_revenue_account.setter
    def recognized_revenue_account(self, recognized_revenue_account):
        """Sets the recognized_revenue_account of this UpdateProductRatePlanChargeRequest.

        The name of the recognized revenue account for this charge.   - Required when the Allow Blank Accounting Code setting is No.   - Optional when the Allow Blank Accounting Code setting is Yes.    This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).    # noqa: E501

        :param recognized_revenue_account: The recognized_revenue_account of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_account = recognized_revenue_account

    @property
    def rev_rec_code(self):
        """Gets the rev_rec_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Associates this product rate plan charge with a specific revenue recognition code.   # noqa: E501

        :return: The rev_rec_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_code

    @rev_rec_code.setter
    def rev_rec_code(self, rev_rec_code):
        """Sets the rev_rec_code of this UpdateProductRatePlanChargeRequest.

        Associates this product rate plan charge with a specific revenue recognition code.   # noqa: E501

        :param rev_rec_code: The rev_rec_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._rev_rec_code = rev_rec_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The rev_rec_trigger_condition of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: RevRecTriggerConditionProductRatePlanChargeRest
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this UpdateProductRatePlanChargeRequest.


        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: RevRecTriggerConditionProductRatePlanChargeRest
        """

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The revenue_recognition_rule_name of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: RevenueRecognitionRuleName
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this UpdateProductRatePlanChargeRequest.


        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: RevenueRecognitionRuleName
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def rollover_apply(self):
        """Gets the rollover_apply of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The rollover_apply of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: RolloverApply
        """
        return self._rollover_apply

    @rollover_apply.setter
    def rollover_apply(self, rollover_apply):
        """Sets the rollover_apply of this UpdateProductRatePlanChargeRequest.


        :param rollover_apply: The rollover_apply of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: RolloverApply
        """

        self._rollover_apply = rollover_apply

    @property
    def rollover_periods(self):
        """Gets the rollover_periods of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  This field defines the number of rollover periods, it is restricted to 3.   # noqa: E501

        :return: The rollover_periods of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: float
        """
        return self._rollover_periods

    @rollover_periods.setter
    def rollover_periods(self, rollover_periods):
        """Sets the rollover_periods of this UpdateProductRatePlanChargeRequest.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  This field defines the number of rollover periods, it is restricted to 3.   # noqa: E501

        :param rollover_periods: The rollover_periods of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: float
        """

        self._rollover_periods = rollover_periods

    @property
    def smoothing_model(self):
        """Gets the smoothing_model of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The smoothing_model of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: SmoothingModel
        """
        return self._smoothing_model

    @smoothing_model.setter
    def smoothing_model(self, smoothing_model):
        """Sets the smoothing_model of this UpdateProductRatePlanChargeRequest.


        :param smoothing_model: The smoothing_model of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: SmoothingModel
        """

        self._smoothing_model = smoothing_model

    @property
    def specific_billing_period(self):
        """Gets the specific_billing_period of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`. The valid value is a positive integer.   # noqa: E501

        :return: The specific_billing_period of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._specific_billing_period

    @specific_billing_period.setter
    def specific_billing_period(self, specific_billing_period):
        """Sets the specific_billing_period of this UpdateProductRatePlanChargeRequest.

        Customizes the number of months or weeks for the charges billing period. This field is required if you set the value of the BillingPeriod field to `Specific Months` or `Specific Weeks`. The valid value is a positive integer.   # noqa: E501

        :param specific_billing_period: The specific_billing_period of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: int
        """

        self._specific_billing_period = specific_billing_period

    @property
    def specific_list_price_base(self):
        """Gets the specific_list_price_base of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        The number of months for the list price base of the charge. This field is required if you set the value of the `ListPriceBase` field to `Per Specific Months`.  **Notes**:    - This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price\" target=\"_blank\">Annual List Price</a> feature enabled.   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `129` or later. Otherwise, an error occurs.   - The value of this field is `null` if you do not set the value of the `ListPriceBase` field to `Per Specific Months`.   # noqa: E501

        :return: The specific_list_price_base of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._specific_list_price_base

    @specific_list_price_base.setter
    def specific_list_price_base(self, specific_list_price_base):
        """Sets the specific_list_price_base of this UpdateProductRatePlanChargeRequest.

        The number of months for the list price base of the charge. This field is required if you set the value of the `ListPriceBase` field to `Per Specific Months`.  **Notes**:    - This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price\" target=\"_blank\">Annual List Price</a> feature enabled.   - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `129` or later. Otherwise, an error occurs.   - The value of this field is `null` if you do not set the value of the `ListPriceBase` field to `Per Specific Months`.   # noqa: E501

        :param specific_list_price_base: The specific_list_price_base of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: int
        """

        self._specific_list_price_base = specific_list_price_base

    @property
    def tax_code(self):
        """Gets the tax_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Specifies the tax code for taxation rules. Required when the Taxable field is set to `True`.  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :return: The tax_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this UpdateProductRatePlanChargeRequest.

        Specifies the tax code for taxation rules. Required when the Taxable field is set to `True`.  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :param tax_code: The tax_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_mode(self):
        """Gets the tax_mode of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The tax_mode of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: TaxMode
        """
        return self._tax_mode

    @tax_mode.setter
    def tax_mode(self, tax_mode):
        """Sets the tax_mode of this UpdateProductRatePlanChargeRequest.


        :param tax_mode: The tax_mode of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: TaxMode
        """

        self._tax_mode = tax_mode

    @property
    def taxable(self):
        """Gets the taxable of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Determines whether the charge is taxable. When set to `True`, the TaxMode and TaxCode fields are required when creating or updating th ProductRatePlanCharge object.  **Character limit**: 5  **Values**: `True`, `False`  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :return: The taxable of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._taxable

    @taxable.setter
    def taxable(self, taxable):
        """Sets the taxable of this UpdateProductRatePlanChargeRequest.

        Determines whether the charge is taxable. When set to `True`, the TaxMode and TaxCode fields are required when creating or updating th ProductRatePlanCharge object.  **Character limit**: 5  **Values**: `True`, `False`  **Note**: This value affects the tax calculation of rate plan charges that come from the `ProductRatePlanCharge`.   # noqa: E501

        :param taxable: The taxable of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: bool
        """

        self._taxable = taxable

    @property
    def trigger_event(self):
        """Gets the trigger_event of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The trigger_event of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: TriggerEventProductRatePlanChargeRest
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this UpdateProductRatePlanChargeRequest.


        :param trigger_event: The trigger_event of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: TriggerEventProductRatePlanChargeRest
        """
        if trigger_event is None:
            raise ValueError("Invalid value for `trigger_event`, must not be `None`")  # noqa: E501

        self._trigger_event = trigger_event

    @property
    def uom(self):
        """Gets the uom of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Specifies the units to measure usage.   **Note**: You must specify this field when creating the following charge models:   - Per Unit Pricing   - Volume Pricing   - Overage Pricing   - Tiered Pricing   - Tiered with Overage Pricing   # noqa: E501

        :return: The uom of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this UpdateProductRatePlanChargeRequest.

        Specifies the units to measure usage.   **Note**: You must specify this field when creating the following charge models:   - Per Unit Pricing   - Volume Pricing   - Overage Pricing   - Tiered Pricing   - Tiered with Overage Pricing   # noqa: E501

        :param uom: The uom of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._uom = uom

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.  **Character limit**: 5  **Values**: a whole number between 0 and 65535, exclusive  **Notes**:   - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`.    - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :return: The up_to_periods of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: int
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this UpdateProductRatePlanChargeRequest.

        Specifies the length of the period during which the charge is active. If this period ends before the subscription ends, the charge ends when this period ends.  **Character limit**: 5  **Values**: a whole number between 0 and 65535, exclusive  **Notes**:   - You must use this field together with the `UpToPeriodsType` field to specify the time period. This field is applicable only when the `EndDateCondition` field is set to `FixedPeriod`.    - If the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge end date will change accordingly up to the original period end.   # noqa: E501

        :param up_to_periods: The up_to_periods of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: int
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The up_to_periods_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: UpToPeriodsTypeProductRatePlanChargeRest
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this UpdateProductRatePlanChargeRequest.


        :param up_to_periods_type: The up_to_periods_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: UpToPeriodsTypeProductRatePlanChargeRest
        """

        self._up_to_periods_type = up_to_periods_type

    @property
    def usage_record_rating_option(self):
        """Gets the usage_record_rating_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The usage_record_rating_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: UsageRecordRatingOption
        """
        return self._usage_record_rating_option

    @usage_record_rating_option.setter
    def usage_record_rating_option(self, usage_record_rating_option):
        """Sets the usage_record_rating_option of this UpdateProductRatePlanChargeRequest.


        :param usage_record_rating_option: The usage_record_rating_option of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: UsageRecordRatingOption
        """

        self._usage_record_rating_option = usage_record_rating_option

    @property
    def use_discount_specific_accounting_code(self):
        """Gets the use_discount_specific_accounting_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Determines whether to define a new accounting code for the new discount charge.  **Character limit**: 5  **Values**: `True`, `False`   # noqa: E501

        :return: The use_discount_specific_accounting_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_discount_specific_accounting_code

    @use_discount_specific_accounting_code.setter
    def use_discount_specific_accounting_code(self, use_discount_specific_accounting_code):
        """Sets the use_discount_specific_accounting_code of this UpdateProductRatePlanChargeRequest.

        Determines whether to define a new accounting code for the new discount charge.  **Character limit**: 5  **Values**: `True`, `False`   # noqa: E501

        :param use_discount_specific_accounting_code: The use_discount_specific_accounting_code of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: bool
        """
        if use_discount_specific_accounting_code is None:
            raise ValueError("Invalid value for `use_discount_specific_accounting_code`, must not be `None`")  # noqa: E501

        self._use_discount_specific_accounting_code = use_discount_specific_accounting_code

    @property
    def use_tenant_default_for_price_change(self):
        """Gets the use_tenant_default_for_price_change of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal.   **Character limit**: 5  **Values**: `true`, `false`   # noqa: E501

        :return: The use_tenant_default_for_price_change of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_tenant_default_for_price_change

    @use_tenant_default_for_price_change.setter
    def use_tenant_default_for_price_change(self, use_tenant_default_for_price_change):
        """Sets the use_tenant_default_for_price_change of this UpdateProductRatePlanChargeRequest.

        Applies the tenant-level percentage uplift value for an automatic price change to a termed subscription's renewal.   **Character limit**: 5  **Values**: `true`, `false`   # noqa: E501

        :param use_tenant_default_for_price_change: The use_tenant_default_for_price_change of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: bool
        """

        self._use_tenant_default_for_price_change = use_tenant_default_for_price_change

    @property
    def validity_period_type(self):
        """Gets the validity_period_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The validity_period_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ValidityPeriodType
        """
        return self._validity_period_type

    @validity_period_type.setter
    def validity_period_type(self, validity_period_type):
        """Sets the validity_period_type of this UpdateProductRatePlanChargeRequest.


        :param validity_period_type: The validity_period_type of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ValidityPeriodType
        """

        self._validity_period_type = validity_period_type

    @property
    def weekly_bill_cycle_day(self):
        """Gets the weekly_bill_cycle_day of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The weekly_bill_cycle_day of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: WeeklyBillCycleDay
        """
        return self._weekly_bill_cycle_day

    @weekly_bill_cycle_day.setter
    def weekly_bill_cycle_day(self, weekly_bill_cycle_day):
        """Sets the weekly_bill_cycle_day of this UpdateProductRatePlanChargeRequest.


        :param weekly_bill_cycle_day: The weekly_bill_cycle_day of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: WeeklyBillCycleDay
        """

        self._weekly_bill_cycle_day = weekly_bill_cycle_day

    @property
    def class__ns(self):
        """Gets the class__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this UpdateProductRatePlanChargeRequest.

        Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._class__ns = class__ns

    @property
    def deferred_rev_account__ns(self):
        """Gets the deferred_rev_account__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Deferrred revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The deferred_rev_account__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._deferred_rev_account__ns

    @deferred_rev_account__ns.setter
    def deferred_rev_account__ns(self, deferred_rev_account__ns):
        """Sets the deferred_rev_account__ns of this UpdateProductRatePlanChargeRequest.

        Deferrred revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param deferred_rev_account__ns: The deferred_rev_account__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._deferred_rev_account__ns = deferred_rev_account__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this UpdateProductRatePlanChargeRequest.

        Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._department__ns = department__ns

    @property
    def include_children__ns(self):
        """Gets the include_children__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The include_children__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ProductRatePlanChargeObjectNSFieldsIncludeChildrenNS
        """
        return self._include_children__ns

    @include_children__ns.setter
    def include_children__ns(self, include_children__ns):
        """Sets the include_children__ns of this UpdateProductRatePlanChargeRequest.


        :param include_children__ns: The include_children__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ProductRatePlanChargeObjectNSFieldsIncludeChildrenNS
        """

        self._include_children__ns = include_children__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this UpdateProductRatePlanChargeRequest.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Status of the product rate plan charge's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this UpdateProductRatePlanChargeRequest.

        Status of the product rate plan charge's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def item_type__ns(self):
        """Gets the item_type__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The item_type__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ProductRatePlanChargeObjectNSFieldsItemTypeNS
        """
        return self._item_type__ns

    @item_type__ns.setter
    def item_type__ns(self, item_type__ns):
        """Sets the item_type__ns of this UpdateProductRatePlanChargeRequest.


        :param item_type__ns: The item_type__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ProductRatePlanChargeObjectNSFieldsItemTypeNS
        """

        self._item_type__ns = item_type__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this UpdateProductRatePlanChargeRequest.

        Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._location__ns = location__ns

    @property
    def recognized_rev_account__ns(self):
        """Gets the recognized_rev_account__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Recognized revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The recognized_rev_account__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._recognized_rev_account__ns

    @recognized_rev_account__ns.setter
    def recognized_rev_account__ns(self, recognized_rev_account__ns):
        """Sets the recognized_rev_account__ns of this UpdateProductRatePlanChargeRequest.

        Recognized revenue account associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param recognized_rev_account__ns: The recognized_rev_account__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._recognized_rev_account__ns = recognized_rev_account__ns

    @property
    def rev_rec_end__ns(self):
        """Gets the rev_rec_end__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The rev_rec_end__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ProductRatePlanChargeObjectNSFieldsRevRecEndNS
        """
        return self._rev_rec_end__ns

    @rev_rec_end__ns.setter
    def rev_rec_end__ns(self, rev_rec_end__ns):
        """Sets the rev_rec_end__ns of this UpdateProductRatePlanChargeRequest.


        :param rev_rec_end__ns: The rev_rec_end__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ProductRatePlanChargeObjectNSFieldsRevRecEndNS
        """

        self._rev_rec_end__ns = rev_rec_end__ns

    @property
    def rev_rec_start__ns(self):
        """Gets the rev_rec_start__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501


        :return: The rev_rec_start__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: ProductRatePlanChargeObjectNSFieldsRevRecStartNS
        """
        return self._rev_rec_start__ns

    @rev_rec_start__ns.setter
    def rev_rec_start__ns(self, rev_rec_start__ns):
        """Sets the rev_rec_start__ns of this UpdateProductRatePlanChargeRequest.


        :param rev_rec_start__ns: The rev_rec_start__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: ProductRatePlanChargeObjectNSFieldsRevRecStartNS
        """

        self._rev_rec_start__ns = rev_rec_start__ns

    @property
    def rev_rec_template_type__ns(self):
        """Gets the rev_rec_template_type__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The rev_rec_template_type__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_template_type__ns

    @rev_rec_template_type__ns.setter
    def rev_rec_template_type__ns(self, rev_rec_template_type__ns):
        """Sets the rev_rec_template_type__ns of this UpdateProductRatePlanChargeRequest.

        Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param rev_rec_template_type__ns: The rev_rec_template_type__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._rev_rec_template_type__ns = rev_rec_template_type__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this UpdateProductRatePlanChargeRequest.

        Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501

        Date when the product rate plan charge was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this UpdateProductRatePlanChargeRequest.

        Date when the product rate plan charge was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this UpdateProductRatePlanChargeRequest.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateProductRatePlanChargeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProductRatePlanChargeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
