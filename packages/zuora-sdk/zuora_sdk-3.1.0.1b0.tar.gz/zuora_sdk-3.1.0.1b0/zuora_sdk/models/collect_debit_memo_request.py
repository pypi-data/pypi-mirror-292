# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollectDebitMemoRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'application_order': 'list[str]',
        'apply_credit': 'bool',
        'collect': 'bool',
        'payment': 'CollectDebitMemoRequestPayment'
    }

    attribute_map = {
        'application_order': 'applicationOrder',
        'apply_credit': 'applyCredit',
        'collect': 'collect',
        'payment': 'payment'
    }

    def __init__(self, application_order=None, apply_credit=False, collect=False, payment=None):  # noqa: E501
        """CollectDebitMemoRequest - a model defined in Swagger"""  # noqa: E501
        self._application_order = None
        self._apply_credit = None
        self._collect = None
        self._payment = None
        self.discriminator = None
        if application_order is not None:
            self.application_order = application_order
        if apply_credit is not None:
            self.apply_credit = apply_credit
        if collect is not None:
            self.collect = collect
        if payment is not None:
            self.payment = payment

    @property
    def application_order(self):
        """Gets the application_order of this CollectDebitMemoRequest.  # noqa: E501

        The priority order to apply credit memos and/or unapplied payments to the debit memo. Possible item values are: `CreditMemo`, `UnappliedPayment`.  **Note:**   - This field is valid only if the `applyCredit` field is set to `true`.   - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply the debit memo.   # noqa: E501

        :return: The application_order of this CollectDebitMemoRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._application_order

    @application_order.setter
    def application_order(self, application_order):
        """Sets the application_order of this CollectDebitMemoRequest.

        The priority order to apply credit memos and/or unapplied payments to the debit memo. Possible item values are: `CreditMemo`, `UnappliedPayment`.  **Note:**   - This field is valid only if the `applyCredit` field is set to `true`.   - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply the debit memo.   # noqa: E501

        :param application_order: The application_order of this CollectDebitMemoRequest.  # noqa: E501
        :type: list[str]
        """

        self._application_order = application_order

    @property
    def apply_credit(self):
        """Gets the apply_credit of this CollectDebitMemoRequest.  # noqa: E501

        Whether to automatically apply credit memos or unapplied payments, or both to the debit memo. If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the debit memo. If no value is specified or the value is `false`, no action is taken.   # noqa: E501

        :return: The apply_credit of this CollectDebitMemoRequest.  # noqa: E501
        :rtype: bool
        """
        return self._apply_credit

    @apply_credit.setter
    def apply_credit(self, apply_credit):
        """Sets the apply_credit of this CollectDebitMemoRequest.

        Whether to automatically apply credit memos or unapplied payments, or both to the debit memo. If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the debit memo. If no value is specified or the value is `false`, no action is taken.   # noqa: E501

        :param apply_credit: The apply_credit of this CollectDebitMemoRequest.  # noqa: E501
        :type: bool
        """

        self._apply_credit = apply_credit

    @property
    def collect(self):
        """Gets the collect of this CollectDebitMemoRequest.  # noqa: E501

        Indicates if the current request needs to collect payment or not.   # noqa: E501

        :return: The collect of this CollectDebitMemoRequest.  # noqa: E501
        :rtype: bool
        """
        return self._collect

    @collect.setter
    def collect(self, collect):
        """Sets the collect of this CollectDebitMemoRequest.

        Indicates if the current request needs to collect payment or not.   # noqa: E501

        :param collect: The collect of this CollectDebitMemoRequest.  # noqa: E501
        :type: bool
        """

        self._collect = collect

    @property
    def payment(self):
        """Gets the payment of this CollectDebitMemoRequest.  # noqa: E501


        :return: The payment of this CollectDebitMemoRequest.  # noqa: E501
        :rtype: CollectDebitMemoRequestPayment
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this CollectDebitMemoRequest.


        :param payment: The payment of this CollectDebitMemoRequest.  # noqa: E501
        :type: CollectDebitMemoRequestPayment
        """

        self._payment = payment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectDebitMemoRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectDebitMemoRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
