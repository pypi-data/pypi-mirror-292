# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RampResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charges': 'list[RampChargeResponse]',
        'description': 'str',
        'id': 'str',
        'intervals': 'list[RampIntervalResponse]',
        'name': 'str',
        'number': 'str',
        'subscription_number': 'str'
    }

    attribute_map = {
        'charges': 'charges',
        'description': 'description',
        'id': 'id',
        'intervals': 'intervals',
        'name': 'name',
        'number': 'number',
        'subscription_number': 'subscriptionNumber'
    }

    def __init__(self, charges=None, description=None, id=None, intervals=None, name=None, number=None, subscription_number=None):  # noqa: E501
        """RampResponse - a model defined in Swagger"""  # noqa: E501
        self._charges = None
        self._description = None
        self._id = None
        self._intervals = None
        self._name = None
        self._number = None
        self._subscription_number = None
        self.discriminator = None
        if charges is not None:
            self.charges = charges
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if intervals is not None:
            self.intervals = intervals
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if subscription_number is not None:
            self.subscription_number = subscription_number

    @property
    def charges(self):
        """Gets the charges of this RampResponse.  # noqa: E501

        Container for the rate plan charges that are considered as part of the ramp deal.  # noqa: E501

        :return: The charges of this RampResponse.  # noqa: E501
        :rtype: list[RampChargeResponse]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this RampResponse.

        Container for the rate plan charges that are considered as part of the ramp deal.  # noqa: E501

        :param charges: The charges of this RampResponse.  # noqa: E501
        :type: list[RampChargeResponse]
        """

        self._charges = charges

    @property
    def description(self):
        """Gets the description of this RampResponse.  # noqa: E501

        The short description of the ramp.  # noqa: E501

        :return: The description of this RampResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RampResponse.

        The short description of the ramp.  # noqa: E501

        :param description: The description of this RampResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this RampResponse.  # noqa: E501

        The ID of the ramp.  # noqa: E501

        :return: The id of this RampResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RampResponse.

        The ID of the ramp.  # noqa: E501

        :param id: The id of this RampResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def intervals(self):
        """Gets the intervals of this RampResponse.  # noqa: E501

        Container for the intervals that the ramp is split into in its timeline.  # noqa: E501

        :return: The intervals of this RampResponse.  # noqa: E501
        :rtype: list[RampIntervalResponse]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """Sets the intervals of this RampResponse.

        Container for the intervals that the ramp is split into in its timeline.  # noqa: E501

        :param intervals: The intervals of this RampResponse.  # noqa: E501
        :type: list[RampIntervalResponse]
        """

        self._intervals = intervals

    @property
    def name(self):
        """Gets the name of this RampResponse.  # noqa: E501

        The name of the ramp.  # noqa: E501

        :return: The name of this RampResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RampResponse.

        The name of the ramp.  # noqa: E501

        :param name: The name of this RampResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this RampResponse.  # noqa: E501

        The number of the ramp. It is automaticcally generated by the billing system.  # noqa: E501

        :return: The number of this RampResponse.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this RampResponse.

        The number of the ramp. It is automaticcally generated by the billing system.  # noqa: E501

        :param number: The number of this RampResponse.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def subscription_number(self):
        """Gets the subscription_number of this RampResponse.  # noqa: E501

        The number of the subscription that is considered as part of the ramp deal.  # noqa: E501

        :return: The subscription_number of this RampResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this RampResponse.

        The number of the subscription that is considered as part of the ramp deal.  # noqa: E501

        :param subscription_number: The subscription_number of this RampResponse.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RampResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RampResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
