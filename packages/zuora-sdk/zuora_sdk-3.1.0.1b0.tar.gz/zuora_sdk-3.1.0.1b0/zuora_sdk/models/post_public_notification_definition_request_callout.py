# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostPublicNotificationDefinitionRequestCallout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'callout_auth': 'CalloutAuth',
        'callout_baseurl': 'str',
        'callout_params': 'dict(str, str)',
        'callout_retry': 'bool',
        'description': 'str',
        'event_type_name': 'str',
        'http_method': 'PostPublicNotificationDefinitionRequestCalloutHttpMethod',
        'name': 'str',
        'required_auth': 'bool'
    }

    attribute_map = {
        'active': 'active',
        'callout_auth': 'calloutAuth',
        'callout_baseurl': 'calloutBaseurl',
        'callout_params': 'calloutParams',
        'callout_retry': 'calloutRetry',
        'description': 'description',
        'event_type_name': 'eventTypeName',
        'http_method': 'httpMethod',
        'name': 'name',
        'required_auth': 'requiredAuth'
    }

    def __init__(self, active=True, callout_auth=None, callout_baseurl=None, callout_params=None, callout_retry=True, description=None, event_type_name=None, http_method=None, name=None, required_auth=None):  # noqa: E501
        """PostPublicNotificationDefinitionRequestCallout - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._callout_auth = None
        self._callout_baseurl = None
        self._callout_params = None
        self._callout_retry = None
        self._description = None
        self._event_type_name = None
        self._http_method = None
        self._name = None
        self._required_auth = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if callout_auth is not None:
            self.callout_auth = callout_auth
        self.callout_baseurl = callout_baseurl
        if callout_params is not None:
            self.callout_params = callout_params
        if callout_retry is not None:
            self.callout_retry = callout_retry
        if description is not None:
            self.description = description
        self.event_type_name = event_type_name
        self.http_method = http_method
        self.name = name
        self.required_auth = required_auth

    @property
    def active(self):
        """Gets the active of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501

        The status of the callout. The default is `true`.  # noqa: E501

        :return: The active of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this PostPublicNotificationDefinitionRequestCallout.

        The status of the callout. The default is `true`.  # noqa: E501

        :param active: The active of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def callout_auth(self):
        """Gets the callout_auth of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501


        :return: The callout_auth of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: CalloutAuth
        """
        return self._callout_auth

    @callout_auth.setter
    def callout_auth(self, callout_auth):
        """Sets the callout_auth of this PostPublicNotificationDefinitionRequestCallout.


        :param callout_auth: The callout_auth of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: CalloutAuth
        """

        self._callout_auth = callout_auth

    @property
    def callout_baseurl(self):
        """Gets the callout_baseurl of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501

        The callout URL. It must start with 'https://'  # noqa: E501

        :return: The callout_baseurl of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: str
        """
        return self._callout_baseurl

    @callout_baseurl.setter
    def callout_baseurl(self, callout_baseurl):
        """Sets the callout_baseurl of this PostPublicNotificationDefinitionRequestCallout.

        The callout URL. It must start with 'https://'  # noqa: E501

        :param callout_baseurl: The callout_baseurl of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: str
        """
        if callout_baseurl is None:
            raise ValueError("Invalid value for `callout_baseurl`, must not be `None`")  # noqa: E501

        self._callout_baseurl = callout_baseurl

    @property
    def callout_params(self):
        """Gets the callout_params of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501

        A key-value map of merge fields of this callout.   # noqa: E501

        :return: The callout_params of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._callout_params

    @callout_params.setter
    def callout_params(self, callout_params):
        """Sets the callout_params of this PostPublicNotificationDefinitionRequestCallout.

        A key-value map of merge fields of this callout.   # noqa: E501

        :param callout_params: The callout_params of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: dict(str, str)
        """

        self._callout_params = callout_params

    @property
    def callout_retry(self):
        """Gets the callout_retry of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501

        Specified whether to retry the callout when the callout fails. The default value is `true`.  # noqa: E501

        :return: The callout_retry of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: bool
        """
        return self._callout_retry

    @callout_retry.setter
    def callout_retry(self, callout_retry):
        """Sets the callout_retry of this PostPublicNotificationDefinitionRequestCallout.

        Specified whether to retry the callout when the callout fails. The default value is `true`.  # noqa: E501

        :param callout_retry: The callout_retry of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: bool
        """

        self._callout_retry = callout_retry

    @property
    def description(self):
        """Gets the description of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501

        Description for the callout.  # noqa: E501

        :return: The description of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PostPublicNotificationDefinitionRequestCallout.

        Description for the callout.  # noqa: E501

        :param description: The description of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def event_type_name(self):
        """Gets the event_type_name of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501

        The name of the event type.  # noqa: E501

        :return: The event_type_name of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: str
        """
        return self._event_type_name

    @event_type_name.setter
    def event_type_name(self, event_type_name):
        """Sets the event_type_name of this PostPublicNotificationDefinitionRequestCallout.

        The name of the event type.  # noqa: E501

        :param event_type_name: The event_type_name of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: str
        """
        if event_type_name is None:
            raise ValueError("Invalid value for `event_type_name`, must not be `None`")  # noqa: E501

        self._event_type_name = event_type_name

    @property
    def http_method(self):
        """Gets the http_method of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501


        :return: The http_method of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: PostPublicNotificationDefinitionRequestCalloutHttpMethod
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this PostPublicNotificationDefinitionRequestCallout.


        :param http_method: The http_method of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: PostPublicNotificationDefinitionRequestCalloutHttpMethod
        """
        if http_method is None:
            raise ValueError("Invalid value for `http_method`, must not be `None`")  # noqa: E501

        self._http_method = http_method

    @property
    def name(self):
        """Gets the name of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501

        The name of the created callout.  # noqa: E501

        :return: The name of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PostPublicNotificationDefinitionRequestCallout.

        The name of the created callout.  # noqa: E501

        :param name: The name of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def required_auth(self):
        """Gets the required_auth of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501

        Specifies whether the callout requires auth.  # noqa: E501

        :return: The required_auth of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :rtype: bool
        """
        return self._required_auth

    @required_auth.setter
    def required_auth(self, required_auth):
        """Sets the required_auth of this PostPublicNotificationDefinitionRequestCallout.

        Specifies whether the callout requires auth.  # noqa: E501

        :param required_auth: The required_auth of this PostPublicNotificationDefinitionRequestCallout.  # noqa: E501
        :type: bool
        """
        if required_auth is None:
            raise ValueError("Invalid value for `required_auth`, must not be `None`")  # noqa: E501

        self._required_auth = required_auth

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostPublicNotificationDefinitionRequestCallout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostPublicNotificationDefinitionRequestCallout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
