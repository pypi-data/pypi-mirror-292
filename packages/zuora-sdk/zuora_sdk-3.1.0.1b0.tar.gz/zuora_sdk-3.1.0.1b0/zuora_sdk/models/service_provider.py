# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServiceProvider(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'test': 'bool',
        'provider': 'str',
        'service_provider_number': 'str',
        'company_identifier': 'str',
        'api_key': 'str',
        'client_certificate': 'str',
        'client_certificate_type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'test': 'test',
        'provider': 'provider',
        'service_provider_number': 'serviceProviderNumber',
        'company_identifier': 'companyIdentifier',
        'api_key': 'apiKey',
        'client_certificate': 'clientCertificate',
        'client_certificate_type': 'clientCertificateType'
    }

    def __init__(self, id=None, name=None, test=None, provider=None, service_provider_number=None, company_identifier=None, api_key=None, client_certificate=None, client_certificate_type=None):  # noqa: E501
        """ServiceProvider - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._test = None
        self._provider = None
        self._service_provider_number = None
        self._company_identifier = None
        self._api_key = None
        self._client_certificate = None
        self._client_certificate_type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if test is not None:
            self.test = test
        if provider is not None:
            self.provider = provider
        if service_provider_number is not None:
            self.service_provider_number = service_provider_number
        if company_identifier is not None:
            self.company_identifier = company_identifier
        if api_key is not None:
            self.api_key = api_key
        if client_certificate is not None:
            self.client_certificate = client_certificate
        if client_certificate_type is not None:
            self.client_certificate_type = client_certificate_type

    @property
    def id(self):
        """Gets the id of this ServiceProvider.  # noqa: E501

        The ID of the e-invoicing service provider.   # noqa: E501

        :return: The id of this ServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ServiceProvider.

        The ID of the e-invoicing service provider.   # noqa: E501

        :param id: The id of this ServiceProvider.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ServiceProvider.  # noqa: E501

        The name of the e-invoicing service provider.   # noqa: E501

        :return: The name of this ServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ServiceProvider.

        The name of the e-invoicing service provider.   # noqa: E501

        :param name: The name of this ServiceProvider.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def test(self):
        """Gets the test of this ServiceProvider.  # noqa: E501

        Whether the e-invoicing service provider's configuration is intended for testing.   - If you set this field to `true`, requests are directed to the testing integration endpoints. If you set this field to `false`, requests are directed to the production integration endpoints.   # noqa: E501

        :return: The test of this ServiceProvider.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this ServiceProvider.

        Whether the e-invoicing service provider's configuration is intended for testing.   - If you set this field to `true`, requests are directed to the testing integration endpoints. If you set this field to `false`, requests are directed to the production integration endpoints.   # noqa: E501

        :param test: The test of this ServiceProvider.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def provider(self):
        """Gets the provider of this ServiceProvider.  # noqa: E501

        The name of the e-invoicing service provider that can help you generate e-invoice files for billing documents.   # noqa: E501

        :return: The provider of this ServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ServiceProvider.

        The name of the e-invoicing service provider that can help you generate e-invoice files for billing documents.   # noqa: E501

        :param provider: The provider of this ServiceProvider.  # noqa: E501
        :type: str
        """
        allowed_values = ["Sovos"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def service_provider_number(self):
        """Gets the service_provider_number of this ServiceProvider.  # noqa: E501

        The unique number of the e-invoicing service provider.   # noqa: E501

        :return: The service_provider_number of this ServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._service_provider_number

    @service_provider_number.setter
    def service_provider_number(self, service_provider_number):
        """Sets the service_provider_number of this ServiceProvider.

        The unique number of the e-invoicing service provider.   # noqa: E501

        :param service_provider_number: The service_provider_number of this ServiceProvider.  # noqa: E501
        :type: str
        """

        self._service_provider_number = service_provider_number

    @property
    def company_identifier(self):
        """Gets the company_identifier of this ServiceProvider.  # noqa: E501

        The Company Identifier is used to create a SenderSystemId, which serves to identify the system from which the transactions are sent.   # noqa: E501

        :return: The company_identifier of this ServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._company_identifier

    @company_identifier.setter
    def company_identifier(self, company_identifier):
        """Sets the company_identifier of this ServiceProvider.

        The Company Identifier is used to create a SenderSystemId, which serves to identify the system from which the transactions are sent.   # noqa: E501

        :param company_identifier: The company_identifier of this ServiceProvider.  # noqa: E501
        :type: str
        """

        self._company_identifier = company_identifier

    @property
    def api_key(self):
        """Gets the api_key of this ServiceProvider.  # noqa: E501

        The API key is used to authenticate the e-invoicing service provider's requests.   # noqa: E501

        :return: The api_key of this ServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this ServiceProvider.

        The API key is used to authenticate the e-invoicing service provider's requests.   # noqa: E501

        :param api_key: The api_key of this ServiceProvider.  # noqa: E501
        :type: str
        """

        self._api_key = api_key

    @property
    def client_certificate(self):
        """Gets the client_certificate of this ServiceProvider.  # noqa: E501

        The client certificate is used to authenticate the e-invoicing service provider's requests, which should be in base64 encoded format.   # noqa: E501

        :return: The client_certificate of this ServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this ServiceProvider.

        The client certificate is used to authenticate the e-invoicing service provider's requests, which should be in base64 encoded format.   # noqa: E501

        :param client_certificate: The client_certificate of this ServiceProvider.  # noqa: E501
        :type: str
        """

        self._client_certificate = client_certificate

    @property
    def client_certificate_type(self):
        """Gets the client_certificate_type of this ServiceProvider.  # noqa: E501

        The client certificate type is used to authenticate the e-invoicing service provider's requests. The default value is `PKCS12`.   # noqa: E501

        :return: The client_certificate_type of this ServiceProvider.  # noqa: E501
        :rtype: str
        """
        return self._client_certificate_type

    @client_certificate_type.setter
    def client_certificate_type(self, client_certificate_type):
        """Sets the client_certificate_type of this ServiceProvider.

        The client certificate type is used to authenticate the e-invoicing service provider's requests. The default value is `PKCS12`.   # noqa: E501

        :param client_certificate_type: The client_certificate_type of this ServiceProvider.  # noqa: E501
        :type: str
        """

        self._client_certificate_type = client_certificate_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServiceProvider, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServiceProvider):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
