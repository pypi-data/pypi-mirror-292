# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductRatePlanChargeTier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'discount_amount': 'float',
        'discount_percentage': 'float',
        'ending_unit': 'float',
        'is_overage_price': 'bool',
        'price': 'float',
        'price_format': 'PriceFormatProductRatePlanChargeTier',
        'starting_unit': 'float'
    }

    attribute_map = {
        'currency': 'Currency',
        'discount_amount': 'DiscountAmount',
        'discount_percentage': 'DiscountPercentage',
        'ending_unit': 'EndingUnit',
        'is_overage_price': 'IsOveragePrice',
        'price': 'Price',
        'price_format': 'PriceFormat',
        'starting_unit': 'StartingUnit'
    }

    def __init__(self, currency=None, discount_amount=None, discount_percentage=None, ending_unit=None, is_overage_price=None, price=None, price_format=None, starting_unit=None):  # noqa: E501
        """ProductRatePlanChargeTier - a model defined in Swagger"""  # noqa: E501
        self._currency = None
        self._discount_amount = None
        self._discount_percentage = None
        self._ending_unit = None
        self._is_overage_price = None
        self._price = None
        self._price_format = None
        self._starting_unit = None
        self.discriminator = None
        if currency is not None:
            self.currency = currency
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if ending_unit is not None:
            self.ending_unit = ending_unit
        if is_overage_price is not None:
            self.is_overage_price = is_overage_price
        if price is not None:
            self.price = price
        if price_format is not None:
            self.price_format = price_format
        if starting_unit is not None:
            self.starting_unit = starting_unit

    @property
    def currency(self):
        """Gets the currency of this ProductRatePlanChargeTier.  # noqa: E501

        The code corresponding to the currency for the tier's price.   # noqa: E501

        :return: The currency of this ProductRatePlanChargeTier.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProductRatePlanChargeTier.

        The code corresponding to the currency for the tier's price.   # noqa: E501

        :param currency: The currency of this ProductRatePlanChargeTier.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def discount_amount(self):
        """Gets the discount_amount of this ProductRatePlanChargeTier.  # noqa: E501

        The specific amount for a fixed discount. Required if the charge model of the product rate plan charge is `Discount-Fixed Amount`.   # noqa: E501

        :return: The discount_amount of this ProductRatePlanChargeTier.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this ProductRatePlanChargeTier.

        The specific amount for a fixed discount. Required if the charge model of the product rate plan charge is `Discount-Fixed Amount`.   # noqa: E501

        :param discount_amount: The discount_amount of this ProductRatePlanChargeTier.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this ProductRatePlanChargeTier.  # noqa: E501

        The percentage of discount for a percentage discount. Required if the charge model of the product rate plan charge is `Discount-Percentage`.   # noqa: E501

        :return: The discount_percentage of this ProductRatePlanChargeTier.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this ProductRatePlanChargeTier.

        The percentage of discount for a percentage discount. Required if the charge model of the product rate plan charge is `Discount-Percentage`.   # noqa: E501

        :param discount_percentage: The discount_percentage of this ProductRatePlanChargeTier.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def ending_unit(self):
        """Gets the ending_unit of this ProductRatePlanChargeTier.  # noqa: E501

        The end number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`.   # noqa: E501

        :return: The ending_unit of this ProductRatePlanChargeTier.  # noqa: E501
        :rtype: float
        """
        return self._ending_unit

    @ending_unit.setter
    def ending_unit(self, ending_unit):
        """Sets the ending_unit of this ProductRatePlanChargeTier.

        The end number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`.   # noqa: E501

        :param ending_unit: The ending_unit of this ProductRatePlanChargeTier.  # noqa: E501
        :type: float
        """

        self._ending_unit = ending_unit

    @property
    def is_overage_price(self):
        """Gets the is_overage_price of this ProductRatePlanChargeTier.  # noqa: E501

        Indicates if the price is an overage price, which is the price when usage surpasses the last defined tier.   # noqa: E501

        :return: The is_overage_price of this ProductRatePlanChargeTier.  # noqa: E501
        :rtype: bool
        """
        return self._is_overage_price

    @is_overage_price.setter
    def is_overage_price(self, is_overage_price):
        """Sets the is_overage_price of this ProductRatePlanChargeTier.

        Indicates if the price is an overage price, which is the price when usage surpasses the last defined tier.   # noqa: E501

        :param is_overage_price: The is_overage_price of this ProductRatePlanChargeTier.  # noqa: E501
        :type: bool
        """

        self._is_overage_price = is_overage_price

    @property
    def price(self):
        """Gets the price of this ProductRatePlanChargeTier.  # noqa: E501

        The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.   # noqa: E501

        :return: The price of this ProductRatePlanChargeTier.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ProductRatePlanChargeTier.

        The price of the tier if the charge is a flat fee, or the price of each unit in the tier if the charge model is tiered pricing.   # noqa: E501

        :param price: The price of this ProductRatePlanChargeTier.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_format(self):
        """Gets the price_format of this ProductRatePlanChargeTier.  # noqa: E501


        :return: The price_format of this ProductRatePlanChargeTier.  # noqa: E501
        :rtype: PriceFormatProductRatePlanChargeTier
        """
        return self._price_format

    @price_format.setter
    def price_format(self, price_format):
        """Sets the price_format of this ProductRatePlanChargeTier.


        :param price_format: The price_format of this ProductRatePlanChargeTier.  # noqa: E501
        :type: PriceFormatProductRatePlanChargeTier
        """

        self._price_format = price_format

    @property
    def starting_unit(self):
        """Gets the starting_unit of this ProductRatePlanChargeTier.  # noqa: E501

        The starting number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`.   # noqa: E501

        :return: The starting_unit of this ProductRatePlanChargeTier.  # noqa: E501
        :rtype: float
        """
        return self._starting_unit

    @starting_unit.setter
    def starting_unit(self, starting_unit):
        """Sets the starting_unit of this ProductRatePlanChargeTier.

        The starting number of a range of units for the tier. Required if the charge model of the product rate plan charge is `Tiered Pricing` or `Tiered with Overage Pricing`.   # noqa: E501

        :param starting_unit: The starting_unit of this ProductRatePlanChargeTier.  # noqa: E501
        :type: float
        """

        self._starting_unit = starting_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductRatePlanChargeTier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductRatePlanChargeTier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
