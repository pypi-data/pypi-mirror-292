# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UploadUsageFileResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'check_import_status': 'str',
        'size': 'int',
        'success': 'bool'
    }

    attribute_map = {
        'check_import_status': 'checkImportStatus',
        'size': 'size',
        'success': 'success'
    }

    def __init__(self, check_import_status=None, size=None, success=None):  # noqa: E501
        """UploadUsageFileResponse - a model defined in Swagger"""  # noqa: E501
        self._check_import_status = None
        self._size = None
        self._success = None
        self.discriminator = None
        if check_import_status is not None:
            self.check_import_status = check_import_status
        if size is not None:
            self.size = size
        if success is not None:
            self.success = success

    @property
    def check_import_status(self):
        """Gets the check_import_status of this UploadUsageFileResponse.  # noqa: E501

        The path for checking the status of the import.  The possible status values at this path are `Pending`, `Processing`, `Completed`, `Canceled`, and `Failed`. Only `Completed` indicates that the file contents were imported successfully.   # noqa: E501

        :return: The check_import_status of this UploadUsageFileResponse.  # noqa: E501
        :rtype: str
        """
        return self._check_import_status

    @check_import_status.setter
    def check_import_status(self, check_import_status):
        """Sets the check_import_status of this UploadUsageFileResponse.

        The path for checking the status of the import.  The possible status values at this path are `Pending`, `Processing`, `Completed`, `Canceled`, and `Failed`. Only `Completed` indicates that the file contents were imported successfully.   # noqa: E501

        :param check_import_status: The check_import_status of this UploadUsageFileResponse.  # noqa: E501
        :type: str
        """

        self._check_import_status = check_import_status

    @property
    def size(self):
        """Gets the size of this UploadUsageFileResponse.  # noqa: E501

        The size of the uploaded file in bytes.   # noqa: E501

        :return: The size of this UploadUsageFileResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UploadUsageFileResponse.

        The size of the uploaded file in bytes.   # noqa: E501

        :param size: The size of this UploadUsageFileResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def success(self):
        """Gets the success of this UploadUsageFileResponse.  # noqa: E501

        Indicates whether the call succeeded.   # noqa: E501

        :return: The success of this UploadUsageFileResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this UploadUsageFileResponse.

        Indicates whether the call succeeded.   # noqa: E501

        :param success: The success of this UploadUsageFileResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadUsageFileResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadUsageFileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
