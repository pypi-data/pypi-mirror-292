# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmailBillingDocumentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_addresses': 'str',
        'include_additional_email_addresses': 'bool',
        'pdf_file_id': 'str',
        'use_email_template_setting': 'bool'
    }

    attribute_map = {
        'email_addresses': 'emailAddresses',
        'include_additional_email_addresses': 'includeAdditionalEmailAddresses',
        'pdf_file_id': 'pdfFileId',
        'use_email_template_setting': 'useEmailTemplateSetting'
    }

    def __init__(self, email_addresses=None, include_additional_email_addresses=False, pdf_file_id=None, use_email_template_setting=False):  # noqa: E501
        """EmailBillingDocumentRequest - a model defined in Swagger"""  # noqa: E501
        self._email_addresses = None
        self._include_additional_email_addresses = None
        self._pdf_file_id = None
        self._use_email_template_setting = None
        self.discriminator = None
        if email_addresses is not None:
            self.email_addresses = email_addresses
        if include_additional_email_addresses is not None:
            self.include_additional_email_addresses = include_additional_email_addresses
        if pdf_file_id is not None:
            self.pdf_file_id = pdf_file_id
        if use_email_template_setting is not None:
            self.use_email_template_setting = use_email_template_setting

    @property
    def email_addresses(self):
        """Gets the email_addresses of this EmailBillingDocumentRequest.  # noqa: E501

        The valid email addresses you want to email a billing document to. Use commas to separate email addresses.  **Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.   # noqa: E501

        :return: The email_addresses of this EmailBillingDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this EmailBillingDocumentRequest.

        The valid email addresses you want to email a billing document to. Use commas to separate email addresses.  **Note:** This field is only applicable if you set the `useEmailTemplateSetting` field to `false`.   # noqa: E501

        :param email_addresses: The email_addresses of this EmailBillingDocumentRequest.  # noqa: E501
        :type: str
        """

        self._email_addresses = email_addresses

    @property
    def include_additional_email_addresses(self):
        """Gets the include_additional_email_addresses of this EmailBillingDocumentRequest.  # noqa: E501

        Indicates whether to send a billing document to the additional email addresses of the memo account.    You can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.   # noqa: E501

        :return: The include_additional_email_addresses of this EmailBillingDocumentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._include_additional_email_addresses

    @include_additional_email_addresses.setter
    def include_additional_email_addresses(self, include_additional_email_addresses):
        """Sets the include_additional_email_addresses of this EmailBillingDocumentRequest.

        Indicates whether to send a billing document to the additional email addresses of the memo account.    You can set the additional email addresses in the **Additional Email Addresses** field on the account detail page from the Zuora UI. See [Create a Customer Account](https://knowledgecenter.zuora.com/BC_Subscription_Management/Customer_Accounts/B_Create_a_Customer_Account#section_2) for more information.   # noqa: E501

        :param include_additional_email_addresses: The include_additional_email_addresses of this EmailBillingDocumentRequest.  # noqa: E501
        :type: bool
        """

        self._include_additional_email_addresses = include_additional_email_addresses

    @property
    def pdf_file_id(self):
        """Gets the pdf_file_id of this EmailBillingDocumentRequest.  # noqa: E501

        The ID of the PDF file that you want to send in the email.   If you do not specify any PDF file ID, the latest PDF file generated for the billing document is sent in the email.   # noqa: E501

        :return: The pdf_file_id of this EmailBillingDocumentRequest.  # noqa: E501
        :rtype: str
        """
        return self._pdf_file_id

    @pdf_file_id.setter
    def pdf_file_id(self, pdf_file_id):
        """Sets the pdf_file_id of this EmailBillingDocumentRequest.

        The ID of the PDF file that you want to send in the email.   If you do not specify any PDF file ID, the latest PDF file generated for the billing document is sent in the email.   # noqa: E501

        :param pdf_file_id: The pdf_file_id of this EmailBillingDocumentRequest.  # noqa: E501
        :type: str
        """

        self._pdf_file_id = pdf_file_id

    @property
    def use_email_template_setting(self):
        """Gets the use_email_template_setting of this EmailBillingDocumentRequest.  # noqa: E501

        Indicates whether to email a billing document based on the email template setting.   If you set this field to `true`, the billing document is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.   # noqa: E501

        :return: The use_email_template_setting of this EmailBillingDocumentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_email_template_setting

    @use_email_template_setting.setter
    def use_email_template_setting(self, use_email_template_setting):
        """Sets the use_email_template_setting of this EmailBillingDocumentRequest.

        Indicates whether to email a billing document based on the email template setting.   If you set this field to `true`, the billing document is sent to the email addresses specified in the **To Email** field of the email template. The email template is the one you set in the **Delivery Options** panel of the **Edit notification** dialog from the Zuora UI. See [Edit Email Templates](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/Notifications/Create_Email_Templates) for more information about how to edit the **To Email** field in the email template.   # noqa: E501

        :param use_email_template_setting: The use_email_template_setting of this EmailBillingDocumentRequest.  # noqa: E501
        :type: bool
        """

        self._use_email_template_setting = use_email_template_setting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmailBillingDocumentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailBillingDocumentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
