# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateMassUpdateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bulk_key': 'str',
        'success': 'bool'
    }

    attribute_map = {
        'bulk_key': 'bulkKey',
        'success': 'success'
    }

    def __init__(self, bulk_key=None, success=None):  # noqa: E501
        """CreateMassUpdateResponse - a model defined in Swagger"""  # noqa: E501
        self._bulk_key = None
        self._success = None
        self.discriminator = None
        if bulk_key is not None:
            self.bulk_key = bulk_key
        if success is not None:
            self.success = success

    @property
    def bulk_key(self):
        """Gets the bulk_key of this CreateMassUpdateResponse.  # noqa: E501

        String of 32 characters that identifies the mass action. The bulkKey is generated before the mass action is processed. You can use the bulkKey to Get the Mass Action Result.   # noqa: E501

        :return: The bulk_key of this CreateMassUpdateResponse.  # noqa: E501
        :rtype: str
        """
        return self._bulk_key

    @bulk_key.setter
    def bulk_key(self, bulk_key):
        """Sets the bulk_key of this CreateMassUpdateResponse.

        String of 32 characters that identifies the mass action. The bulkKey is generated before the mass action is processed. You can use the bulkKey to Get the Mass Action Result.   # noqa: E501

        :param bulk_key: The bulk_key of this CreateMassUpdateResponse.  # noqa: E501
        :type: str
        """

        self._bulk_key = bulk_key

    @property
    def success(self):
        """Gets the success of this CreateMassUpdateResponse.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this CreateMassUpdateResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this CreateMassUpdateResponse.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this CreateMassUpdateResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateMassUpdateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateMassUpdateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
