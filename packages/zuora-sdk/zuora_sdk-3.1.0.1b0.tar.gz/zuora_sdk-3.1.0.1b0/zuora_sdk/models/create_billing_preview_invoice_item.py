# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBillingPreviewInvoiceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applied_to_item_id': 'str',
        'charge_amount': 'str',
        'charge_date': 'str',
        'charge_description': 'str',
        'charge_id': 'str',
        'charge_name': 'str',
        'charge_number': 'str',
        'charge_type': 'str',
        'id': 'str',
        'number_of_deliveries': 'str',
        'processing_type': 'str',
        'product_name': 'str',
        'quantity': 'str',
        'service_end_date': 'date',
        'service_start_date': 'date',
        'subscription_id': 'str',
        'subscription_name': 'str',
        'subscription_number': 'str',
        'tax_amount': 'str',
        'unit_of_measure': 'str'
    }

    attribute_map = {
        'applied_to_item_id': 'appliedToItemId',
        'charge_amount': 'chargeAmount',
        'charge_date': 'chargeDate',
        'charge_description': 'chargeDescription',
        'charge_id': 'chargeId',
        'charge_name': 'chargeName',
        'charge_number': 'chargeNumber',
        'charge_type': 'chargeType',
        'id': 'id',
        'number_of_deliveries': 'numberOfDeliveries',
        'processing_type': 'processingType',
        'product_name': 'productName',
        'quantity': 'quantity',
        'service_end_date': 'serviceEndDate',
        'service_start_date': 'serviceStartDate',
        'subscription_id': 'subscriptionId',
        'subscription_name': 'subscriptionName',
        'subscription_number': 'subscriptionNumber',
        'tax_amount': 'taxAmount',
        'unit_of_measure': 'unitOfMeasure'
    }

    def __init__(self, applied_to_item_id=None, charge_amount=None, charge_date=None, charge_description=None, charge_id=None, charge_name=None, charge_number=None, charge_type=None, id=None, number_of_deliveries=None, processing_type=None, product_name=None, quantity=None, service_end_date=None, service_start_date=None, subscription_id=None, subscription_name=None, subscription_number=None, tax_amount=None, unit_of_measure=None):  # noqa: E501
        """CreateBillingPreviewInvoiceItem - a model defined in Swagger"""  # noqa: E501
        self._applied_to_item_id = None
        self._charge_amount = None
        self._charge_date = None
        self._charge_description = None
        self._charge_id = None
        self._charge_name = None
        self._charge_number = None
        self._charge_type = None
        self._id = None
        self._number_of_deliveries = None
        self._processing_type = None
        self._product_name = None
        self._quantity = None
        self._service_end_date = None
        self._service_start_date = None
        self._subscription_id = None
        self._subscription_name = None
        self._subscription_number = None
        self._tax_amount = None
        self._unit_of_measure = None
        self.discriminator = None
        if applied_to_item_id is not None:
            self.applied_to_item_id = applied_to_item_id
        if charge_amount is not None:
            self.charge_amount = charge_amount
        if charge_date is not None:
            self.charge_date = charge_date
        if charge_description is not None:
            self.charge_description = charge_description
        if charge_id is not None:
            self.charge_id = charge_id
        if charge_name is not None:
            self.charge_name = charge_name
        if charge_number is not None:
            self.charge_number = charge_number
        if charge_type is not None:
            self.charge_type = charge_type
        if id is not None:
            self.id = id
        if number_of_deliveries is not None:
            self.number_of_deliveries = number_of_deliveries
        if processing_type is not None:
            self.processing_type = processing_type
        if product_name is not None:
            self.product_name = product_name
        if quantity is not None:
            self.quantity = quantity
        if service_end_date is not None:
            self.service_end_date = service_end_date
        if service_start_date is not None:
            self.service_start_date = service_start_date
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_name is not None:
            self.subscription_name = subscription_name
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure

    @property
    def applied_to_item_id(self):
        """Gets the applied_to_item_id of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        The unique ID of the invoice item that the discount charge is applied to.   # noqa: E501

        :return: The applied_to_item_id of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._applied_to_item_id

    @applied_to_item_id.setter
    def applied_to_item_id(self, applied_to_item_id):
        """Sets the applied_to_item_id of this CreateBillingPreviewInvoiceItem.

        The unique ID of the invoice item that the discount charge is applied to.   # noqa: E501

        :param applied_to_item_id: The applied_to_item_id of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._applied_to_item_id = applied_to_item_id

    @property
    def charge_amount(self):
        """Gets the charge_amount of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        The amount of the charge. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.   # noqa: E501

        :return: The charge_amount of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_amount

    @charge_amount.setter
    def charge_amount(self, charge_amount):
        """Sets the charge_amount of this CreateBillingPreviewInvoiceItem.

        The amount of the charge. This amount doesn't include taxes regardless if the charge's tax mode is inclusive or exclusive.   # noqa: E501

        :param charge_amount: The charge_amount of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_amount = charge_amount

    @property
    def charge_date(self):
        """Gets the charge_date of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        The date when the invoice item was created.   # noqa: E501

        :return: The charge_date of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_date

    @charge_date.setter
    def charge_date(self, charge_date):
        """Sets the charge_date of this CreateBillingPreviewInvoiceItem.

        The date when the invoice item was created.   # noqa: E501

        :param charge_date: The charge_date of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_date = charge_date

    @property
    def charge_description(self):
        """Gets the charge_description of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Description of the charge.   # noqa: E501

        :return: The charge_description of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_description

    @charge_description.setter
    def charge_description(self, charge_description):
        """Sets the charge_description of this CreateBillingPreviewInvoiceItem.

        Description of the charge.   # noqa: E501

        :param charge_description: The charge_description of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_description = charge_description

    @property
    def charge_id(self):
        """Gets the charge_id of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Id of the charge.   # noqa: E501

        :return: The charge_id of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this CreateBillingPreviewInvoiceItem.

        Id of the charge.   # noqa: E501

        :param charge_id: The charge_id of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_id = charge_id

    @property
    def charge_name(self):
        """Gets the charge_name of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Name of the charge.   # noqa: E501

        :return: The charge_name of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_name

    @charge_name.setter
    def charge_name(self, charge_name):
        """Sets the charge_name of this CreateBillingPreviewInvoiceItem.

        Name of the charge.   # noqa: E501

        :param charge_name: The charge_name of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_name = charge_name

    @property
    def charge_number(self):
        """Gets the charge_number of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Number of the charge.   # noqa: E501

        :return: The charge_number of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_number

    @charge_number.setter
    def charge_number(self, charge_number):
        """Sets the charge_number of this CreateBillingPreviewInvoiceItem.

        Number of the charge.   # noqa: E501

        :param charge_number: The charge_number of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_number = charge_number

    @property
    def charge_type(self):
        """Gets the charge_type of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        The type of charge.   Possible values are `OneTime`, `Recurring`, and `Usage`.   # noqa: E501

        :return: The charge_type of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this CreateBillingPreviewInvoiceItem.

        The type of charge.   Possible values are `OneTime`, `Recurring`, and `Usage`.   # noqa: E501

        :param charge_type: The charge_type of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_type = charge_type

    @property
    def id(self):
        """Gets the id of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Invoice item ID.   # noqa: E501

        :return: The id of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateBillingPreviewInvoiceItem.

        Invoice item ID.   # noqa: E501

        :param id: The id of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def number_of_deliveries(self):
        """Gets the number_of_deliveries of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        The number of delivery for charge.  **Note**: This field is available only if you have the Delivery Pricing feature enabled.   # noqa: E501

        :return: The number_of_deliveries of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._number_of_deliveries

    @number_of_deliveries.setter
    def number_of_deliveries(self, number_of_deliveries):
        """Sets the number_of_deliveries of this CreateBillingPreviewInvoiceItem.

        The number of delivery for charge.  **Note**: This field is available only if you have the Delivery Pricing feature enabled.   # noqa: E501

        :param number_of_deliveries: The number_of_deliveries of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._number_of_deliveries = number_of_deliveries

    @property
    def processing_type(self):
        """Gets the processing_type of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Identifies the kind of charge.   Possible values: * charge * discount * prepayment * tax   # noqa: E501

        :return: The processing_type of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._processing_type

    @processing_type.setter
    def processing_type(self, processing_type):
        """Sets the processing_type of this CreateBillingPreviewInvoiceItem.

        Identifies the kind of charge.   Possible values: * charge * discount * prepayment * tax   # noqa: E501

        :param processing_type: The processing_type of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._processing_type = processing_type

    @property
    def product_name(self):
        """Gets the product_name of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Name of the product associated with this item.   # noqa: E501

        :return: The product_name of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this CreateBillingPreviewInvoiceItem.

        Name of the product associated with this item.   # noqa: E501

        :param product_name: The product_name of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def quantity(self):
        """Gets the quantity of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Quantity of this item, in the configured unit of measure for the charge.   # noqa: E501

        :return: The quantity of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CreateBillingPreviewInvoiceItem.

        Quantity of this item, in the configured unit of measure for the charge.   # noqa: E501

        :param quantity: The quantity of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._quantity = quantity

    @property
    def service_end_date(self):
        """Gets the service_end_date of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        End date of the service period for this item, i.e., the last day of the service period, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The service_end_date of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: date
        """
        return self._service_end_date

    @service_end_date.setter
    def service_end_date(self, service_end_date):
        """Sets the service_end_date of this CreateBillingPreviewInvoiceItem.

        End date of the service period for this item, i.e., the last day of the service period, in `yyyy-mm-dd` format.   # noqa: E501

        :param service_end_date: The service_end_date of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: date
        """

        self._service_end_date = service_end_date

    @property
    def service_start_date(self):
        """Gets the service_start_date of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Start date of the service period for this item, in `yyyy-mm-dd` format. If the charge is a one-time fee, this is the date of that charge.   # noqa: E501

        :return: The service_start_date of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: date
        """
        return self._service_start_date

    @service_start_date.setter
    def service_start_date(self, service_start_date):
        """Sets the service_start_date of this CreateBillingPreviewInvoiceItem.

        Start date of the service period for this item, in `yyyy-mm-dd` format. If the charge is a one-time fee, this is the date of that charge.   # noqa: E501

        :param service_start_date: The service_start_date of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: date
        """

        self._service_start_date = service_start_date

    @property
    def subscription_id(self):
        """Gets the subscription_id of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        ID of the subscription associated with this item.   # noqa: E501

        :return: The subscription_id of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this CreateBillingPreviewInvoiceItem.

        ID of the subscription associated with this item.   # noqa: E501

        :param subscription_id: The subscription_id of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_name(self):
        """Gets the subscription_name of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Name of the subscription associated with this item.   # noqa: E501

        :return: The subscription_name of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this CreateBillingPreviewInvoiceItem.

        Name of the subscription associated with this item.   # noqa: E501

        :param subscription_name: The subscription_name of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._subscription_name = subscription_name

    @property
    def subscription_number(self):
        """Gets the subscription_number of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Number of the subscription associated with this item.   # noqa: E501

        :return: The subscription_number of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this CreateBillingPreviewInvoiceItem.

        Number of the subscription associated with this item.   # noqa: E501

        :param subscription_number: The subscription_number of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def tax_amount(self):
        """Gets the tax_amount of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        If you use [Zuora Tax](https://knowledgecenter.zuora.com/Billing/Taxes/A_Zuora_Tax) and the product rate plan charge associated with the invoice item is of [tax inclusive mode](https://knowledgecenter.zuora.com/Billing/Taxes/A_Zuora_Tax/D_Associate_tax_codes_with_product_charges_and_set_the_tax_mode), the value of this field is the amount of tax applied to the charge. Otherwise, the value of this field is `0`.    # noqa: E501

        :return: The tax_amount of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this CreateBillingPreviewInvoiceItem.

        If you use [Zuora Tax](https://knowledgecenter.zuora.com/Billing/Taxes/A_Zuora_Tax) and the product rate plan charge associated with the invoice item is of [tax inclusive mode](https://knowledgecenter.zuora.com/Billing/Taxes/A_Zuora_Tax/D_Associate_tax_codes_with_product_charges_and_set_the_tax_mode), the value of this field is the amount of tax applied to the charge. Otherwise, the value of this field is `0`.    # noqa: E501

        :param tax_amount: The tax_amount of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._tax_amount = tax_amount

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this CreateBillingPreviewInvoiceItem.  # noqa: E501

        Unit used to measure consumption.   # noqa: E501

        :return: The unit_of_measure of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this CreateBillingPreviewInvoiceItem.

        Unit used to measure consumption.   # noqa: E501

        :param unit_of_measure: The unit_of_measure of this CreateBillingPreviewInvoiceItem.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBillingPreviewInvoiceItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBillingPreviewInvoiceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
