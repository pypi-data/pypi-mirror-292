# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateInvoiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_pay': 'bool',
        'comments': 'str',
        'due_date': 'date',
        'id': 'str',
        'invoice_date': 'date',
        'invoice_items': 'list[UpdateInvoiceItem]',
        'transferred_to_accounting': 'TransferredToAccountingStatus',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'auto_pay': 'autoPay',
        'comments': 'comments',
        'due_date': 'dueDate',
        'id': 'id',
        'invoice_date': 'invoiceDate',
        'invoice_items': 'invoiceItems',
        'transferred_to_accounting': 'transferredToAccounting',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, auto_pay=None, comments=None, due_date=None, id=None, invoice_date=None, invoice_items=None, transferred_to_accounting=None, integration_id__ns=None, integration_status__ns=None, sync_date__ns=None):  # noqa: E501
        """UpdateInvoiceRequest - a model defined in Swagger"""  # noqa: E501
        self._auto_pay = None
        self._comments = None
        self._due_date = None
        self._id = None
        self._invoice_date = None
        self._invoice_items = None
        self._transferred_to_accounting = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if comments is not None:
            self.comments = comments
        if due_date is not None:
            self.due_date = due_date
        if id is not None:
            self.id = id
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if invoice_items is not None:
            self.invoice_items = invoice_items
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def auto_pay(self):
        """Gets the auto_pay of this UpdateInvoiceRequest.  # noqa: E501

        Whether invoices are automatically picked up for processing in the corresponding payment run. By default, invoices are automatically picked up for processing in the corresponding payment run.  # noqa: E501

        :return: The auto_pay of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this UpdateInvoiceRequest.

        Whether invoices are automatically picked up for processing in the corresponding payment run. By default, invoices are automatically picked up for processing in the corresponding payment run.  # noqa: E501

        :param auto_pay: The auto_pay of this UpdateInvoiceRequest.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def comments(self):
        """Gets the comments of this UpdateInvoiceRequest.  # noqa: E501

        Additional information related to the invoice that a Zuora user added to the invoice.  # noqa: E501

        :return: The comments of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this UpdateInvoiceRequest.

        Additional information related to the invoice that a Zuora user added to the invoice.  # noqa: E501

        :param comments: The comments of this UpdateInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def due_date(self):
        """Gets the due_date of this UpdateInvoiceRequest.  # noqa: E501

        The date by which the payment for this invoice is due.  # noqa: E501

        :return: The due_date of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this UpdateInvoiceRequest.

        The date by which the payment for this invoice is due.  # noqa: E501

        :param due_date: The due_date of this UpdateInvoiceRequest.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this UpdateInvoiceRequest.  # noqa: E501

        The ID of the invoice to be updated.  # noqa: E501

        :return: The id of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdateInvoiceRequest.

        The ID of the invoice to be updated.  # noqa: E501

        :param id: The id of this UpdateInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_date(self):
        """Gets the invoice_date of this UpdateInvoiceRequest.  # noqa: E501

        The new invoice date of the invoice. The new invoice date cannot fall in a closed accounting period. You can only specify `invoiceDate` or `dueDate` in one request. Otherwise, an error occurs.  # noqa: E501

        :return: The invoice_date of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: date
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this UpdateInvoiceRequest.

        The new invoice date of the invoice. The new invoice date cannot fall in a closed accounting period. You can only specify `invoiceDate` or `dueDate` in one request. Otherwise, an error occurs.  # noqa: E501

        :param invoice_date: The invoice_date of this UpdateInvoiceRequest.  # noqa: E501
        :type: date
        """

        self._invoice_date = invoice_date

    @property
    def invoice_items(self):
        """Gets the invoice_items of this UpdateInvoiceRequest.  # noqa: E501

        Container for invoice items. The maximum number of items is 1,000.  # noqa: E501

        :return: The invoice_items of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: list[UpdateInvoiceItem]
        """
        return self._invoice_items

    @invoice_items.setter
    def invoice_items(self, invoice_items):
        """Sets the invoice_items of this UpdateInvoiceRequest.

        Container for invoice items. The maximum number of items is 1,000.  # noqa: E501

        :param invoice_items: The invoice_items of this UpdateInvoiceRequest.  # noqa: E501
        :type: list[UpdateInvoiceItem]
        """

        self._invoice_items = invoice_items

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this UpdateInvoiceRequest.  # noqa: E501


        :return: The transferred_to_accounting of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: TransferredToAccountingStatus
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this UpdateInvoiceRequest.


        :param transferred_to_accounting: The transferred_to_accounting of this UpdateInvoiceRequest.  # noqa: E501
        :type: TransferredToAccountingStatus
        """

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this UpdateInvoiceRequest.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this UpdateInvoiceRequest.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this UpdateInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this UpdateInvoiceRequest.  # noqa: E501

        Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this UpdateInvoiceRequest.

        Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this UpdateInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this UpdateInvoiceRequest.  # noqa: E501

        Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this UpdateInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this UpdateInvoiceRequest.

        Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this UpdateInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateInvoiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateInvoiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
