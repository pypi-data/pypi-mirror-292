# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CancelAuthorizationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_number': 'str',
        'gateway_options': 'GatewayOptions',
        'gateway_order_id': 'str',
        'payment_gateway_id': 'str',
        'transaction_id': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_number': 'accountNumber',
        'gateway_options': 'gatewayOptions',
        'gateway_order_id': 'gatewayOrderId',
        'payment_gateway_id': 'paymentGatewayId',
        'transaction_id': 'transactionId'
    }

    def __init__(self, account_id=None, account_number=None, gateway_options=None, gateway_order_id=None, payment_gateway_id=None, transaction_id=None):  # noqa: E501
        """CancelAuthorizationRequest - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_number = None
        self._gateway_options = None
        self._gateway_order_id = None
        self._payment_gateway_id = None
        self._transaction_id = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_number is not None:
            self.account_number = account_number
        if gateway_options is not None:
            self.gateway_options = gateway_options
        self.gateway_order_id = gateway_order_id
        if payment_gateway_id is not None:
            self.payment_gateway_id = payment_gateway_id
        self.transaction_id = transaction_id

    @property
    def account_id(self):
        """Gets the account_id of this CancelAuthorizationRequest.  # noqa: E501

        The ID of the customer account. This field is generally required, but is optional if you are using the Ingenico ePayments gateway.  # noqa: E501

        :return: The account_id of this CancelAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CancelAuthorizationRequest.

        The ID of the customer account. This field is generally required, but is optional if you are using the Ingenico ePayments gateway.  # noqa: E501

        :param account_id: The account_id of this CancelAuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this CancelAuthorizationRequest.  # noqa: E501

        The number of the customer account. This field is generally required, but is optional if you are using the Ingenico ePayments gateway.  # noqa: E501

        :return: The account_number of this CancelAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CancelAuthorizationRequest.

        The number of the customer account. This field is generally required, but is optional if you are using the Ingenico ePayments gateway.  # noqa: E501

        :param account_number: The account_number of this CancelAuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def gateway_options(self):
        """Gets the gateway_options of this CancelAuthorizationRequest.  # noqa: E501


        :return: The gateway_options of this CancelAuthorizationRequest.  # noqa: E501
        :rtype: GatewayOptions
        """
        return self._gateway_options

    @gateway_options.setter
    def gateway_options(self, gateway_options):
        """Sets the gateway_options of this CancelAuthorizationRequest.


        :param gateway_options: The gateway_options of this CancelAuthorizationRequest.  # noqa: E501
        :type: GatewayOptions
        """

        self._gateway_options = gateway_options

    @property
    def gateway_order_id(self):
        """Gets the gateway_order_id of this CancelAuthorizationRequest.  # noqa: E501

        The order ID for the specific gateway.  The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field.   # noqa: E501

        :return: The gateway_order_id of this CancelAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._gateway_order_id

    @gateway_order_id.setter
    def gateway_order_id(self, gateway_order_id):
        """Sets the gateway_order_id of this CancelAuthorizationRequest.

        The order ID for the specific gateway.  The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field.   # noqa: E501

        :param gateway_order_id: The gateway_order_id of this CancelAuthorizationRequest.  # noqa: E501
        :type: str
        """
        if gateway_order_id is None:
            raise ValueError("Invalid value for `gateway_order_id`, must not be `None`")  # noqa: E501

        self._gateway_order_id = gateway_order_id

    @property
    def payment_gateway_id(self):
        """Gets the payment_gateway_id of this CancelAuthorizationRequest.  # noqa: E501

        The ID of the payment gateway instance. This field is required if you do not specify the `accountId` and `accountNumber` fields.  # noqa: E501

        :return: The payment_gateway_id of this CancelAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_id

    @payment_gateway_id.setter
    def payment_gateway_id(self, payment_gateway_id):
        """Sets the payment_gateway_id of this CancelAuthorizationRequest.

        The ID of the payment gateway instance. This field is required if you do not specify the `accountId` and `accountNumber` fields.  # noqa: E501

        :param payment_gateway_id: The payment_gateway_id of this CancelAuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._payment_gateway_id = payment_gateway_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this CancelAuthorizationRequest.  # noqa: E501

        The ID of the transaction.  # noqa: E501

        :return: The transaction_id of this CancelAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this CancelAuthorizationRequest.

        The ID of the transaction.  # noqa: E501

        :param transaction_id: The transaction_id of this CancelAuthorizationRequest.  # noqa: E501
        :type: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")  # noqa: E501

        self._transaction_id = transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CancelAuthorizationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CancelAuthorizationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
