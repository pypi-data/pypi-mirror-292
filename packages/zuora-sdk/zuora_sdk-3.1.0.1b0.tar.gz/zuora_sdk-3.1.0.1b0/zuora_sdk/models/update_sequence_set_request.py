# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateSequenceSetRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_memo': 'CreditMemoEntityPrefix',
        'debit_memo': 'DebitMemoEntityPrefix',
        'invoice': 'InvoiceEntityPrefix',
        'name': 'str',
        'payment': 'PaymentEntityPrefix',
        'refund': 'RefundEntityPrefix'
    }

    attribute_map = {
        'credit_memo': 'creditMemo',
        'debit_memo': 'debitMemo',
        'invoice': 'invoice',
        'name': 'name',
        'payment': 'payment',
        'refund': 'refund'
    }

    def __init__(self, credit_memo=None, debit_memo=None, invoice=None, name=None, payment=None, refund=None):  # noqa: E501
        """UpdateSequenceSetRequest - a model defined in Swagger"""  # noqa: E501
        self._credit_memo = None
        self._debit_memo = None
        self._invoice = None
        self._name = None
        self._payment = None
        self._refund = None
        self.discriminator = None
        if credit_memo is not None:
            self.credit_memo = credit_memo
        if debit_memo is not None:
            self.debit_memo = debit_memo
        if invoice is not None:
            self.invoice = invoice
        if name is not None:
            self.name = name
        if payment is not None:
            self.payment = payment
        if refund is not None:
            self.refund = refund

    @property
    def credit_memo(self):
        """Gets the credit_memo of this UpdateSequenceSetRequest.  # noqa: E501


        :return: The credit_memo of this UpdateSequenceSetRequest.  # noqa: E501
        :rtype: CreditMemoEntityPrefix
        """
        return self._credit_memo

    @credit_memo.setter
    def credit_memo(self, credit_memo):
        """Sets the credit_memo of this UpdateSequenceSetRequest.


        :param credit_memo: The credit_memo of this UpdateSequenceSetRequest.  # noqa: E501
        :type: CreditMemoEntityPrefix
        """

        self._credit_memo = credit_memo

    @property
    def debit_memo(self):
        """Gets the debit_memo of this UpdateSequenceSetRequest.  # noqa: E501


        :return: The debit_memo of this UpdateSequenceSetRequest.  # noqa: E501
        :rtype: DebitMemoEntityPrefix
        """
        return self._debit_memo

    @debit_memo.setter
    def debit_memo(self, debit_memo):
        """Sets the debit_memo of this UpdateSequenceSetRequest.


        :param debit_memo: The debit_memo of this UpdateSequenceSetRequest.  # noqa: E501
        :type: DebitMemoEntityPrefix
        """

        self._debit_memo = debit_memo

    @property
    def invoice(self):
        """Gets the invoice of this UpdateSequenceSetRequest.  # noqa: E501


        :return: The invoice of this UpdateSequenceSetRequest.  # noqa: E501
        :rtype: InvoiceEntityPrefix
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this UpdateSequenceSetRequest.


        :param invoice: The invoice of this UpdateSequenceSetRequest.  # noqa: E501
        :type: InvoiceEntityPrefix
        """

        self._invoice = invoice

    @property
    def name(self):
        """Gets the name of this UpdateSequenceSetRequest.  # noqa: E501

        The name of the sequence set configured for billing documents, payments, and refunds.   # noqa: E501

        :return: The name of this UpdateSequenceSetRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateSequenceSetRequest.

        The name of the sequence set configured for billing documents, payments, and refunds.   # noqa: E501

        :param name: The name of this UpdateSequenceSetRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def payment(self):
        """Gets the payment of this UpdateSequenceSetRequest.  # noqa: E501


        :return: The payment of this UpdateSequenceSetRequest.  # noqa: E501
        :rtype: PaymentEntityPrefix
        """
        return self._payment

    @payment.setter
    def payment(self, payment):
        """Sets the payment of this UpdateSequenceSetRequest.


        :param payment: The payment of this UpdateSequenceSetRequest.  # noqa: E501
        :type: PaymentEntityPrefix
        """

        self._payment = payment

    @property
    def refund(self):
        """Gets the refund of this UpdateSequenceSetRequest.  # noqa: E501


        :return: The refund of this UpdateSequenceSetRequest.  # noqa: E501
        :rtype: RefundEntityPrefix
        """
        return self._refund

    @refund.setter
    def refund(self, refund):
        """Sets the refund of this UpdateSequenceSetRequest.


        :param refund: The refund of this UpdateSequenceSetRequest.  # noqa: E501
        :type: RefundEntityPrefix
        """

        self._refund = refund

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSequenceSetRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSequenceSetRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
