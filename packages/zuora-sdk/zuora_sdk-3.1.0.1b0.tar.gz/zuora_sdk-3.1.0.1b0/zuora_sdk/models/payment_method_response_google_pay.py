# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentMethodResponseGooglePay(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'google_bin': 'str',
        'google_card_number': 'str',
        'google_card_type': 'str',
        'google_expiry_date': 'str',
        'google_gateway_token': 'str'
    }

    attribute_map = {
        'google_bin': 'googleBIN',
        'google_card_number': 'googleCardNumber',
        'google_card_type': 'googleCardType',
        'google_expiry_date': 'googleExpiryDate',
        'google_gateway_token': 'googleGatewayToken'
    }

    def __init__(self, google_bin=None, google_card_number=None, google_card_type=None, google_expiry_date=None, google_gateway_token=None):  # noqa: E501
        """PaymentMethodResponseGooglePay - a model defined in Swagger"""  # noqa: E501
        self._google_bin = None
        self._google_card_number = None
        self._google_card_type = None
        self._google_expiry_date = None
        self._google_gateway_token = None
        self.discriminator = None
        if google_bin is not None:
            self.google_bin = google_bin
        if google_card_number is not None:
            self.google_card_number = google_card_number
        if google_card_type is not None:
            self.google_card_type = google_card_type
        if google_expiry_date is not None:
            self.google_expiry_date = google_expiry_date
        if google_gateway_token is not None:
            self.google_gateway_token = google_gateway_token

    @property
    def google_bin(self):
        """Gets the google_bin of this PaymentMethodResponseGooglePay.  # noqa: E501

        This field is only available for Google Pay payment methods.   # noqa: E501

        :return: The google_bin of this PaymentMethodResponseGooglePay.  # noqa: E501
        :rtype: str
        """
        return self._google_bin

    @google_bin.setter
    def google_bin(self, google_bin):
        """Sets the google_bin of this PaymentMethodResponseGooglePay.

        This field is only available for Google Pay payment methods.   # noqa: E501

        :param google_bin: The google_bin of this PaymentMethodResponseGooglePay.  # noqa: E501
        :type: str
        """

        self._google_bin = google_bin

    @property
    def google_card_number(self):
        """Gets the google_card_number of this PaymentMethodResponseGooglePay.  # noqa: E501

        This field is only available for Google Pay payment methods.   # noqa: E501

        :return: The google_card_number of this PaymentMethodResponseGooglePay.  # noqa: E501
        :rtype: str
        """
        return self._google_card_number

    @google_card_number.setter
    def google_card_number(self, google_card_number):
        """Sets the google_card_number of this PaymentMethodResponseGooglePay.

        This field is only available for Google Pay payment methods.   # noqa: E501

        :param google_card_number: The google_card_number of this PaymentMethodResponseGooglePay.  # noqa: E501
        :type: str
        """

        self._google_card_number = google_card_number

    @property
    def google_card_type(self):
        """Gets the google_card_type of this PaymentMethodResponseGooglePay.  # noqa: E501

        This field is only available for Google Pay payment methods.  For Google Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.   # noqa: E501

        :return: The google_card_type of this PaymentMethodResponseGooglePay.  # noqa: E501
        :rtype: str
        """
        return self._google_card_type

    @google_card_type.setter
    def google_card_type(self, google_card_type):
        """Sets the google_card_type of this PaymentMethodResponseGooglePay.

        This field is only available for Google Pay payment methods.  For Google Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.   # noqa: E501

        :param google_card_type: The google_card_type of this PaymentMethodResponseGooglePay.  # noqa: E501
        :type: str
        """

        self._google_card_type = google_card_type

    @property
    def google_expiry_date(self):
        """Gets the google_expiry_date of this PaymentMethodResponseGooglePay.  # noqa: E501

        This field is only available for Google Pay payment methods.   # noqa: E501

        :return: The google_expiry_date of this PaymentMethodResponseGooglePay.  # noqa: E501
        :rtype: str
        """
        return self._google_expiry_date

    @google_expiry_date.setter
    def google_expiry_date(self, google_expiry_date):
        """Sets the google_expiry_date of this PaymentMethodResponseGooglePay.

        This field is only available for Google Pay payment methods.   # noqa: E501

        :param google_expiry_date: The google_expiry_date of this PaymentMethodResponseGooglePay.  # noqa: E501
        :type: str
        """

        self._google_expiry_date = google_expiry_date

    @property
    def google_gateway_token(self):
        """Gets the google_gateway_token of this PaymentMethodResponseGooglePay.  # noqa: E501

        This field is only available for Google Pay payment methods.   # noqa: E501

        :return: The google_gateway_token of this PaymentMethodResponseGooglePay.  # noqa: E501
        :rtype: str
        """
        return self._google_gateway_token

    @google_gateway_token.setter
    def google_gateway_token(self, google_gateway_token):
        """Sets the google_gateway_token of this PaymentMethodResponseGooglePay.

        This field is only available for Google Pay payment methods.   # noqa: E501

        :param google_gateway_token: The google_gateway_token of this PaymentMethodResponseGooglePay.  # noqa: E501
        :type: str
        """

        self._google_gateway_token = google_gateway_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentMethodResponseGooglePay, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodResponseGooglePay):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
