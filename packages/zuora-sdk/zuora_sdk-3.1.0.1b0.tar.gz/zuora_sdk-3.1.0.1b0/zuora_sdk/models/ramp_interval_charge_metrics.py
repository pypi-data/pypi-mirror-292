# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RampIntervalChargeMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_number': 'str',
        'discount_tcb': 'float',
        'discount_tcv': 'float',
        'end_date': 'date',
        'gross_tcb': 'float',
        'gross_tcv': 'float',
        'mrr': 'list[RampIntervalChargeMetricsMrrInner]',
        'net_tcb': 'float',
        'net_tcv': 'float',
        'product_rate_plan_charge_id': 'str',
        'quantity': 'float',
        'rate_plan_charge_id': 'str',
        'start_date': 'date',
        'subscription_number': 'str'
    }

    attribute_map = {
        'charge_number': 'chargeNumber',
        'discount_tcb': 'discountTcb',
        'discount_tcv': 'discountTcv',
        'end_date': 'endDate',
        'gross_tcb': 'grossTcb',
        'gross_tcv': 'grossTcv',
        'mrr': 'mrr',
        'net_tcb': 'netTcb',
        'net_tcv': 'netTcv',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'quantity': 'quantity',
        'rate_plan_charge_id': 'ratePlanChargeId',
        'start_date': 'startDate',
        'subscription_number': 'subscriptionNumber'
    }

    def __init__(self, charge_number=None, discount_tcb=None, discount_tcv=None, end_date=None, gross_tcb=None, gross_tcv=None, mrr=None, net_tcb=None, net_tcv=None, product_rate_plan_charge_id=None, quantity=None, rate_plan_charge_id=None, start_date=None, subscription_number=None):  # noqa: E501
        """RampIntervalChargeMetrics - a model defined in Swagger"""  # noqa: E501
        self._charge_number = None
        self._discount_tcb = None
        self._discount_tcv = None
        self._end_date = None
        self._gross_tcb = None
        self._gross_tcv = None
        self._mrr = None
        self._net_tcb = None
        self._net_tcv = None
        self._product_rate_plan_charge_id = None
        self._quantity = None
        self._rate_plan_charge_id = None
        self._start_date = None
        self._subscription_number = None
        self.discriminator = None
        if charge_number is not None:
            self.charge_number = charge_number
        if discount_tcb is not None:
            self.discount_tcb = discount_tcb
        if discount_tcv is not None:
            self.discount_tcv = discount_tcv
        if end_date is not None:
            self.end_date = end_date
        if gross_tcb is not None:
            self.gross_tcb = gross_tcb
        if gross_tcv is not None:
            self.gross_tcv = gross_tcv
        if mrr is not None:
            self.mrr = mrr
        if net_tcb is not None:
            self.net_tcb = net_tcb
        if net_tcv is not None:
            self.net_tcv = net_tcv
        if product_rate_plan_charge_id is not None:
            self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if quantity is not None:
            self.quantity = quantity
        if rate_plan_charge_id is not None:
            self.rate_plan_charge_id = rate_plan_charge_id
        if start_date is not None:
            self.start_date = start_date
        if subscription_number is not None:
            self.subscription_number = subscription_number

    @property
    def charge_number(self):
        """Gets the charge_number of this RampIntervalChargeMetrics.  # noqa: E501

        The number of the charge.  # noqa: E501

        :return: The charge_number of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._charge_number

    @charge_number.setter
    def charge_number(self, charge_number):
        """Sets the charge_number of this RampIntervalChargeMetrics.

        The number of the charge.  # noqa: E501

        :param charge_number: The charge_number of this RampIntervalChargeMetrics.  # noqa: E501
        :type: str
        """

        self._charge_number = charge_number

    @property
    def discount_tcb(self):
        """Gets the discount_tcb of this RampIntervalChargeMetrics.  # noqa: E501

        The discount amount for the TCB.  # noqa: E501

        :return: The discount_tcb of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._discount_tcb

    @discount_tcb.setter
    def discount_tcb(self, discount_tcb):
        """Sets the discount_tcb of this RampIntervalChargeMetrics.

        The discount amount for the TCB.  # noqa: E501

        :param discount_tcb: The discount_tcb of this RampIntervalChargeMetrics.  # noqa: E501
        :type: float
        """

        self._discount_tcb = discount_tcb

    @property
    def discount_tcv(self):
        """Gets the discount_tcv of this RampIntervalChargeMetrics.  # noqa: E501

        The discount amount for the TCV.  # noqa: E501

        :return: The discount_tcv of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._discount_tcv

    @discount_tcv.setter
    def discount_tcv(self, discount_tcv):
        """Sets the discount_tcv of this RampIntervalChargeMetrics.

        The discount amount for the TCV.  # noqa: E501

        :param discount_tcv: The discount_tcv of this RampIntervalChargeMetrics.  # noqa: E501
        :type: float
        """

        self._discount_tcv = discount_tcv

    @property
    def end_date(self):
        """Gets the end_date of this RampIntervalChargeMetrics.  # noqa: E501

        The end date of the rate plan charge in the current ramp interval.  # noqa: E501

        :return: The end_date of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this RampIntervalChargeMetrics.

        The end date of the rate plan charge in the current ramp interval.  # noqa: E501

        :param end_date: The end_date of this RampIntervalChargeMetrics.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def gross_tcb(self):
        """Gets the gross_tcb of this RampIntervalChargeMetrics.  # noqa: E501

        The gross TCB value before discount charges are applied.  # noqa: E501

        :return: The gross_tcb of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gross_tcb

    @gross_tcb.setter
    def gross_tcb(self, gross_tcb):
        """Sets the gross_tcb of this RampIntervalChargeMetrics.

        The gross TCB value before discount charges are applied.  # noqa: E501

        :param gross_tcb: The gross_tcb of this RampIntervalChargeMetrics.  # noqa: E501
        :type: float
        """

        self._gross_tcb = gross_tcb

    @property
    def gross_tcv(self):
        """Gets the gross_tcv of this RampIntervalChargeMetrics.  # noqa: E501

        The gross TCV value before discount charges are applied.  # noqa: E501

        :return: The gross_tcv of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._gross_tcv

    @gross_tcv.setter
    def gross_tcv(self, gross_tcv):
        """Sets the gross_tcv of this RampIntervalChargeMetrics.

        The gross TCV value before discount charges are applied.  # noqa: E501

        :param gross_tcv: The gross_tcv of this RampIntervalChargeMetrics.  # noqa: E501
        :type: float
        """

        self._gross_tcv = gross_tcv

    @property
    def mrr(self):
        """Gets the mrr of this RampIntervalChargeMetrics.  # noqa: E501

        The MRR changing history of the current rate plan charge in the current ramp interval.  # noqa: E501

        :return: The mrr of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: list[RampIntervalChargeMetricsMrrInner]
        """
        return self._mrr

    @mrr.setter
    def mrr(self, mrr):
        """Sets the mrr of this RampIntervalChargeMetrics.

        The MRR changing history of the current rate plan charge in the current ramp interval.  # noqa: E501

        :param mrr: The mrr of this RampIntervalChargeMetrics.  # noqa: E501
        :type: list[RampIntervalChargeMetricsMrrInner]
        """

        self._mrr = mrr

    @property
    def net_tcb(self):
        """Gets the net_tcb of this RampIntervalChargeMetrics.  # noqa: E501

        The net TCB value after discount charges are applied.  # noqa: E501

        :return: The net_tcb of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._net_tcb

    @net_tcb.setter
    def net_tcb(self, net_tcb):
        """Sets the net_tcb of this RampIntervalChargeMetrics.

        The net TCB value after discount charges are applied.  # noqa: E501

        :param net_tcb: The net_tcb of this RampIntervalChargeMetrics.  # noqa: E501
        :type: float
        """

        self._net_tcb = net_tcb

    @property
    def net_tcv(self):
        """Gets the net_tcv of this RampIntervalChargeMetrics.  # noqa: E501

        The net TCV value after discount charges are applied.  # noqa: E501

        :return: The net_tcv of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._net_tcv

    @net_tcv.setter
    def net_tcv(self, net_tcv):
        """Sets the net_tcv of this RampIntervalChargeMetrics.

        The net TCV value after discount charges are applied.  # noqa: E501

        :param net_tcv: The net_tcv of this RampIntervalChargeMetrics.  # noqa: E501
        :type: float
        """

        self._net_tcv = net_tcv

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this RampIntervalChargeMetrics.  # noqa: E501

        The ID of the corresponding product rate plan charge.  # noqa: E501

        :return: The product_rate_plan_charge_id of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this RampIntervalChargeMetrics.

        The ID of the corresponding product rate plan charge.  # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this RampIntervalChargeMetrics.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def quantity(self):
        """Gets the quantity of this RampIntervalChargeMetrics.  # noqa: E501

        The quantity of the rate plan charge.  # noqa: E501

        :return: The quantity of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RampIntervalChargeMetrics.

        The quantity of the rate plan charge.  # noqa: E501

        :param quantity: The quantity of this RampIntervalChargeMetrics.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def rate_plan_charge_id(self):
        """Gets the rate_plan_charge_id of this RampIntervalChargeMetrics.  # noqa: E501

        The ID of the rate plan charge.  # noqa: E501

        :return: The rate_plan_charge_id of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_charge_id

    @rate_plan_charge_id.setter
    def rate_plan_charge_id(self, rate_plan_charge_id):
        """Sets the rate_plan_charge_id of this RampIntervalChargeMetrics.

        The ID of the rate plan charge.  # noqa: E501

        :param rate_plan_charge_id: The rate_plan_charge_id of this RampIntervalChargeMetrics.  # noqa: E501
        :type: str
        """

        self._rate_plan_charge_id = rate_plan_charge_id

    @property
    def start_date(self):
        """Gets the start_date of this RampIntervalChargeMetrics.  # noqa: E501

        The start date of the rate plan charge in the current ramp interval.  # noqa: E501

        :return: The start_date of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this RampIntervalChargeMetrics.

        The start date of the rate plan charge in the current ramp interval.  # noqa: E501

        :param start_date: The start_date of this RampIntervalChargeMetrics.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def subscription_number(self):
        """Gets the subscription_number of this RampIntervalChargeMetrics.  # noqa: E501

        The number of the subscription that the current rate plan charge belongs to.  # noqa: E501

        :return: The subscription_number of this RampIntervalChargeMetrics.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this RampIntervalChargeMetrics.

        The number of the subscription that the current rate plan charge belongs to.  # noqa: E501

        :param subscription_number: The subscription_number of this RampIntervalChargeMetrics.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RampIntervalChargeMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RampIntervalChargeMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
