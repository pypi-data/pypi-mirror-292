# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderActionRemoveProduct(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_catalog_plan_id': 'str',
        'product_rate_plan_number': 'str',
        'product_rate_plan_id': 'str',
        'rate_plan_id': 'str',
        'subscription_rate_plan_number': 'str',
        'unique_token': 'str',
        'custom_fields': 'dict(str, object)',
        'charge_updates': 'list[OrderActionRatePlanChargeRemove]'
    }

    attribute_map = {
        'external_catalog_plan_id': 'externalCatalogPlanId',
        'product_rate_plan_number': 'productRatePlanNumber',
        'product_rate_plan_id': 'productRatePlanId',
        'rate_plan_id': 'ratePlanId',
        'subscription_rate_plan_number': 'subscriptionRatePlanNumber',
        'unique_token': 'uniqueToken',
        'custom_fields': 'customFields',
        'charge_updates': 'chargeUpdates'
    }

    def __init__(self, external_catalog_plan_id=None, product_rate_plan_number=None, product_rate_plan_id=None, rate_plan_id=None, subscription_rate_plan_number=None, unique_token=None, custom_fields=None, charge_updates=None):  # noqa: E501
        """OrderActionRemoveProduct - a model defined in Swagger"""  # noqa: E501
        self._external_catalog_plan_id = None
        self._product_rate_plan_number = None
        self._product_rate_plan_id = None
        self._rate_plan_id = None
        self._subscription_rate_plan_number = None
        self._unique_token = None
        self._custom_fields = None
        self._charge_updates = None
        self.discriminator = None
        if external_catalog_plan_id is not None:
            self.external_catalog_plan_id = external_catalog_plan_id
        if product_rate_plan_number is not None:
            self.product_rate_plan_number = product_rate_plan_number
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if rate_plan_id is not None:
            self.rate_plan_id = rate_plan_id
        if subscription_rate_plan_number is not None:
            self.subscription_rate_plan_number = subscription_rate_plan_number
        if unique_token is not None:
            self.unique_token = unique_token
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if charge_updates is not None:
            self.charge_updates = charge_updates

    @property
    def external_catalog_plan_id(self):
        """Gets the external_catalog_plan_id of this OrderActionRemoveProduct.  # noqa: E501

        An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :return: The external_catalog_plan_id of this OrderActionRemoveProduct.  # noqa: E501
        :rtype: str
        """
        return self._external_catalog_plan_id

    @external_catalog_plan_id.setter
    def external_catalog_plan_id(self, external_catalog_plan_id):
        """Sets the external_catalog_plan_id of this OrderActionRemoveProduct.

        An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :param external_catalog_plan_id: The external_catalog_plan_id of this OrderActionRemoveProduct.  # noqa: E501
        :type: str
        """

        self._external_catalog_plan_id = external_catalog_plan_id

    @property
    def product_rate_plan_number(self):
        """Gets the product_rate_plan_number of this OrderActionRemoveProduct.  # noqa: E501

        Number of a product rate plan for this subscription.   # noqa: E501

        :return: The product_rate_plan_number of this OrderActionRemoveProduct.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_number

    @product_rate_plan_number.setter
    def product_rate_plan_number(self, product_rate_plan_number):
        """Sets the product_rate_plan_number of this OrderActionRemoveProduct.

        Number of a product rate plan for this subscription.   # noqa: E501

        :param product_rate_plan_number: The product_rate_plan_number of this OrderActionRemoveProduct.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_number = product_rate_plan_number

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this OrderActionRemoveProduct.  # noqa: E501

        ID of a product rate plan for this subscription.   # noqa: E501

        :return: The product_rate_plan_id of this OrderActionRemoveProduct.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this OrderActionRemoveProduct.

        ID of a product rate plan for this subscription.   # noqa: E501

        :param product_rate_plan_id: The product_rate_plan_id of this OrderActionRemoveProduct.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def rate_plan_id(self):
        """Gets the rate_plan_id of this OrderActionRemoveProduct.  # noqa: E501

        ID of the rate plan to remove. This can be the latest version or any history version of ID.   # noqa: E501

        :return: The rate_plan_id of this OrderActionRemoveProduct.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_id

    @rate_plan_id.setter
    def rate_plan_id(self, rate_plan_id):
        """Sets the rate_plan_id of this OrderActionRemoveProduct.

        ID of the rate plan to remove. This can be the latest version or any history version of ID.   # noqa: E501

        :param rate_plan_id: The rate_plan_id of this OrderActionRemoveProduct.  # noqa: E501
        :type: str
        """

        self._rate_plan_id = rate_plan_id

    @property
    def subscription_rate_plan_number(self):
        """Gets the subscription_rate_plan_number of this OrderActionRemoveProduct.  # noqa: E501

        Number of a rate plan for this subscription.   # noqa: E501

        :return: The subscription_rate_plan_number of this OrderActionRemoveProduct.  # noqa: E501
        :rtype: str
        """
        return self._subscription_rate_plan_number

    @subscription_rate_plan_number.setter
    def subscription_rate_plan_number(self, subscription_rate_plan_number):
        """Sets the subscription_rate_plan_number of this OrderActionRemoveProduct.

        Number of a rate plan for this subscription.   # noqa: E501

        :param subscription_rate_plan_number: The subscription_rate_plan_number of this OrderActionRemoveProduct.  # noqa: E501
        :type: str
        """

        self._subscription_rate_plan_number = subscription_rate_plan_number

    @property
    def unique_token(self):
        """Gets the unique_token of this OrderActionRemoveProduct.  # noqa: E501

        Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.  # noqa: E501

        :return: The unique_token of this OrderActionRemoveProduct.  # noqa: E501
        :rtype: str
        """
        return self._unique_token

    @unique_token.setter
    def unique_token(self, unique_token):
        """Sets the unique_token of this OrderActionRemoveProduct.

        Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.  # noqa: E501

        :param unique_token: The unique_token of this OrderActionRemoveProduct.  # noqa: E501
        :type: str
        """

        self._unique_token = unique_token

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderActionRemoveProduct.  # noqa: E501

        Container for custom fields of a Rate Plan object.   # noqa: E501

        :return: The custom_fields of this OrderActionRemoveProduct.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderActionRemoveProduct.

        Container for custom fields of a Rate Plan object.   # noqa: E501

        :param custom_fields: The custom_fields of this OrderActionRemoveProduct.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def charge_updates(self):
        """Gets the charge_updates of this OrderActionRemoveProduct.  # noqa: E501


        :return: The charge_updates of this OrderActionRemoveProduct.  # noqa: E501
        :rtype: list[OrderActionRatePlanChargeRemove]
        """
        return self._charge_updates

    @charge_updates.setter
    def charge_updates(self, charge_updates):
        """Sets the charge_updates of this OrderActionRemoveProduct.


        :param charge_updates: The charge_updates of this OrderActionRemoveProduct.  # noqa: E501
        :type: list[OrderActionRatePlanChargeRemove]
        """

        self._charge_updates = charge_updates

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderActionRemoveProduct, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderActionRemoveProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
