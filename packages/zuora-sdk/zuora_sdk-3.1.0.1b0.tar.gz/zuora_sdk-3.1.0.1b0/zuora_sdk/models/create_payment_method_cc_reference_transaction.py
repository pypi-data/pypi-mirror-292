# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePaymentMethodCCReferenceTransaction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_card_mask_number': 'str',
        'second_token_id': 'str',
        'token_id': 'str'
    }

    attribute_map = {
        'credit_card_mask_number': 'creditCardMaskNumber',
        'second_token_id': 'secondTokenId',
        'token_id': 'tokenId'
    }

    def __init__(self, credit_card_mask_number=None, second_token_id=None, token_id=None):  # noqa: E501
        """CreatePaymentMethodCCReferenceTransaction - a model defined in Swagger"""  # noqa: E501
        self._credit_card_mask_number = None
        self._second_token_id = None
        self._token_id = None
        self.discriminator = None
        if credit_card_mask_number is not None:
            self.credit_card_mask_number = credit_card_mask_number
        if second_token_id is not None:
            self.second_token_id = second_token_id
        if token_id is not None:
            self.token_id = token_id

    @property
    def credit_card_mask_number(self):
        """Gets the credit_card_mask_number of this CreatePaymentMethodCCReferenceTransaction.  # noqa: E501

        The masked credit card number, such as: ``` *********1112 ```  This field is specific for the CC Reference Transaction payment method. It is an optional field that you can use to distinguish different CC Reference Transaction payment methods.  Though there are no special restrictions on the input string, it is highly recommended to specify a card number that is masked.   # noqa: E501

        :return: The credit_card_mask_number of this CreatePaymentMethodCCReferenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_mask_number

    @credit_card_mask_number.setter
    def credit_card_mask_number(self, credit_card_mask_number):
        """Sets the credit_card_mask_number of this CreatePaymentMethodCCReferenceTransaction.

        The masked credit card number, such as: ``` *********1112 ```  This field is specific for the CC Reference Transaction payment method. It is an optional field that you can use to distinguish different CC Reference Transaction payment methods.  Though there are no special restrictions on the input string, it is highly recommended to specify a card number that is masked.   # noqa: E501

        :param credit_card_mask_number: The credit_card_mask_number of this CreatePaymentMethodCCReferenceTransaction.  # noqa: E501
        :type: str
        """

        self._credit_card_mask_number = credit_card_mask_number

    @property
    def second_token_id(self):
        """Gets the second_token_id of this CreatePaymentMethodCCReferenceTransaction.  # noqa: E501

        A gateway unique identifier that replaces sensitive payment method data.   `secondTokenId` is conditionally required only when `tokenId` is being used to represent a gateway customer profile. `secondTokenId` is used in the CC Reference Transaction payment method.   # noqa: E501

        :return: The second_token_id of this CreatePaymentMethodCCReferenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._second_token_id

    @second_token_id.setter
    def second_token_id(self, second_token_id):
        """Sets the second_token_id of this CreatePaymentMethodCCReferenceTransaction.

        A gateway unique identifier that replaces sensitive payment method data.   `secondTokenId` is conditionally required only when `tokenId` is being used to represent a gateway customer profile. `secondTokenId` is used in the CC Reference Transaction payment method.   # noqa: E501

        :param second_token_id: The second_token_id of this CreatePaymentMethodCCReferenceTransaction.  # noqa: E501
        :type: str
        """

        self._second_token_id = second_token_id

    @property
    def token_id(self):
        """Gets the token_id of this CreatePaymentMethodCCReferenceTransaction.  # noqa: E501

        A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. `tokenId` is required for the CC Reference Transaction payment method.  When `tokenId` is used to represent a customer profile, `secondTokenId` is conditionally required for representing the underlying tokenized payment method.  The values for the `tokenId` and `secondTokenId` fields differ for gateways. For more information, see the Knowledge Center article specific to each gateway that supports the CC Reference Transaction payment method.  **Note:** When creating an ACH payment method, if you need to pass in tokenized information, use the `mandateId` instead of `tokenId` field.   # noqa: E501

        :return: The token_id of this CreatePaymentMethodCCReferenceTransaction.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this CreatePaymentMethodCCReferenceTransaction.

        A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. `tokenId` is required for the CC Reference Transaction payment method.  When `tokenId` is used to represent a customer profile, `secondTokenId` is conditionally required for representing the underlying tokenized payment method.  The values for the `tokenId` and `secondTokenId` fields differ for gateways. For more information, see the Knowledge Center article specific to each gateway that supports the CC Reference Transaction payment method.  **Note:** When creating an ACH payment method, if you need to pass in tokenized information, use the `mandateId` instead of `tokenId` field.   # noqa: E501

        :param token_id: The token_id of this CreatePaymentMethodCCReferenceTransaction.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePaymentMethodCCReferenceTransaction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePaymentMethodCCReferenceTransaction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
