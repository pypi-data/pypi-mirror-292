# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MigrationComponentContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attribute': 'str',
        'component_type': 'str',
        'current_target_response': 'object',
        'description': 'str',
        'disabled': 'str',
        'error_message': 'str',
        'http_methods': 'str',
        'id': 'str',
        'key': 'str',
        'migrated_on': 'datetime',
        'migration_id': 'str',
        'path_pattern': 'str',
        'previous_target_response': 'object',
        'result': 'str',
        'segregation_key': 'str',
        'source_response': 'object',
        'status': 'str',
        'update_status': 'str'
    }

    attribute_map = {
        'attribute': 'attribute',
        'component_type': 'componentType',
        'current_target_response': 'currentTargetResponse',
        'description': 'description',
        'disabled': 'disabled',
        'error_message': 'errorMessage',
        'http_methods': 'httpMethods',
        'id': 'id',
        'key': 'key',
        'migrated_on': 'migratedOn',
        'migration_id': 'migrationId',
        'path_pattern': 'pathPattern',
        'previous_target_response': 'previousTargetResponse',
        'result': 'result',
        'segregation_key': 'segregationKey',
        'source_response': 'sourceResponse',
        'status': 'status',
        'update_status': 'updateStatus'
    }

    def __init__(self, attribute=None, component_type=None, current_target_response=None, description=None, disabled=None, error_message=None, http_methods=None, id=None, key=None, migrated_on=None, migration_id=None, path_pattern=None, previous_target_response=None, result=None, segregation_key=None, source_response=None, status=None, update_status=None):  # noqa: E501
        """MigrationComponentContent - a model defined in Swagger"""  # noqa: E501
        self._attribute = None
        self._component_type = None
        self._current_target_response = None
        self._description = None
        self._disabled = None
        self._error_message = None
        self._http_methods = None
        self._id = None
        self._key = None
        self._migrated_on = None
        self._migration_id = None
        self._path_pattern = None
        self._previous_target_response = None
        self._result = None
        self._segregation_key = None
        self._source_response = None
        self._status = None
        self._update_status = None
        self.discriminator = None
        if attribute is not None:
            self.attribute = attribute
        if component_type is not None:
            self.component_type = component_type
        if current_target_response is not None:
            self.current_target_response = current_target_response
        if description is not None:
            self.description = description
        if disabled is not None:
            self.disabled = disabled
        if error_message is not None:
            self.error_message = error_message
        if http_methods is not None:
            self.http_methods = http_methods
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if migrated_on is not None:
            self.migrated_on = migrated_on
        if migration_id is not None:
            self.migration_id = migration_id
        if path_pattern is not None:
            self.path_pattern = path_pattern
        if previous_target_response is not None:
            self.previous_target_response = previous_target_response
        if result is not None:
            self.result = result
        if segregation_key is not None:
            self.segregation_key = segregation_key
        if source_response is not None:
            self.source_response = source_response
        if status is not None:
            self.status = status
        if update_status is not None:
            self.update_status = update_status

    @property
    def attribute(self):
        """Gets the attribute of this MigrationComponentContent.  # noqa: E501


        :return: The attribute of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this MigrationComponentContent.


        :param attribute: The attribute of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._attribute = attribute

    @property
    def component_type(self):
        """Gets the component_type of this MigrationComponentContent.  # noqa: E501

        Type of selected components to be migrated.  # noqa: E501

        :return: The component_type of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this MigrationComponentContent.

        Type of selected components to be migrated.  # noqa: E501

        :param component_type: The component_type of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._component_type = component_type

    @property
    def current_target_response(self):
        """Gets the current_target_response of this MigrationComponentContent.  # noqa: E501

        Json node object contains metadata.  # noqa: E501

        :return: The current_target_response of this MigrationComponentContent.  # noqa: E501
        :rtype: object
        """
        return self._current_target_response

    @current_target_response.setter
    def current_target_response(self, current_target_response):
        """Sets the current_target_response of this MigrationComponentContent.

        Json node object contains metadata.  # noqa: E501

        :param current_target_response: The current_target_response of this MigrationComponentContent.  # noqa: E501
        :type: object
        """

        self._current_target_response = current_target_response

    @property
    def description(self):
        """Gets the description of this MigrationComponentContent.  # noqa: E501


        :return: The description of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this MigrationComponentContent.


        :param description: The description of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def disabled(self):
        """Gets the disabled of this MigrationComponentContent.  # noqa: E501


        :return: The disabled of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this MigrationComponentContent.


        :param disabled: The disabled of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._disabled = disabled

    @property
    def error_message(self):
        """Gets the error_message of this MigrationComponentContent.  # noqa: E501

        Error information.  # noqa: E501

        :return: The error_message of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this MigrationComponentContent.

        Error information.  # noqa: E501

        :param error_message: The error_message of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def http_methods(self):
        """Gets the http_methods of this MigrationComponentContent.  # noqa: E501


        :return: The http_methods of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._http_methods

    @http_methods.setter
    def http_methods(self, http_methods):
        """Sets the http_methods of this MigrationComponentContent.


        :param http_methods: The http_methods of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._http_methods = http_methods

    @property
    def id(self):
        """Gets the id of this MigrationComponentContent.  # noqa: E501


        :return: The id of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MigrationComponentContent.


        :param id: The id of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this MigrationComponentContent.  # noqa: E501


        :return: The key of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this MigrationComponentContent.


        :param key: The key of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def migrated_on(self):
        """Gets the migrated_on of this MigrationComponentContent.  # noqa: E501

        It is the time when migration is triggered.  # noqa: E501

        :return: The migrated_on of this MigrationComponentContent.  # noqa: E501
        :rtype: datetime
        """
        return self._migrated_on

    @migrated_on.setter
    def migrated_on(self, migrated_on):
        """Sets the migrated_on of this MigrationComponentContent.

        It is the time when migration is triggered.  # noqa: E501

        :param migrated_on: The migrated_on of this MigrationComponentContent.  # noqa: E501
        :type: datetime
        """

        self._migrated_on = migrated_on

    @property
    def migration_id(self):
        """Gets the migration_id of this MigrationComponentContent.  # noqa: E501

        Migration ID. It is generated at the time of triggering deployment.  # noqa: E501

        :return: The migration_id of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._migration_id

    @migration_id.setter
    def migration_id(self, migration_id):
        """Sets the migration_id of this MigrationComponentContent.

        Migration ID. It is generated at the time of triggering deployment.  # noqa: E501

        :param migration_id: The migration_id of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._migration_id = migration_id

    @property
    def path_pattern(self):
        """Gets the path_pattern of this MigrationComponentContent.  # noqa: E501

        PathPattern of component.  # noqa: E501

        :return: The path_pattern of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._path_pattern

    @path_pattern.setter
    def path_pattern(self, path_pattern):
        """Sets the path_pattern of this MigrationComponentContent.

        PathPattern of component.  # noqa: E501

        :param path_pattern: The path_pattern of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._path_pattern = path_pattern

    @property
    def previous_target_response(self):
        """Gets the previous_target_response of this MigrationComponentContent.  # noqa: E501

        Json node object contains metadata.  # noqa: E501

        :return: The previous_target_response of this MigrationComponentContent.  # noqa: E501
        :rtype: object
        """
        return self._previous_target_response

    @previous_target_response.setter
    def previous_target_response(self, previous_target_response):
        """Sets the previous_target_response of this MigrationComponentContent.

        Json node object contains metadata.  # noqa: E501

        :param previous_target_response: The previous_target_response of this MigrationComponentContent.  # noqa: E501
        :type: object
        """

        self._previous_target_response = previous_target_response

    @property
    def result(self):
        """Gets the result of this MigrationComponentContent.  # noqa: E501

        Returns the result details of Components.  # noqa: E501

        :return: The result of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this MigrationComponentContent.

        Returns the result details of Components.  # noqa: E501

        :param result: The result of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def segregation_key(self):
        """Gets the segregation_key of this MigrationComponentContent.  # noqa: E501

        Displays the differences between components.  # noqa: E501

        :return: The segregation_key of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._segregation_key

    @segregation_key.setter
    def segregation_key(self, segregation_key):
        """Sets the segregation_key of this MigrationComponentContent.

        Displays the differences between components.  # noqa: E501

        :param segregation_key: The segregation_key of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._segregation_key = segregation_key

    @property
    def source_response(self):
        """Gets the source_response of this MigrationComponentContent.  # noqa: E501

        Json node object contains metadata.  # noqa: E501

        :return: The source_response of this MigrationComponentContent.  # noqa: E501
        :rtype: object
        """
        return self._source_response

    @source_response.setter
    def source_response(self, source_response):
        """Sets the source_response of this MigrationComponentContent.

        Json node object contains metadata.  # noqa: E501

        :param source_response: The source_response of this MigrationComponentContent.  # noqa: E501
        :type: object
        """

        self._source_response = source_response

    @property
    def status(self):
        """Gets the status of this MigrationComponentContent.  # noqa: E501

        Returns the status of each component.  # noqa: E501

        :return: The status of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MigrationComponentContent.

        Returns the status of each component.  # noqa: E501

        :param status: The status of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def update_status(self):
        """Gets the update_status of this MigrationComponentContent.  # noqa: E501

        Updated Status.  # noqa: E501

        :return: The update_status of this MigrationComponentContent.  # noqa: E501
        :rtype: str
        """
        return self._update_status

    @update_status.setter
    def update_status(self, update_status):
        """Sets the update_status of this MigrationComponentContent.

        Updated Status.  # noqa: E501

        :param update_status: The update_status of this MigrationComponentContent.  # noqa: E501
        :type: str
        """

        self._update_status = update_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationComponentContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationComponentContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
