# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DecryptRSASignatureResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'decrypted_signature': 'str',
        'public_key': 'str',
        'signature': 'str',
        'success': 'bool'
    }

    attribute_map = {
        'decrypted_signature': 'decryptedSignature',
        'public_key': 'publicKey',
        'signature': 'signature',
        'success': 'success'
    }

    def __init__(self, decrypted_signature=None, public_key=None, signature=None, success=None):  # noqa: E501
        """DecryptRSASignatureResponse - a model defined in Swagger"""  # noqa: E501
        self._decrypted_signature = None
        self._public_key = None
        self._signature = None
        self._success = None
        self.discriminator = None
        if decrypted_signature is not None:
            self.decrypted_signature = decrypted_signature
        if public_key is not None:
            self.public_key = public_key
        if signature is not None:
            self.signature = signature
        if success is not None:
            self.success = success

    @property
    def decrypted_signature(self):
        """Gets the decrypted_signature of this DecryptRSASignatureResponse.  # noqa: E501

        The string of a list of the following items: Payment Pages 2.0 URL, tenant ID, timestamp,the Payment Page ID  The items are separated by '#', e.g., \"/apps/publichostedpagelite.do#12271#rvBp1AxBJwk6FrT7aqFuABIINiRbwJCc #1418848373103#2c92c0f948f899\"   # noqa: E501

        :return: The decrypted_signature of this DecryptRSASignatureResponse.  # noqa: E501
        :rtype: str
        """
        return self._decrypted_signature

    @decrypted_signature.setter
    def decrypted_signature(self, decrypted_signature):
        """Sets the decrypted_signature of this DecryptRSASignatureResponse.

        The string of a list of the following items: Payment Pages 2.0 URL, tenant ID, timestamp,the Payment Page ID  The items are separated by '#', e.g., \"/apps/publichostedpagelite.do#12271#rvBp1AxBJwk6FrT7aqFuABIINiRbwJCc #1418848373103#2c92c0f948f899\"   # noqa: E501

        :param decrypted_signature: The decrypted_signature of this DecryptRSASignatureResponse.  # noqa: E501
        :type: str
        """

        self._decrypted_signature = decrypted_signature

    @property
    def public_key(self):
        """Gets the public_key of this DecryptRSASignatureResponse.  # noqa: E501

        The public key passed in as a request parameter.   # noqa: E501

        :return: The public_key of this DecryptRSASignatureResponse.  # noqa: E501
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this DecryptRSASignatureResponse.

        The public key passed in as a request parameter.   # noqa: E501

        :param public_key: The public_key of this DecryptRSASignatureResponse.  # noqa: E501
        :type: str
        """

        self._public_key = public_key

    @property
    def signature(self):
        """Gets the signature of this DecryptRSASignatureResponse.  # noqa: E501

        The signature passed in as a request parameter.   # noqa: E501

        :return: The signature of this DecryptRSASignatureResponse.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this DecryptRSASignatureResponse.

        The signature passed in as a request parameter.   # noqa: E501

        :param signature: The signature of this DecryptRSASignatureResponse.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def success(self):
        """Gets the success of this DecryptRSASignatureResponse.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this DecryptRSASignatureResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this DecryptRSASignatureResponse.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this DecryptRSASignatureResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DecryptRSASignatureResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DecryptRSASignatureResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
