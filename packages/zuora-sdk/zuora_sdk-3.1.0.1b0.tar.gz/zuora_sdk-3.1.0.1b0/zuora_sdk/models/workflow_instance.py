# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WorkflowInstance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'created_at': 'str',
        'id': 'int',
        'name': 'str',
        'original_workflow_id': 'int',
        'status': 'WorkflowInstanceStatus',
        'updated_at': 'str'
    }

    attribute_map = {
        'created_at': 'createdAt',
        'id': 'id',
        'name': 'name',
        'original_workflow_id': 'originalWorkflowId',
        'status': 'status',
        'updated_at': 'updatedAt'
    }

    def __init__(self, created_at=None, id=None, name=None, original_workflow_id=None, status=None, updated_at=None):  # noqa: E501
        """WorkflowInstance - a model defined in Swagger"""  # noqa: E501
        self._created_at = None
        self._id = None
        self._name = None
        self._original_workflow_id = None
        self._status = None
        self._updated_at = None
        self.discriminator = None
        if created_at is not None:
            self.created_at = created_at
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if original_workflow_id is not None:
            self.original_workflow_id = original_workflow_id
        if status is not None:
            self.status = status
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def created_at(self):
        """Gets the created_at of this WorkflowInstance.  # noqa: E501

        The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :return: The created_at of this WorkflowInstance.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this WorkflowInstance.

        The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :param created_at: The created_at of this WorkflowInstance.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this WorkflowInstance.  # noqa: E501

        The unique ID of the workflow.   # noqa: E501

        :return: The id of this WorkflowInstance.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WorkflowInstance.

        The unique ID of the workflow.   # noqa: E501

        :param id: The id of this WorkflowInstance.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this WorkflowInstance.  # noqa: E501

        The run number of this workflow instance   # noqa: E501

        :return: The name of this WorkflowInstance.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this WorkflowInstance.

        The run number of this workflow instance   # noqa: E501

        :param name: The name of this WorkflowInstance.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_workflow_id(self):
        """Gets the original_workflow_id of this WorkflowInstance.  # noqa: E501

        The identifier of the workflow template that is used to create this instance.   # noqa: E501

        :return: The original_workflow_id of this WorkflowInstance.  # noqa: E501
        :rtype: int
        """
        return self._original_workflow_id

    @original_workflow_id.setter
    def original_workflow_id(self, original_workflow_id):
        """Sets the original_workflow_id of this WorkflowInstance.

        The identifier of the workflow template that is used to create this instance.   # noqa: E501

        :param original_workflow_id: The original_workflow_id of this WorkflowInstance.  # noqa: E501
        :type: int
        """

        self._original_workflow_id = original_workflow_id

    @property
    def status(self):
        """Gets the status of this WorkflowInstance.  # noqa: E501


        :return: The status of this WorkflowInstance.  # noqa: E501
        :rtype: WorkflowInstanceStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowInstance.


        :param status: The status of this WorkflowInstance.  # noqa: E501
        :type: WorkflowInstanceStatus
        """

        self._status = status

    @property
    def updated_at(self):
        """Gets the updated_at of this WorkflowInstance.  # noqa: E501

        The date and time the last time when the workflow is updated, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :return: The updated_at of this WorkflowInstance.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this WorkflowInstance.

        The date and time the last time when the workflow is updated, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :param updated_at: The updated_at of this WorkflowInstance.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WorkflowInstance, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WorkflowInstance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
