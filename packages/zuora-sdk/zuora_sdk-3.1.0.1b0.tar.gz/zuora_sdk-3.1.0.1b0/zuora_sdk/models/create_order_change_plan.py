# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateOrderChangePlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'effective_policy': 'ChangePlanEffectivePolicy',
        'external_catalog_plan_id': 'str',
        'new_product_rate_plan': 'CreateOrderChangePlanRatePlanOverride',
        'product_rate_plan_id': 'str',
        'product_rate_plan_number': 'str',
        'rate_plan_id': 'str',
        'reset_bcd': 'bool',
        'sub_type': 'ChangePlanSubType',
        'subscription_rate_plan_number': 'str'
    }

    attribute_map = {
        'effective_policy': 'effectivePolicy',
        'external_catalog_plan_id': 'externalCatalogPlanId',
        'new_product_rate_plan': 'newProductRatePlan',
        'product_rate_plan_id': 'productRatePlanId',
        'product_rate_plan_number': 'productRatePlanNumber',
        'rate_plan_id': 'ratePlanId',
        'reset_bcd': 'resetBcd',
        'sub_type': 'subType',
        'subscription_rate_plan_number': 'subscriptionRatePlanNumber'
    }

    def __init__(self, effective_policy=None, external_catalog_plan_id=None, new_product_rate_plan=None, product_rate_plan_id=None, product_rate_plan_number=None, rate_plan_id=None, reset_bcd=False, sub_type=None, subscription_rate_plan_number=None):  # noqa: E501
        """CreateOrderChangePlan - a model defined in Swagger"""  # noqa: E501
        self._effective_policy = None
        self._external_catalog_plan_id = None
        self._new_product_rate_plan = None
        self._product_rate_plan_id = None
        self._product_rate_plan_number = None
        self._rate_plan_id = None
        self._reset_bcd = None
        self._sub_type = None
        self._subscription_rate_plan_number = None
        self.discriminator = None
        if effective_policy is not None:
            self.effective_policy = effective_policy
        if external_catalog_plan_id is not None:
            self.external_catalog_plan_id = external_catalog_plan_id
        self.new_product_rate_plan = new_product_rate_plan
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if product_rate_plan_number is not None:
            self.product_rate_plan_number = product_rate_plan_number
        if rate_plan_id is not None:
            self.rate_plan_id = rate_plan_id
        if reset_bcd is not None:
            self.reset_bcd = reset_bcd
        if sub_type is not None:
            self.sub_type = sub_type
        if subscription_rate_plan_number is not None:
            self.subscription_rate_plan_number = subscription_rate_plan_number

    @property
    def effective_policy(self):
        """Gets the effective_policy of this CreateOrderChangePlan.  # noqa: E501


        :return: The effective_policy of this CreateOrderChangePlan.  # noqa: E501
        :rtype: ChangePlanEffectivePolicy
        """
        return self._effective_policy

    @effective_policy.setter
    def effective_policy(self, effective_policy):
        """Sets the effective_policy of this CreateOrderChangePlan.


        :param effective_policy: The effective_policy of this CreateOrderChangePlan.  # noqa: E501
        :type: ChangePlanEffectivePolicy
        """

        self._effective_policy = effective_policy

    @property
    def external_catalog_plan_id(self):
        """Gets the external_catalog_plan_id of this CreateOrderChangePlan.  # noqa: E501

        An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** Please provide only one of `externalCatalogPlanId`, `ratePlanId` or `productRatePlanId`. If more than 1 field is provided then the request would fail.   # noqa: E501

        :return: The external_catalog_plan_id of this CreateOrderChangePlan.  # noqa: E501
        :rtype: str
        """
        return self._external_catalog_plan_id

    @external_catalog_plan_id.setter
    def external_catalog_plan_id(self, external_catalog_plan_id):
        """Sets the external_catalog_plan_id of this CreateOrderChangePlan.

        An external ID of the rate plan to be removed. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to remove the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** Please provide only one of `externalCatalogPlanId`, `ratePlanId` or `productRatePlanId`. If more than 1 field is provided then the request would fail.   # noqa: E501

        :param external_catalog_plan_id: The external_catalog_plan_id of this CreateOrderChangePlan.  # noqa: E501
        :type: str
        """

        self._external_catalog_plan_id = external_catalog_plan_id

    @property
    def new_product_rate_plan(self):
        """Gets the new_product_rate_plan of this CreateOrderChangePlan.  # noqa: E501


        :return: The new_product_rate_plan of this CreateOrderChangePlan.  # noqa: E501
        :rtype: CreateOrderChangePlanRatePlanOverride
        """
        return self._new_product_rate_plan

    @new_product_rate_plan.setter
    def new_product_rate_plan(self, new_product_rate_plan):
        """Sets the new_product_rate_plan of this CreateOrderChangePlan.


        :param new_product_rate_plan: The new_product_rate_plan of this CreateOrderChangePlan.  # noqa: E501
        :type: CreateOrderChangePlanRatePlanOverride
        """
        if new_product_rate_plan is None:
            raise ValueError("Invalid value for `new_product_rate_plan`, must not be `None`")  # noqa: E501

        self._new_product_rate_plan = new_product_rate_plan

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this CreateOrderChangePlan.  # noqa: E501

        ID of the product rate plan that the removed rate plan is based on.   # noqa: E501

        :return: The product_rate_plan_id of this CreateOrderChangePlan.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this CreateOrderChangePlan.

        ID of the product rate plan that the removed rate plan is based on.   # noqa: E501

        :param product_rate_plan_id: The product_rate_plan_id of this CreateOrderChangePlan.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def product_rate_plan_number(self):
        """Gets the product_rate_plan_number of this CreateOrderChangePlan.  # noqa: E501

        Number of a product rate plan for this subscription.   # noqa: E501

        :return: The product_rate_plan_number of this CreateOrderChangePlan.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_number

    @product_rate_plan_number.setter
    def product_rate_plan_number(self, product_rate_plan_number):
        """Sets the product_rate_plan_number of this CreateOrderChangePlan.

        Number of a product rate plan for this subscription.   # noqa: E501

        :param product_rate_plan_number: The product_rate_plan_number of this CreateOrderChangePlan.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_number = product_rate_plan_number

    @property
    def rate_plan_id(self):
        """Gets the rate_plan_id of this CreateOrderChangePlan.  # noqa: E501

        ID of the rate plan to remove. This can be the latest version or any history version of ID. Note that the removal of a rate plan through the Change Plan order action supports the function of <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/Order_actions_tutorials/E2_Remove_rate_plan_on_subscription_before_future-dated_removals\" target=\"_blank\">removal before future-dated removals</a>, as in a Remove Product order action.   # noqa: E501

        :return: The rate_plan_id of this CreateOrderChangePlan.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_id

    @rate_plan_id.setter
    def rate_plan_id(self, rate_plan_id):
        """Sets the rate_plan_id of this CreateOrderChangePlan.

        ID of the rate plan to remove. This can be the latest version or any history version of ID. Note that the removal of a rate plan through the Change Plan order action supports the function of <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Subscriptions/Orders/Order_actions_tutorials/E2_Remove_rate_plan_on_subscription_before_future-dated_removals\" target=\"_blank\">removal before future-dated removals</a>, as in a Remove Product order action.   # noqa: E501

        :param rate_plan_id: The rate_plan_id of this CreateOrderChangePlan.  # noqa: E501
        :type: str
        """

        self._rate_plan_id = rate_plan_id

    @property
    def reset_bcd(self):
        """Gets the reset_bcd of this CreateOrderChangePlan.  # noqa: E501

        If resetBcd is true then reset the Account BCD to the effective date; if it is false keep the original BCD.   # noqa: E501

        :return: The reset_bcd of this CreateOrderChangePlan.  # noqa: E501
        :rtype: bool
        """
        return self._reset_bcd

    @reset_bcd.setter
    def reset_bcd(self, reset_bcd):
        """Sets the reset_bcd of this CreateOrderChangePlan.

        If resetBcd is true then reset the Account BCD to the effective date; if it is false keep the original BCD.   # noqa: E501

        :param reset_bcd: The reset_bcd of this CreateOrderChangePlan.  # noqa: E501
        :type: bool
        """

        self._reset_bcd = reset_bcd

    @property
    def sub_type(self):
        """Gets the sub_type of this CreateOrderChangePlan.  # noqa: E501


        :return: The sub_type of this CreateOrderChangePlan.  # noqa: E501
        :rtype: ChangePlanSubType
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this CreateOrderChangePlan.


        :param sub_type: The sub_type of this CreateOrderChangePlan.  # noqa: E501
        :type: ChangePlanSubType
        """

        self._sub_type = sub_type

    @property
    def subscription_rate_plan_number(self):
        """Gets the subscription_rate_plan_number of this CreateOrderChangePlan.  # noqa: E501

        Number of a rate plan for this subscription.   # noqa: E501

        :return: The subscription_rate_plan_number of this CreateOrderChangePlan.  # noqa: E501
        :rtype: str
        """
        return self._subscription_rate_plan_number

    @subscription_rate_plan_number.setter
    def subscription_rate_plan_number(self, subscription_rate_plan_number):
        """Sets the subscription_rate_plan_number of this CreateOrderChangePlan.

        Number of a rate plan for this subscription.   # noqa: E501

        :param subscription_rate_plan_number: The subscription_rate_plan_number of this CreateOrderChangePlan.  # noqa: E501
        :type: str
        """

        self._subscription_rate_plan_number = subscription_rate_plan_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOrderChangePlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrderChangePlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
