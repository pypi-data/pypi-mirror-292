# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderLineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'amended_by_order_on': 'str',
        'currency': 'str',
        'amount': 'float',
        'amount_without_tax': 'float',
        'item_number': 'str',
        'uom': 'str',
        'amount_per_unit': 'float',
        'bill_target_date': 'date',
        'bill_to': 'str',
        'bill_to_snapshot_id': 'str',
        'billing_rule': 'OrderLineItemBillingRule',
        'accounting_code': 'str',
        'adjustment_liability_accounting_code': 'str',
        'adjustment_revenue_accounting_code': 'str',
        'contract_asset_accounting_code': 'str',
        'contract_liability_accounting_code': 'str',
        'contract_recognized_revenue_accounting_code': 'str',
        'deferred_revenue_accounting_code': 'str',
        'custom_fields': 'dict(str, object)',
        'description': 'str',
        'discount': 'float',
        'exclude_item_billing_from_revenue_accounting': 'bool',
        'exclude_item_booking_from_revenue_accounting': 'bool',
        'revenue_recognition_timing': 'str',
        'revenue_amortization_method': 'str',
        'inline_discount_per_unit': 'float',
        'inline_discount_type': 'OrderLineItemInlineDiscountType',
        'invoice_group_number': 'str',
        'invoice_owner_account_id': 'str',
        'invoice_owner_account_name': 'str',
        'invoice_owner_account_number': 'str',
        'is_allocation_eligible': 'bool',
        'is_unbilled': 'bool',
        'item_category': 'OrderLineItemCategory',
        'item_name': 'str',
        'item_state': 'OrderLineItemState',
        'item_type': 'OrderLineItemType',
        'list_price': 'float',
        'list_price_per_unit': 'float',
        'original_order_id': 'str',
        'original_order_date': 'date',
        'original_order_line_item_id': 'str',
        'original_order_line_item_number': 'str',
        'original_order_number': 'str',
        'owner_account_id': 'str',
        'owner_account_name': 'str',
        'owner_account_number': 'str',
        'product_code': 'str',
        'product_rate_plan_charge_id': 'str',
        'purchase_order_number': 'str',
        'quantity': 'float',
        'quantity_available_for_return': 'float',
        'quantity_fulfilled': 'float',
        'quantity_pending_fulfillment': 'float',
        'recognized_revenue_accounting_code': 'str',
        'related_subscription_number': 'str',
        'requires_fulfillment': 'bool',
        'revenue_recognition_rule': 'str',
        'sequence_set_id': 'str',
        'sold_to': 'str',
        'sold_to_snapshot_id': 'str',
        'tax_code': 'str',
        'tax_mode': 'TaxMode',
        'transaction_end_date': 'date',
        'transaction_start_date': 'date',
        'unbilled_receivables_accounting_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'amended_by_order_on': 'amendedByOrderOn',
        'currency': 'currency',
        'amount': 'amount',
        'amount_without_tax': 'amountWithoutTax',
        'item_number': 'itemNumber',
        'uom': 'UOM',
        'amount_per_unit': 'amountPerUnit',
        'bill_target_date': 'billTargetDate',
        'bill_to': 'billTo',
        'bill_to_snapshot_id': 'billToSnapshotId',
        'billing_rule': 'billingRule',
        'accounting_code': 'accountingCode',
        'adjustment_liability_accounting_code': 'adjustmentLiabilityAccountingCode',
        'adjustment_revenue_accounting_code': 'adjustmentRevenueAccountingCode',
        'contract_asset_accounting_code': 'contractAssetAccountingCode',
        'contract_liability_accounting_code': 'contractLiabilityAccountingCode',
        'contract_recognized_revenue_accounting_code': 'contractRecognizedRevenueAccountingCode',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'custom_fields': 'customFields',
        'description': 'description',
        'discount': 'discount',
        'exclude_item_billing_from_revenue_accounting': 'excludeItemBillingFromRevenueAccounting',
        'exclude_item_booking_from_revenue_accounting': 'excludeItemBookingFromRevenueAccounting',
        'revenue_recognition_timing': 'revenueRecognitionTiming',
        'revenue_amortization_method': 'revenueAmortizationMethod',
        'inline_discount_per_unit': 'inlineDiscountPerUnit',
        'inline_discount_type': 'inlineDiscountType',
        'invoice_group_number': 'invoiceGroupNumber',
        'invoice_owner_account_id': 'invoiceOwnerAccountId',
        'invoice_owner_account_name': 'invoiceOwnerAccountName',
        'invoice_owner_account_number': 'invoiceOwnerAccountNumber',
        'is_allocation_eligible': 'isAllocationEligible',
        'is_unbilled': 'isUnbilled',
        'item_category': 'itemCategory',
        'item_name': 'itemName',
        'item_state': 'itemState',
        'item_type': 'itemType',
        'list_price': 'listPrice',
        'list_price_per_unit': 'listPricePerUnit',
        'original_order_id': 'originalOrderId',
        'original_order_date': 'originalOrderDate',
        'original_order_line_item_id': 'originalOrderLineItemId',
        'original_order_line_item_number': 'originalOrderLineItemNumber',
        'original_order_number': 'originalOrderNumber',
        'owner_account_id': 'ownerAccountId',
        'owner_account_name': 'ownerAccountName',
        'owner_account_number': 'ownerAccountNumber',
        'product_code': 'productCode',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'purchase_order_number': 'purchaseOrderNumber',
        'quantity': 'quantity',
        'quantity_available_for_return': 'quantityAvailableForReturn',
        'quantity_fulfilled': 'quantityFulfilled',
        'quantity_pending_fulfillment': 'quantityPendingFulfillment',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'related_subscription_number': 'relatedSubscriptionNumber',
        'requires_fulfillment': 'requiresFulfillment',
        'revenue_recognition_rule': 'revenueRecognitionRule',
        'sequence_set_id': 'sequenceSetId',
        'sold_to': 'soldTo',
        'sold_to_snapshot_id': 'soldToSnapshotId',
        'tax_code': 'taxCode',
        'tax_mode': 'taxMode',
        'transaction_end_date': 'transactionEndDate',
        'transaction_start_date': 'transactionStartDate',
        'unbilled_receivables_accounting_code': 'unbilledReceivablesAccountingCode'
    }

    def __init__(self, id=None, amended_by_order_on=None, currency=None, amount=None, amount_without_tax=None, item_number=None, uom=None, amount_per_unit=None, bill_target_date=None, bill_to=None, bill_to_snapshot_id=None, billing_rule=None, accounting_code=None, adjustment_liability_accounting_code=None, adjustment_revenue_accounting_code=None, contract_asset_accounting_code=None, contract_liability_accounting_code=None, contract_recognized_revenue_accounting_code=None, deferred_revenue_accounting_code=None, custom_fields=None, description=None, discount=None, exclude_item_billing_from_revenue_accounting=None, exclude_item_booking_from_revenue_accounting=None, revenue_recognition_timing=None, revenue_amortization_method=None, inline_discount_per_unit=None, inline_discount_type=None, invoice_group_number=None, invoice_owner_account_id=None, invoice_owner_account_name=None, invoice_owner_account_number=None, is_allocation_eligible=None, is_unbilled=None, item_category=None, item_name=None, item_state=None, item_type=None, list_price=None, list_price_per_unit=None, original_order_id=None, original_order_date=None, original_order_line_item_id=None, original_order_line_item_number=None, original_order_number=None, owner_account_id=None, owner_account_name=None, owner_account_number=None, product_code=None, product_rate_plan_charge_id=None, purchase_order_number=None, quantity=None, quantity_available_for_return=None, quantity_fulfilled=None, quantity_pending_fulfillment=None, recognized_revenue_accounting_code=None, related_subscription_number=None, requires_fulfillment=None, revenue_recognition_rule=None, sequence_set_id=None, sold_to=None, sold_to_snapshot_id=None, tax_code=None, tax_mode=None, transaction_end_date=None, transaction_start_date=None, unbilled_receivables_accounting_code=None):  # noqa: E501
        """OrderLineItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._amended_by_order_on = None
        self._currency = None
        self._amount = None
        self._amount_without_tax = None
        self._item_number = None
        self._uom = None
        self._amount_per_unit = None
        self._bill_target_date = None
        self._bill_to = None
        self._bill_to_snapshot_id = None
        self._billing_rule = None
        self._accounting_code = None
        self._adjustment_liability_accounting_code = None
        self._adjustment_revenue_accounting_code = None
        self._contract_asset_accounting_code = None
        self._contract_liability_accounting_code = None
        self._contract_recognized_revenue_accounting_code = None
        self._deferred_revenue_accounting_code = None
        self._custom_fields = None
        self._description = None
        self._discount = None
        self._exclude_item_billing_from_revenue_accounting = None
        self._exclude_item_booking_from_revenue_accounting = None
        self._revenue_recognition_timing = None
        self._revenue_amortization_method = None
        self._inline_discount_per_unit = None
        self._inline_discount_type = None
        self._invoice_group_number = None
        self._invoice_owner_account_id = None
        self._invoice_owner_account_name = None
        self._invoice_owner_account_number = None
        self._is_allocation_eligible = None
        self._is_unbilled = None
        self._item_category = None
        self._item_name = None
        self._item_state = None
        self._item_type = None
        self._list_price = None
        self._list_price_per_unit = None
        self._original_order_id = None
        self._original_order_date = None
        self._original_order_line_item_id = None
        self._original_order_line_item_number = None
        self._original_order_number = None
        self._owner_account_id = None
        self._owner_account_name = None
        self._owner_account_number = None
        self._product_code = None
        self._product_rate_plan_charge_id = None
        self._purchase_order_number = None
        self._quantity = None
        self._quantity_available_for_return = None
        self._quantity_fulfilled = None
        self._quantity_pending_fulfillment = None
        self._recognized_revenue_accounting_code = None
        self._related_subscription_number = None
        self._requires_fulfillment = None
        self._revenue_recognition_rule = None
        self._sequence_set_id = None
        self._sold_to = None
        self._sold_to_snapshot_id = None
        self._tax_code = None
        self._tax_mode = None
        self._transaction_end_date = None
        self._transaction_start_date = None
        self._unbilled_receivables_accounting_code = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if amended_by_order_on is not None:
            self.amended_by_order_on = amended_by_order_on
        if currency is not None:
            self.currency = currency
        if amount is not None:
            self.amount = amount
        if amount_without_tax is not None:
            self.amount_without_tax = amount_without_tax
        if item_number is not None:
            self.item_number = item_number
        if uom is not None:
            self.uom = uom
        if amount_per_unit is not None:
            self.amount_per_unit = amount_per_unit
        if bill_target_date is not None:
            self.bill_target_date = bill_target_date
        if bill_to is not None:
            self.bill_to = bill_to
        if bill_to_snapshot_id is not None:
            self.bill_to_snapshot_id = bill_to_snapshot_id
        if billing_rule is not None:
            self.billing_rule = billing_rule
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if adjustment_liability_accounting_code is not None:
            self.adjustment_liability_accounting_code = adjustment_liability_accounting_code
        if adjustment_revenue_accounting_code is not None:
            self.adjustment_revenue_accounting_code = adjustment_revenue_accounting_code
        if contract_asset_accounting_code is not None:
            self.contract_asset_accounting_code = contract_asset_accounting_code
        if contract_liability_accounting_code is not None:
            self.contract_liability_accounting_code = contract_liability_accounting_code
        if contract_recognized_revenue_accounting_code is not None:
            self.contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if description is not None:
            self.description = description
        if discount is not None:
            self.discount = discount
        if exclude_item_billing_from_revenue_accounting is not None:
            self.exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting
        if exclude_item_booking_from_revenue_accounting is not None:
            self.exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting
        if revenue_recognition_timing is not None:
            self.revenue_recognition_timing = revenue_recognition_timing
        if revenue_amortization_method is not None:
            self.revenue_amortization_method = revenue_amortization_method
        if inline_discount_per_unit is not None:
            self.inline_discount_per_unit = inline_discount_per_unit
        if inline_discount_type is not None:
            self.inline_discount_type = inline_discount_type
        if invoice_group_number is not None:
            self.invoice_group_number = invoice_group_number
        if invoice_owner_account_id is not None:
            self.invoice_owner_account_id = invoice_owner_account_id
        if invoice_owner_account_name is not None:
            self.invoice_owner_account_name = invoice_owner_account_name
        if invoice_owner_account_number is not None:
            self.invoice_owner_account_number = invoice_owner_account_number
        if is_allocation_eligible is not None:
            self.is_allocation_eligible = is_allocation_eligible
        if is_unbilled is not None:
            self.is_unbilled = is_unbilled
        if item_category is not None:
            self.item_category = item_category
        if item_name is not None:
            self.item_name = item_name
        if item_state is not None:
            self.item_state = item_state
        if item_type is not None:
            self.item_type = item_type
        if list_price is not None:
            self.list_price = list_price
        if list_price_per_unit is not None:
            self.list_price_per_unit = list_price_per_unit
        if original_order_id is not None:
            self.original_order_id = original_order_id
        if original_order_date is not None:
            self.original_order_date = original_order_date
        if original_order_line_item_id is not None:
            self.original_order_line_item_id = original_order_line_item_id
        if original_order_line_item_number is not None:
            self.original_order_line_item_number = original_order_line_item_number
        if original_order_number is not None:
            self.original_order_number = original_order_number
        if owner_account_id is not None:
            self.owner_account_id = owner_account_id
        if owner_account_name is not None:
            self.owner_account_name = owner_account_name
        if owner_account_number is not None:
            self.owner_account_number = owner_account_number
        if product_code is not None:
            self.product_code = product_code
        if product_rate_plan_charge_id is not None:
            self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if quantity is not None:
            self.quantity = quantity
        if quantity_available_for_return is not None:
            self.quantity_available_for_return = quantity_available_for_return
        if quantity_fulfilled is not None:
            self.quantity_fulfilled = quantity_fulfilled
        if quantity_pending_fulfillment is not None:
            self.quantity_pending_fulfillment = quantity_pending_fulfillment
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if related_subscription_number is not None:
            self.related_subscription_number = related_subscription_number
        if requires_fulfillment is not None:
            self.requires_fulfillment = requires_fulfillment
        if revenue_recognition_rule is not None:
            self.revenue_recognition_rule = revenue_recognition_rule
        if sequence_set_id is not None:
            self.sequence_set_id = sequence_set_id
        if sold_to is not None:
            self.sold_to = sold_to
        if sold_to_snapshot_id is not None:
            self.sold_to_snapshot_id = sold_to_snapshot_id
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_mode is not None:
            self.tax_mode = tax_mode
        if transaction_end_date is not None:
            self.transaction_end_date = transaction_end_date
        if transaction_start_date is not None:
            self.transaction_start_date = transaction_start_date
        if unbilled_receivables_accounting_code is not None:
            self.unbilled_receivables_accounting_code = unbilled_receivables_accounting_code

    @property
    def id(self):
        """Gets the id of this OrderLineItem.  # noqa: E501

        The sytem generated Id for the Order Line Item.   # noqa: E501

        :return: The id of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderLineItem.

        The sytem generated Id for the Order Line Item.   # noqa: E501

        :param id: The id of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def amended_by_order_on(self):
        """Gets the amended_by_order_on of this OrderLineItem.  # noqa: E501

        The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :return: The amended_by_order_on of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._amended_by_order_on

    @amended_by_order_on.setter
    def amended_by_order_on(self, amended_by_order_on):
        """Sets the amended_by_order_on of this OrderLineItem.

        The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :param amended_by_order_on: The amended_by_order_on of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._amended_by_order_on = amended_by_order_on

    @property
    def currency(self):
        """Gets the currency of this OrderLineItem.  # noqa: E501

        The currency for the Order Line Item.   # noqa: E501

        :return: The currency of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderLineItem.

        The currency for the Order Line Item.   # noqa: E501

        :param currency: The currency of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def amount(self):
        """Gets the amount of this OrderLineItem.  # noqa: E501

        The calculated gross amount for the Order Line Item.   # noqa: E501

        :return: The amount of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this OrderLineItem.

        The calculated gross amount for the Order Line Item.   # noqa: E501

        :param amount: The amount of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_without_tax(self):
        """Gets the amount_without_tax of this OrderLineItem.  # noqa: E501

        The calculated gross amount for an order line item excluding tax. If the tax mode is tax exclusive, the value of this field equals that of the `amount` field.  If the tax mode of an order line item is not set, the system treats it as tax exclusive by default. The value of the `amountWithoutTax` field equals that of the `amount` field.  If you create an order line item from the product catalog, the tax mode and tax code of the product rate plan charge are used for the order line item by default. You can still overwrite this default set-up by setting the tax mode and tax code of the order line item.   # noqa: E501

        :return: The amount_without_tax of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._amount_without_tax

    @amount_without_tax.setter
    def amount_without_tax(self, amount_without_tax):
        """Sets the amount_without_tax of this OrderLineItem.

        The calculated gross amount for an order line item excluding tax. If the tax mode is tax exclusive, the value of this field equals that of the `amount` field.  If the tax mode of an order line item is not set, the system treats it as tax exclusive by default. The value of the `amountWithoutTax` field equals that of the `amount` field.  If you create an order line item from the product catalog, the tax mode and tax code of the product rate plan charge are used for the order line item by default. You can still overwrite this default set-up by setting the tax mode and tax code of the order line item.   # noqa: E501

        :param amount_without_tax: The amount_without_tax of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._amount_without_tax = amount_without_tax

    @property
    def item_number(self):
        """Gets the item_number of this OrderLineItem.  # noqa: E501

        The number for the Order Line Item.   # noqa: E501

        :return: The item_number of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._item_number

    @item_number.setter
    def item_number(self, item_number):
        """Sets the item_number of this OrderLineItem.

        The number for the Order Line Item.   # noqa: E501

        :param item_number: The item_number of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._item_number = item_number

    @property
    def uom(self):
        """Gets the uom of this OrderLineItem.  # noqa: E501

        Specifies the units to measure usage.      # noqa: E501

        :return: The uom of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this OrderLineItem.

        Specifies the units to measure usage.      # noqa: E501

        :param uom: The uom of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._uom = uom

    @property
    def amount_per_unit(self):
        """Gets the amount_per_unit of this OrderLineItem.  # noqa: E501

        The actual charged amount per unit for the Order Line Item.      # noqa: E501

        :return: The amount_per_unit of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._amount_per_unit

    @amount_per_unit.setter
    def amount_per_unit(self, amount_per_unit):
        """Sets the amount_per_unit of this OrderLineItem.

        The actual charged amount per unit for the Order Line Item.      # noqa: E501

        :param amount_per_unit: The amount_per_unit of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._amount_per_unit = amount_per_unit

    @property
    def bill_target_date(self):
        """Gets the bill_target_date of this OrderLineItem.  # noqa: E501

        The target date for the Order Line Item to be picked up by bill run for billing.      # noqa: E501

        :return: The bill_target_date of this OrderLineItem.  # noqa: E501
        :rtype: date
        """
        return self._bill_target_date

    @bill_target_date.setter
    def bill_target_date(self, bill_target_date):
        """Sets the bill_target_date of this OrderLineItem.

        The target date for the Order Line Item to be picked up by bill run for billing.      # noqa: E501

        :param bill_target_date: The bill_target_date of this OrderLineItem.  # noqa: E501
        :type: date
        """

        self._bill_target_date = bill_target_date

    @property
    def bill_to(self):
        """Gets the bill_to of this OrderLineItem.  # noqa: E501

        The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.      # noqa: E501

        :return: The bill_to of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._bill_to

    @bill_to.setter
    def bill_to(self, bill_to):
        """Sets the bill_to of this OrderLineItem.

        The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.      # noqa: E501

        :param bill_to: The bill_to of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._bill_to = bill_to

    @property
    def bill_to_snapshot_id(self):
        """Gets the bill_to_snapshot_id of this OrderLineItem.  # noqa: E501

        The snapshot of the ID for an account used as the sold-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `billToSnapshotId` field is exposed while retrieving the order line item details.      # noqa: E501

        :return: The bill_to_snapshot_id of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_snapshot_id

    @bill_to_snapshot_id.setter
    def bill_to_snapshot_id(self, bill_to_snapshot_id):
        """Sets the bill_to_snapshot_id of this OrderLineItem.

        The snapshot of the ID for an account used as the sold-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `billToSnapshotId` field is exposed while retrieving the order line item details.      # noqa: E501

        :param bill_to_snapshot_id: The bill_to_snapshot_id of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._bill_to_snapshot_id = bill_to_snapshot_id

    @property
    def billing_rule(self):
        """Gets the billing_rule of this OrderLineItem.  # noqa: E501


        :return: The billing_rule of this OrderLineItem.  # noqa: E501
        :rtype: OrderLineItemBillingRule
        """
        return self._billing_rule

    @billing_rule.setter
    def billing_rule(self, billing_rule):
        """Sets the billing_rule of this OrderLineItem.


        :param billing_rule: The billing_rule of this OrderLineItem.  # noqa: E501
        :type: OrderLineItemBillingRule
        """

        self._billing_rule = billing_rule

    @property
    def accounting_code(self):
        """Gets the accounting_code of this OrderLineItem.  # noqa: E501

        The accounting code for the Order Line Item.      # noqa: E501

        :return: The accounting_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this OrderLineItem.

        The accounting code for the Order Line Item.      # noqa: E501

        :param accounting_code: The accounting_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def adjustment_liability_accounting_code(self):
        """Gets the adjustment_liability_accounting_code of this OrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :return: The adjustment_liability_accounting_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_liability_accounting_code

    @adjustment_liability_accounting_code.setter
    def adjustment_liability_accounting_code(self, adjustment_liability_accounting_code):
        """Sets the adjustment_liability_accounting_code of this OrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :param adjustment_liability_accounting_code: The adjustment_liability_accounting_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._adjustment_liability_accounting_code = adjustment_liability_accounting_code

    @property
    def adjustment_revenue_accounting_code(self):
        """Gets the adjustment_revenue_accounting_code of this OrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :return: The adjustment_revenue_accounting_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_revenue_accounting_code

    @adjustment_revenue_accounting_code.setter
    def adjustment_revenue_accounting_code(self, adjustment_revenue_accounting_code):
        """Sets the adjustment_revenue_accounting_code of this OrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :param adjustment_revenue_accounting_code: The adjustment_revenue_accounting_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._adjustment_revenue_accounting_code = adjustment_revenue_accounting_code

    @property
    def contract_asset_accounting_code(self):
        """Gets the contract_asset_accounting_code of this OrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :return: The contract_asset_accounting_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_asset_accounting_code

    @contract_asset_accounting_code.setter
    def contract_asset_accounting_code(self, contract_asset_accounting_code):
        """Sets the contract_asset_accounting_code of this OrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :param contract_asset_accounting_code: The contract_asset_accounting_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._contract_asset_accounting_code = contract_asset_accounting_code

    @property
    def contract_liability_accounting_code(self):
        """Gets the contract_liability_accounting_code of this OrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :return: The contract_liability_accounting_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_liability_accounting_code

    @contract_liability_accounting_code.setter
    def contract_liability_accounting_code(self, contract_liability_accounting_code):
        """Sets the contract_liability_accounting_code of this OrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :param contract_liability_accounting_code: The contract_liability_accounting_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._contract_liability_accounting_code = contract_liability_accounting_code

    @property
    def contract_recognized_revenue_accounting_code(self):
        """Gets the contract_recognized_revenue_accounting_code of this OrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :return: The contract_recognized_revenue_accounting_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_recognized_revenue_accounting_code

    @contract_recognized_revenue_accounting_code.setter
    def contract_recognized_revenue_accounting_code(self, contract_recognized_revenue_accounting_code):
        """Sets the contract_recognized_revenue_accounting_code of this OrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :param contract_recognized_revenue_accounting_code: The contract_recognized_revenue_accounting_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this OrderLineItem.  # noqa: E501

        The deferred revenue accounting code for the Order Line Item.      # noqa: E501

        :return: The deferred_revenue_accounting_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this OrderLineItem.

        The deferred revenue accounting code for the Order Line Item.      # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderLineItem.  # noqa: E501

        Container for custom fields of an Order Line Item object.      # noqa: E501

        :return: The custom_fields of this OrderLineItem.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderLineItem.

        Container for custom fields of an Order Line Item object.      # noqa: E501

        :param custom_fields: The custom_fields of this OrderLineItem.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this OrderLineItem.  # noqa: E501

        The description of the Order Line Item.      # noqa: E501

        :return: The description of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrderLineItem.

        The description of the Order Line Item.      # noqa: E501

        :param description: The description of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount(self):
        """Gets the discount of this OrderLineItem.  # noqa: E501

        This field shows the total discount amount that is applied to an order line item after the `inlineDiscountType`, `inlineDiscountPerUnit` and `quantity` fields are set.     The inline discount is applied to the list price of an order line item (see the `listPrice` field).      # noqa: E501

        :return: The discount of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this OrderLineItem.

        This field shows the total discount amount that is applied to an order line item after the `inlineDiscountType`, `inlineDiscountPerUnit` and `quantity` fields are set.     The inline discount is applied to the list price of an order line item (see the `listPrice` field).      # noqa: E501

        :param discount: The discount of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def exclude_item_billing_from_revenue_accounting(self):
        """Gets the exclude_item_billing_from_revenue_accounting of this OrderLineItem.  # noqa: E501

        The flag to exclude Order Line Item related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.    # noqa: E501

        :return: The exclude_item_billing_from_revenue_accounting of this OrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_billing_from_revenue_accounting

    @exclude_item_billing_from_revenue_accounting.setter
    def exclude_item_billing_from_revenue_accounting(self, exclude_item_billing_from_revenue_accounting):
        """Sets the exclude_item_billing_from_revenue_accounting of this OrderLineItem.

        The flag to exclude Order Line Item related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.    # noqa: E501

        :param exclude_item_billing_from_revenue_accounting: The exclude_item_billing_from_revenue_accounting of this OrderLineItem.  # noqa: E501
        :type: bool
        """

        self._exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting

    @property
    def exclude_item_booking_from_revenue_accounting(self):
        """Gets the exclude_item_booking_from_revenue_accounting of this OrderLineItem.  # noqa: E501

        The flag to exclude Order Line Item from revenue accounting.  **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.    # noqa: E501

        :return: The exclude_item_booking_from_revenue_accounting of this OrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_booking_from_revenue_accounting

    @exclude_item_booking_from_revenue_accounting.setter
    def exclude_item_booking_from_revenue_accounting(self, exclude_item_booking_from_revenue_accounting):
        """Sets the exclude_item_booking_from_revenue_accounting of this OrderLineItem.

        The flag to exclude Order Line Item from revenue accounting.  **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.    # noqa: E501

        :param exclude_item_booking_from_revenue_accounting: The exclude_item_booking_from_revenue_accounting of this OrderLineItem.  # noqa: E501
        :type: bool
        """

        self._exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting

    @property
    def revenue_recognition_timing(self):
        """Gets the revenue_recognition_timing of this OrderLineItem.  # noqa: E501

        This field is used to dictate the type of revenue recognition timing.  # noqa: E501

        :return: The revenue_recognition_timing of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_timing

    @revenue_recognition_timing.setter
    def revenue_recognition_timing(self, revenue_recognition_timing):
        """Sets the revenue_recognition_timing of this OrderLineItem.

        This field is used to dictate the type of revenue recognition timing.  # noqa: E501

        :param revenue_recognition_timing: The revenue_recognition_timing of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_timing = revenue_recognition_timing

    @property
    def revenue_amortization_method(self):
        """Gets the revenue_amortization_method of this OrderLineItem.  # noqa: E501

        This field is used to dictate the type of revenue amortization method.  # noqa: E501

        :return: The revenue_amortization_method of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._revenue_amortization_method

    @revenue_amortization_method.setter
    def revenue_amortization_method(self, revenue_amortization_method):
        """Sets the revenue_amortization_method of this OrderLineItem.

        This field is used to dictate the type of revenue amortization method.  # noqa: E501

        :param revenue_amortization_method: The revenue_amortization_method of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._revenue_amortization_method = revenue_amortization_method

    @property
    def inline_discount_per_unit(self):
        """Gets the inline_discount_per_unit of this OrderLineItem.  # noqa: E501

        This field is used in accordance with the `inlineDiscountType` field, in the following manner:    * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%.    * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.     Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.      # noqa: E501

        :return: The inline_discount_per_unit of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._inline_discount_per_unit

    @inline_discount_per_unit.setter
    def inline_discount_per_unit(self, inline_discount_per_unit):
        """Sets the inline_discount_per_unit of this OrderLineItem.

        This field is used in accordance with the `inlineDiscountType` field, in the following manner:    * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%.    * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.     Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.      # noqa: E501

        :param inline_discount_per_unit: The inline_discount_per_unit of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._inline_discount_per_unit = inline_discount_per_unit

    @property
    def inline_discount_type(self):
        """Gets the inline_discount_type of this OrderLineItem.  # noqa: E501


        :return: The inline_discount_type of this OrderLineItem.  # noqa: E501
        :rtype: OrderLineItemInlineDiscountType
        """
        return self._inline_discount_type

    @inline_discount_type.setter
    def inline_discount_type(self, inline_discount_type):
        """Sets the inline_discount_type of this OrderLineItem.


        :param inline_discount_type: The inline_discount_type of this OrderLineItem.  # noqa: E501
        :type: OrderLineItemInlineDiscountType
        """

        self._inline_discount_type = inline_discount_type

    @property
    def invoice_group_number(self):
        """Gets the invoice_group_number of this OrderLineItem.  # noqa: E501

        The invoice group number associated with the order line item.   # noqa: E501

        :return: The invoice_group_number of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_group_number

    @invoice_group_number.setter
    def invoice_group_number(self, invoice_group_number):
        """Sets the invoice_group_number of this OrderLineItem.

        The invoice group number associated with the order line item.   # noqa: E501

        :param invoice_group_number: The invoice_group_number of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._invoice_group_number = invoice_group_number

    @property
    def invoice_owner_account_id(self):
        """Gets the invoice_owner_account_id of this OrderLineItem.  # noqa: E501

        The account ID of the invoice owner of the order line item.      # noqa: E501

        :return: The invoice_owner_account_id of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_owner_account_id

    @invoice_owner_account_id.setter
    def invoice_owner_account_id(self, invoice_owner_account_id):
        """Sets the invoice_owner_account_id of this OrderLineItem.

        The account ID of the invoice owner of the order line item.      # noqa: E501

        :param invoice_owner_account_id: The invoice_owner_account_id of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._invoice_owner_account_id = invoice_owner_account_id

    @property
    def invoice_owner_account_name(self):
        """Gets the invoice_owner_account_name of this OrderLineItem.  # noqa: E501

        The account name of the invoice owner of the order line item.      # noqa: E501

        :return: The invoice_owner_account_name of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_owner_account_name

    @invoice_owner_account_name.setter
    def invoice_owner_account_name(self, invoice_owner_account_name):
        """Sets the invoice_owner_account_name of this OrderLineItem.

        The account name of the invoice owner of the order line item.      # noqa: E501

        :param invoice_owner_account_name: The invoice_owner_account_name of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._invoice_owner_account_name = invoice_owner_account_name

    @property
    def invoice_owner_account_number(self):
        """Gets the invoice_owner_account_number of this OrderLineItem.  # noqa: E501

        The account number of the invoice owner of the order line item.      # noqa: E501

        :return: The invoice_owner_account_number of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_owner_account_number

    @invoice_owner_account_number.setter
    def invoice_owner_account_number(self, invoice_owner_account_number):
        """Sets the invoice_owner_account_number of this OrderLineItem.

        The account number of the invoice owner of the order line item.      # noqa: E501

        :param invoice_owner_account_number: The invoice_owner_account_number of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._invoice_owner_account_number = invoice_owner_account_number

    @property
    def is_allocation_eligible(self):
        """Gets the is_allocation_eligible of this OrderLineItem.  # noqa: E501

        This field is used to identify if the charge segment is allocation eligible in revenue recognition.     **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.      # noqa: E501

        :return: The is_allocation_eligible of this OrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_allocation_eligible

    @is_allocation_eligible.setter
    def is_allocation_eligible(self, is_allocation_eligible):
        """Sets the is_allocation_eligible of this OrderLineItem.

        This field is used to identify if the charge segment is allocation eligible in revenue recognition.     **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.      # noqa: E501

        :param is_allocation_eligible: The is_allocation_eligible of this OrderLineItem.  # noqa: E501
        :type: bool
        """

        self._is_allocation_eligible = is_allocation_eligible

    @property
    def is_unbilled(self):
        """Gets the is_unbilled of this OrderLineItem.  # noqa: E501

        This field is used to dictate how to perform the accounting during revenue recognition.     **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.      # noqa: E501

        :return: The is_unbilled of this OrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_unbilled

    @is_unbilled.setter
    def is_unbilled(self, is_unbilled):
        """Sets the is_unbilled of this OrderLineItem.

        This field is used to dictate how to perform the accounting during revenue recognition.     **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.      # noqa: E501

        :param is_unbilled: The is_unbilled of this OrderLineItem.  # noqa: E501
        :type: bool
        """

        self._is_unbilled = is_unbilled

    @property
    def item_category(self):
        """Gets the item_category of this OrderLineItem.  # noqa: E501


        :return: The item_category of this OrderLineItem.  # noqa: E501
        :rtype: OrderLineItemCategory
        """
        return self._item_category

    @item_category.setter
    def item_category(self, item_category):
        """Sets the item_category of this OrderLineItem.


        :param item_category: The item_category of this OrderLineItem.  # noqa: E501
        :type: OrderLineItemCategory
        """

        self._item_category = item_category

    @property
    def item_name(self):
        """Gets the item_name of this OrderLineItem.  # noqa: E501

        The name of the Order Line Item.      # noqa: E501

        :return: The item_name of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this OrderLineItem.

        The name of the Order Line Item.      # noqa: E501

        :param item_name: The item_name of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    @property
    def item_state(self):
        """Gets the item_state of this OrderLineItem.  # noqa: E501


        :return: The item_state of this OrderLineItem.  # noqa: E501
        :rtype: OrderLineItemState
        """
        return self._item_state

    @item_state.setter
    def item_state(self, item_state):
        """Sets the item_state of this OrderLineItem.


        :param item_state: The item_state of this OrderLineItem.  # noqa: E501
        :type: OrderLineItemState
        """

        self._item_state = item_state

    @property
    def item_type(self):
        """Gets the item_type of this OrderLineItem.  # noqa: E501


        :return: The item_type of this OrderLineItem.  # noqa: E501
        :rtype: OrderLineItemType
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this OrderLineItem.


        :param item_type: The item_type of this OrderLineItem.  # noqa: E501
        :type: OrderLineItemType
        """

        self._item_type = item_type

    @property
    def list_price(self):
        """Gets the list_price of this OrderLineItem.  # noqa: E501

        The extended list price for an order line item, calculated by the formula: listPrice = listPricePerUnit * quantity      # noqa: E501

        :return: The list_price of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._list_price

    @list_price.setter
    def list_price(self, list_price):
        """Sets the list_price of this OrderLineItem.

        The extended list price for an order line item, calculated by the formula: listPrice = listPricePerUnit * quantity      # noqa: E501

        :param list_price: The list_price of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._list_price = list_price

    @property
    def list_price_per_unit(self):
        """Gets the list_price_per_unit of this OrderLineItem.  # noqa: E501

        The list price per unit for the Order Line Item.      # noqa: E501

        :return: The list_price_per_unit of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._list_price_per_unit

    @list_price_per_unit.setter
    def list_price_per_unit(self, list_price_per_unit):
        """Sets the list_price_per_unit of this OrderLineItem.

        The list price per unit for the Order Line Item.      # noqa: E501

        :param list_price_per_unit: The list_price_per_unit of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._list_price_per_unit = list_price_per_unit

    @property
    def original_order_id(self):
        """Gets the original_order_id of this OrderLineItem.  # noqa: E501

        The ID of the original sale order for a return order line item.    # noqa: E501

        :return: The original_order_id of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._original_order_id

    @original_order_id.setter
    def original_order_id(self, original_order_id):
        """Sets the original_order_id of this OrderLineItem.

        The ID of the original sale order for a return order line item.    # noqa: E501

        :param original_order_id: The original_order_id of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._original_order_id = original_order_id

    @property
    def original_order_date(self):
        """Gets the original_order_date of this OrderLineItem.  # noqa: E501

        The date when the rate plan charge is created through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :return: The original_order_date of this OrderLineItem.  # noqa: E501
        :rtype: date
        """
        return self._original_order_date

    @original_order_date.setter
    def original_order_date(self, original_order_date):
        """Sets the original_order_date of this OrderLineItem.

        The date when the rate plan charge is created through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :param original_order_date: The original_order_date of this OrderLineItem.  # noqa: E501
        :type: date
        """

        self._original_order_date = original_order_date

    @property
    def original_order_line_item_id(self):
        """Gets the original_order_line_item_id of this OrderLineItem.  # noqa: E501

        The ID of the original sale order line item for a return order line item.    # noqa: E501

        :return: The original_order_line_item_id of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._original_order_line_item_id

    @original_order_line_item_id.setter
    def original_order_line_item_id(self, original_order_line_item_id):
        """Sets the original_order_line_item_id of this OrderLineItem.

        The ID of the original sale order line item for a return order line item.    # noqa: E501

        :param original_order_line_item_id: The original_order_line_item_id of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._original_order_line_item_id = original_order_line_item_id

    @property
    def original_order_line_item_number(self):
        """Gets the original_order_line_item_number of this OrderLineItem.  # noqa: E501

        The number of the original sale order line item for a return order line item.    # noqa: E501

        :return: The original_order_line_item_number of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._original_order_line_item_number

    @original_order_line_item_number.setter
    def original_order_line_item_number(self, original_order_line_item_number):
        """Sets the original_order_line_item_number of this OrderLineItem.

        The number of the original sale order line item for a return order line item.    # noqa: E501

        :param original_order_line_item_number: The original_order_line_item_number of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._original_order_line_item_number = original_order_line_item_number

    @property
    def original_order_number(self):
        """Gets the original_order_number of this OrderLineItem.  # noqa: E501

        The number of the original sale order for a return order line item.    # noqa: E501

        :return: The original_order_number of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._original_order_number

    @original_order_number.setter
    def original_order_number(self, original_order_number):
        """Sets the original_order_number of this OrderLineItem.

        The number of the original sale order for a return order line item.    # noqa: E501

        :param original_order_number: The original_order_number of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._original_order_number = original_order_number

    @property
    def owner_account_id(self):
        """Gets the owner_account_id of this OrderLineItem.  # noqa: E501

        The account ID of the owner of the order line item.      # noqa: E501

        :return: The owner_account_id of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._owner_account_id

    @owner_account_id.setter
    def owner_account_id(self, owner_account_id):
        """Sets the owner_account_id of this OrderLineItem.

        The account ID of the owner of the order line item.      # noqa: E501

        :param owner_account_id: The owner_account_id of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._owner_account_id = owner_account_id

    @property
    def owner_account_name(self):
        """Gets the owner_account_name of this OrderLineItem.  # noqa: E501

        The account name of the owner of the order line item.      # noqa: E501

        :return: The owner_account_name of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._owner_account_name

    @owner_account_name.setter
    def owner_account_name(self, owner_account_name):
        """Sets the owner_account_name of this OrderLineItem.

        The account name of the owner of the order line item.      # noqa: E501

        :param owner_account_name: The owner_account_name of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._owner_account_name = owner_account_name

    @property
    def owner_account_number(self):
        """Gets the owner_account_number of this OrderLineItem.  # noqa: E501

        The account number of the owner of the order line item.      # noqa: E501

        :return: The owner_account_number of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._owner_account_number

    @owner_account_number.setter
    def owner_account_number(self, owner_account_number):
        """Sets the owner_account_number of this OrderLineItem.

        The account number of the owner of the order line item.      # noqa: E501

        :param owner_account_number: The owner_account_number of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._owner_account_number = owner_account_number

    @property
    def product_code(self):
        """Gets the product_code of this OrderLineItem.  # noqa: E501

        The product code for the Order Line Item.      # noqa: E501

        :return: The product_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this OrderLineItem.

        The product code for the Order Line Item.      # noqa: E501

        :param product_code: The product_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this OrderLineItem.  # noqa: E501

        Id of a Product Rate Plan Charge. Only one-time charges are supported.      # noqa: E501

        :return: The product_rate_plan_charge_id of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this OrderLineItem.

        Id of a Product Rate Plan Charge. Only one-time charges are supported.      # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this OrderLineItem.  # noqa: E501

        Used by customers to specify the Purchase Order Number provided by the buyer.      # noqa: E501

        :return: The purchase_order_number of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this OrderLineItem.

        Used by customers to specify the Purchase Order Number provided by the buyer.      # noqa: E501

        :param purchase_order_number: The purchase_order_number of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def quantity(self):
        """Gets the quantity of this OrderLineItem.  # noqa: E501

        The quantity of units, such as the number of authors in a hosted wiki service.      # noqa: E501

        :return: The quantity of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderLineItem.

        The quantity of units, such as the number of authors in a hosted wiki service.      # noqa: E501

        :param quantity: The quantity of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def quantity_available_for_return(self):
        """Gets the quantity_available_for_return of this OrderLineItem.  # noqa: E501

        The quantity that can be returned for an order line item.    # noqa: E501

        :return: The quantity_available_for_return of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity_available_for_return

    @quantity_available_for_return.setter
    def quantity_available_for_return(self, quantity_available_for_return):
        """Sets the quantity_available_for_return of this OrderLineItem.

        The quantity that can be returned for an order line item.    # noqa: E501

        :param quantity_available_for_return: The quantity_available_for_return of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._quantity_available_for_return = quantity_available_for_return

    @property
    def quantity_fulfilled(self):
        """Gets the quantity_fulfilled of this OrderLineItem.  # noqa: E501

        The quantity that has been fulfilled by fulfillments for the order line item. This field will be updated automatically when related fulfillments become 'SentToBilling' or 'Complete' state.   # noqa: E501

        :return: The quantity_fulfilled of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity_fulfilled

    @quantity_fulfilled.setter
    def quantity_fulfilled(self, quantity_fulfilled):
        """Sets the quantity_fulfilled of this OrderLineItem.

        The quantity that has been fulfilled by fulfillments for the order line item. This field will be updated automatically when related fulfillments become 'SentToBilling' or 'Complete' state.   # noqa: E501

        :param quantity_fulfilled: The quantity_fulfilled of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._quantity_fulfilled = quantity_fulfilled

    @property
    def quantity_pending_fulfillment(self):
        """Gets the quantity_pending_fulfillment of this OrderLineItem.  # noqa: E501

        The quantity that's need to be fulfilled by fulfillments for the order line item. This field will be updated automatically when related fulfillments become 'SentToBilling' or 'Complete' state.   # noqa: E501

        :return: The quantity_pending_fulfillment of this OrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity_pending_fulfillment

    @quantity_pending_fulfillment.setter
    def quantity_pending_fulfillment(self, quantity_pending_fulfillment):
        """Sets the quantity_pending_fulfillment of this OrderLineItem.

        The quantity that's need to be fulfilled by fulfillments for the order line item. This field will be updated automatically when related fulfillments become 'SentToBilling' or 'Complete' state.   # noqa: E501

        :param quantity_pending_fulfillment: The quantity_pending_fulfillment of this OrderLineItem.  # noqa: E501
        :type: float
        """

        self._quantity_pending_fulfillment = quantity_pending_fulfillment

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this OrderLineItem.  # noqa: E501

        The recognized revenue accounting code for the Order Line Item.      # noqa: E501

        :return: The recognized_revenue_accounting_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this OrderLineItem.

        The recognized revenue accounting code for the Order Line Item.      # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def related_subscription_number(self):
        """Gets the related_subscription_number of this OrderLineItem.  # noqa: E501

        Use this field to relate an order line item to a subscription when you create the order line item.     * To relate an order line item to a new subscription which is yet to create in the same \"Create an order\" call, use this field in combination with the `subscriptions` > `subscriptionNumber` field in the \"Create order\" operation. Specify this field to the same value as that of the 'subscriptions' > `subscriptionNumber` field when you make the \"Create order\" call.    * To relate an order line item to an existing subscription, specify this field to the subscription number of the existing subscription.      # noqa: E501

        :return: The related_subscription_number of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._related_subscription_number

    @related_subscription_number.setter
    def related_subscription_number(self, related_subscription_number):
        """Sets the related_subscription_number of this OrderLineItem.

        Use this field to relate an order line item to a subscription when you create the order line item.     * To relate an order line item to a new subscription which is yet to create in the same \"Create an order\" call, use this field in combination with the `subscriptions` > `subscriptionNumber` field in the \"Create order\" operation. Specify this field to the same value as that of the 'subscriptions' > `subscriptionNumber` field when you make the \"Create order\" call.    * To relate an order line item to an existing subscription, specify this field to the subscription number of the existing subscription.      # noqa: E501

        :param related_subscription_number: The related_subscription_number of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._related_subscription_number = related_subscription_number

    @property
    def requires_fulfillment(self):
        """Gets the requires_fulfillment of this OrderLineItem.  # noqa: E501

        The flag to show whether fulfillment is needed or not. It's derived from billing rule of the Order Line Item.      # noqa: E501

        :return: The requires_fulfillment of this OrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._requires_fulfillment

    @requires_fulfillment.setter
    def requires_fulfillment(self, requires_fulfillment):
        """Sets the requires_fulfillment of this OrderLineItem.

        The flag to show whether fulfillment is needed or not. It's derived from billing rule of the Order Line Item.      # noqa: E501

        :param requires_fulfillment: The requires_fulfillment of this OrderLineItem.  # noqa: E501
        :type: bool
        """

        self._requires_fulfillment = requires_fulfillment

    @property
    def revenue_recognition_rule(self):
        """Gets the revenue_recognition_rule of this OrderLineItem.  # noqa: E501

        The Revenue Recognition rule for the Order Line Item.      # noqa: E501

        :return: The revenue_recognition_rule of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule

    @revenue_recognition_rule.setter
    def revenue_recognition_rule(self, revenue_recognition_rule):
        """Sets the revenue_recognition_rule of this OrderLineItem.

        The Revenue Recognition rule for the Order Line Item.      # noqa: E501

        :param revenue_recognition_rule: The revenue_recognition_rule of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule = revenue_recognition_rule

    @property
    def sequence_set_id(self):
        """Gets the sequence_set_id of this OrderLineItem.  # noqa: E501

        The ID of the sequence set associated with the OrderLineItem.      # noqa: E501

        :return: The sequence_set_id of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_id

    @sequence_set_id.setter
    def sequence_set_id(self, sequence_set_id):
        """Sets the sequence_set_id of this OrderLineItem.

        The ID of the sequence set associated with the OrderLineItem.      # noqa: E501

        :param sequence_set_id: The sequence_set_id of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._sequence_set_id = sequence_set_id

    @property
    def sold_to(self):
        """Gets the sold_to of this OrderLineItem.  # noqa: E501

        The ID of a contact that belongs to the owner acount or billing account of the order line item. Use this field to assign an existing account as the sold-to contact of an order line item.      # noqa: E501

        :return: The sold_to of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._sold_to

    @sold_to.setter
    def sold_to(self, sold_to):
        """Sets the sold_to of this OrderLineItem.

        The ID of a contact that belongs to the owner acount or billing account of the order line item. Use this field to assign an existing account as the sold-to contact of an order line item.      # noqa: E501

        :param sold_to: The sold_to of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._sold_to = sold_to

    @property
    def sold_to_snapshot_id(self):
        """Gets the sold_to_snapshot_id of this OrderLineItem.  # noqa: E501

        The snapshot of the ID for an account used as the sold-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `soldToSnapshotId` field is exposed while retrieving the order line item details.      # noqa: E501

        :return: The sold_to_snapshot_id of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._sold_to_snapshot_id

    @sold_to_snapshot_id.setter
    def sold_to_snapshot_id(self, sold_to_snapshot_id):
        """Sets the sold_to_snapshot_id of this OrderLineItem.

        The snapshot of the ID for an account used as the sold-to contact of an order line item. This field is used to store the original information about the account, in case the information about the account is changed after the creation of the order line item. The `soldToSnapshotId` field is exposed while retrieving the order line item details.      # noqa: E501

        :param sold_to_snapshot_id: The sold_to_snapshot_id of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._sold_to_snapshot_id = sold_to_snapshot_id

    @property
    def tax_code(self):
        """Gets the tax_code of this OrderLineItem.  # noqa: E501

        The tax code for the Order Line Item.      # noqa: E501

        :return: The tax_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this OrderLineItem.

        The tax code for the Order Line Item.      # noqa: E501

        :param tax_code: The tax_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_mode(self):
        """Gets the tax_mode of this OrderLineItem.  # noqa: E501


        :return: The tax_mode of this OrderLineItem.  # noqa: E501
        :rtype: TaxMode
        """
        return self._tax_mode

    @tax_mode.setter
    def tax_mode(self, tax_mode):
        """Sets the tax_mode of this OrderLineItem.


        :param tax_mode: The tax_mode of this OrderLineItem.  # noqa: E501
        :type: TaxMode
        """

        self._tax_mode = tax_mode

    @property
    def transaction_end_date(self):
        """Gets the transaction_end_date of this OrderLineItem.  # noqa: E501

        The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.      # noqa: E501

        :return: The transaction_end_date of this OrderLineItem.  # noqa: E501
        :rtype: date
        """
        return self._transaction_end_date

    @transaction_end_date.setter
    def transaction_end_date(self, transaction_end_date):
        """Sets the transaction_end_date of this OrderLineItem.

        The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.      # noqa: E501

        :param transaction_end_date: The transaction_end_date of this OrderLineItem.  # noqa: E501
        :type: date
        """

        self._transaction_end_date = transaction_end_date

    @property
    def transaction_start_date(self):
        """Gets the transaction_start_date of this OrderLineItem.  # noqa: E501

        The date a transaction starts. The default value of this field is the order date.      # noqa: E501

        :return: The transaction_start_date of this OrderLineItem.  # noqa: E501
        :rtype: date
        """
        return self._transaction_start_date

    @transaction_start_date.setter
    def transaction_start_date(self, transaction_start_date):
        """Sets the transaction_start_date of this OrderLineItem.

        The date a transaction starts. The default value of this field is the order date.      # noqa: E501

        :param transaction_start_date: The transaction_start_date of this OrderLineItem.  # noqa: E501
        :type: date
        """

        self._transaction_start_date = transaction_start_date

    @property
    def unbilled_receivables_accounting_code(self):
        """Gets the unbilled_receivables_accounting_code of this OrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :return: The unbilled_receivables_accounting_code of this OrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._unbilled_receivables_accounting_code

    @unbilled_receivables_accounting_code.setter
    def unbilled_receivables_accounting_code(self, unbilled_receivables_accounting_code):
        """Sets the unbilled_receivables_accounting_code of this OrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).      # noqa: E501

        :param unbilled_receivables_accounting_code: The unbilled_receivables_accounting_code of this OrderLineItem.  # noqa: E501
        :type: str
        """

        self._unbilled_receivables_accounting_code = unbilled_receivables_accounting_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderLineItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderLineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
