# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SignUpCreatePMPayPalECPayPalNativeEC(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'baid': 'str',
        'email': 'str'
    }

    attribute_map = {
        'baid': 'BAID',
        'email': 'email'
    }

    def __init__(self, baid=None, email=None):  # noqa: E501
        """SignUpCreatePMPayPalECPayPalNativeEC - a model defined in Swagger"""  # noqa: E501
        self._baid = None
        self._email = None
        self.discriminator = None
        if baid is not None:
            self.baid = baid
        if email is not None:
            self.email = email

    @property
    def baid(self):
        """Gets the baid of this SignUpCreatePMPayPalECPayPalNativeEC.  # noqa: E501

        ID of a PayPal billing agreement, for example, I-1TJ3GAGG82Y9.   # noqa: E501

        :return: The baid of this SignUpCreatePMPayPalECPayPalNativeEC.  # noqa: E501
        :rtype: str
        """
        return self._baid

    @baid.setter
    def baid(self, baid):
        """Sets the baid of this SignUpCreatePMPayPalECPayPalNativeEC.

        ID of a PayPal billing agreement, for example, I-1TJ3GAGG82Y9.   # noqa: E501

        :param baid: The baid of this SignUpCreatePMPayPalECPayPalNativeEC.  # noqa: E501
        :type: str
        """

        self._baid = baid

    @property
    def email(self):
        """Gets the email of this SignUpCreatePMPayPalECPayPalNativeEC.  # noqa: E501

        Email address associated with the payment method. This field is only supported for PayPal payment methods and is required if you want to create any of the following PayPal payment methods:   - PayPal Express Checkout payment method    - PayPal Adaptive payment method   - PayPal Commerce Platform payment method   # noqa: E501

        :return: The email of this SignUpCreatePMPayPalECPayPalNativeEC.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SignUpCreatePMPayPalECPayPalNativeEC.

        Email address associated with the payment method. This field is only supported for PayPal payment methods and is required if you want to create any of the following PayPal payment methods:   - PayPal Express Checkout payment method    - PayPal Adaptive payment method   - PayPal Commerce Platform payment method   # noqa: E501

        :param email: The email of this SignUpCreatePMPayPalECPayPalNativeEC.  # noqa: E501
        :type: str
        """

        self._email = email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignUpCreatePMPayPalECPayPalNativeEC, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignUpCreatePMPayPalECPayPalNativeEC):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
