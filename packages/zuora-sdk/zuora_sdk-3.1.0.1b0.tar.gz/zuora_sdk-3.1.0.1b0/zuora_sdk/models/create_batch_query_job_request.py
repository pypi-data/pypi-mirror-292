# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBatchQueryJobRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_time_utc': 'bool',
        'format': 'BatchQueryFormat',
        'name': 'str',
        'notify_url': 'str',
        'null_replacement': 'str',
        'offset': 'float',
        'partner': 'str',
        'project': 'str',
        'queries': 'list[CreateBatchQueryRequest]',
        'use_query_labels': 'bool',
        'version': 'float'
    }

    attribute_map = {
        'date_time_utc': 'dateTimeUtc',
        'format': 'format',
        'name': 'name',
        'notify_url': 'notifyUrl',
        'null_replacement': 'nullReplacement',
        'offset': 'offset',
        'partner': 'partner',
        'project': 'project',
        'queries': 'queries',
        'use_query_labels': 'useQueryLabels',
        'version': 'version'
    }

    def __init__(self, date_time_utc=None, format=None, name=None, notify_url=None, null_replacement=None, offset=None, partner=None, project=None, queries=None, use_query_labels=None, version=None):  # noqa: E501
        """CreateBatchQueryJobRequest - a model defined in Swagger"""  # noqa: E501
        self._date_time_utc = None
        self._format = None
        self._name = None
        self._notify_url = None
        self._null_replacement = None
        self._offset = None
        self._partner = None
        self._project = None
        self._queries = None
        self._use_query_labels = None
        self._version = None
        self.discriminator = None
        if date_time_utc is not None:
            self.date_time_utc = date_time_utc
        if format is not None:
            self.format = format
        if name is not None:
            self.name = name
        if notify_url is not None:
            self.notify_url = notify_url
        if null_replacement is not None:
            self.null_replacement = null_replacement
        if offset is not None:
            self.offset = offset
        if partner is not None:
            self.partner = partner
        if project is not None:
            self.project = project
        if queries is not None:
            self.queries = queries
        if use_query_labels is not None:
            self.use_query_labels = use_query_labels
        if version is not None:
            self.version = version

    @property
    def date_time_utc(self):
        """Gets the date_time_utc of this CreateBatchQueryJobRequest.  # noqa: E501

        When using WSDL 69 and later you can ensure that the exported output of dateTime records are rendered according to ISO-8601 generic UTC form by setting `dateTimeUtc` to `true`.  When `dateTimeUtc` is set to `true`, exports of dateTime data types will be rendered in the following generic format: `YYYY-MM-DDThh:mm:ss-hhmm` or `YYYY-MM-DDThh:mm:ss+hhmm`.  **Note**: Regardless of what batchType query is used (`zoql` or `zoqlexport`), the query response output for datetime data types can be standardized by setting dateTimeUtc to `true`. When `true`, the results will display datetime types with the format: YYYY-MM-DDThh:mm:ss+/-hhmm.   # noqa: E501

        :return: The date_time_utc of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._date_time_utc

    @date_time_utc.setter
    def date_time_utc(self, date_time_utc):
        """Sets the date_time_utc of this CreateBatchQueryJobRequest.

        When using WSDL 69 and later you can ensure that the exported output of dateTime records are rendered according to ISO-8601 generic UTC form by setting `dateTimeUtc` to `true`.  When `dateTimeUtc` is set to `true`, exports of dateTime data types will be rendered in the following generic format: `YYYY-MM-DDThh:mm:ss-hhmm` or `YYYY-MM-DDThh:mm:ss+hhmm`.  **Note**: Regardless of what batchType query is used (`zoql` or `zoqlexport`), the query response output for datetime data types can be standardized by setting dateTimeUtc to `true`. When `true`, the results will display datetime types with the format: YYYY-MM-DDThh:mm:ss+/-hhmm.   # noqa: E501

        :param date_time_utc: The date_time_utc of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: bool
        """

        self._date_time_utc = date_time_utc

    @property
    def format(self):
        """Gets the format of this CreateBatchQueryJobRequest.  # noqa: E501


        :return: The format of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: BatchQueryFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this CreateBatchQueryJobRequest.


        :param format: The format of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: BatchQueryFormat
        """

        self._format = format

    @property
    def name(self):
        """Gets the name of this CreateBatchQueryJobRequest.  # noqa: E501

        The name of the job. 32 character limit.   # noqa: E501

        :return: The name of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateBatchQueryJobRequest.

        The name of the job. 32 character limit.   # noqa: E501

        :param name: The name of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notify_url(self):
        """Gets the notify_url of this CreateBatchQueryJobRequest.  # noqa: E501

        If URL is provided, the AQuA job will call this `notifyUrl` once the job has completed. The value of `notifyUrl` needs to have `${JOBID}` and `${STATUS}` placeholders. These placeholders will be replaced by the actual job ID and status when returned in the response. Status will be `Completed` after the AQuA job is done.  If you submit an AQuA query with `notifyUrl` specified, the value of `notifyUrl` will be ignored if your organization has already <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Callout_Notification_for_Completed_AQuA_Jobs\" target=\"_blank\">configured a callout notification through the Zuora user interface</a>.    # noqa: E501

        :return: The notify_url of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._notify_url

    @notify_url.setter
    def notify_url(self, notify_url):
        """Sets the notify_url of this CreateBatchQueryJobRequest.

        If URL is provided, the AQuA job will call this `notifyUrl` once the job has completed. The value of `notifyUrl` needs to have `${JOBID}` and `${STATUS}` placeholders. These placeholders will be replaced by the actual job ID and status when returned in the response. Status will be `Completed` after the AQuA job is done.  If you submit an AQuA query with `notifyUrl` specified, the value of `notifyUrl` will be ignored if your organization has already <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Callout_Notification_for_Completed_AQuA_Jobs\" target=\"_blank\">configured a callout notification through the Zuora user interface</a>.    # noqa: E501

        :param notify_url: The notify_url of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: str
        """

        self._notify_url = notify_url

    @property
    def null_replacement(self):
        """Gets the null_replacement of this CreateBatchQueryJobRequest.  # noqa: E501

        The string used to represent null values in the query results. If you do not set this parameter, null values are represented by the empty string in the query results.   # noqa: E501

        :return: The null_replacement of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._null_replacement

    @null_replacement.setter
    def null_replacement(self, null_replacement):
        """Sets the null_replacement of this CreateBatchQueryJobRequest.

        The string used to represent null values in the query results. If you do not set this parameter, null values are represented by the empty string in the query results.   # noqa: E501

        :param null_replacement: The null_replacement of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: str
        """

        self._null_replacement = null_replacement

    @property
    def offset(self):
        """Gets the offset of this CreateBatchQueryJobRequest.  # noqa: E501

        This field specifies the time offset for AQuA queries in stateful mode. It is an integer in the range 0 to 3,600 seconds.  For example, if you set this field to 600 seconds and you post a query in stateful mode at 2:00 AM, it will query against data created or updated between the completion time of the previous query and 1:50 AM.  The value of this field will override the value you configured in **Settings** > **Administration** > **AQuA API Stateful Mode Time Offset**.           # noqa: E501

        :return: The offset of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this CreateBatchQueryJobRequest.

        This field specifies the time offset for AQuA queries in stateful mode. It is an integer in the range 0 to 3,600 seconds.  For example, if you set this field to 600 seconds and you post a query in stateful mode at 2:00 AM, it will query against data created or updated between the completion time of the previous query and 1:50 AM.  The value of this field will override the value you configured in **Settings** > **Administration** > **AQuA API Stateful Mode Time Offset**.           # noqa: E501

        :param offset: The offset of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def partner(self):
        """Gets the partner of this CreateBatchQueryJobRequest.  # noqa: E501

        The partner field indicates the unique ID of a data integration partner. The dropdown list of this field displays partner IDs for the past thirty days. It must be used together with \"project\" field to uniquely identify a data integration target.  For example, if a continuous AQuA session is to retrieve data incrementally for a Salesforce.com Org 00170000011K3Ub, you can use partner as \"Salesforce\", and \"project\" as \"00170000011K3Ub.\"  This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.  **Note**: Zuora highly recommends you use the stateless mode instead of the stateful mode to extract bulk data. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Bulk_data__extraction_from_Zuora_using_AQuA\" target=\"_blank\">Bulk data extraction from Zuora using AQuA</a> for best practices. **Note**: Submit a request at <a href=\"http://support.zuora.com\" target=\"_blank\">Zuora Global Support</a> to obtain a partner ID.   # noqa: E501

        :return: The partner of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this CreateBatchQueryJobRequest.

        The partner field indicates the unique ID of a data integration partner. The dropdown list of this field displays partner IDs for the past thirty days. It must be used together with \"project\" field to uniquely identify a data integration target.  For example, if a continuous AQuA session is to retrieve data incrementally for a Salesforce.com Org 00170000011K3Ub, you can use partner as \"Salesforce\", and \"project\" as \"00170000011K3Ub.\"  This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.  **Note**: Zuora highly recommends you use the stateless mode instead of the stateful mode to extract bulk data. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Bulk_data__extraction_from_Zuora_using_AQuA\" target=\"_blank\">Bulk data extraction from Zuora using AQuA</a> for best practices. **Note**: Submit a request at <a href=\"http://support.zuora.com\" target=\"_blank\">Zuora Global Support</a> to obtain a partner ID.   # noqa: E501

        :param partner: The partner of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: str
        """

        self._partner = partner

    @property
    def project(self):
        """Gets the project of this CreateBatchQueryJobRequest.  # noqa: E501

        The project field contains the unique ID of a data integration project for a particular partner. The dropdown list of this field displays project IDs for the past thirty days.  This field must be used together with partner field to uniquely identify a data integration target.   This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.   # noqa: E501

        :return: The project of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CreateBatchQueryJobRequest.

        The project field contains the unique ID of a data integration project for a particular partner. The dropdown list of this field displays project IDs for the past thirty days.  This field must be used together with partner field to uniquely identify a data integration target.   This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.   # noqa: E501

        :param project: The project of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def queries(self):
        """Gets the queries of this CreateBatchQueryJobRequest.  # noqa: E501

        A JSON array object that contains a list of batch objects.   # noqa: E501

        :return: The queries of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: list[CreateBatchQueryRequest]
        """
        return self._queries

    @queries.setter
    def queries(self, queries):
        """Sets the queries of this CreateBatchQueryJobRequest.

        A JSON array object that contains a list of batch objects.   # noqa: E501

        :param queries: The queries of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: list[CreateBatchQueryRequest]
        """

        self._queries = queries

    @property
    def use_query_labels(self):
        """Gets the use_query_labels of this CreateBatchQueryJobRequest.  # noqa: E501

        When this optional flag is set to `true` the request will use object and field API names for the CSV header output instead of the field labels. Data integration projects should set `useQueryLabels` to `true` so that API names remain the same.  By default `useQueryLabels` is `false`, so that output CSV headers display the more user-friendly object and field labels.    # noqa: E501

        :return: The use_query_labels of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_query_labels

    @use_query_labels.setter
    def use_query_labels(self, use_query_labels):
        """Sets the use_query_labels of this CreateBatchQueryJobRequest.

        When this optional flag is set to `true` the request will use object and field API names for the CSV header output instead of the field labels. Data integration projects should set `useQueryLabels` to `true` so that API names remain the same.  By default `useQueryLabels` is `false`, so that output CSV headers display the more user-friendly object and field labels.    # noqa: E501

        :param use_query_labels: The use_query_labels of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: bool
        """

        self._use_query_labels = use_query_labels

    @property
    def version(self):
        """Gets the version of this CreateBatchQueryJobRequest.  # noqa: E501

        The API version you want to use.   The supported versions are as follows:   - `1.1`. It supports both modes   - `1.0`. Default. It supports stateless modes only.  See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/BA_Stateless_and_Stateful_Modes\" target=\"_blank\">Stateless and stateful modes</a> for more information.   # noqa: E501

        :return: The version of this CreateBatchQueryJobRequest.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this CreateBatchQueryJobRequest.

        The API version you want to use.   The supported versions are as follows:   - `1.1`. It supports both modes   - `1.0`. Default. It supports stateless modes only.  See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/BA_Stateless_and_Stateful_Modes\" target=\"_blank\">Stateless and stateful modes</a> for more information.   # noqa: E501

        :param version: The version of this CreateBatchQueryJobRequest.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBatchQueryJobRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBatchQueryJobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
