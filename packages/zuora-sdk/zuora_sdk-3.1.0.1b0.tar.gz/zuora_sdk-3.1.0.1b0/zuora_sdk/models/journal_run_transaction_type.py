# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JournalRunTransactionType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    INVOICE_ITEM = "Invoice Item"
    TAXATION_ITEM = "Taxation Item"
    INVOICE_ITEM_ADJUSTMENT_INVOICE_ = "Invoice Item Adjustment (Invoice)"
    INVOICE_ITEM_ADJUSTMENT_TAX_ = "Invoice Item Adjustment (Tax)"
    INVOICE_ADJUSTMENT = "Invoice Adjustment"
    ELECTRONIC_PAYMENT = "Electronic Payment"
    EXTERNAL_PAYMENT = "External Payment"
    ELECTRONIC_REFUND = "Electronic Refund"
    EXTERNAL_REFUND = "External Refund"
    ELECTRONIC_CREDIT_BALANCE_PAYMENT = "Electronic Credit Balance Payment"
    EXTERNAL_CREDIT_BALANCE_PAYMENT = "External Credit Balance Payment"
    ELECTRONIC_CREDIT_BALANCE_REFUND = "Electronic Credit Balance Refund"
    EXTERNAL_CREDIT_BALANCE_REFUND = "External Credit Balance Refund"
    CREDIT_BALANCE_ADJUSTMENT_APPLIED_FROM_CREDIT_BALANCE_ = "Credit Balance Adjustment (Applied from Credit Balance)"
    CREDIT_BALANCE_ADJUSTMENT_TRANSFERRED_TO_CREDIT_BALANCE_ = "Credit Balance Adjustment (Transferred to Credit Balance)"
    REVENUE_EVENT_ITEM = "Revenue Event Item"
    DEBIT_MEMO_ITEM_CHARGE_ = "Debit Memo Item (Charge)"
    DEBIT_MEMO_ITEM_TAX_ = "Debit Memo Item (Tax)"
    CREDIT_MEMO_ITEM_CHARGE_ = "Credit Memo Item (Charge)"
    CREDIT_MEMO_ITEM_TAX_ = "Credit Memo Item (Tax)"
    CREDIT_MEMO_APPLICATION_ITEM = "Credit Memo Application Item"
    ELECTRONIC_PAYMENT_APPLICATION = "Electronic Payment Application"
    EXTERNAL_PAYMENT_APPLICATION = "External Payment Application"
    ELECTRONIC_REFUND_APPLICATION = "Electronic Refund Application"
    EXTERNAL_REFUND_APPLICATION = "External Refund Application"
    ELECTRONIC_PAYMENT_APPLICATION_ITEM = "Electronic Payment Application Item"
    EXTERNAL_PAYMENT_APPLICATION_ITEM = "External Payment Application Item"
    ELECTRONIC_REFUND_APPLICATION_ITEM = "Electronic Refund Application Item"
    EXTERNAL_REFUND_APPLICATION_ITEM = "External Refund Application Item"
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
    }

    attribute_map = {
    }

    def __init__(self):  # noqa: E501
        """JournalRunTransactionType - a model defined in Swagger"""  # noqa: E501
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JournalRunTransactionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JournalRunTransactionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
