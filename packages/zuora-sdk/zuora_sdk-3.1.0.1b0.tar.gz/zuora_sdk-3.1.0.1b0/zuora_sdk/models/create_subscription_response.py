# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateSubscriptionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contracted_mrr': 'float',
        'credit_memo_id': 'str',
        'invoice_id': 'str',
        'paid_amount': 'float',
        'payment_id': 'str',
        'subscription_id': 'str',
        'subscription_number': 'str',
        'success': 'bool',
        'total_contracted_value': 'float'
    }

    attribute_map = {
        'contracted_mrr': 'contractedMrr',
        'credit_memo_id': 'creditMemoId',
        'invoice_id': 'invoiceId',
        'paid_amount': 'paidAmount',
        'payment_id': 'paymentId',
        'subscription_id': 'subscriptionId',
        'subscription_number': 'subscriptionNumber',
        'success': 'success',
        'total_contracted_value': 'totalContractedValue'
    }

    def __init__(self, contracted_mrr=None, credit_memo_id=None, invoice_id=None, paid_amount=None, payment_id=None, subscription_id=None, subscription_number=None, success=None, total_contracted_value=None):  # noqa: E501
        """CreateSubscriptionResponse - a model defined in Swagger"""  # noqa: E501
        self._contracted_mrr = None
        self._credit_memo_id = None
        self._invoice_id = None
        self._paid_amount = None
        self._payment_id = None
        self._subscription_id = None
        self._subscription_number = None
        self._success = None
        self._total_contracted_value = None
        self.discriminator = None
        if contracted_mrr is not None:
            self.contracted_mrr = contracted_mrr
        if credit_memo_id is not None:
            self.credit_memo_id = credit_memo_id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if paid_amount is not None:
            self.paid_amount = paid_amount
        if payment_id is not None:
            self.payment_id = payment_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if success is not None:
            self.success = success
        if total_contracted_value is not None:
            self.total_contracted_value = total_contracted_value

    @property
    def contracted_mrr(self):
        """Gets the contracted_mrr of this CreateSubscriptionResponse.  # noqa: E501

        Monthly recurring revenue of the subscription.   # noqa: E501

        :return: The contracted_mrr of this CreateSubscriptionResponse.  # noqa: E501
        :rtype: float
        """
        return self._contracted_mrr

    @contracted_mrr.setter
    def contracted_mrr(self, contracted_mrr):
        """Sets the contracted_mrr of this CreateSubscriptionResponse.

        Monthly recurring revenue of the subscription.   # noqa: E501

        :param contracted_mrr: The contracted_mrr of this CreateSubscriptionResponse.  # noqa: E501
        :type: float
        """

        self._contracted_mrr = contracted_mrr

    @property
    def credit_memo_id(self):
        """Gets the credit_memo_id of this CreateSubscriptionResponse.  # noqa: E501

        The credit memo ID, if a credit memo is generated during the subscription process.  **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   # noqa: E501

        :return: The credit_memo_id of this CreateSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_id

    @credit_memo_id.setter
    def credit_memo_id(self, credit_memo_id):
        """Sets the credit_memo_id of this CreateSubscriptionResponse.

        The credit memo ID, if a credit memo is generated during the subscription process.  **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   # noqa: E501

        :param credit_memo_id: The credit_memo_id of this CreateSubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._credit_memo_id = credit_memo_id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this CreateSubscriptionResponse.  # noqa: E501

        Invoice ID, if an invoice is generated during the subscription process.   # noqa: E501

        :return: The invoice_id of this CreateSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this CreateSubscriptionResponse.

        Invoice ID, if an invoice is generated during the subscription process.   # noqa: E501

        :param invoice_id: The invoice_id of this CreateSubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def paid_amount(self):
        """Gets the paid_amount of this CreateSubscriptionResponse.  # noqa: E501

        Payment amount, if a payment is collected.   # noqa: E501

        :return: The paid_amount of this CreateSubscriptionResponse.  # noqa: E501
        :rtype: float
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this CreateSubscriptionResponse.

        Payment amount, if a payment is collected.   # noqa: E501

        :param paid_amount: The paid_amount of this CreateSubscriptionResponse.  # noqa: E501
        :type: float
        """

        self._paid_amount = paid_amount

    @property
    def payment_id(self):
        """Gets the payment_id of this CreateSubscriptionResponse.  # noqa: E501

        Payment ID, if a payment is collected.   # noqa: E501

        :return: The payment_id of this CreateSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this CreateSubscriptionResponse.

        Payment ID, if a payment is collected.   # noqa: E501

        :param payment_id: The payment_id of this CreateSubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this CreateSubscriptionResponse.  # noqa: E501


        :return: The subscription_id of this CreateSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this CreateSubscriptionResponse.


        :param subscription_id: The subscription_id of this CreateSubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_number(self):
        """Gets the subscription_number of this CreateSubscriptionResponse.  # noqa: E501


        :return: The subscription_number of this CreateSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this CreateSubscriptionResponse.


        :param subscription_number: The subscription_number of this CreateSubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def success(self):
        """Gets the success of this CreateSubscriptionResponse.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this CreateSubscriptionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this CreateSubscriptionResponse.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this CreateSubscriptionResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def total_contracted_value(self):
        """Gets the total_contracted_value of this CreateSubscriptionResponse.  # noqa: E501

        Total contracted value of the subscription.   # noqa: E501

        :return: The total_contracted_value of this CreateSubscriptionResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_contracted_value

    @total_contracted_value.setter
    def total_contracted_value(self, total_contracted_value):
        """Sets the total_contracted_value of this CreateSubscriptionResponse.

        Total contracted value of the subscription.   # noqa: E501

        :param total_contracted_value: The total_contracted_value of this CreateSubscriptionResponse.  # noqa: E501
        :type: float
        """

        self._total_contracted_value = total_contracted_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSubscriptionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSubscriptionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
