# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateSubscriptionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_key': 'str',
        'application_order': 'list[str]',
        'apply_credit': 'bool',
        'apply_credit_balance': 'bool',
        'auto_renew': 'bool',
        'collect': 'bool',
        'contract_effective_date': 'date',
        'credit_memo_reason_code': 'str',
        'customer_acceptance_date': 'date',
        'document_date': 'date',
        'externally_managed_by': 'str',
        'gateway_id': 'str',
        'initial_term': 'int',
        'initial_term_period_type': 'str',
        'invoice': 'bool',
        'invoice_collect': 'bool',
        'invoice_owner_account_key': 'str',
        'invoice_separately': 'bool',
        'invoice_target_date': 'date',
        'last_booking_date': 'date',
        'notes': 'str',
        'payment_method_id': 'str',
        'prepayment': 'bool',
        'renewal_setting': 'str',
        'renewal_term': 'int',
        'renewal_term_period_type': 'str',
        'run_billing': 'bool',
        'service_activation_date': 'date',
        'subscribe_to_rate_plans': 'list[CreateSubscriptionRatePlan]',
        'subscription_number': 'str',
        'target_date': 'date',
        'term_start_date': 'date',
        'term_type': 'str',
        'cpq_bundle_json_id__qt': 'str',
        'opportunity_close_date__qt': 'date',
        'opportunity_name__qt': 'str',
        'quote_business_type__qt': 'str',
        'quote_number__qt': 'str',
        'quote_type__qt': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'project__ns': 'str',
        'sales_order__ns': 'str',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'account_key': 'accountKey',
        'application_order': 'applicationOrder',
        'apply_credit': 'applyCredit',
        'apply_credit_balance': 'applyCreditBalance',
        'auto_renew': 'autoRenew',
        'collect': 'collect',
        'contract_effective_date': 'contractEffectiveDate',
        'credit_memo_reason_code': 'creditMemoReasonCode',
        'customer_acceptance_date': 'customerAcceptanceDate',
        'document_date': 'documentDate',
        'externally_managed_by': 'externallyManagedBy',
        'gateway_id': 'gatewayId',
        'initial_term': 'initialTerm',
        'initial_term_period_type': 'initialTermPeriodType',
        'invoice': 'invoice',
        'invoice_collect': 'invoiceCollect',
        'invoice_owner_account_key': 'invoiceOwnerAccountKey',
        'invoice_separately': 'invoiceSeparately',
        'invoice_target_date': 'invoiceTargetDate',
        'last_booking_date': 'lastBookingDate',
        'notes': 'notes',
        'payment_method_id': 'paymentMethodId',
        'prepayment': 'prepayment',
        'renewal_setting': 'renewalSetting',
        'renewal_term': 'renewalTerm',
        'renewal_term_period_type': 'renewalTermPeriodType',
        'run_billing': 'runBilling',
        'service_activation_date': 'serviceActivationDate',
        'subscribe_to_rate_plans': 'subscribeToRatePlans',
        'subscription_number': 'subscriptionNumber',
        'target_date': 'targetDate',
        'term_start_date': 'termStartDate',
        'term_type': 'termType',
        'cpq_bundle_json_id__qt': 'CpqBundleJsonId__QT',
        'opportunity_close_date__qt': 'OpportunityCloseDate__QT',
        'opportunity_name__qt': 'OpportunityName__QT',
        'quote_business_type__qt': 'QuoteBusinessType__QT',
        'quote_number__qt': 'QuoteNumber__QT',
        'quote_type__qt': 'QuoteType__QT',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'project__ns': 'Project__NS',
        'sales_order__ns': 'SalesOrder__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, account_key=None, application_order=None, apply_credit=None, apply_credit_balance=None, auto_renew=False, collect=None, contract_effective_date=None, credit_memo_reason_code=None, customer_acceptance_date=None, document_date=None, externally_managed_by=None, gateway_id=None, initial_term=None, initial_term_period_type=None, invoice=None, invoice_collect=None, invoice_owner_account_key=None, invoice_separately=None, invoice_target_date=None, last_booking_date=None, notes=None, payment_method_id=None, prepayment=None, renewal_setting=None, renewal_term=None, renewal_term_period_type=None, run_billing=None, service_activation_date=None, subscribe_to_rate_plans=None, subscription_number=None, target_date=None, term_start_date=None, term_type=None, cpq_bundle_json_id__qt=None, opportunity_close_date__qt=None, opportunity_name__qt=None, quote_business_type__qt=None, quote_number__qt=None, quote_type__qt=None, integration_id__ns=None, integration_status__ns=None, project__ns=None, sales_order__ns=None, sync_date__ns=None):  # noqa: E501
        """CreateSubscriptionRequest - a model defined in Swagger"""  # noqa: E501
        self._account_key = None
        self._application_order = None
        self._apply_credit = None
        self._apply_credit_balance = None
        self._auto_renew = None
        self._collect = None
        self._contract_effective_date = None
        self._credit_memo_reason_code = None
        self._customer_acceptance_date = None
        self._document_date = None
        self._externally_managed_by = None
        self._gateway_id = None
        self._initial_term = None
        self._initial_term_period_type = None
        self._invoice = None
        self._invoice_collect = None
        self._invoice_owner_account_key = None
        self._invoice_separately = None
        self._invoice_target_date = None
        self._last_booking_date = None
        self._notes = None
        self._payment_method_id = None
        self._prepayment = None
        self._renewal_setting = None
        self._renewal_term = None
        self._renewal_term_period_type = None
        self._run_billing = None
        self._service_activation_date = None
        self._subscribe_to_rate_plans = None
        self._subscription_number = None
        self._target_date = None
        self._term_start_date = None
        self._term_type = None
        self._cpq_bundle_json_id__qt = None
        self._opportunity_close_date__qt = None
        self._opportunity_name__qt = None
        self._quote_business_type__qt = None
        self._quote_number__qt = None
        self._quote_type__qt = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._project__ns = None
        self._sales_order__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        self.account_key = account_key
        if application_order is not None:
            self.application_order = application_order
        if apply_credit is not None:
            self.apply_credit = apply_credit
        if apply_credit_balance is not None:
            self.apply_credit_balance = apply_credit_balance
        if auto_renew is not None:
            self.auto_renew = auto_renew
        if collect is not None:
            self.collect = collect
        self.contract_effective_date = contract_effective_date
        if credit_memo_reason_code is not None:
            self.credit_memo_reason_code = credit_memo_reason_code
        if customer_acceptance_date is not None:
            self.customer_acceptance_date = customer_acceptance_date
        if document_date is not None:
            self.document_date = document_date
        if externally_managed_by is not None:
            self.externally_managed_by = externally_managed_by
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if initial_term is not None:
            self.initial_term = initial_term
        if initial_term_period_type is not None:
            self.initial_term_period_type = initial_term_period_type
        if invoice is not None:
            self.invoice = invoice
        if invoice_collect is not None:
            self.invoice_collect = invoice_collect
        if invoice_owner_account_key is not None:
            self.invoice_owner_account_key = invoice_owner_account_key
        if invoice_separately is not None:
            self.invoice_separately = invoice_separately
        if invoice_target_date is not None:
            self.invoice_target_date = invoice_target_date
        if last_booking_date is not None:
            self.last_booking_date = last_booking_date
        if notes is not None:
            self.notes = notes
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if prepayment is not None:
            self.prepayment = prepayment
        if renewal_setting is not None:
            self.renewal_setting = renewal_setting
        self.renewal_term = renewal_term
        if renewal_term_period_type is not None:
            self.renewal_term_period_type = renewal_term_period_type
        if run_billing is not None:
            self.run_billing = run_billing
        if service_activation_date is not None:
            self.service_activation_date = service_activation_date
        self.subscribe_to_rate_plans = subscribe_to_rate_plans
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if target_date is not None:
            self.target_date = target_date
        if term_start_date is not None:
            self.term_start_date = term_start_date
        self.term_type = term_type
        if cpq_bundle_json_id__qt is not None:
            self.cpq_bundle_json_id__qt = cpq_bundle_json_id__qt
        if opportunity_close_date__qt is not None:
            self.opportunity_close_date__qt = opportunity_close_date__qt
        if opportunity_name__qt is not None:
            self.opportunity_name__qt = opportunity_name__qt
        if quote_business_type__qt is not None:
            self.quote_business_type__qt = quote_business_type__qt
        if quote_number__qt is not None:
            self.quote_number__qt = quote_number__qt
        if quote_type__qt is not None:
            self.quote_type__qt = quote_type__qt
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if project__ns is not None:
            self.project__ns = project__ns
        if sales_order__ns is not None:
            self.sales_order__ns = sales_order__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def account_key(self):
        """Gets the account_key of this CreateSubscriptionRequest.  # noqa: E501

        Customer account number or ID   # noqa: E501

        :return: The account_key of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this CreateSubscriptionRequest.

        Customer account number or ID   # noqa: E501

        :param account_key: The account_key of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        if account_key is None:
            raise ValueError("Invalid value for `account_key`, must not be `None`")  # noqa: E501

        self._account_key = account_key

    @property
    def application_order(self):
        """Gets the application_order of this CreateSubscriptionRequest.  # noqa: E501

        The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.  **Note:**   - This field is valid only if the `applyCredit` field is set to `true`.   - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply to invoices.   # noqa: E501

        :return: The application_order of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._application_order

    @application_order.setter
    def application_order(self, application_order):
        """Sets the application_order of this CreateSubscriptionRequest.

        The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.  **Note:**   - This field is valid only if the `applyCredit` field is set to `true`.   - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply to invoices.   # noqa: E501

        :param application_order: The application_order of this CreateSubscriptionRequest.  # noqa: E501
        :type: list[str]
        """

        self._application_order = application_order

    @property
    def apply_credit(self):
        """Gets the apply_credit of this CreateSubscriptionRequest.  # noqa: E501

        If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.   **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   # noqa: E501

        :return: The apply_credit of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._apply_credit

    @apply_credit.setter
    def apply_credit(self, apply_credit):
        """Sets the apply_credit of this CreateSubscriptionRequest.

        If the value is true, the credit memo or unapplied payment on the order account will be automatically applied to the invoices generated by this order. The credit memo generated by this order will not be automatically applied to any invoices.   **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   # noqa: E501

        :param apply_credit: The apply_credit of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._apply_credit = apply_credit

    @property
    def apply_credit_balance(self):
        """Gets the apply_credit_balance of this CreateSubscriptionRequest.  # noqa: E501

        Whether to automatically apply a credit balance to an invoice.  If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.   To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.  Prerequisite: `invoice` must be `true`.   **Note:**    - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.   - This field is deprecated if you have the Invoice Settlement feature enabled.   # noqa: E501

        :return: The apply_credit_balance of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._apply_credit_balance

    @apply_credit_balance.setter
    def apply_credit_balance(self, apply_credit_balance):
        """Sets the apply_credit_balance of this CreateSubscriptionRequest.

        Whether to automatically apply a credit balance to an invoice.  If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.   To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.  Prerequisite: `invoice` must be `true`.   **Note:**    - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.   - This field is deprecated if you have the Invoice Settlement feature enabled.   # noqa: E501

        :param apply_credit_balance: The apply_credit_balance of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._apply_credit_balance = apply_credit_balance

    @property
    def auto_renew(self):
        """Gets the auto_renew of this CreateSubscriptionRequest.  # noqa: E501

        If true, this subscription automatically renews at the end of the subscription term.  This field is only required if the `termType` field is set to `TERMED`.   # noqa: E501

        :return: The auto_renew of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this CreateSubscriptionRequest.

        If true, this subscription automatically renews at the end of the subscription term.  This field is only required if the `termType` field is set to `TERMED`.   # noqa: E501

        :param auto_renew: The auto_renew of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._auto_renew = auto_renew

    @property
    def collect(self):
        """Gets the collect of this CreateSubscriptionRequest.  # noqa: E501

        Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.  If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.  Prerequisite: The `invoice` or `runBilling` field must be `true`.   **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later.   # noqa: E501

        :return: The collect of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._collect

    @collect.setter
    def collect(self, collect):
        """Sets the collect of this CreateSubscriptionRequest.

        Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account.  If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken.  Prerequisite: The `invoice` or `runBilling` field must be `true`.   **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later.   # noqa: E501

        :param collect: The collect of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._collect = collect

    @property
    def contract_effective_date(self):
        """Gets the contract_effective_date of this CreateSubscriptionRequest.  # noqa: E501

        Effective contract date for this subscription, as yyyy-mm-dd   # noqa: E501

        :return: The contract_effective_date of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: date
        """
        return self._contract_effective_date

    @contract_effective_date.setter
    def contract_effective_date(self, contract_effective_date):
        """Sets the contract_effective_date of this CreateSubscriptionRequest.

        Effective contract date for this subscription, as yyyy-mm-dd   # noqa: E501

        :param contract_effective_date: The contract_effective_date of this CreateSubscriptionRequest.  # noqa: E501
        :type: date
        """
        if contract_effective_date is None:
            raise ValueError("Invalid value for `contract_effective_date`, must not be `None`")  # noqa: E501

        self._contract_effective_date = contract_effective_date

    @property
    def credit_memo_reason_code(self):
        """Gets the credit_memo_reason_code of this CreateSubscriptionRequest.  # noqa: E501

        A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.  # noqa: E501

        :return: The credit_memo_reason_code of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_reason_code

    @credit_memo_reason_code.setter
    def credit_memo_reason_code(self, credit_memo_reason_code):
        """Sets the credit_memo_reason_code of this CreateSubscriptionRequest.

        A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.  # noqa: E501

        :param credit_memo_reason_code: The credit_memo_reason_code of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._credit_memo_reason_code = credit_memo_reason_code

    @property
    def customer_acceptance_date(self):
        """Gets the customer_acceptance_date of this CreateSubscriptionRequest.  # noqa: E501

        The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.  Default value is dependent on the value of other fields. See **Notes** section for more details.   # noqa: E501

        :return: The customer_acceptance_date of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: date
        """
        return self._customer_acceptance_date

    @customer_acceptance_date.setter
    def customer_acceptance_date(self, customer_acceptance_date):
        """Sets the customer_acceptance_date of this CreateSubscriptionRequest.

        The date on which the services or products within a subscription have been accepted by the customer, as yyyy-mm-dd.  Default value is dependent on the value of other fields. See **Notes** section for more details.   # noqa: E501

        :param customer_acceptance_date: The customer_acceptance_date of this CreateSubscriptionRequest.  # noqa: E501
        :type: date
        """

        self._customer_acceptance_date = customer_acceptance_date

    @property
    def document_date(self):
        """Gets the document_date of this CreateSubscriptionRequest.  # noqa: E501

        The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.  - If this field is specified, the specified date is used as the billing document date.  - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.   # noqa: E501

        :return: The document_date of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this CreateSubscriptionRequest.

        The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.  - If this field is specified, the specified date is used as the billing document date.  - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.   # noqa: E501

        :param document_date: The document_date of this CreateSubscriptionRequest.  # noqa: E501
        :type: date
        """

        self._document_date = document_date

    @property
    def externally_managed_by(self):
        """Gets the externally_managed_by of this CreateSubscriptionRequest.  # noqa: E501

        An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.   # noqa: E501

        :return: The externally_managed_by of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._externally_managed_by

    @externally_managed_by.setter
    def externally_managed_by(self, externally_managed_by):
        """Sets the externally_managed_by of this CreateSubscriptionRequest.

        An enum field on the Subscription object to indicate the name of a third-party store. This field is used to represent subscriptions created through third-party stores.   # noqa: E501

        :param externally_managed_by: The externally_managed_by of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["Amazon", "Apple", "Google", "Roku"]  # noqa: E501
        if externally_managed_by not in allowed_values:
            raise ValueError(
                "Invalid value for `externally_managed_by` ({0}), must be one of {1}"  # noqa: E501
                .format(externally_managed_by, allowed_values)
            )

        self._externally_managed_by = externally_managed_by

    @property
    def gateway_id(self):
        """Gets the gateway_id of this CreateSubscriptionRequest.  # noqa: E501

        The ID of the payment gateway instance. For example, `2c92c0f86078c4d5016091674bcc3e92`.   # noqa: E501

        :return: The gateway_id of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this CreateSubscriptionRequest.

        The ID of the payment gateway instance. For example, `2c92c0f86078c4d5016091674bcc3e92`.   # noqa: E501

        :param gateway_id: The gateway_id of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def initial_term(self):
        """Gets the initial_term of this CreateSubscriptionRequest.  # noqa: E501

        The length of the period for the first subscription term. If `termType` is `TERMED`, then this field is required, and the value must be greater than `0`. If `termType` is `EVERGREEN`, this field is ignored.   # noqa: E501

        :return: The initial_term of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._initial_term

    @initial_term.setter
    def initial_term(self, initial_term):
        """Sets the initial_term of this CreateSubscriptionRequest.

        The length of the period for the first subscription term. If `termType` is `TERMED`, then this field is required, and the value must be greater than `0`. If `termType` is `EVERGREEN`, this field is ignored.   # noqa: E501

        :param initial_term: The initial_term of this CreateSubscriptionRequest.  # noqa: E501
        :type: int
        """

        self._initial_term = initial_term

    @property
    def initial_term_period_type(self):
        """Gets the initial_term_period_type of this CreateSubscriptionRequest.  # noqa: E501

        The period type for the first subscription term.  This field is used with the `InitialTerm` field to specify the initial subscription term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :return: The initial_term_period_type of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._initial_term_period_type

    @initial_term_period_type.setter
    def initial_term_period_type(self, initial_term_period_type):
        """Sets the initial_term_period_type of this CreateSubscriptionRequest.

        The period type for the first subscription term.  This field is used with the `InitialTerm` field to specify the initial subscription term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :param initial_term_period_type: The initial_term_period_type of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._initial_term_period_type = initial_term_period_type

    @property
    def invoice(self):
        """Gets the invoice of this CreateSubscriptionRequest.  # noqa: E501

        **Note:** This field has been replaced by the `runBilling` field. The `invoice` field is only available for backward compatibility.   Creates an invoice for a subscription. The invoice generated in this operation is only for this subscription, not for the entire customer account.   If the value is `true`, an invoice is created. If the value is `false`, no action is taken. The default value is `true`.    This field is in Zuora REST API version control. Supported minor versions are `196.0` and `207.0`. To use this field in the method, you must set the zuora-version parameter to the minor version number in the request header.   # noqa: E501

        :return: The invoice of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this CreateSubscriptionRequest.

        **Note:** This field has been replaced by the `runBilling` field. The `invoice` field is only available for backward compatibility.   Creates an invoice for a subscription. The invoice generated in this operation is only for this subscription, not for the entire customer account.   If the value is `true`, an invoice is created. If the value is `false`, no action is taken. The default value is `true`.    This field is in Zuora REST API version control. Supported minor versions are `196.0` and `207.0`. To use this field in the method, you must set the zuora-version parameter to the minor version number in the request header.   # noqa: E501

        :param invoice: The invoice of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._invoice = invoice

    @property
    def invoice_collect(self):
        """Gets the invoice_collect of this CreateSubscriptionRequest.  # noqa: E501

        **Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.   If this field is set to `true`, an invoice is generated and payment collected automatically during the subscription process. If `false`, no invoicing or payment takes place. The invoice generated in this operation is only for this subscription, not for the entire customer account.   **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.   # noqa: E501

        :return: The invoice_collect of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_collect

    @invoice_collect.setter
    def invoice_collect(self, invoice_collect):
        """Sets the invoice_collect of this CreateSubscriptionRequest.

        **Note:** This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility.   If this field is set to `true`, an invoice is generated and payment collected automatically during the subscription process. If `false`, no invoicing or payment takes place. The invoice generated in this operation is only for this subscription, not for the entire customer account.   **Note**: This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`.   # noqa: E501

        :param invoice_collect: The invoice_collect of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._invoice_collect = invoice_collect

    @property
    def invoice_owner_account_key(self):
        """Gets the invoice_owner_account_key of this CreateSubscriptionRequest.  # noqa: E501

        Invoice owner account number or ID.  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :return: The invoice_owner_account_key of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_owner_account_key

    @invoice_owner_account_key.setter
    def invoice_owner_account_key(self, invoice_owner_account_key):
        """Sets the invoice_owner_account_key of this CreateSubscriptionRequest.

        Invoice owner account number or ID.  **Note:** This feature is in **Limited Availability**. If you wish to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :param invoice_owner_account_key: The invoice_owner_account_key of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._invoice_owner_account_key = invoice_owner_account_key

    @property
    def invoice_separately(self):
        """Gets the invoice_separately of this CreateSubscriptionRequest.  # noqa: E501

        Separates a single subscription from other subscriptions and invoices the charge independently.   If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.  The default value is `false`.  Prerequisite: The default subscription setting Enable Subscriptions to be Invoiced Separately must be set to Yes.   # noqa: E501

        :return: The invoice_separately of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_separately

    @invoice_separately.setter
    def invoice_separately(self, invoice_separately):
        """Sets the invoice_separately of this CreateSubscriptionRequest.

        Separates a single subscription from other subscriptions and invoices the charge independently.   If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice.  The default value is `false`.  Prerequisite: The default subscription setting Enable Subscriptions to be Invoiced Separately must be set to Yes.   # noqa: E501

        :param invoice_separately: The invoice_separately of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._invoice_separately = invoice_separately

    @property
    def invoice_target_date(self):
        """Gets the invoice_target_date of this CreateSubscriptionRequest.  # noqa: E501

        **Note:** This field has been replaced by the `targetDate` field. The `invoiceTargetDate` field is only available for backward compatibility.   Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.   This field is in Zuora REST API version control. Supported minor versions are `207.0` and earlier.   # noqa: E501

        :return: The invoice_target_date of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: date
        """
        return self._invoice_target_date

    @invoice_target_date.setter
    def invoice_target_date(self, invoice_target_date):
        """Sets the invoice_target_date of this CreateSubscriptionRequest.

        **Note:** This field has been replaced by the `targetDate` field. The `invoiceTargetDate` field is only available for backward compatibility.   Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.   This field is in Zuora REST API version control. Supported minor versions are `207.0` and earlier.   # noqa: E501

        :param invoice_target_date: The invoice_target_date of this CreateSubscriptionRequest.  # noqa: E501
        :type: date
        """

        self._invoice_target_date = invoice_target_date

    @property
    def last_booking_date(self):
        """Gets the last_booking_date of this CreateSubscriptionRequest.  # noqa: E501

        The last booking date of the subscription object. This field is writable only when the subscription is newly created as a first version subscription. You can override the date value when creating a subscription through the Subscribe and Amend API or the subscription creation UI (non-Orders). Otherwise, the default value `today` is set per the user's timezone. The value of this field is as follows: * For a new subscription created by the [Subscribe and Amend APIs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_APIs_to_Migrate), this field has the value of the subscription creation date. * For a subscription changed by an amendment, this field has the value of the amendment booking date. * For a subscription created or changed by an order, this field has the value of the order date.   # noqa: E501

        :return: The last_booking_date of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: date
        """
        return self._last_booking_date

    @last_booking_date.setter
    def last_booking_date(self, last_booking_date):
        """Sets the last_booking_date of this CreateSubscriptionRequest.

        The last booking date of the subscription object. This field is writable only when the subscription is newly created as a first version subscription. You can override the date value when creating a subscription through the Subscribe and Amend API or the subscription creation UI (non-Orders). Otherwise, the default value `today` is set per the user's timezone. The value of this field is as follows: * For a new subscription created by the [Subscribe and Amend APIs](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Migration_Guidance#Subscribe_and_Amend_APIs_to_Migrate), this field has the value of the subscription creation date. * For a subscription changed by an amendment, this field has the value of the amendment booking date. * For a subscription created or changed by an order, this field has the value of the order date.   # noqa: E501

        :param last_booking_date: The last_booking_date of this CreateSubscriptionRequest.  # noqa: E501
        :type: date
        """

        self._last_booking_date = last_booking_date

    @property
    def notes(self):
        """Gets the notes of this CreateSubscriptionRequest.  # noqa: E501

        String of up to 500 characters.   # noqa: E501

        :return: The notes of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateSubscriptionRequest.

        String of up to 500 characters.   # noqa: E501

        :param notes: The notes of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this CreateSubscriptionRequest.  # noqa: E501

        The ID of the payment method used for the payment.   # noqa: E501

        :return: The payment_method_id of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this CreateSubscriptionRequest.

        The ID of the payment method used for the payment.   # noqa: E501

        :param payment_method_id: The payment_method_id of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def prepayment(self):
        """Gets the prepayment of this CreateSubscriptionRequest.  # noqa: E501

        Indicates whether the subscription will consume the reserved payment amount of the customer account. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.    # noqa: E501

        :return: The prepayment of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._prepayment

    @prepayment.setter
    def prepayment(self, prepayment):
        """Sets the prepayment of this CreateSubscriptionRequest.

        Indicates whether the subscription will consume the reserved payment amount of the customer account. See [Prepaid Cash with Drawdown](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Invoicing/JA_Advanced_Consumption_Billing/Prepaid_Cash_with_Drawdown) for more information.    # noqa: E501

        :param prepayment: The prepayment of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._prepayment = prepayment

    @property
    def renewal_setting(self):
        """Gets the renewal_setting of this CreateSubscriptionRequest.  # noqa: E501

        Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.  Values:  * `RENEW_WITH_SPECIFIC_TERM` (default) * `RENEW_TO_EVERGREEN`   # noqa: E501

        :return: The renewal_setting of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._renewal_setting

    @renewal_setting.setter
    def renewal_setting(self, renewal_setting):
        """Sets the renewal_setting of this CreateSubscriptionRequest.

        Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.  Values:  * `RENEW_WITH_SPECIFIC_TERM` (default) * `RENEW_TO_EVERGREEN`   # noqa: E501

        :param renewal_setting: The renewal_setting of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._renewal_setting = renewal_setting

    @property
    def renewal_term(self):
        """Gets the renewal_term of this CreateSubscriptionRequest.  # noqa: E501

        The length of the period for the subscription renewal term. Default is `0`.   # noqa: E501

        :return: The renewal_term of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: int
        """
        return self._renewal_term

    @renewal_term.setter
    def renewal_term(self, renewal_term):
        """Sets the renewal_term of this CreateSubscriptionRequest.

        The length of the period for the subscription renewal term. Default is `0`.   # noqa: E501

        :param renewal_term: The renewal_term of this CreateSubscriptionRequest.  # noqa: E501
        :type: int
        """
        if renewal_term is None:
            raise ValueError("Invalid value for `renewal_term`, must not be `None`")  # noqa: E501

        self._renewal_term = renewal_term

    @property
    def renewal_term_period_type(self):
        """Gets the renewal_term_period_type of this CreateSubscriptionRequest.  # noqa: E501

        The period type for the subscription renewal term.  This field is used with the `renewalTerm` field to specify the subscription renewal term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :return: The renewal_term_period_type of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._renewal_term_period_type

    @renewal_term_period_type.setter
    def renewal_term_period_type(self, renewal_term_period_type):
        """Sets the renewal_term_period_type of this CreateSubscriptionRequest.

        The period type for the subscription renewal term.  This field is used with the `renewalTerm` field to specify the subscription renewal term.  Values are:  * `Month` (default) * `Year` * `Day` * `Week`   # noqa: E501

        :param renewal_term_period_type: The renewal_term_period_type of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._renewal_term_period_type = renewal_term_period_type

    @property
    def run_billing(self):
        """Gets the run_billing of this CreateSubscriptionRequest.  # noqa: E501

        Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).     The billing documents generated in this operation is only for this subscription, not for the entire customer account.   Possible values:  - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.   - `false`: No invoice is created.   **Note:** This field is in Zuora REST API version control. Supported minor versions are `211.0` or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :return: The run_billing of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._run_billing

    @run_billing.setter
    def run_billing(self, run_billing):
        """Sets the run_billing of this CreateSubscriptionRequest.

        Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/CB_Billing/Invoice_Settlement/Credit_and_Debit_Memos/Rules_for_Generating_Invoices_and_Credit_Memos).     The billing documents generated in this operation is only for this subscription, not for the entire customer account.   Possible values:  - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created.   - `false`: No invoice is created.   **Note:** This field is in Zuora REST API version control. Supported minor versions are `211.0` or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :param run_billing: The run_billing of this CreateSubscriptionRequest.  # noqa: E501
        :type: bool
        """

        self._run_billing = run_billing

    @property
    def service_activation_date(self):
        """Gets the service_activation_date of this CreateSubscriptionRequest.  # noqa: E501

        The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.  Default value is dependent on the value of other fields. See **Notes** section for more details.   # noqa: E501

        :return: The service_activation_date of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: date
        """
        return self._service_activation_date

    @service_activation_date.setter
    def service_activation_date(self, service_activation_date):
        """Sets the service_activation_date of this CreateSubscriptionRequest.

        The date on which the services or products within a subscription have been activated and access has been provided to the customer, as yyyy-mm-dd.  Default value is dependent on the value of other fields. See **Notes** section for more details.   # noqa: E501

        :param service_activation_date: The service_activation_date of this CreateSubscriptionRequest.  # noqa: E501
        :type: date
        """

        self._service_activation_date = service_activation_date

    @property
    def subscribe_to_rate_plans(self):
        """Gets the subscribe_to_rate_plans of this CreateSubscriptionRequest.  # noqa: E501

        Container for one or more rate plans for this subscription.   # noqa: E501

        :return: The subscribe_to_rate_plans of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: list[CreateSubscriptionRatePlan]
        """
        return self._subscribe_to_rate_plans

    @subscribe_to_rate_plans.setter
    def subscribe_to_rate_plans(self, subscribe_to_rate_plans):
        """Sets the subscribe_to_rate_plans of this CreateSubscriptionRequest.

        Container for one or more rate plans for this subscription.   # noqa: E501

        :param subscribe_to_rate_plans: The subscribe_to_rate_plans of this CreateSubscriptionRequest.  # noqa: E501
        :type: list[CreateSubscriptionRatePlan]
        """
        if subscribe_to_rate_plans is None:
            raise ValueError("Invalid value for `subscribe_to_rate_plans`, must not be `None`")  # noqa: E501

        self._subscribe_to_rate_plans = subscribe_to_rate_plans

    @property
    def subscription_number(self):
        """Gets the subscription_number of this CreateSubscriptionRequest.  # noqa: E501

        Subscription Number. The value can be up to 1000 characters.  If you do not specify a subscription number when creating a subscription, Zuora will generate a subscription number automatically.  If the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.   # noqa: E501

        :return: The subscription_number of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this CreateSubscriptionRequest.

        Subscription Number. The value can be up to 1000 characters.  If you do not specify a subscription number when creating a subscription, Zuora will generate a subscription number automatically.  If the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.   # noqa: E501

        :param subscription_number: The subscription_number of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def target_date(self):
        """Gets the target_date of this CreateSubscriptionRequest.  # noqa: E501

        Date through which to calculate charges if an invoice or a credit memo is generated, as yyyy-mm-dd. Default is current date.   **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.   This field is in Zuora REST API version control. Supported minor versions are `211.0` and later. To use this field in the method, you must set the  `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :return: The target_date of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this CreateSubscriptionRequest.

        Date through which to calculate charges if an invoice or a credit memo is generated, as yyyy-mm-dd. Default is current date.   **Note:** The credit memo is only available if you have the Invoice Settlement feature enabled.   This field is in Zuora REST API version control. Supported minor versions are `211.0` and later. To use this field in the method, you must set the  `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :param target_date: The target_date of this CreateSubscriptionRequest.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def term_start_date(self):
        """Gets the term_start_date of this CreateSubscriptionRequest.  # noqa: E501

        The date on which the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date.   # noqa: E501

        :return: The term_start_date of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: date
        """
        return self._term_start_date

    @term_start_date.setter
    def term_start_date(self, term_start_date):
        """Sets the term_start_date of this CreateSubscriptionRequest.

        The date on which the subscription term begins, as yyyy-mm-dd. If this is a renewal subscription, this date is different from the subscription start date.   # noqa: E501

        :param term_start_date: The term_start_date of this CreateSubscriptionRequest.  # noqa: E501
        :type: date
        """

        self._term_start_date = term_start_date

    @property
    def term_type(self):
        """Gets the term_type of this CreateSubscriptionRequest.  # noqa: E501

        Possible values are: `TERMED`, `EVERGREEN`.   # noqa: E501

        :return: The term_type of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._term_type

    @term_type.setter
    def term_type(self, term_type):
        """Sets the term_type of this CreateSubscriptionRequest.

        Possible values are: `TERMED`, `EVERGREEN`.   # noqa: E501

        :param term_type: The term_type of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """
        if term_type is None:
            raise ValueError("Invalid value for `term_type`, must not be `None`")  # noqa: E501

        self._term_type = term_type

    @property
    def cpq_bundle_json_id__qt(self):
        """Gets the cpq_bundle_json_id__qt of this CreateSubscriptionRequest.  # noqa: E501

        The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.   # noqa: E501

        :return: The cpq_bundle_json_id__qt of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._cpq_bundle_json_id__qt

    @cpq_bundle_json_id__qt.setter
    def cpq_bundle_json_id__qt(self, cpq_bundle_json_id__qt):
        """Sets the cpq_bundle_json_id__qt of this CreateSubscriptionRequest.

        The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.   # noqa: E501

        :param cpq_bundle_json_id__qt: The cpq_bundle_json_id__qt of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._cpq_bundle_json_id__qt = cpq_bundle_json_id__qt

    @property
    def opportunity_close_date__qt(self):
        """Gets the opportunity_close_date__qt of this CreateSubscriptionRequest.  # noqa: E501

        The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The opportunity_close_date__qt of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: date
        """
        return self._opportunity_close_date__qt

    @opportunity_close_date__qt.setter
    def opportunity_close_date__qt(self, opportunity_close_date__qt):
        """Sets the opportunity_close_date__qt of this CreateSubscriptionRequest.

        The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param opportunity_close_date__qt: The opportunity_close_date__qt of this CreateSubscriptionRequest.  # noqa: E501
        :type: date
        """

        self._opportunity_close_date__qt = opportunity_close_date__qt

    @property
    def opportunity_name__qt(self):
        """Gets the opportunity_name__qt of this CreateSubscriptionRequest.  # noqa: E501

        The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The opportunity_name__qt of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._opportunity_name__qt

    @opportunity_name__qt.setter
    def opportunity_name__qt(self, opportunity_name__qt):
        """Sets the opportunity_name__qt of this CreateSubscriptionRequest.

        The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param opportunity_name__qt: The opportunity_name__qt of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._opportunity_name__qt = opportunity_name__qt

    @property
    def quote_business_type__qt(self):
        """Gets the quote_business_type__qt of this CreateSubscriptionRequest.  # noqa: E501

        The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_business_type__qt of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._quote_business_type__qt

    @quote_business_type__qt.setter
    def quote_business_type__qt(self, quote_business_type__qt):
        """Sets the quote_business_type__qt of this CreateSubscriptionRequest.

        The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_business_type__qt: The quote_business_type__qt of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._quote_business_type__qt = quote_business_type__qt

    @property
    def quote_number__qt(self):
        """Gets the quote_number__qt of this CreateSubscriptionRequest.  # noqa: E501

        The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_number__qt of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._quote_number__qt

    @quote_number__qt.setter
    def quote_number__qt(self, quote_number__qt):
        """Sets the quote_number__qt of this CreateSubscriptionRequest.

        The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_number__qt: The quote_number__qt of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._quote_number__qt = quote_number__qt

    @property
    def quote_type__qt(self):
        """Gets the quote_type__qt of this CreateSubscriptionRequest.  # noqa: E501

        The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_type__qt of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._quote_type__qt

    @quote_type__qt.setter
    def quote_type__qt(self, quote_type__qt):
        """Sets the quote_type__qt of this CreateSubscriptionRequest.

        The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_type__qt: The quote_type__qt of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._quote_type__qt = quote_type__qt

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this CreateSubscriptionRequest.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this CreateSubscriptionRequest.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this CreateSubscriptionRequest.  # noqa: E501

        Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this CreateSubscriptionRequest.

        Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def project__ns(self):
        """Gets the project__ns of this CreateSubscriptionRequest.  # noqa: E501

        The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The project__ns of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._project__ns

    @project__ns.setter
    def project__ns(self, project__ns):
        """Sets the project__ns of this CreateSubscriptionRequest.

        The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param project__ns: The project__ns of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._project__ns = project__ns

    @property
    def sales_order__ns(self):
        """Gets the sales_order__ns of this CreateSubscriptionRequest.  # noqa: E501

        The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sales_order__ns of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._sales_order__ns

    @sales_order__ns.setter
    def sales_order__ns(self, sales_order__ns):
        """Sets the sales_order__ns of this CreateSubscriptionRequest.

        The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sales_order__ns: The sales_order__ns of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._sales_order__ns = sales_order__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this CreateSubscriptionRequest.  # noqa: E501

        Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this CreateSubscriptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this CreateSubscriptionRequest.

        Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this CreateSubscriptionRequest.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSubscriptionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSubscriptionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
