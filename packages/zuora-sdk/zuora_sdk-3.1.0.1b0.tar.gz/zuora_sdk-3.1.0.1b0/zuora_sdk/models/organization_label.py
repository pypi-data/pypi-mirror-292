# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrganizationLabel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'organization_id': 'str',
        'organization_name': 'str',
        'cascading_down': 'bool',
        'excluded': 'bool'
    }

    attribute_map = {
        'organization_id': 'organizationId',
        'organization_name': 'organizationName',
        'cascading_down': 'cascadingDown',
        'excluded': 'excluded'
    }

    def __init__(self, organization_id=None, organization_name=None, cascading_down=None, excluded=None):  # noqa: E501
        """OrganizationLabel - a model defined in Swagger"""  # noqa: E501
        self._organization_id = None
        self._organization_name = None
        self._cascading_down = None
        self._excluded = None
        self.discriminator = None
        if organization_id is not None:
            self.organization_id = organization_id
        if organization_name is not None:
            self.organization_name = organization_name
        if cascading_down is not None:
            self.cascading_down = cascading_down
        if excluded is not None:
            self.excluded = excluded

    @property
    def organization_id(self):
        """Gets the organization_id of this OrganizationLabel.  # noqa: E501

        Organization ID   # noqa: E501

        :return: The organization_id of this OrganizationLabel.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this OrganizationLabel.

        Organization ID   # noqa: E501

        :param organization_id: The organization_id of this OrganizationLabel.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def organization_name(self):
        """Gets the organization_name of this OrganizationLabel.  # noqa: E501

        Organization Name   # noqa: E501

        :return: The organization_name of this OrganizationLabel.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this OrganizationLabel.

        Organization Name   # noqa: E501

        :param organization_name: The organization_name of this OrganizationLabel.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def cascading_down(self):
        """Gets the cascading_down of this OrganizationLabel.  # noqa: E501

        Cascading down   # noqa: E501

        :return: The cascading_down of this OrganizationLabel.  # noqa: E501
        :rtype: bool
        """
        return self._cascading_down

    @cascading_down.setter
    def cascading_down(self, cascading_down):
        """Sets the cascading_down of this OrganizationLabel.

        Cascading down   # noqa: E501

        :param cascading_down: The cascading_down of this OrganizationLabel.  # noqa: E501
        :type: bool
        """

        self._cascading_down = cascading_down

    @property
    def excluded(self):
        """Gets the excluded of this OrganizationLabel.  # noqa: E501

        Excluded   # noqa: E501

        :return: The excluded of this OrganizationLabel.  # noqa: E501
        :rtype: bool
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded):
        """Sets the excluded of this OrganizationLabel.

        Excluded   # noqa: E501

        :param excluded: The excluded of this OrganizationLabel.  # noqa: E501
        :type: bool
        """

        self._excluded = excluded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrganizationLabel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationLabel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
