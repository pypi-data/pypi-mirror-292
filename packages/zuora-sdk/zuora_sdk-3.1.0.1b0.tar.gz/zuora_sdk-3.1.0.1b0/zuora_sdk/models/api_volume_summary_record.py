# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApiVolumeSummaryRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api': 'str',
        'error': 'int',
        'http_method': 'str',
        'success': 'int',
        'total': 'int'
    }

    attribute_map = {
        'api': 'api',
        'error': 'error',
        'http_method': 'httpMethod',
        'success': 'success',
        'total': 'total'
    }

    def __init__(self, api=None, error=None, http_method=None, success=None, total=None):  # noqa: E501
        """ApiVolumeSummaryRecord - a model defined in Swagger"""  # noqa: E501
        self._api = None
        self._error = None
        self._http_method = None
        self._success = None
        self._total = None
        self.discriminator = None
        if api is not None:
            self.api = api
        if error is not None:
            self.error = error
        if http_method is not None:
            self.http_method = http_method
        if success is not None:
            self.success = success
        if total is not None:
            self.total = total

    @property
    def api(self):
        """Gets the api of this ApiVolumeSummaryRecord.  # noqa: E501

        The API path name.   # noqa: E501

        :return: The api of this ApiVolumeSummaryRecord.  # noqa: E501
        :rtype: str
        """
        return self._api

    @api.setter
    def api(self, api):
        """Sets the api of this ApiVolumeSummaryRecord.

        The API path name.   # noqa: E501

        :param api: The api of this ApiVolumeSummaryRecord.  # noqa: E501
        :type: str
        """

        self._api = api

    @property
    def error(self):
        """Gets the error of this ApiVolumeSummaryRecord.  # noqa: E501

        The count of failed API requests of above `api` and `httpMethod`.   # noqa: E501

        :return: The error of this ApiVolumeSummaryRecord.  # noqa: E501
        :rtype: int
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ApiVolumeSummaryRecord.

        The count of failed API requests of above `api` and `httpMethod`.   # noqa: E501

        :param error: The error of this ApiVolumeSummaryRecord.  # noqa: E501
        :type: int
        """

        self._error = error

    @property
    def http_method(self):
        """Gets the http_method of this ApiVolumeSummaryRecord.  # noqa: E501

        The http method.   # noqa: E501

        :return: The http_method of this ApiVolumeSummaryRecord.  # noqa: E501
        :rtype: str
        """
        return self._http_method

    @http_method.setter
    def http_method(self, http_method):
        """Sets the http_method of this ApiVolumeSummaryRecord.

        The http method.   # noqa: E501

        :param http_method: The http_method of this ApiVolumeSummaryRecord.  # noqa: E501
        :type: str
        """

        self._http_method = http_method

    @property
    def success(self):
        """Gets the success of this ApiVolumeSummaryRecord.  # noqa: E501

        The count of successful API requests of above `api` and `httpMethod`.   # noqa: E501

        :return: The success of this ApiVolumeSummaryRecord.  # noqa: E501
        :rtype: int
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ApiVolumeSummaryRecord.

        The count of successful API requests of above `api` and `httpMethod`.   # noqa: E501

        :param success: The success of this ApiVolumeSummaryRecord.  # noqa: E501
        :type: int
        """

        self._success = success

    @property
    def total(self):
        """Gets the total of this ApiVolumeSummaryRecord.  # noqa: E501

        The count of total API requests of above `api` and `httpMethod`.  # noqa: E501

        :return: The total of this ApiVolumeSummaryRecord.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ApiVolumeSummaryRecord.

        The count of total API requests of above `api` and `httpMethod`.  # noqa: E501

        :param total: The total of this ApiVolumeSummaryRecord.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApiVolumeSummaryRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiVolumeSummaryRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
