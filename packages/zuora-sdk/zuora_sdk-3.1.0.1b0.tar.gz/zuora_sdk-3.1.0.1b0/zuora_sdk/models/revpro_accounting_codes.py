# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RevproAccountingCodes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adjustment_liability_account': 'str',
        'adjustment_revenue_account': 'str',
        'contract_asset_account': 'str',
        'contract_liability_account': 'str',
        'product_rate_plan_charge_id': 'str',
        'recognized_revenue_account': 'str',
        'unbilled_receivables_account': 'str'
    }

    attribute_map = {
        'adjustment_liability_account': 'adjustmentLiabilityAccount',
        'adjustment_revenue_account': 'adjustmentRevenueAccount',
        'contract_asset_account': 'contractAssetAccount',
        'contract_liability_account': 'contractLiabilityAccount',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'recognized_revenue_account': 'recognizedRevenueAccount',
        'unbilled_receivables_account': 'unbilledReceivablesAccount'
    }

    def __init__(self, adjustment_liability_account=None, adjustment_revenue_account=None, contract_asset_account=None, contract_liability_account=None, product_rate_plan_charge_id=None, recognized_revenue_account=None, unbilled_receivables_account=None):  # noqa: E501
        """RevproAccountingCodes - a model defined in Swagger"""  # noqa: E501
        self._adjustment_liability_account = None
        self._adjustment_revenue_account = None
        self._contract_asset_account = None
        self._contract_liability_account = None
        self._product_rate_plan_charge_id = None
        self._recognized_revenue_account = None
        self._unbilled_receivables_account = None
        self.discriminator = None
        self.adjustment_liability_account = adjustment_liability_account
        self.adjustment_revenue_account = adjustment_revenue_account
        self.contract_asset_account = contract_asset_account
        self.contract_liability_account = contract_liability_account
        self.product_rate_plan_charge_id = product_rate_plan_charge_id
        self.recognized_revenue_account = recognized_revenue_account
        self.unbilled_receivables_account = unbilled_receivables_account

    @property
    def adjustment_liability_account(self):
        """Gets the adjustment_liability_account of this RevproAccountingCodes.  # noqa: E501

        The name of the account where the Account Type is \"Adjustment Liability\".  # noqa: E501

        :return: The adjustment_liability_account of this RevproAccountingCodes.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_liability_account

    @adjustment_liability_account.setter
    def adjustment_liability_account(self, adjustment_liability_account):
        """Sets the adjustment_liability_account of this RevproAccountingCodes.

        The name of the account where the Account Type is \"Adjustment Liability\".  # noqa: E501

        :param adjustment_liability_account: The adjustment_liability_account of this RevproAccountingCodes.  # noqa: E501
        :type: str
        """
        if adjustment_liability_account is None:
            raise ValueError("Invalid value for `adjustment_liability_account`, must not be `None`")  # noqa: E501

        self._adjustment_liability_account = adjustment_liability_account

    @property
    def adjustment_revenue_account(self):
        """Gets the adjustment_revenue_account of this RevproAccountingCodes.  # noqa: E501

        The name of the account where the Account Type is \"Adjustment Revenue\".  # noqa: E501

        :return: The adjustment_revenue_account of this RevproAccountingCodes.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_revenue_account

    @adjustment_revenue_account.setter
    def adjustment_revenue_account(self, adjustment_revenue_account):
        """Sets the adjustment_revenue_account of this RevproAccountingCodes.

        The name of the account where the Account Type is \"Adjustment Revenue\".  # noqa: E501

        :param adjustment_revenue_account: The adjustment_revenue_account of this RevproAccountingCodes.  # noqa: E501
        :type: str
        """
        if adjustment_revenue_account is None:
            raise ValueError("Invalid value for `adjustment_revenue_account`, must not be `None`")  # noqa: E501

        self._adjustment_revenue_account = adjustment_revenue_account

    @property
    def contract_asset_account(self):
        """Gets the contract_asset_account of this RevproAccountingCodes.  # noqa: E501

        The name of the account where the Account Type is \"Contract Asset\".  # noqa: E501

        :return: The contract_asset_account of this RevproAccountingCodes.  # noqa: E501
        :rtype: str
        """
        return self._contract_asset_account

    @contract_asset_account.setter
    def contract_asset_account(self, contract_asset_account):
        """Sets the contract_asset_account of this RevproAccountingCodes.

        The name of the account where the Account Type is \"Contract Asset\".  # noqa: E501

        :param contract_asset_account: The contract_asset_account of this RevproAccountingCodes.  # noqa: E501
        :type: str
        """
        if contract_asset_account is None:
            raise ValueError("Invalid value for `contract_asset_account`, must not be `None`")  # noqa: E501

        self._contract_asset_account = contract_asset_account

    @property
    def contract_liability_account(self):
        """Gets the contract_liability_account of this RevproAccountingCodes.  # noqa: E501

        The name of the account where the Account Type is \"Contract Liability\".  # noqa: E501

        :return: The contract_liability_account of this RevproAccountingCodes.  # noqa: E501
        :rtype: str
        """
        return self._contract_liability_account

    @contract_liability_account.setter
    def contract_liability_account(self, contract_liability_account):
        """Sets the contract_liability_account of this RevproAccountingCodes.

        The name of the account where the Account Type is \"Contract Liability\".  # noqa: E501

        :param contract_liability_account: The contract_liability_account of this RevproAccountingCodes.  # noqa: E501
        :type: str
        """
        if contract_liability_account is None:
            raise ValueError("Invalid value for `contract_liability_account`, must not be `None`")  # noqa: E501

        self._contract_liability_account = contract_liability_account

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this RevproAccountingCodes.  # noqa: E501

        The ID of your product rate plan charge.  # noqa: E501

        :return: The product_rate_plan_charge_id of this RevproAccountingCodes.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this RevproAccountingCodes.

        The ID of your product rate plan charge.  # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this RevproAccountingCodes.  # noqa: E501
        :type: str
        """
        if product_rate_plan_charge_id is None:
            raise ValueError("Invalid value for `product_rate_plan_charge_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def recognized_revenue_account(self):
        """Gets the recognized_revenue_account of this RevproAccountingCodes.  # noqa: E501

        The name of the account where the Account Type is \"Recognized Revenue\".  # noqa: E501

        :return: The recognized_revenue_account of this RevproAccountingCodes.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_account

    @recognized_revenue_account.setter
    def recognized_revenue_account(self, recognized_revenue_account):
        """Sets the recognized_revenue_account of this RevproAccountingCodes.

        The name of the account where the Account Type is \"Recognized Revenue\".  # noqa: E501

        :param recognized_revenue_account: The recognized_revenue_account of this RevproAccountingCodes.  # noqa: E501
        :type: str
        """
        if recognized_revenue_account is None:
            raise ValueError("Invalid value for `recognized_revenue_account`, must not be `None`")  # noqa: E501

        self._recognized_revenue_account = recognized_revenue_account

    @property
    def unbilled_receivables_account(self):
        """Gets the unbilled_receivables_account of this RevproAccountingCodes.  # noqa: E501

        The name of the account where the Account Type is \"Unbilled Receivables\".  # noqa: E501

        :return: The unbilled_receivables_account of this RevproAccountingCodes.  # noqa: E501
        :rtype: str
        """
        return self._unbilled_receivables_account

    @unbilled_receivables_account.setter
    def unbilled_receivables_account(self, unbilled_receivables_account):
        """Sets the unbilled_receivables_account of this RevproAccountingCodes.

        The name of the account where the Account Type is \"Unbilled Receivables\".  # noqa: E501

        :param unbilled_receivables_account: The unbilled_receivables_account of this RevproAccountingCodes.  # noqa: E501
        :type: str
        """
        if unbilled_receivables_account is None:
            raise ValueError("Invalid value for `unbilled_receivables_account`, must not be `None`")  # noqa: E501

        self._unbilled_receivables_account = unbilled_receivables_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RevproAccountingCodes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RevproAccountingCodes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
