# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderCreateAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'additional_email_addresses': 'str',
        'allow_invoice_edit': 'bool',
        'auto_pay': 'bool',
        'batch': 'str',
        'bill_cycle_day': 'int',
        'bill_to_contact': 'OrderCreateAccountContact',
        'communication_profile_id': 'str',
        'credit_card': 'CreditCard',
        'credit_memo_template_id': 'str',
        'crm_id': 'str',
        'currency': 'str',
        'custom_fields': 'dict(str, object)',
        'customer_service_rep_name': 'str',
        'debit_memo_template_id': 'str',
        'hpm_credit_card_payment_method_id': 'str',
        'invoice_delivery_prefs_email': 'bool',
        'invoice_delivery_prefs_print': 'bool',
        'invoice_template_id': 'str',
        'name': 'str',
        'notes': 'str',
        'parent_id': 'str',
        'partner_account': 'bool',
        'payment_gateway': 'str',
        'payment_method': 'CreateAccountPaymentMethod',
        'payment_term': 'str',
        'purchase_order_number': 'str',
        'sales_rep': 'str',
        'sequence_set_id': 'str',
        'sold_to_contact': 'OrderCreateAccountContact',
        'sold_to_same_as_bill_to': 'bool',
        'tax_info': 'TaxInfo'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'additional_email_addresses': 'additionalEmailAddresses',
        'allow_invoice_edit': 'allowInvoiceEdit',
        'auto_pay': 'autoPay',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'bill_to_contact': 'billToContact',
        'communication_profile_id': 'communicationProfileId',
        'credit_card': 'creditCard',
        'credit_memo_template_id': 'creditMemoTemplateId',
        'crm_id': 'crmId',
        'currency': 'currency',
        'custom_fields': 'customFields',
        'customer_service_rep_name': 'customerServiceRepName',
        'debit_memo_template_id': 'debitMemoTemplateId',
        'hpm_credit_card_payment_method_id': 'hpmCreditCardPaymentMethodId',
        'invoice_delivery_prefs_email': 'invoiceDeliveryPrefsEmail',
        'invoice_delivery_prefs_print': 'invoiceDeliveryPrefsPrint',
        'invoice_template_id': 'invoiceTemplateId',
        'name': 'name',
        'notes': 'notes',
        'parent_id': 'parentId',
        'partner_account': 'partnerAccount',
        'payment_gateway': 'paymentGateway',
        'payment_method': 'paymentMethod',
        'payment_term': 'paymentTerm',
        'purchase_order_number': 'purchaseOrderNumber',
        'sales_rep': 'salesRep',
        'sequence_set_id': 'sequenceSetId',
        'sold_to_contact': 'soldToContact',
        'sold_to_same_as_bill_to': 'soldToSameAsBillTo',
        'tax_info': 'taxInfo'
    }

    def __init__(self, account_number=None, additional_email_addresses=None, allow_invoice_edit=None, auto_pay=None, batch=None, bill_cycle_day=None, bill_to_contact=None, communication_profile_id=None, credit_card=None, credit_memo_template_id=None, crm_id=None, currency=None, custom_fields=None, customer_service_rep_name=None, debit_memo_template_id=None, hpm_credit_card_payment_method_id=None, invoice_delivery_prefs_email=None, invoice_delivery_prefs_print=None, invoice_template_id=None, name=None, notes=None, parent_id=None, partner_account=None, payment_gateway=None, payment_method=None, payment_term=None, purchase_order_number=None, sales_rep=None, sequence_set_id=None, sold_to_contact=None, sold_to_same_as_bill_to=None, tax_info=None):  # noqa: E501
        """OrderCreateAccount - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._additional_email_addresses = None
        self._allow_invoice_edit = None
        self._auto_pay = None
        self._batch = None
        self._bill_cycle_day = None
        self._bill_to_contact = None
        self._communication_profile_id = None
        self._credit_card = None
        self._credit_memo_template_id = None
        self._crm_id = None
        self._currency = None
        self._custom_fields = None
        self._customer_service_rep_name = None
        self._debit_memo_template_id = None
        self._hpm_credit_card_payment_method_id = None
        self._invoice_delivery_prefs_email = None
        self._invoice_delivery_prefs_print = None
        self._invoice_template_id = None
        self._name = None
        self._notes = None
        self._parent_id = None
        self._partner_account = None
        self._payment_gateway = None
        self._payment_method = None
        self._payment_term = None
        self._purchase_order_number = None
        self._sales_rep = None
        self._sequence_set_id = None
        self._sold_to_contact = None
        self._sold_to_same_as_bill_to = None
        self._tax_info = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if additional_email_addresses is not None:
            self.additional_email_addresses = additional_email_addresses
        if allow_invoice_edit is not None:
            self.allow_invoice_edit = allow_invoice_edit
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if batch is not None:
            self.batch = batch
        self.bill_cycle_day = bill_cycle_day
        self.bill_to_contact = bill_to_contact
        if communication_profile_id is not None:
            self.communication_profile_id = communication_profile_id
        if credit_card is not None:
            self.credit_card = credit_card
        if credit_memo_template_id is not None:
            self.credit_memo_template_id = credit_memo_template_id
        if crm_id is not None:
            self.crm_id = crm_id
        self.currency = currency
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if customer_service_rep_name is not None:
            self.customer_service_rep_name = customer_service_rep_name
        if debit_memo_template_id is not None:
            self.debit_memo_template_id = debit_memo_template_id
        if hpm_credit_card_payment_method_id is not None:
            self.hpm_credit_card_payment_method_id = hpm_credit_card_payment_method_id
        if invoice_delivery_prefs_email is not None:
            self.invoice_delivery_prefs_email = invoice_delivery_prefs_email
        if invoice_delivery_prefs_print is not None:
            self.invoice_delivery_prefs_print = invoice_delivery_prefs_print
        if invoice_template_id is not None:
            self.invoice_template_id = invoice_template_id
        self.name = name
        if notes is not None:
            self.notes = notes
        if parent_id is not None:
            self.parent_id = parent_id
        if partner_account is not None:
            self.partner_account = partner_account
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        if payment_method is not None:
            self.payment_method = payment_method
        if payment_term is not None:
            self.payment_term = payment_term
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if sales_rep is not None:
            self.sales_rep = sales_rep
        if sequence_set_id is not None:
            self.sequence_set_id = sequence_set_id
        if sold_to_contact is not None:
            self.sold_to_contact = sold_to_contact
        if sold_to_same_as_bill_to is not None:
            self.sold_to_same_as_bill_to = sold_to_same_as_bill_to
        if tax_info is not None:
            self.tax_info = tax_info

    @property
    def account_number(self):
        """Gets the account_number of this OrderCreateAccount.  # noqa: E501


        :return: The account_number of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this OrderCreateAccount.


        :param account_number: The account_number of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def additional_email_addresses(self):
        """Gets the additional_email_addresses of this OrderCreateAccount.  # noqa: E501

        List of additional email addresses to receive emailed invoices. Values should be a comma-separated list of email addresses.   # noqa: E501

        :return: The additional_email_addresses of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._additional_email_addresses

    @additional_email_addresses.setter
    def additional_email_addresses(self, additional_email_addresses):
        """Sets the additional_email_addresses of this OrderCreateAccount.

        List of additional email addresses to receive emailed invoices. Values should be a comma-separated list of email addresses.   # noqa: E501

        :param additional_email_addresses: The additional_email_addresses of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._additional_email_addresses = additional_email_addresses

    @property
    def allow_invoice_edit(self):
        """Gets the allow_invoice_edit of this OrderCreateAccount.  # noqa: E501

        Indicates if associated invoices can be edited. Values are:   * `true` * `false` (default)   # noqa: E501

        :return: The allow_invoice_edit of this OrderCreateAccount.  # noqa: E501
        :rtype: bool
        """
        return self._allow_invoice_edit

    @allow_invoice_edit.setter
    def allow_invoice_edit(self, allow_invoice_edit):
        """Sets the allow_invoice_edit of this OrderCreateAccount.

        Indicates if associated invoices can be edited. Values are:   * `true` * `false` (default)   # noqa: E501

        :param allow_invoice_edit: The allow_invoice_edit of this OrderCreateAccount.  # noqa: E501
        :type: bool
        """

        self._allow_invoice_edit = allow_invoice_edit

    @property
    def auto_pay(self):
        """Gets the auto_pay of this OrderCreateAccount.  # noqa: E501

        Specifies whether future payments are to be automatically billed when they are due. Possible values are `true`, `false`.  # noqa: E501

        :return: The auto_pay of this OrderCreateAccount.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this OrderCreateAccount.

        Specifies whether future payments are to be automatically billed when they are due. Possible values are `true`, `false`.  # noqa: E501

        :param auto_pay: The auto_pay of this OrderCreateAccount.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def batch(self):
        """Gets the batch of this OrderCreateAccount.  # noqa: E501


        :return: The batch of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this OrderCreateAccount.


        :param batch: The batch of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this OrderCreateAccount.  # noqa: E501

        Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".  # noqa: E501

        :return: The bill_cycle_day of this OrderCreateAccount.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this OrderCreateAccount.

        Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".  # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this OrderCreateAccount.  # noqa: E501
        :type: int
        """
        if bill_cycle_day is None:
            raise ValueError("Invalid value for `bill_cycle_day`, must not be `None`")  # noqa: E501

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_to_contact(self):
        """Gets the bill_to_contact of this OrderCreateAccount.  # noqa: E501


        :return: The bill_to_contact of this OrderCreateAccount.  # noqa: E501
        :rtype: OrderCreateAccountContact
        """
        return self._bill_to_contact

    @bill_to_contact.setter
    def bill_to_contact(self, bill_to_contact):
        """Sets the bill_to_contact of this OrderCreateAccount.


        :param bill_to_contact: The bill_to_contact of this OrderCreateAccount.  # noqa: E501
        :type: OrderCreateAccountContact
        """
        if bill_to_contact is None:
            raise ValueError("Invalid value for `bill_to_contact`, must not be `None`")  # noqa: E501

        self._bill_to_contact = bill_to_contact

    @property
    def communication_profile_id(self):
        """Gets the communication_profile_id of this OrderCreateAccount.  # noqa: E501


        :return: The communication_profile_id of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._communication_profile_id

    @communication_profile_id.setter
    def communication_profile_id(self, communication_profile_id):
        """Sets the communication_profile_id of this OrderCreateAccount.


        :param communication_profile_id: The communication_profile_id of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._communication_profile_id = communication_profile_id

    @property
    def credit_card(self):
        """Gets the credit_card of this OrderCreateAccount.  # noqa: E501


        :return: The credit_card of this OrderCreateAccount.  # noqa: E501
        :rtype: CreditCard
        """
        return self._credit_card

    @credit_card.setter
    def credit_card(self, credit_card):
        """Sets the credit_card of this OrderCreateAccount.


        :param credit_card: The credit_card of this OrderCreateAccount.  # noqa: E501
        :type: CreditCard
        """

        self._credit_card = credit_card

    @property
    def credit_memo_template_id(self):
        """Gets the credit_memo_template_id of this OrderCreateAccount.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :return: The credit_memo_template_id of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_template_id

    @credit_memo_template_id.setter
    def credit_memo_template_id(self, credit_memo_template_id):
        """Sets the credit_memo_template_id of this OrderCreateAccount.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :param credit_memo_template_id: The credit_memo_template_id of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._credit_memo_template_id = credit_memo_template_id

    @property
    def crm_id(self):
        """Gets the crm_id of this OrderCreateAccount.  # noqa: E501


        :return: The crm_id of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this OrderCreateAccount.


        :param crm_id: The crm_id of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def currency(self):
        """Gets the currency of this OrderCreateAccount.  # noqa: E501

        3 uppercase character currency code.  For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :return: The currency of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this OrderCreateAccount.

        3 uppercase character currency code.  For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :param currency: The currency of this OrderCreateAccount.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderCreateAccount.  # noqa: E501


        :return: The custom_fields of this OrderCreateAccount.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderCreateAccount.


        :param custom_fields: The custom_fields of this OrderCreateAccount.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def customer_service_rep_name(self):
        """Gets the customer_service_rep_name of this OrderCreateAccount.  # noqa: E501

        Name of the account's customer service representative, if applicable.   # noqa: E501

        :return: The customer_service_rep_name of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._customer_service_rep_name

    @customer_service_rep_name.setter
    def customer_service_rep_name(self, customer_service_rep_name):
        """Sets the customer_service_rep_name of this OrderCreateAccount.

        Name of the account's customer service representative, if applicable.   # noqa: E501

        :param customer_service_rep_name: The customer_service_rep_name of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._customer_service_rep_name = customer_service_rep_name

    @property
    def debit_memo_template_id(self):
        """Gets the debit_memo_template_id of this OrderCreateAccount.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :return: The debit_memo_template_id of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._debit_memo_template_id

    @debit_memo_template_id.setter
    def debit_memo_template_id(self, debit_memo_template_id):
        """Sets the debit_memo_template_id of this OrderCreateAccount.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :param debit_memo_template_id: The debit_memo_template_id of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._debit_memo_template_id = debit_memo_template_id

    @property
    def hpm_credit_card_payment_method_id(self):
        """Gets the hpm_credit_card_payment_method_id of this OrderCreateAccount.  # noqa: E501

        The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.  If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field, but not both.  For the Credit Card Reference Transaction payment method, you can specify the payment method ID in this field or use the `paymentMethod` field to create a CC Reference Transaction payment method for an account.   # noqa: E501

        :return: The hpm_credit_card_payment_method_id of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._hpm_credit_card_payment_method_id

    @hpm_credit_card_payment_method_id.setter
    def hpm_credit_card_payment_method_id(self, hpm_credit_card_payment_method_id):
        """Sets the hpm_credit_card_payment_method_id of this OrderCreateAccount.

        The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.  If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field, but not both.  For the Credit Card Reference Transaction payment method, you can specify the payment method ID in this field or use the `paymentMethod` field to create a CC Reference Transaction payment method for an account.   # noqa: E501

        :param hpm_credit_card_payment_method_id: The hpm_credit_card_payment_method_id of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._hpm_credit_card_payment_method_id = hpm_credit_card_payment_method_id

    @property
    def invoice_delivery_prefs_email(self):
        """Gets the invoice_delivery_prefs_email of this OrderCreateAccount.  # noqa: E501

        Specifies whether to turn on the invoice delivery method 'Email' for the new account.  Values are:   * `true` (default). Turn on the invoice delivery method 'Email' for the new account. * `false`. Turn off the invoice delivery method 'Email' for the new account.   # noqa: E501

        :return: The invoice_delivery_prefs_email of this OrderCreateAccount.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_email

    @invoice_delivery_prefs_email.setter
    def invoice_delivery_prefs_email(self, invoice_delivery_prefs_email):
        """Sets the invoice_delivery_prefs_email of this OrderCreateAccount.

        Specifies whether to turn on the invoice delivery method 'Email' for the new account.  Values are:   * `true` (default). Turn on the invoice delivery method 'Email' for the new account. * `false`. Turn off the invoice delivery method 'Email' for the new account.   # noqa: E501

        :param invoice_delivery_prefs_email: The invoice_delivery_prefs_email of this OrderCreateAccount.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_email = invoice_delivery_prefs_email

    @property
    def invoice_delivery_prefs_print(self):
        """Gets the invoice_delivery_prefs_print of this OrderCreateAccount.  # noqa: E501

        Specifies whether to turn on the invoice delivery method 'Print' for the new account. Values are:   * `true`. Turn on the invoice delivery method 'Print' for the new account. * `false` (default). Turn off the invoice delivery method 'Print' for the new account.   # noqa: E501

        :return: The invoice_delivery_prefs_print of this OrderCreateAccount.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_print

    @invoice_delivery_prefs_print.setter
    def invoice_delivery_prefs_print(self, invoice_delivery_prefs_print):
        """Sets the invoice_delivery_prefs_print of this OrderCreateAccount.

        Specifies whether to turn on the invoice delivery method 'Print' for the new account. Values are:   * `true`. Turn on the invoice delivery method 'Print' for the new account. * `false` (default). Turn off the invoice delivery method 'Print' for the new account.   # noqa: E501

        :param invoice_delivery_prefs_print: The invoice_delivery_prefs_print of this OrderCreateAccount.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_print = invoice_delivery_prefs_print

    @property
    def invoice_template_id(self):
        """Gets the invoice_template_id of this OrderCreateAccount.  # noqa: E501


        :return: The invoice_template_id of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._invoice_template_id

    @invoice_template_id.setter
    def invoice_template_id(self, invoice_template_id):
        """Sets the invoice_template_id of this OrderCreateAccount.


        :param invoice_template_id: The invoice_template_id of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._invoice_template_id = invoice_template_id

    @property
    def name(self):
        """Gets the name of this OrderCreateAccount.  # noqa: E501


        :return: The name of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderCreateAccount.


        :param name: The name of this OrderCreateAccount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this OrderCreateAccount.  # noqa: E501


        :return: The notes of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this OrderCreateAccount.


        :param notes: The notes of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def parent_id(self):
        """Gets the parent_id of this OrderCreateAccount.  # noqa: E501

        Identifier of the parent customer account for this Account object. Use this field if you have <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy\" target=\"_blank\">Customer Hierarchy</a> enabled.  # noqa: E501

        :return: The parent_id of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this OrderCreateAccount.

        Identifier of the parent customer account for this Account object. Use this field if you have <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy\" target=\"_blank\">Customer Hierarchy</a> enabled.  # noqa: E501

        :param parent_id: The parent_id of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def partner_account(self):
        """Gets the partner_account of this OrderCreateAccount.  # noqa: E501

        Whether the customer account is a partner, distributor, or reseller.  You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   # noqa: E501

        :return: The partner_account of this OrderCreateAccount.  # noqa: E501
        :rtype: bool
        """
        return self._partner_account

    @partner_account.setter
    def partner_account(self, partner_account):
        """Sets the partner_account of this OrderCreateAccount.

        Whether the customer account is a partner, distributor, or reseller.  You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   # noqa: E501

        :param partner_account: The partner_account of this OrderCreateAccount.  # noqa: E501
        :type: bool
        """

        self._partner_account = partner_account

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this OrderCreateAccount.  # noqa: E501


        :return: The payment_gateway of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this OrderCreateAccount.


        :param payment_gateway: The payment_gateway of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._payment_gateway = payment_gateway

    @property
    def payment_method(self):
        """Gets the payment_method of this OrderCreateAccount.  # noqa: E501


        :return: The payment_method of this OrderCreateAccount.  # noqa: E501
        :rtype: CreateAccountPaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this OrderCreateAccount.


        :param payment_method: The payment_method of this OrderCreateAccount.  # noqa: E501
        :type: CreateAccountPaymentMethod
        """

        self._payment_method = payment_method

    @property
    def payment_term(self):
        """Gets the payment_term of this OrderCreateAccount.  # noqa: E501

        **Note**: If you want to specify a payment term when creating a new account, you must set a value in this field. If you do not set a value in this field, Zuora will use `Due Upon Receipt` as the value instead of the default value set in **Billing Settings** > **Payment Terms** from Zuora UI.   # noqa: E501

        :return: The payment_term of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this OrderCreateAccount.

        **Note**: If you want to specify a payment term when creating a new account, you must set a value in this field. If you do not set a value in this field, Zuora will use `Due Upon Receipt` as the value instead of the default value set in **Billing Settings** > **Payment Terms** from Zuora UI.   # noqa: E501

        :param payment_term: The payment_term of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this OrderCreateAccount.  # noqa: E501

        The number of the purchase order associated with this account. Purchase order information generally comes from customers.   # noqa: E501

        :return: The purchase_order_number of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this OrderCreateAccount.

        The number of the purchase order associated with this account. Purchase order information generally comes from customers.   # noqa: E501

        :param purchase_order_number: The purchase_order_number of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def sales_rep(self):
        """Gets the sales_rep of this OrderCreateAccount.  # noqa: E501

        The name of the sales representative associated with this account, if applicable.   # noqa: E501

        :return: The sales_rep of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._sales_rep

    @sales_rep.setter
    def sales_rep(self, sales_rep):
        """Sets the sales_rep of this OrderCreateAccount.

        The name of the sales representative associated with this account, if applicable.   # noqa: E501

        :param sales_rep: The sales_rep of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._sales_rep = sales_rep

    @property
    def sequence_set_id(self):
        """Gets the sequence_set_id of this OrderCreateAccount.  # noqa: E501

        The ID of the sequence set to assign to the customer account.   The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.   # noqa: E501

        :return: The sequence_set_id of this OrderCreateAccount.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_id

    @sequence_set_id.setter
    def sequence_set_id(self, sequence_set_id):
        """Sets the sequence_set_id of this OrderCreateAccount.

        The ID of the sequence set to assign to the customer account.   The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.   # noqa: E501

        :param sequence_set_id: The sequence_set_id of this OrderCreateAccount.  # noqa: E501
        :type: str
        """

        self._sequence_set_id = sequence_set_id

    @property
    def sold_to_contact(self):
        """Gets the sold_to_contact of this OrderCreateAccount.  # noqa: E501


        :return: The sold_to_contact of this OrderCreateAccount.  # noqa: E501
        :rtype: OrderCreateAccountContact
        """
        return self._sold_to_contact

    @sold_to_contact.setter
    def sold_to_contact(self, sold_to_contact):
        """Sets the sold_to_contact of this OrderCreateAccount.


        :param sold_to_contact: The sold_to_contact of this OrderCreateAccount.  # noqa: E501
        :type: OrderCreateAccountContact
        """

        self._sold_to_contact = sold_to_contact

    @property
    def sold_to_same_as_bill_to(self):
        """Gets the sold_to_same_as_bill_to of this OrderCreateAccount.  # noqa: E501

        Whether the sold-to contact and bill-to contact are the same entity.   The created account has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:  - This field is set to `true`.  - A bill-to contact is specified. - No sold-to contact is specified.   # noqa: E501

        :return: The sold_to_same_as_bill_to of this OrderCreateAccount.  # noqa: E501
        :rtype: bool
        """
        return self._sold_to_same_as_bill_to

    @sold_to_same_as_bill_to.setter
    def sold_to_same_as_bill_to(self, sold_to_same_as_bill_to):
        """Sets the sold_to_same_as_bill_to of this OrderCreateAccount.

        Whether the sold-to contact and bill-to contact are the same entity.   The created account has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:  - This field is set to `true`.  - A bill-to contact is specified. - No sold-to contact is specified.   # noqa: E501

        :param sold_to_same_as_bill_to: The sold_to_same_as_bill_to of this OrderCreateAccount.  # noqa: E501
        :type: bool
        """

        self._sold_to_same_as_bill_to = sold_to_same_as_bill_to

    @property
    def tax_info(self):
        """Gets the tax_info of this OrderCreateAccount.  # noqa: E501


        :return: The tax_info of this OrderCreateAccount.  # noqa: E501
        :rtype: TaxInfo
        """
        return self._tax_info

    @tax_info.setter
    def tax_info(self, tax_info):
        """Sets the tax_info of this OrderCreateAccount.


        :param tax_info: The tax_info of this OrderCreateAccount.  # noqa: E501
        :type: TaxInfo
        """

        self._tax_info = tax_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderCreateAccount, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderCreateAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
