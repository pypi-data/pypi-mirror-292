# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetWorkflowResponseTasks(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error': 'int',
        'pending': 'int',
        'processing': 'int',
        'queued': 'int',
        'stopped': 'int',
        'success': 'int',
        'total': 'int'
    }

    attribute_map = {
        'error': 'error',
        'pending': 'pending',
        'processing': 'processing',
        'queued': 'queued',
        'stopped': 'stopped',
        'success': 'success',
        'total': 'total'
    }

    def __init__(self, error=None, pending=None, processing=None, queued=None, stopped=None, success=None, total=None):  # noqa: E501
        """GetWorkflowResponseTasks - a model defined in Swagger"""  # noqa: E501
        self._error = None
        self._pending = None
        self._processing = None
        self._queued = None
        self._stopped = None
        self._success = None
        self._total = None
        self.discriminator = None
        if error is not None:
            self.error = error
        if pending is not None:
            self.pending = pending
        if processing is not None:
            self.processing = processing
        if queued is not None:
            self.queued = queued
        if stopped is not None:
            self.stopped = stopped
        if success is not None:
            self.success = success
        if total is not None:
            self.total = total

    @property
    def error(self):
        """Gets the error of this GetWorkflowResponseTasks.  # noqa: E501

        The number of tasks in **Error** state.   # noqa: E501

        :return: The error of this GetWorkflowResponseTasks.  # noqa: E501
        :rtype: int
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this GetWorkflowResponseTasks.

        The number of tasks in **Error** state.   # noqa: E501

        :param error: The error of this GetWorkflowResponseTasks.  # noqa: E501
        :type: int
        """

        self._error = error

    @property
    def pending(self):
        """Gets the pending of this GetWorkflowResponseTasks.  # noqa: E501

        The number of tasks in **Pending** state.   # noqa: E501

        :return: The pending of this GetWorkflowResponseTasks.  # noqa: E501
        :rtype: int
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this GetWorkflowResponseTasks.

        The number of tasks in **Pending** state.   # noqa: E501

        :param pending: The pending of this GetWorkflowResponseTasks.  # noqa: E501
        :type: int
        """

        self._pending = pending

    @property
    def processing(self):
        """Gets the processing of this GetWorkflowResponseTasks.  # noqa: E501

        The number of tasks in **Processing** state.   # noqa: E501

        :return: The processing of this GetWorkflowResponseTasks.  # noqa: E501
        :rtype: int
        """
        return self._processing

    @processing.setter
    def processing(self, processing):
        """Sets the processing of this GetWorkflowResponseTasks.

        The number of tasks in **Processing** state.   # noqa: E501

        :param processing: The processing of this GetWorkflowResponseTasks.  # noqa: E501
        :type: int
        """

        self._processing = processing

    @property
    def queued(self):
        """Gets the queued of this GetWorkflowResponseTasks.  # noqa: E501

        The number of tasks in **Queued** state.   # noqa: E501

        :return: The queued of this GetWorkflowResponseTasks.  # noqa: E501
        :rtype: int
        """
        return self._queued

    @queued.setter
    def queued(self, queued):
        """Sets the queued of this GetWorkflowResponseTasks.

        The number of tasks in **Queued** state.   # noqa: E501

        :param queued: The queued of this GetWorkflowResponseTasks.  # noqa: E501
        :type: int
        """

        self._queued = queued

    @property
    def stopped(self):
        """Gets the stopped of this GetWorkflowResponseTasks.  # noqa: E501

        The number of tasks in **Stopped** state.   # noqa: E501

        :return: The stopped of this GetWorkflowResponseTasks.  # noqa: E501
        :rtype: int
        """
        return self._stopped

    @stopped.setter
    def stopped(self, stopped):
        """Sets the stopped of this GetWorkflowResponseTasks.

        The number of tasks in **Stopped** state.   # noqa: E501

        :param stopped: The stopped of this GetWorkflowResponseTasks.  # noqa: E501
        :type: int
        """

        self._stopped = stopped

    @property
    def success(self):
        """Gets the success of this GetWorkflowResponseTasks.  # noqa: E501

        The number of tasks in **Success** state.   # noqa: E501

        :return: The success of this GetWorkflowResponseTasks.  # noqa: E501
        :rtype: int
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this GetWorkflowResponseTasks.

        The number of tasks in **Success** state.   # noqa: E501

        :param success: The success of this GetWorkflowResponseTasks.  # noqa: E501
        :type: int
        """

        self._success = success

    @property
    def total(self):
        """Gets the total of this GetWorkflowResponseTasks.  # noqa: E501

        The total number of tasks.   # noqa: E501

        :return: The total of this GetWorkflowResponseTasks.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetWorkflowResponseTasks.

        The total number of tasks.   # noqa: E501

        :param total: The total of this GetWorkflowResponseTasks.  # noqa: E501
        :type: int
        """

        self._total = total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWorkflowResponseTasks, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWorkflowResponseTasks):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
