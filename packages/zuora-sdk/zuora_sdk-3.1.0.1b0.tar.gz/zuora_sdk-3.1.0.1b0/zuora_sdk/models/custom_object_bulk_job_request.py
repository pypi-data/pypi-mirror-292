# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomObjectBulkJobRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filter': 'CustomObjectBulkDeleteFilter',
        'namespace': 'CustomObjectBulkJobRequestNamespace',
        'object': 'str',
        'operation': 'CustomObjectBulkJobRequestOperation'
    }

    attribute_map = {
        'filter': 'filter',
        'namespace': 'namespace',
        'object': 'object',
        'operation': 'operation'
    }

    def __init__(self, filter=None, namespace=None, object=None, operation=None):  # noqa: E501
        """CustomObjectBulkJobRequest - a model defined in Swagger"""  # noqa: E501
        self._filter = None
        self._namespace = None
        self._object = None
        self._operation = None
        self.discriminator = None
        if filter is not None:
            self.filter = filter
        self.namespace = namespace
        self.object = object
        self.operation = operation

    @property
    def filter(self):
        """Gets the filter of this CustomObjectBulkJobRequest.  # noqa: E501


        :return: The filter of this CustomObjectBulkJobRequest.  # noqa: E501
        :rtype: CustomObjectBulkDeleteFilter
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this CustomObjectBulkJobRequest.


        :param filter: The filter of this CustomObjectBulkJobRequest.  # noqa: E501
        :type: CustomObjectBulkDeleteFilter
        """

        self._filter = filter

    @property
    def namespace(self):
        """Gets the namespace of this CustomObjectBulkJobRequest.  # noqa: E501


        :return: The namespace of this CustomObjectBulkJobRequest.  # noqa: E501
        :rtype: CustomObjectBulkJobRequestNamespace
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CustomObjectBulkJobRequest.


        :param namespace: The namespace of this CustomObjectBulkJobRequest.  # noqa: E501
        :type: CustomObjectBulkJobRequestNamespace
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def object(self):
        """Gets the object of this CustomObjectBulkJobRequest.  # noqa: E501

        The object that the bulk operation performs on.  # noqa: E501

        :return: The object of this CustomObjectBulkJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this CustomObjectBulkJobRequest.

        The object that the bulk operation performs on.  # noqa: E501

        :param object: The object of this CustomObjectBulkJobRequest.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def operation(self):
        """Gets the operation of this CustomObjectBulkJobRequest.  # noqa: E501


        :return: The operation of this CustomObjectBulkJobRequest.  # noqa: E501
        :rtype: CustomObjectBulkJobRequestOperation
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this CustomObjectBulkJobRequest.


        :param operation: The operation of this CustomObjectBulkJobRequest.  # noqa: E501
        :type: CustomObjectBulkJobRequestOperation
        """
        if operation is None:
            raise ValueError("Invalid value for `operation`, must not be `None`")  # noqa: E501

        self._operation = operation

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomObjectBulkJobRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomObjectBulkJobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
