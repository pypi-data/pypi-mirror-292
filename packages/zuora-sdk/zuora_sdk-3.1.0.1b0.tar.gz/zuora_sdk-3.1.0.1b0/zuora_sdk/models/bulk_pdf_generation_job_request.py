# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkPdfGenerationJobRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'documents': 'list[DocumentIdList]',
        'file_name': 'str',
        'name': 'str',
        'index_file_format': 'IndexFileFormat',
        'generate_missing_pdf': 'bool',
        'persist_index_file': 'bool'
    }

    attribute_map = {
        'documents': 'documents',
        'file_name': 'fileName',
        'name': 'name',
        'index_file_format': 'indexFileFormat',
        'generate_missing_pdf': 'generateMissingPDF',
        'persist_index_file': 'persistIndexFile'
    }

    def __init__(self, documents=None, file_name=None, name=None, index_file_format=None, generate_missing_pdf=None, persist_index_file=None):  # noqa: E501
        """BulkPdfGenerationJobRequest - a model defined in Swagger"""  # noqa: E501
        self._documents = None
        self._file_name = None
        self._name = None
        self._index_file_format = None
        self._generate_missing_pdf = None
        self._persist_index_file = None
        self.discriminator = None
        self.documents = documents
        self.file_name = file_name
        if name is not None:
            self.name = name
        self.index_file_format = index_file_format
        if generate_missing_pdf is not None:
            self.generate_missing_pdf = generate_missing_pdf
        if persist_index_file is not None:
            self.persist_index_file = persist_index_file

    @property
    def documents(self):
        """Gets the documents of this BulkPdfGenerationJobRequest.  # noqa: E501

        Array that contains the collection of Objects where each object contains billing document type and their ids   # noqa: E501

        :return: The documents of this BulkPdfGenerationJobRequest.  # noqa: E501
        :rtype: list[DocumentIdList]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this BulkPdfGenerationJobRequest.

        Array that contains the collection of Objects where each object contains billing document type and their ids   # noqa: E501

        :param documents: The documents of this BulkPdfGenerationJobRequest.  # noqa: E501
        :type: list[DocumentIdList]
        """
        if documents is None:
            raise ValueError("Invalid value for `documents`, must not be `None`")  # noqa: E501

        self._documents = documents

    @property
    def file_name(self):
        """Gets the file_name of this BulkPdfGenerationJobRequest.  # noqa: E501

        Prefix part of output file name(s).  Eg:    if fileName is \"all-invoices-posted-jan-2024\" then fileURL(s) contains this name as a prefix followed by suffix _{number}   # noqa: E501

        :return: The file_name of this BulkPdfGenerationJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this BulkPdfGenerationJobRequest.

        Prefix part of output file name(s).  Eg:    if fileName is \"all-invoices-posted-jan-2024\" then fileURL(s) contains this name as a prefix followed by suffix _{number}   # noqa: E501

        :param file_name: The file_name of this BulkPdfGenerationJobRequest.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def name(self):
        """Gets the name of this BulkPdfGenerationJobRequest.  # noqa: E501

        Name of the Job   # noqa: E501

        :return: The name of this BulkPdfGenerationJobRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BulkPdfGenerationJobRequest.

        Name of the Job   # noqa: E501

        :param name: The name of this BulkPdfGenerationJobRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def index_file_format(self):
        """Gets the index_file_format of this BulkPdfGenerationJobRequest.  # noqa: E501


        :return: The index_file_format of this BulkPdfGenerationJobRequest.  # noqa: E501
        :rtype: IndexFileFormat
        """
        return self._index_file_format

    @index_file_format.setter
    def index_file_format(self, index_file_format):
        """Sets the index_file_format of this BulkPdfGenerationJobRequest.


        :param index_file_format: The index_file_format of this BulkPdfGenerationJobRequest.  # noqa: E501
        :type: IndexFileFormat
        """
        if index_file_format is None:
            raise ValueError("Invalid value for `index_file_format`, must not be `None`")  # noqa: E501

        self._index_file_format = index_file_format

    @property
    def generate_missing_pdf(self):
        """Gets the generate_missing_pdf of this BulkPdfGenerationJobRequest.  # noqa: E501

        Flag which controls the behaviour of whether to generate the PDF(s) for the billing documents that doesn't have one    - setting it to true indicates service would go through the provided document id list and then find those billing documents that doesn't have PDF generated   and generate them all at once and then proceed to the zipping process    - setting it to false indicates service would go through the provided document id list and find those billing documents that doesn't have PDF generated and   mark them as Invalid and would skip them from zipping it. Ids marked invalid would be part of the response  Default value is false   # noqa: E501

        :return: The generate_missing_pdf of this BulkPdfGenerationJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._generate_missing_pdf

    @generate_missing_pdf.setter
    def generate_missing_pdf(self, generate_missing_pdf):
        """Sets the generate_missing_pdf of this BulkPdfGenerationJobRequest.

        Flag which controls the behaviour of whether to generate the PDF(s) for the billing documents that doesn't have one    - setting it to true indicates service would go through the provided document id list and then find those billing documents that doesn't have PDF generated   and generate them all at once and then proceed to the zipping process    - setting it to false indicates service would go through the provided document id list and find those billing documents that doesn't have PDF generated and   mark them as Invalid and would skip them from zipping it. Ids marked invalid would be part of the response  Default value is false   # noqa: E501

        :param generate_missing_pdf: The generate_missing_pdf of this BulkPdfGenerationJobRequest.  # noqa: E501
        :type: bool
        """

        self._generate_missing_pdf = generate_missing_pdf

    @property
    def persist_index_file(self):
        """Gets the persist_index_file of this BulkPdfGenerationJobRequest.  # noqa: E501

        Flag which controls whether to generated metadata/index file should be present in the final output file or not.     - setting it to true will generate the metadata/index file and store them along with other PDF files in the final zip file(s).    - setting it to false doesn't generate the metadata/index file and do not store them in the final zip file(s)  Default value is true   # noqa: E501

        :return: The persist_index_file of this BulkPdfGenerationJobRequest.  # noqa: E501
        :rtype: bool
        """
        return self._persist_index_file

    @persist_index_file.setter
    def persist_index_file(self, persist_index_file):
        """Sets the persist_index_file of this BulkPdfGenerationJobRequest.

        Flag which controls whether to generated metadata/index file should be present in the final output file or not.     - setting it to true will generate the metadata/index file and store them along with other PDF files in the final zip file(s).    - setting it to false doesn't generate the metadata/index file and do not store them in the final zip file(s)  Default value is true   # noqa: E501

        :param persist_index_file: The persist_index_file of this BulkPdfGenerationJobRequest.  # noqa: E501
        :type: bool
        """

        self._persist_index_file = persist_index_file

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkPdfGenerationJobRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkPdfGenerationJobRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
