# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkUpdateOrderLineItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'uom': 'str',
        'accounting_code': 'str',
        'adjustment_liability_accounting_code': 'str',
        'adjustment_revenue_accounting_code': 'str',
        'amount_per_unit': 'float',
        'bill_target_date': 'date',
        'bill_to': 'str',
        'billing_rule': 'OrderLineItemBillingRule',
        'contract_asset_accounting_code': 'str',
        'contract_liability_accounting_code': 'str',
        'contract_recognized_revenue_accounting_code': 'str',
        'custom_fields': 'dict(str, object)',
        'deferred_revenue_accounting_code': 'str',
        'description': 'str',
        'inline_discount_per_unit': 'float',
        'inline_discount_type': 'OrderLineItemInlineDiscountType',
        'invoice_group_number': 'str',
        'is_allocation_eligible': 'bool',
        'is_unbilled': 'bool',
        'exclude_item_billing_from_revenue_accounting': 'bool',
        'exclude_item_booking_from_revenue_accounting': 'bool',
        'revenue_recognition_timing': 'str',
        'revenue_amortization_method': 'str',
        'item_name': 'str',
        'item_number': 'str',
        'item_state': 'OrderLineItemState',
        'item_type': 'OrderLineItemType',
        'list_price_per_unit': 'float',
        'owner_account_number': 'str',
        'product_code': 'str',
        'purchase_order_number': 'str',
        'quantity': 'float',
        'recognized_revenue_accounting_code': 'str',
        'related_subscription_number': 'str',
        'revenue_recognition_rule': 'str',
        'sequence_set_id': 'str',
        'sold_to': 'str',
        'tax_code': 'str',
        'tax_mode': 'TaxMode',
        'transaction_end_date': 'date',
        'transaction_start_date': 'date',
        'unbilled_receivables_accounting_code': 'str'
    }

    attribute_map = {
        'id': 'id',
        'uom': 'UOM',
        'accounting_code': 'accountingCode',
        'adjustment_liability_accounting_code': 'adjustmentLiabilityAccountingCode',
        'adjustment_revenue_accounting_code': 'adjustmentRevenueAccountingCode',
        'amount_per_unit': 'amountPerUnit',
        'bill_target_date': 'billTargetDate',
        'bill_to': 'billTo',
        'billing_rule': 'billingRule',
        'contract_asset_accounting_code': 'contractAssetAccountingCode',
        'contract_liability_accounting_code': 'contractLiabilityAccountingCode',
        'contract_recognized_revenue_accounting_code': 'contractRecognizedRevenueAccountingCode',
        'custom_fields': 'customFields',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'description': 'description',
        'inline_discount_per_unit': 'inlineDiscountPerUnit',
        'inline_discount_type': 'inlineDiscountType',
        'invoice_group_number': 'invoiceGroupNumber',
        'is_allocation_eligible': 'isAllocationEligible',
        'is_unbilled': 'isUnbilled',
        'exclude_item_billing_from_revenue_accounting': 'excludeItemBillingFromRevenueAccounting',
        'exclude_item_booking_from_revenue_accounting': 'excludeItemBookingFromRevenueAccounting',
        'revenue_recognition_timing': 'revenueRecognitionTiming',
        'revenue_amortization_method': 'revenueAmortizationMethod',
        'item_name': 'itemName',
        'item_number': 'itemNumber',
        'item_state': 'itemState',
        'item_type': 'itemType',
        'list_price_per_unit': 'listPricePerUnit',
        'owner_account_number': 'ownerAccountNumber',
        'product_code': 'productCode',
        'purchase_order_number': 'purchaseOrderNumber',
        'quantity': 'quantity',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'related_subscription_number': 'relatedSubscriptionNumber',
        'revenue_recognition_rule': 'revenueRecognitionRule',
        'sequence_set_id': 'sequenceSetId',
        'sold_to': 'soldTo',
        'tax_code': 'taxCode',
        'tax_mode': 'taxMode',
        'transaction_end_date': 'transactionEndDate',
        'transaction_start_date': 'transactionStartDate',
        'unbilled_receivables_accounting_code': 'unbilledReceivablesAccountingCode'
    }

    def __init__(self, id=None, uom=None, accounting_code=None, adjustment_liability_accounting_code=None, adjustment_revenue_accounting_code=None, amount_per_unit=None, bill_target_date=None, bill_to=None, billing_rule=None, contract_asset_accounting_code=None, contract_liability_accounting_code=None, contract_recognized_revenue_accounting_code=None, custom_fields=None, deferred_revenue_accounting_code=None, description=None, inline_discount_per_unit=None, inline_discount_type=None, invoice_group_number=None, is_allocation_eligible=None, is_unbilled=None, exclude_item_billing_from_revenue_accounting=None, exclude_item_booking_from_revenue_accounting=None, revenue_recognition_timing=None, revenue_amortization_method=None, item_name=None, item_number=None, item_state=None, item_type=None, list_price_per_unit=None, owner_account_number=None, product_code=None, purchase_order_number=None, quantity=None, recognized_revenue_accounting_code=None, related_subscription_number=None, revenue_recognition_rule=None, sequence_set_id=None, sold_to=None, tax_code=None, tax_mode=None, transaction_end_date=None, transaction_start_date=None, unbilled_receivables_accounting_code=None):  # noqa: E501
        """BulkUpdateOrderLineItem - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._uom = None
        self._accounting_code = None
        self._adjustment_liability_accounting_code = None
        self._adjustment_revenue_accounting_code = None
        self._amount_per_unit = None
        self._bill_target_date = None
        self._bill_to = None
        self._billing_rule = None
        self._contract_asset_accounting_code = None
        self._contract_liability_accounting_code = None
        self._contract_recognized_revenue_accounting_code = None
        self._custom_fields = None
        self._deferred_revenue_accounting_code = None
        self._description = None
        self._inline_discount_per_unit = None
        self._inline_discount_type = None
        self._invoice_group_number = None
        self._is_allocation_eligible = None
        self._is_unbilled = None
        self._exclude_item_billing_from_revenue_accounting = None
        self._exclude_item_booking_from_revenue_accounting = None
        self._revenue_recognition_timing = None
        self._revenue_amortization_method = None
        self._item_name = None
        self._item_number = None
        self._item_state = None
        self._item_type = None
        self._list_price_per_unit = None
        self._owner_account_number = None
        self._product_code = None
        self._purchase_order_number = None
        self._quantity = None
        self._recognized_revenue_accounting_code = None
        self._related_subscription_number = None
        self._revenue_recognition_rule = None
        self._sequence_set_id = None
        self._sold_to = None
        self._tax_code = None
        self._tax_mode = None
        self._transaction_end_date = None
        self._transaction_start_date = None
        self._unbilled_receivables_accounting_code = None
        self.discriminator = None
        self.id = id
        if uom is not None:
            self.uom = uom
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if adjustment_liability_accounting_code is not None:
            self.adjustment_liability_accounting_code = adjustment_liability_accounting_code
        if adjustment_revenue_accounting_code is not None:
            self.adjustment_revenue_accounting_code = adjustment_revenue_accounting_code
        if amount_per_unit is not None:
            self.amount_per_unit = amount_per_unit
        if bill_target_date is not None:
            self.bill_target_date = bill_target_date
        if bill_to is not None:
            self.bill_to = bill_to
        if billing_rule is not None:
            self.billing_rule = billing_rule
        if contract_asset_accounting_code is not None:
            self.contract_asset_accounting_code = contract_asset_accounting_code
        if contract_liability_accounting_code is not None:
            self.contract_liability_accounting_code = contract_liability_accounting_code
        if contract_recognized_revenue_accounting_code is not None:
            self.contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        if description is not None:
            self.description = description
        if inline_discount_per_unit is not None:
            self.inline_discount_per_unit = inline_discount_per_unit
        if inline_discount_type is not None:
            self.inline_discount_type = inline_discount_type
        if invoice_group_number is not None:
            self.invoice_group_number = invoice_group_number
        if is_allocation_eligible is not None:
            self.is_allocation_eligible = is_allocation_eligible
        if is_unbilled is not None:
            self.is_unbilled = is_unbilled
        if exclude_item_billing_from_revenue_accounting is not None:
            self.exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting
        if exclude_item_booking_from_revenue_accounting is not None:
            self.exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting
        if revenue_recognition_timing is not None:
            self.revenue_recognition_timing = revenue_recognition_timing
        if revenue_amortization_method is not None:
            self.revenue_amortization_method = revenue_amortization_method
        if item_name is not None:
            self.item_name = item_name
        if item_number is not None:
            self.item_number = item_number
        if item_state is not None:
            self.item_state = item_state
        if item_type is not None:
            self.item_type = item_type
        if list_price_per_unit is not None:
            self.list_price_per_unit = list_price_per_unit
        if owner_account_number is not None:
            self.owner_account_number = owner_account_number
        if product_code is not None:
            self.product_code = product_code
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if quantity is not None:
            self.quantity = quantity
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if related_subscription_number is not None:
            self.related_subscription_number = related_subscription_number
        if revenue_recognition_rule is not None:
            self.revenue_recognition_rule = revenue_recognition_rule
        if sequence_set_id is not None:
            self.sequence_set_id = sequence_set_id
        if sold_to is not None:
            self.sold_to = sold_to
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_mode is not None:
            self.tax_mode = tax_mode
        if transaction_end_date is not None:
            self.transaction_end_date = transaction_end_date
        if transaction_start_date is not None:
            self.transaction_start_date = transaction_start_date
        if unbilled_receivables_accounting_code is not None:
            self.unbilled_receivables_accounting_code = unbilled_receivables_accounting_code

    @property
    def id(self):
        """Gets the id of this BulkUpdateOrderLineItem.  # noqa: E501

        The sytem generated Id for the Order Line Item(OLI). Use this field to specify which OLI to update.   # noqa: E501

        :return: The id of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BulkUpdateOrderLineItem.

        The sytem generated Id for the Order Line Item(OLI). Use this field to specify which OLI to update.   # noqa: E501

        :param id: The id of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def uom(self):
        """Gets the uom of this BulkUpdateOrderLineItem.  # noqa: E501

        Specifies the units to measure usage.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The uom of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this BulkUpdateOrderLineItem.

        Specifies the units to measure usage.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param uom: The uom of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._uom = uom

    @property
    def accounting_code(self):
        """Gets the accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The accountingCode for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this BulkUpdateOrderLineItem.

        The accountingCode for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param accounting_code: The accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def adjustment_liability_accounting_code(self):
        """Gets the adjustment_liability_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The adjustment_liability_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_liability_accounting_code

    @adjustment_liability_accounting_code.setter
    def adjustment_liability_accounting_code(self, adjustment_liability_accounting_code):
        """Sets the adjustment_liability_accounting_code of this BulkUpdateOrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param adjustment_liability_accounting_code: The adjustment_liability_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._adjustment_liability_accounting_code = adjustment_liability_accounting_code

    @property
    def adjustment_revenue_accounting_code(self):
        """Gets the adjustment_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The adjustment_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_revenue_accounting_code

    @adjustment_revenue_accounting_code.setter
    def adjustment_revenue_accounting_code(self, adjustment_revenue_accounting_code):
        """Sets the adjustment_revenue_accounting_code of this BulkUpdateOrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param adjustment_revenue_accounting_code: The adjustment_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._adjustment_revenue_accounting_code = adjustment_revenue_accounting_code

    @property
    def amount_per_unit(self):
        """Gets the amount_per_unit of this BulkUpdateOrderLineItem.  # noqa: E501

        The actual charged amount per unit for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The amount_per_unit of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._amount_per_unit

    @amount_per_unit.setter
    def amount_per_unit(self, amount_per_unit):
        """Sets the amount_per_unit of this BulkUpdateOrderLineItem.

        The actual charged amount per unit for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param amount_per_unit: The amount_per_unit of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: float
        """

        self._amount_per_unit = amount_per_unit

    @property
    def bill_target_date(self):
        """Gets the bill_target_date of this BulkUpdateOrderLineItem.  # noqa: E501

        The target date for the Order Line Item (OLI) to be picked up by bill run for generating billing documents.  To generate billing documents for an OLI, you must set this field and set the `itemState` field to `SentToBilling`.  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The bill_target_date of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: date
        """
        return self._bill_target_date

    @bill_target_date.setter
    def bill_target_date(self, bill_target_date):
        """Sets the bill_target_date of this BulkUpdateOrderLineItem.

        The target date for the Order Line Item (OLI) to be picked up by bill run for generating billing documents.  To generate billing documents for an OLI, you must set this field and set the `itemState` field to `SentToBilling`.  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param bill_target_date: The bill_target_date of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: date
        """

        self._bill_target_date = bill_target_date

    @property
    def bill_to(self):
        """Gets the bill_to of this BulkUpdateOrderLineItem.  # noqa: E501

        The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The bill_to of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._bill_to

    @bill_to.setter
    def bill_to(self, bill_to):
        """Sets the bill_to of this BulkUpdateOrderLineItem.

        The ID of a contact that belongs to the billing account of the order line item. Use this field to assign an existing account as the bill-to contact of an order line item.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param bill_to: The bill_to of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._bill_to = bill_to

    @property
    def billing_rule(self):
        """Gets the billing_rule of this BulkUpdateOrderLineItem.  # noqa: E501


        :return: The billing_rule of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: OrderLineItemBillingRule
        """
        return self._billing_rule

    @billing_rule.setter
    def billing_rule(self, billing_rule):
        """Sets the billing_rule of this BulkUpdateOrderLineItem.


        :param billing_rule: The billing_rule of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: OrderLineItemBillingRule
        """

        self._billing_rule = billing_rule

    @property
    def contract_asset_accounting_code(self):
        """Gets the contract_asset_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The contract_asset_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_asset_accounting_code

    @contract_asset_accounting_code.setter
    def contract_asset_accounting_code(self, contract_asset_accounting_code):
        """Sets the contract_asset_accounting_code of this BulkUpdateOrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param contract_asset_accounting_code: The contract_asset_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._contract_asset_accounting_code = contract_asset_accounting_code

    @property
    def contract_liability_accounting_code(self):
        """Gets the contract_liability_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The contract_liability_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_liability_accounting_code

    @contract_liability_accounting_code.setter
    def contract_liability_accounting_code(self, contract_liability_accounting_code):
        """Sets the contract_liability_accounting_code of this BulkUpdateOrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param contract_liability_accounting_code: The contract_liability_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._contract_liability_accounting_code = contract_liability_accounting_code

    @property
    def contract_recognized_revenue_accounting_code(self):
        """Gets the contract_recognized_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The contract_recognized_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_recognized_revenue_accounting_code

    @contract_recognized_revenue_accounting_code.setter
    def contract_recognized_revenue_accounting_code(self, contract_recognized_revenue_accounting_code):
        """Sets the contract_recognized_revenue_accounting_code of this BulkUpdateOrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param contract_recognized_revenue_accounting_code: The contract_recognized_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code

    @property
    def custom_fields(self):
        """Gets the custom_fields of this BulkUpdateOrderLineItem.  # noqa: E501

        Container for custom fields of an Order Line Item object.   # noqa: E501

        :return: The custom_fields of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this BulkUpdateOrderLineItem.

        Container for custom fields of an Order Line Item object.   # noqa: E501

        :param custom_fields: The custom_fields of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The deferred revenue accounting code for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The deferred_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this BulkUpdateOrderLineItem.

        The deferred revenue accounting code for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def description(self):
        """Gets the description of this BulkUpdateOrderLineItem.  # noqa: E501

        The description of the Order Line Item (OLI).  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The description of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BulkUpdateOrderLineItem.

        The description of the Order Line Item (OLI).  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param description: The description of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def inline_discount_per_unit(self):
        """Gets the inline_discount_per_unit of this BulkUpdateOrderLineItem.  # noqa: E501

        You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).  Use this field in accordance with the `inlineDiscountType` field, in the following manner: * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%. * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.  Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.   # noqa: E501

        :return: The inline_discount_per_unit of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._inline_discount_per_unit

    @inline_discount_per_unit.setter
    def inline_discount_per_unit(self, inline_discount_per_unit):
        """Sets the inline_discount_per_unit of this BulkUpdateOrderLineItem.

        You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).  Use this field in accordance with the `inlineDiscountType` field, in the following manner: * If the `inlineDiscountType` field is set as `Percentage`, this field specifies the discount percentage for each unit of the order line item. For exmaple, if you specify `5` in this field, the discount percentage is 5%. * If the `inlineDiscountType` field is set as `FixedAmount`, this field specifies the discount amount on each unit of the order line item. For exmaple, if you specify `10` in this field, the discount amount on each unit of the order line item is 10.  Once you set the `inlineDiscountType`, `inlineDiscountPerUnit`, and `listPricePerUnit` fields, the system will automatically generate the `amountPerUnit` field. You shall not set the `amountPerUnit` field by yourself.   # noqa: E501

        :param inline_discount_per_unit: The inline_discount_per_unit of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: float
        """

        self._inline_discount_per_unit = inline_discount_per_unit

    @property
    def inline_discount_type(self):
        """Gets the inline_discount_type of this BulkUpdateOrderLineItem.  # noqa: E501


        :return: The inline_discount_type of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: OrderLineItemInlineDiscountType
        """
        return self._inline_discount_type

    @inline_discount_type.setter
    def inline_discount_type(self, inline_discount_type):
        """Sets the inline_discount_type of this BulkUpdateOrderLineItem.


        :param inline_discount_type: The inline_discount_type of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: OrderLineItemInlineDiscountType
        """

        self._inline_discount_type = inline_discount_type

    @property
    def invoice_group_number(self):
        """Gets the invoice_group_number of this BulkUpdateOrderLineItem.  # noqa: E501

        The invoice group number associated with the order line item.   # noqa: E501

        :return: The invoice_group_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_group_number

    @invoice_group_number.setter
    def invoice_group_number(self, invoice_group_number):
        """Sets the invoice_group_number of this BulkUpdateOrderLineItem.

        The invoice group number associated with the order line item.   # noqa: E501

        :param invoice_group_number: The invoice_group_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._invoice_group_number = invoice_group_number

    @property
    def is_allocation_eligible(self):
        """Gets the is_allocation_eligible of this BulkUpdateOrderLineItem.  # noqa: E501

        This field is used to identify if the charge segment is allocation eligible in revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :return: The is_allocation_eligible of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_allocation_eligible

    @is_allocation_eligible.setter
    def is_allocation_eligible(self, is_allocation_eligible):
        """Sets the is_allocation_eligible of this BulkUpdateOrderLineItem.

        This field is used to identify if the charge segment is allocation eligible in revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :param is_allocation_eligible: The is_allocation_eligible of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: bool
        """

        self._is_allocation_eligible = is_allocation_eligible

    @property
    def is_unbilled(self):
        """Gets the is_unbilled of this BulkUpdateOrderLineItem.  # noqa: E501

        This field is used to dictate how to perform the accounting during revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :return: The is_unbilled of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._is_unbilled

    @is_unbilled.setter
    def is_unbilled(self, is_unbilled):
        """Sets the is_unbilled of this BulkUpdateOrderLineItem.

        This field is used to dictate how to perform the accounting during revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :param is_unbilled: The is_unbilled of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: bool
        """

        self._is_unbilled = is_unbilled

    @property
    def exclude_item_billing_from_revenue_accounting(self):
        """Gets the exclude_item_billing_from_revenue_accounting of this BulkUpdateOrderLineItem.  # noqa: E501

        The flag to exclude Order Line Item related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The exclude_item_billing_from_revenue_accounting of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_billing_from_revenue_accounting

    @exclude_item_billing_from_revenue_accounting.setter
    def exclude_item_billing_from_revenue_accounting(self, exclude_item_billing_from_revenue_accounting):
        """Sets the exclude_item_billing_from_revenue_accounting of this BulkUpdateOrderLineItem.

        The flag to exclude Order Line Item related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param exclude_item_billing_from_revenue_accounting: The exclude_item_billing_from_revenue_accounting of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: bool
        """

        self._exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting

    @property
    def exclude_item_booking_from_revenue_accounting(self):
        """Gets the exclude_item_booking_from_revenue_accounting of this BulkUpdateOrderLineItem.  # noqa: E501

        The flag to exclude Order Line Item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.   # noqa: E501

        :return: The exclude_item_booking_from_revenue_accounting of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_booking_from_revenue_accounting

    @exclude_item_booking_from_revenue_accounting.setter
    def exclude_item_booking_from_revenue_accounting(self, exclude_item_booking_from_revenue_accounting):
        """Sets the exclude_item_booking_from_revenue_accounting of this BulkUpdateOrderLineItem.

        The flag to exclude Order Line Item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.   # noqa: E501

        :param exclude_item_booking_from_revenue_accounting: The exclude_item_booking_from_revenue_accounting of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: bool
        """

        self._exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting

    @property
    def revenue_recognition_timing(self):
        """Gets the revenue_recognition_timing of this BulkUpdateOrderLineItem.  # noqa: E501

        This field is used to dictate the type of revenue recognition timing.  # noqa: E501

        :return: The revenue_recognition_timing of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_timing

    @revenue_recognition_timing.setter
    def revenue_recognition_timing(self, revenue_recognition_timing):
        """Sets the revenue_recognition_timing of this BulkUpdateOrderLineItem.

        This field is used to dictate the type of revenue recognition timing.  # noqa: E501

        :param revenue_recognition_timing: The revenue_recognition_timing of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_timing = revenue_recognition_timing

    @property
    def revenue_amortization_method(self):
        """Gets the revenue_amortization_method of this BulkUpdateOrderLineItem.  # noqa: E501

        This field is used to dictate the type of revenue amortization method.  # noqa: E501

        :return: The revenue_amortization_method of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._revenue_amortization_method

    @revenue_amortization_method.setter
    def revenue_amortization_method(self, revenue_amortization_method):
        """Sets the revenue_amortization_method of this BulkUpdateOrderLineItem.

        This field is used to dictate the type of revenue amortization method.  # noqa: E501

        :param revenue_amortization_method: The revenue_amortization_method of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._revenue_amortization_method = revenue_amortization_method

    @property
    def item_name(self):
        """Gets the item_name of this BulkUpdateOrderLineItem.  # noqa: E501

        The name of the Order Line Item (OLI).  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The item_name of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this BulkUpdateOrderLineItem.

        The name of the Order Line Item (OLI).  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param item_name: The item_name of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    @property
    def item_number(self):
        """Gets the item_number of this BulkUpdateOrderLineItem.  # noqa: E501

        The number for the Order Line Item (OLI).  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The item_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._item_number

    @item_number.setter
    def item_number(self, item_number):
        """Sets the item_number of this BulkUpdateOrderLineItem.

        The number for the Order Line Item (OLI).  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param item_number: The item_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._item_number = item_number

    @property
    def item_state(self):
        """Gets the item_state of this BulkUpdateOrderLineItem.  # noqa: E501


        :return: The item_state of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: OrderLineItemState
        """
        return self._item_state

    @item_state.setter
    def item_state(self, item_state):
        """Sets the item_state of this BulkUpdateOrderLineItem.


        :param item_state: The item_state of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: OrderLineItemState
        """

        self._item_state = item_state

    @property
    def item_type(self):
        """Gets the item_type of this BulkUpdateOrderLineItem.  # noqa: E501


        :return: The item_type of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: OrderLineItemType
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this BulkUpdateOrderLineItem.


        :param item_type: The item_type of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: OrderLineItemType
        """

        self._item_type = item_type

    @property
    def list_price_per_unit(self):
        """Gets the list_price_per_unit of this BulkUpdateOrderLineItem.  # noqa: E501

        The list price per unit for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The list_price_per_unit of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._list_price_per_unit

    @list_price_per_unit.setter
    def list_price_per_unit(self, list_price_per_unit):
        """Sets the list_price_per_unit of this BulkUpdateOrderLineItem.

        The list price per unit for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param list_price_per_unit: The list_price_per_unit of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: float
        """

        self._list_price_per_unit = list_price_per_unit

    @property
    def owner_account_number(self):
        """Gets the owner_account_number of this BulkUpdateOrderLineItem.  # noqa: E501

        Use this field to assign an existing account as the owner of an order line item.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The owner_account_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._owner_account_number

    @owner_account_number.setter
    def owner_account_number(self, owner_account_number):
        """Sets the owner_account_number of this BulkUpdateOrderLineItem.

        Use this field to assign an existing account as the owner of an order line item.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param owner_account_number: The owner_account_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._owner_account_number = owner_account_number

    @property
    def product_code(self):
        """Gets the product_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The product code for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The product_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this BulkUpdateOrderLineItem.

        The product code for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param product_code: The product_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._product_code = product_code

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this BulkUpdateOrderLineItem.  # noqa: E501

        Used by customers to specify the Purchase Order Number provided by the buyer.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The purchase_order_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this BulkUpdateOrderLineItem.

        Used by customers to specify the Purchase Order Number provided by the buyer.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param purchase_order_number: The purchase_order_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def quantity(self):
        """Gets the quantity of this BulkUpdateOrderLineItem.  # noqa: E501

        The quantity of units, such as the number of authors in a hosted wiki service.  You can update this field for a sales or return OLI only when the OLI in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The quantity of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this BulkUpdateOrderLineItem.

        The quantity of units, such as the number of authors in a hosted wiki service.  You can update this field for a sales or return OLI only when the OLI in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param quantity: The quantity of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The recognized revenue accounting code for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The recognized_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this BulkUpdateOrderLineItem.

        The recognized revenue accounting code for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def related_subscription_number(self):
        """Gets the related_subscription_number of this BulkUpdateOrderLineItem.  # noqa: E501

        Use this field to relate an order line item to an subscription. Specify this field to the subscription number of the subscription to relate.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The related_subscription_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._related_subscription_number

    @related_subscription_number.setter
    def related_subscription_number(self, related_subscription_number):
        """Sets the related_subscription_number of this BulkUpdateOrderLineItem.

        Use this field to relate an order line item to an subscription. Specify this field to the subscription number of the subscription to relate.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param related_subscription_number: The related_subscription_number of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._related_subscription_number = related_subscription_number

    @property
    def revenue_recognition_rule(self):
        """Gets the revenue_recognition_rule of this BulkUpdateOrderLineItem.  # noqa: E501

        The Revenue Recognition rule for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The revenue_recognition_rule of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule

    @revenue_recognition_rule.setter
    def revenue_recognition_rule(self, revenue_recognition_rule):
        """Sets the revenue_recognition_rule of this BulkUpdateOrderLineItem.

        The Revenue Recognition rule for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param revenue_recognition_rule: The revenue_recognition_rule of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule = revenue_recognition_rule

    @property
    def sequence_set_id(self):
        """Gets the sequence_set_id of this BulkUpdateOrderLineItem.  # noqa: E501

        The ID of the sequence set associated with the orderLineItem.   # noqa: E501

        :return: The sequence_set_id of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_id

    @sequence_set_id.setter
    def sequence_set_id(self, sequence_set_id):
        """Sets the sequence_set_id of this BulkUpdateOrderLineItem.

        The ID of the sequence set associated with the orderLineItem.   # noqa: E501

        :param sequence_set_id: The sequence_set_id of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._sequence_set_id = sequence_set_id

    @property
    def sold_to(self):
        """Gets the sold_to of this BulkUpdateOrderLineItem.  # noqa: E501

        Use this field to assign an existing account as the sold-to contact of an order line item, by the following rules:  * If the `ownerAccountNumber` field is set, then this field must be the ID of a contact that belongs to the owner account of the order line item.  * If the `ownerAccountNumber` field is not set, then this field must be the ID of a contact that belongs to the billing account of the order line item.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The sold_to of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._sold_to

    @sold_to.setter
    def sold_to(self, sold_to):
        """Sets the sold_to of this BulkUpdateOrderLineItem.

        Use this field to assign an existing account as the sold-to contact of an order line item, by the following rules:  * If the `ownerAccountNumber` field is set, then this field must be the ID of a contact that belongs to the owner account of the order line item.  * If the `ownerAccountNumber` field is not set, then this field must be the ID of a contact that belongs to the billing account of the order line item.  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param sold_to: The sold_to of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._sold_to = sold_to

    @property
    def tax_code(self):
        """Gets the tax_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The tax code for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The tax_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this BulkUpdateOrderLineItem.

        The tax code for the Order Line Item (OLI).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param tax_code: The tax_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_mode(self):
        """Gets the tax_mode of this BulkUpdateOrderLineItem.  # noqa: E501


        :return: The tax_mode of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: TaxMode
        """
        return self._tax_mode

    @tax_mode.setter
    def tax_mode(self, tax_mode):
        """Sets the tax_mode of this BulkUpdateOrderLineItem.


        :param tax_mode: The tax_mode of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: TaxMode
        """

        self._tax_mode = tax_mode

    @property
    def transaction_end_date(self):
        """Gets the transaction_end_date of this BulkUpdateOrderLineItem.  # noqa: E501

        The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The transaction_end_date of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: date
        """
        return self._transaction_end_date

    @transaction_end_date.setter
    def transaction_end_date(self, transaction_end_date):
        """Sets the transaction_end_date of this BulkUpdateOrderLineItem.

        The date a transaction is completed. The default value of this field is the transaction start date. Also, the value of this field should always equal or be later than the value of the `transactionStartDate` field.  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param transaction_end_date: The transaction_end_date of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: date
        """

        self._transaction_end_date = transaction_end_date

    @property
    def transaction_start_date(self):
        """Gets the transaction_start_date of this BulkUpdateOrderLineItem.  # noqa: E501

        The date a transaction starts. The default value of this field is the order date.  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The transaction_start_date of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: date
        """
        return self._transaction_start_date

    @transaction_start_date.setter
    def transaction_start_date(self, transaction_start_date):
        """Sets the transaction_start_date of this BulkUpdateOrderLineItem.

        The date a transaction starts. The default value of this field is the order date.  You can update this field for a sales or return OLI only when the OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param transaction_start_date: The transaction_start_date of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: date
        """

        self._transaction_start_date = transaction_start_date

    @property
    def unbilled_receivables_accounting_code(self):
        """Gets the unbilled_receivables_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :return: The unbilled_receivables_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :rtype: str
        """
        return self._unbilled_receivables_accounting_code

    @unbilled_receivables_accounting_code.setter
    def unbilled_receivables_accounting_code(self, unbilled_receivables_accounting_code):
        """Sets the unbilled_receivables_accounting_code of this BulkUpdateOrderLineItem.

        The accounting code on the Order Line Item object for customers using [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration).  You can update this field only for a sales OLI and only when the sales OLI is in the `Executing` state (when the `itemState` field is set as `Executing`).   # noqa: E501

        :param unbilled_receivables_accounting_code: The unbilled_receivables_accounting_code of this BulkUpdateOrderLineItem.  # noqa: E501
        :type: str
        """

        self._unbilled_receivables_accounting_code = unbilled_receivables_accounting_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkUpdateOrderLineItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkUpdateOrderLineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
