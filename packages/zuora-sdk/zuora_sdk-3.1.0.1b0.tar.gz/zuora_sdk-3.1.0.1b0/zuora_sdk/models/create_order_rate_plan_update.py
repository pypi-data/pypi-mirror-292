# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateOrderRatePlanUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_updates': 'list[CreateOrderChargeUpdate]',
        'clearing_existing_features': 'bool',
        'custom_fields': 'dict(str, object)',
        'external_catalog_plan_id': 'str',
        'product_rate_plan_number': 'str',
        'rate_plan_id': 'str',
        'specific_update_date': 'date',
        'subscription_product_features': 'list[CreateOrderRatePlanFeatureOverride]',
        'subscription_rate_plan_number': 'str',
        'unique_token': 'str',
        'is_adding_subset_charges': 'bool'
    }

    attribute_map = {
        'charge_updates': 'chargeUpdates',
        'clearing_existing_features': 'clearingExistingFeatures',
        'custom_fields': 'customFields',
        'external_catalog_plan_id': 'externalCatalogPlanId',
        'product_rate_plan_number': 'productRatePlanNumber',
        'rate_plan_id': 'ratePlanId',
        'specific_update_date': 'specificUpdateDate',
        'subscription_product_features': 'subscriptionProductFeatures',
        'subscription_rate_plan_number': 'subscriptionRatePlanNumber',
        'unique_token': 'uniqueToken',
        'is_adding_subset_charges': 'isAddingSubsetCharges'
    }

    def __init__(self, charge_updates=None, clearing_existing_features=None, custom_fields=None, external_catalog_plan_id=None, product_rate_plan_number=None, rate_plan_id=None, specific_update_date=None, subscription_product_features=None, subscription_rate_plan_number=None, unique_token=None, is_adding_subset_charges=None):  # noqa: E501
        """CreateOrderRatePlanUpdate - a model defined in Swagger"""  # noqa: E501
        self._charge_updates = None
        self._clearing_existing_features = None
        self._custom_fields = None
        self._external_catalog_plan_id = None
        self._product_rate_plan_number = None
        self._rate_plan_id = None
        self._specific_update_date = None
        self._subscription_product_features = None
        self._subscription_rate_plan_number = None
        self._unique_token = None
        self._is_adding_subset_charges = None
        self.discriminator = None
        if charge_updates is not None:
            self.charge_updates = charge_updates
        if clearing_existing_features is not None:
            self.clearing_existing_features = clearing_existing_features
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if external_catalog_plan_id is not None:
            self.external_catalog_plan_id = external_catalog_plan_id
        if product_rate_plan_number is not None:
            self.product_rate_plan_number = product_rate_plan_number
        if rate_plan_id is not None:
            self.rate_plan_id = rate_plan_id
        if specific_update_date is not None:
            self.specific_update_date = specific_update_date
        if subscription_product_features is not None:
            self.subscription_product_features = subscription_product_features
        if subscription_rate_plan_number is not None:
            self.subscription_rate_plan_number = subscription_rate_plan_number
        if unique_token is not None:
            self.unique_token = unique_token
        if is_adding_subset_charges is not None:
            self.is_adding_subset_charges = is_adding_subset_charges

    @property
    def charge_updates(self):
        """Gets the charge_updates of this CreateOrderRatePlanUpdate.  # noqa: E501

        Array of the JSON objects containing the information for a charge update in the `updateProduct` type of order action.   # noqa: E501

        :return: The charge_updates of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: list[CreateOrderChargeUpdate]
        """
        return self._charge_updates

    @charge_updates.setter
    def charge_updates(self, charge_updates):
        """Sets the charge_updates of this CreateOrderRatePlanUpdate.

        Array of the JSON objects containing the information for a charge update in the `updateProduct` type of order action.   # noqa: E501

        :param charge_updates: The charge_updates of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: list[CreateOrderChargeUpdate]
        """

        self._charge_updates = charge_updates

    @property
    def clearing_existing_features(self):
        """Gets the clearing_existing_features of this CreateOrderRatePlanUpdate.  # noqa: E501

        Specifies whether all features in the rate plan will be cleared.   # noqa: E501

        :return: The clearing_existing_features of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._clearing_existing_features

    @clearing_existing_features.setter
    def clearing_existing_features(self, clearing_existing_features):
        """Sets the clearing_existing_features of this CreateOrderRatePlanUpdate.

        Specifies whether all features in the rate plan will be cleared.   # noqa: E501

        :param clearing_existing_features: The clearing_existing_features of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: bool
        """

        self._clearing_existing_features = clearing_existing_features

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CreateOrderRatePlanUpdate.  # noqa: E501

        Container for custom fields of the Rate Plan object. The custom fields of the Rate Plan object are used when rate plans are subscribed.   # noqa: E501

        :return: The custom_fields of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CreateOrderRatePlanUpdate.

        Container for custom fields of the Rate Plan object. The custom fields of the Rate Plan object are used when rate plans are subscribed.   # noqa: E501

        :param custom_fields: The custom_fields of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def external_catalog_plan_id(self):
        """Gets the external_catalog_plan_id of this CreateOrderRatePlanUpdate.  # noqa: E501

        An external ID of the rate plan to be updated. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to update the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :return: The external_catalog_plan_id of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: str
        """
        return self._external_catalog_plan_id

    @external_catalog_plan_id.setter
    def external_catalog_plan_id(self, external_catalog_plan_id):
        """Sets the external_catalog_plan_id of this CreateOrderRatePlanUpdate.

        An external ID of the rate plan to be updated. You can use this field to specify an existing rate plan in your subscription. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan. However, if there are multiple rate plans with the same `productRatePlanId` value existing in the subscription, you must use the `ratePlanId` field to update the rate plan. The `externalCatalogPlanId` field cannot be used to distinguish multiple rate plans in this case.  **Note:** If both `externalCatalogPlanId` and `ratePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :param external_catalog_plan_id: The external_catalog_plan_id of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: str
        """

        self._external_catalog_plan_id = external_catalog_plan_id

    @property
    def product_rate_plan_number(self):
        """Gets the product_rate_plan_number of this CreateOrderRatePlanUpdate.  # noqa: E501

        Number of a product rate plan for this subscription.   # noqa: E501

        :return: The product_rate_plan_number of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_number

    @product_rate_plan_number.setter
    def product_rate_plan_number(self, product_rate_plan_number):
        """Sets the product_rate_plan_number of this CreateOrderRatePlanUpdate.

        Number of a product rate plan for this subscription.   # noqa: E501

        :param product_rate_plan_number: The product_rate_plan_number of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_number = product_rate_plan_number

    @property
    def rate_plan_id(self):
        """Gets the rate_plan_id of this CreateOrderRatePlanUpdate.  # noqa: E501

        The id of the rate plan to be updated. It can be the latest version or any history version id.   # noqa: E501

        :return: The rate_plan_id of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: str
        """
        return self._rate_plan_id

    @rate_plan_id.setter
    def rate_plan_id(self, rate_plan_id):
        """Sets the rate_plan_id of this CreateOrderRatePlanUpdate.

        The id of the rate plan to be updated. It can be the latest version or any history version id.   # noqa: E501

        :param rate_plan_id: The rate_plan_id of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: str
        """

        self._rate_plan_id = rate_plan_id

    @property
    def specific_update_date(self):
        """Gets the specific_update_date of this CreateOrderRatePlanUpdate.  # noqa: E501

        The date when the Update Product order action takes effect. This field is only applicable if there is already a future-dated Update Product order action on the subscription. The format of the date is yyyy-mm-dd.  See [Update a Product on Subscription with Future-dated Updates](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AC_Orders_Tutorials/C_Update_a_Product_in_a_Subscription/Update_a_Product_on_Subscription_with_Future-dated_Updates) for more information about this feature.   # noqa: E501

        :return: The specific_update_date of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: date
        """
        return self._specific_update_date

    @specific_update_date.setter
    def specific_update_date(self, specific_update_date):
        """Sets the specific_update_date of this CreateOrderRatePlanUpdate.

        The date when the Update Product order action takes effect. This field is only applicable if there is already a future-dated Update Product order action on the subscription. The format of the date is yyyy-mm-dd.  See [Update a Product on Subscription with Future-dated Updates](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AC_Orders_Tutorials/C_Update_a_Product_in_a_Subscription/Update_a_Product_on_Subscription_with_Future-dated_Updates) for more information about this feature.   # noqa: E501

        :param specific_update_date: The specific_update_date of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: date
        """

        self._specific_update_date = specific_update_date

    @property
    def subscription_product_features(self):
        """Gets the subscription_product_features of this CreateOrderRatePlanUpdate.  # noqa: E501

        List of features associated with the rate plan. The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows: * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared. * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.   # noqa: E501

        :return: The subscription_product_features of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: list[CreateOrderRatePlanFeatureOverride]
        """
        return self._subscription_product_features

    @subscription_product_features.setter
    def subscription_product_features(self, subscription_product_features):
        """Sets the subscription_product_features of this CreateOrderRatePlanUpdate.

        List of features associated with the rate plan. The system compares the `subscriptionProductFeatures` and `featureId` fields in the request with the counterpart fields in a rate plan. The comparison results are as follows: * If there is no `subscriptionProductFeatures` field or the field is empty, features in the rate plan remain unchanged. But if the `clearingExistingFeatures` field is additionally set to true, all features in the rate plan are cleared. * If the `subscriptionProductFeatures` field contains the `featureId` nested fields, as well as the optional `description` and `customFields` nested fields, the features indicated by the featureId nested fields in the request overwrite all features in the rate plan.   # noqa: E501

        :param subscription_product_features: The subscription_product_features of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: list[CreateOrderRatePlanFeatureOverride]
        """

        self._subscription_product_features = subscription_product_features

    @property
    def subscription_rate_plan_number(self):
        """Gets the subscription_rate_plan_number of this CreateOrderRatePlanUpdate.  # noqa: E501

        Number of a rate plan for this subscription.   # noqa: E501

        :return: The subscription_rate_plan_number of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: str
        """
        return self._subscription_rate_plan_number

    @subscription_rate_plan_number.setter
    def subscription_rate_plan_number(self, subscription_rate_plan_number):
        """Sets the subscription_rate_plan_number of this CreateOrderRatePlanUpdate.

        Number of a rate plan for this subscription.   # noqa: E501

        :param subscription_rate_plan_number: The subscription_rate_plan_number of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: str
        """

        self._subscription_rate_plan_number = subscription_rate_plan_number

    @property
    def unique_token(self):
        """Gets the unique_token of this CreateOrderRatePlanUpdate.  # noqa: E501

        A unique string to represent the rate plan in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan and use that token in future order actions.   # noqa: E501

        :return: The unique_token of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: str
        """
        return self._unique_token

    @unique_token.setter
    def unique_token(self, unique_token):
        """Sets the unique_token of this CreateOrderRatePlanUpdate.

        A unique string to represent the rate plan in the order. The unique token is used to perform multiple actions against a newly added rate plan. For example, if you want to add and update a product in the same order, assign a unique token to the newly added rate plan and use that token in future order actions.   # noqa: E501

        :param unique_token: The unique_token of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: str
        """

        self._unique_token = unique_token

    @property
    def is_adding_subset_charges(self):
        """Gets the is_adding_subset_charges of this CreateOrderRatePlanUpdate.  # noqa: E501

        Specifies whether to add subset charges to the subscription.  **Note:** This field is available when the EnableAddingSubsetCharges permission is enabled.   # noqa: E501

        :return: The is_adding_subset_charges of this CreateOrderRatePlanUpdate.  # noqa: E501
        :rtype: bool
        """
        return self._is_adding_subset_charges

    @is_adding_subset_charges.setter
    def is_adding_subset_charges(self, is_adding_subset_charges):
        """Sets the is_adding_subset_charges of this CreateOrderRatePlanUpdate.

        Specifies whether to add subset charges to the subscription.  **Note:** This field is available when the EnableAddingSubsetCharges permission is enabled.   # noqa: E501

        :param is_adding_subset_charges: The is_adding_subset_charges of this CreateOrderRatePlanUpdate.  # noqa: E501
        :type: bool
        """

        self._is_adding_subset_charges = is_adding_subset_charges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOrderRatePlanUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrderRatePlanUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
