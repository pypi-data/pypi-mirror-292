# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateAccountSubscription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_renew': 'bool',
        'contract_effective_date': 'date',
        'customer_acceptance_date': 'date',
        'initial_term': 'int',
        'invoice_owner_account_key': 'str',
        'invoice_separately': 'bool',
        'notes': 'str',
        'renewal_term': 'int',
        'service_activation_date': 'date',
        'subscribe_to_rate_plans': 'list[CreateSubscriptionRatePlan]',
        'subscription_number': 'str',
        'term_start_date': 'date',
        'term_type': 'str',
        'cpq_bundle_json_id__qt': 'str',
        'opportunity_close_date__qt': 'date',
        'opportunity_name__qt': 'str',
        'quote_business_type__qt': 'str',
        'quote_number__qt': 'str',
        'quote_type__qt': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'project__ns': 'str',
        'sales_order__ns': 'str',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'auto_renew': 'autoRenew',
        'contract_effective_date': 'contractEffectiveDate',
        'customer_acceptance_date': 'customerAcceptanceDate',
        'initial_term': 'initialTerm',
        'invoice_owner_account_key': 'invoiceOwnerAccountKey',
        'invoice_separately': 'invoiceSeparately',
        'notes': 'notes',
        'renewal_term': 'renewalTerm',
        'service_activation_date': 'serviceActivationDate',
        'subscribe_to_rate_plans': 'subscribeToRatePlans',
        'subscription_number': 'subscriptionNumber',
        'term_start_date': 'termStartDate',
        'term_type': 'termType',
        'cpq_bundle_json_id__qt': 'CpqBundleJsonId__QT',
        'opportunity_close_date__qt': 'OpportunityCloseDate__QT',
        'opportunity_name__qt': 'OpportunityName__QT',
        'quote_business_type__qt': 'QuoteBusinessType__QT',
        'quote_number__qt': 'QuoteNumber__QT',
        'quote_type__qt': 'QuoteType__QT',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'project__ns': 'Project__NS',
        'sales_order__ns': 'SalesOrder__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, auto_renew=None, contract_effective_date=None, customer_acceptance_date=None, initial_term=None, invoice_owner_account_key=None, invoice_separately=None, notes=None, renewal_term=None, service_activation_date=None, subscribe_to_rate_plans=None, subscription_number=None, term_start_date=None, term_type=None, cpq_bundle_json_id__qt=None, opportunity_close_date__qt=None, opportunity_name__qt=None, quote_business_type__qt=None, quote_number__qt=None, quote_type__qt=None, integration_id__ns=None, integration_status__ns=None, project__ns=None, sales_order__ns=None, sync_date__ns=None):  # noqa: E501
        """CreateAccountSubscription - a model defined in Swagger"""  # noqa: E501
        self._auto_renew = None
        self._contract_effective_date = None
        self._customer_acceptance_date = None
        self._initial_term = None
        self._invoice_owner_account_key = None
        self._invoice_separately = None
        self._notes = None
        self._renewal_term = None
        self._service_activation_date = None
        self._subscribe_to_rate_plans = None
        self._subscription_number = None
        self._term_start_date = None
        self._term_type = None
        self._cpq_bundle_json_id__qt = None
        self._opportunity_close_date__qt = None
        self._opportunity_name__qt = None
        self._quote_business_type__qt = None
        self._quote_number__qt = None
        self._quote_type__qt = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._project__ns = None
        self._sales_order__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        if auto_renew is not None:
            self.auto_renew = auto_renew
        self.contract_effective_date = contract_effective_date
        if customer_acceptance_date is not None:
            self.customer_acceptance_date = customer_acceptance_date
        if initial_term is not None:
            self.initial_term = initial_term
        if invoice_owner_account_key is not None:
            self.invoice_owner_account_key = invoice_owner_account_key
        if invoice_separately is not None:
            self.invoice_separately = invoice_separately
        if notes is not None:
            self.notes = notes
        if renewal_term is not None:
            self.renewal_term = renewal_term
        if service_activation_date is not None:
            self.service_activation_date = service_activation_date
        if subscribe_to_rate_plans is not None:
            self.subscribe_to_rate_plans = subscribe_to_rate_plans
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if term_start_date is not None:
            self.term_start_date = term_start_date
        self.term_type = term_type
        if cpq_bundle_json_id__qt is not None:
            self.cpq_bundle_json_id__qt = cpq_bundle_json_id__qt
        if opportunity_close_date__qt is not None:
            self.opportunity_close_date__qt = opportunity_close_date__qt
        if opportunity_name__qt is not None:
            self.opportunity_name__qt = opportunity_name__qt
        if quote_business_type__qt is not None:
            self.quote_business_type__qt = quote_business_type__qt
        if quote_number__qt is not None:
            self.quote_number__qt = quote_number__qt
        if quote_type__qt is not None:
            self.quote_type__qt = quote_type__qt
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if project__ns is not None:
            self.project__ns = project__ns
        if sales_order__ns is not None:
            self.sales_order__ns = sales_order__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def auto_renew(self):
        """Gets the auto_renew of this CreateAccountSubscription.  # noqa: E501

        If `true`, auto-renew is enabled. Default is `false`.   # noqa: E501

        :return: The auto_renew of this CreateAccountSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this CreateAccountSubscription.

        If `true`, auto-renew is enabled. Default is `false`.   # noqa: E501

        :param auto_renew: The auto_renew of this CreateAccountSubscription.  # noqa: E501
        :type: bool
        """

        self._auto_renew = auto_renew

    @property
    def contract_effective_date(self):
        """Gets the contract_effective_date of this CreateAccountSubscription.  # noqa: E501

        Effective contract date for this subscription, as `yyyy-mm-dd`.   # noqa: E501

        :return: The contract_effective_date of this CreateAccountSubscription.  # noqa: E501
        :rtype: date
        """
        return self._contract_effective_date

    @contract_effective_date.setter
    def contract_effective_date(self, contract_effective_date):
        """Sets the contract_effective_date of this CreateAccountSubscription.

        Effective contract date for this subscription, as `yyyy-mm-dd`.   # noqa: E501

        :param contract_effective_date: The contract_effective_date of this CreateAccountSubscription.  # noqa: E501
        :type: date
        """
        if contract_effective_date is None:
            raise ValueError("Invalid value for `contract_effective_date`, must not be `None`")  # noqa: E501

        self._contract_effective_date = contract_effective_date

    @property
    def customer_acceptance_date(self):
        """Gets the customer_acceptance_date of this CreateAccountSubscription.  # noqa: E501

        The date on which the services or products within a subscription have been accepted by the customer, as `yyyy-mm-dd`.  Default value is dependent on the value of other fields. See Notes section for more details.   # noqa: E501

        :return: The customer_acceptance_date of this CreateAccountSubscription.  # noqa: E501
        :rtype: date
        """
        return self._customer_acceptance_date

    @customer_acceptance_date.setter
    def customer_acceptance_date(self, customer_acceptance_date):
        """Sets the customer_acceptance_date of this CreateAccountSubscription.

        The date on which the services or products within a subscription have been accepted by the customer, as `yyyy-mm-dd`.  Default value is dependent on the value of other fields. See Notes section for more details.   # noqa: E501

        :param customer_acceptance_date: The customer_acceptance_date of this CreateAccountSubscription.  # noqa: E501
        :type: date
        """

        self._customer_acceptance_date = customer_acceptance_date

    @property
    def initial_term(self):
        """Gets the initial_term of this CreateAccountSubscription.  # noqa: E501

        Duration of the initial subscription term in whole months.  Default is 0.    # noqa: E501

        :return: The initial_term of this CreateAccountSubscription.  # noqa: E501
        :rtype: int
        """
        return self._initial_term

    @initial_term.setter
    def initial_term(self, initial_term):
        """Sets the initial_term of this CreateAccountSubscription.

        Duration of the initial subscription term in whole months.  Default is 0.    # noqa: E501

        :param initial_term: The initial_term of this CreateAccountSubscription.  # noqa: E501
        :type: int
        """

        self._initial_term = initial_term

    @property
    def invoice_owner_account_key(self):
        """Gets the invoice_owner_account_key of this CreateAccountSubscription.  # noqa: E501

        Invoice owner account number or ID.  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).    # noqa: E501

        :return: The invoice_owner_account_key of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._invoice_owner_account_key

    @invoice_owner_account_key.setter
    def invoice_owner_account_key(self, invoice_owner_account_key):
        """Sets the invoice_owner_account_key of this CreateAccountSubscription.

        Invoice owner account number or ID.  **Note:** This feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).    # noqa: E501

        :param invoice_owner_account_key: The invoice_owner_account_key of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._invoice_owner_account_key = invoice_owner_account_key

    @property
    def invoice_separately(self):
        """Gets the invoice_separately of this CreateAccountSubscription.  # noqa: E501

        Separates a single subscription from other subscriptions and invoices the charge independently.   If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice. The default value is `false`.  Prerequisite: The default subscription setting `Enable Subscriptions to be Invoiced Separately` must be set to `Yes`.   # noqa: E501

        :return: The invoice_separately of this CreateAccountSubscription.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_separately

    @invoice_separately.setter
    def invoice_separately(self, invoice_separately):
        """Sets the invoice_separately of this CreateAccountSubscription.

        Separates a single subscription from other subscriptions and invoices the charge independently.   If the value is `true`, the subscription is billed separately from other subscriptions. If the value is `false`, the subscription is included with other subscriptions in the account invoice. The default value is `false`.  Prerequisite: The default subscription setting `Enable Subscriptions to be Invoiced Separately` must be set to `Yes`.   # noqa: E501

        :param invoice_separately: The invoice_separately of this CreateAccountSubscription.  # noqa: E501
        :type: bool
        """

        self._invoice_separately = invoice_separately

    @property
    def notes(self):
        """Gets the notes of this CreateAccountSubscription.  # noqa: E501


        :return: The notes of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateAccountSubscription.


        :param notes: The notes of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def renewal_term(self):
        """Gets the renewal_term of this CreateAccountSubscription.  # noqa: E501

        Duration of the renewal term in whole months. Default is 0.   # noqa: E501

        :return: The renewal_term of this CreateAccountSubscription.  # noqa: E501
        :rtype: int
        """
        return self._renewal_term

    @renewal_term.setter
    def renewal_term(self, renewal_term):
        """Sets the renewal_term of this CreateAccountSubscription.

        Duration of the renewal term in whole months. Default is 0.   # noqa: E501

        :param renewal_term: The renewal_term of this CreateAccountSubscription.  # noqa: E501
        :type: int
        """

        self._renewal_term = renewal_term

    @property
    def service_activation_date(self):
        """Gets the service_activation_date of this CreateAccountSubscription.  # noqa: E501

        The date on which the services or products within a subscription have been activated and access has been provided to the customer, as `yyyy-mm-dd`.  Default value is dependent on the value of other fields. See Notes section for more details.   # noqa: E501

        :return: The service_activation_date of this CreateAccountSubscription.  # noqa: E501
        :rtype: date
        """
        return self._service_activation_date

    @service_activation_date.setter
    def service_activation_date(self, service_activation_date):
        """Sets the service_activation_date of this CreateAccountSubscription.

        The date on which the services or products within a subscription have been activated and access has been provided to the customer, as `yyyy-mm-dd`.  Default value is dependent on the value of other fields. See Notes section for more details.   # noqa: E501

        :param service_activation_date: The service_activation_date of this CreateAccountSubscription.  # noqa: E501
        :type: date
        """

        self._service_activation_date = service_activation_date

    @property
    def subscribe_to_rate_plans(self):
        """Gets the subscribe_to_rate_plans of this CreateAccountSubscription.  # noqa: E501

        Container for one or more rate plans for this subscription.   # noqa: E501

        :return: The subscribe_to_rate_plans of this CreateAccountSubscription.  # noqa: E501
        :rtype: list[CreateSubscriptionRatePlan]
        """
        return self._subscribe_to_rate_plans

    @subscribe_to_rate_plans.setter
    def subscribe_to_rate_plans(self, subscribe_to_rate_plans):
        """Sets the subscribe_to_rate_plans of this CreateAccountSubscription.

        Container for one or more rate plans for this subscription.   # noqa: E501

        :param subscribe_to_rate_plans: The subscribe_to_rate_plans of this CreateAccountSubscription.  # noqa: E501
        :type: list[CreateSubscriptionRatePlan]
        """

        self._subscribe_to_rate_plans = subscribe_to_rate_plans

    @property
    def subscription_number(self):
        """Gets the subscription_number of this CreateAccountSubscription.  # noqa: E501

        Subscription Number. The value can be up to 1000 characters.  If you do not specify a subscription number when creating a subscription for the new account, Zuora will generate a subscription number automatically.  If the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.   # noqa: E501

        :return: The subscription_number of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this CreateAccountSubscription.

        Subscription Number. The value can be up to 1000 characters.  If you do not specify a subscription number when creating a subscription for the new account, Zuora will generate a subscription number automatically.  If the account is created successfully, the subscription number is returned in the `subscriptionNumber` response field.   # noqa: E501

        :param subscription_number: The subscription_number of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def term_start_date(self):
        """Gets the term_start_date of this CreateAccountSubscription.  # noqa: E501

        The date on which the subscription term begins, as `yyyy-mm-dd`. If this is a renewal subscription, this date is different from the subscription start date.   # noqa: E501

        :return: The term_start_date of this CreateAccountSubscription.  # noqa: E501
        :rtype: date
        """
        return self._term_start_date

    @term_start_date.setter
    def term_start_date(self, term_start_date):
        """Sets the term_start_date of this CreateAccountSubscription.

        The date on which the subscription term begins, as `yyyy-mm-dd`. If this is a renewal subscription, this date is different from the subscription start date.   # noqa: E501

        :param term_start_date: The term_start_date of this CreateAccountSubscription.  # noqa: E501
        :type: date
        """

        self._term_start_date = term_start_date

    @property
    def term_type(self):
        """Gets the term_type of this CreateAccountSubscription.  # noqa: E501

        Possible values are: `TERMED`, `EVERGREEN`.   # noqa: E501

        :return: The term_type of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._term_type

    @term_type.setter
    def term_type(self, term_type):
        """Sets the term_type of this CreateAccountSubscription.

        Possible values are: `TERMED`, `EVERGREEN`.   # noqa: E501

        :param term_type: The term_type of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """
        if term_type is None:
            raise ValueError("Invalid value for `term_type`, must not be `None`")  # noqa: E501

        self._term_type = term_type

    @property
    def cpq_bundle_json_id__qt(self):
        """Gets the cpq_bundle_json_id__qt of this CreateAccountSubscription.  # noqa: E501

        The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.   # noqa: E501

        :return: The cpq_bundle_json_id__qt of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._cpq_bundle_json_id__qt

    @cpq_bundle_json_id__qt.setter
    def cpq_bundle_json_id__qt(self, cpq_bundle_json_id__qt):
        """Sets the cpq_bundle_json_id__qt of this CreateAccountSubscription.

        The Bundle product structures from Zuora Quotes if you utilize Bundling in Salesforce. Do not change the value in this field.   # noqa: E501

        :param cpq_bundle_json_id__qt: The cpq_bundle_json_id__qt of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._cpq_bundle_json_id__qt = cpq_bundle_json_id__qt

    @property
    def opportunity_close_date__qt(self):
        """Gets the opportunity_close_date__qt of this CreateAccountSubscription.  # noqa: E501

        The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The opportunity_close_date__qt of this CreateAccountSubscription.  # noqa: E501
        :rtype: date
        """
        return self._opportunity_close_date__qt

    @opportunity_close_date__qt.setter
    def opportunity_close_date__qt(self, opportunity_close_date__qt):
        """Sets the opportunity_close_date__qt of this CreateAccountSubscription.

        The closing date of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param opportunity_close_date__qt: The opportunity_close_date__qt of this CreateAccountSubscription.  # noqa: E501
        :type: date
        """

        self._opportunity_close_date__qt = opportunity_close_date__qt

    @property
    def opportunity_name__qt(self):
        """Gets the opportunity_name__qt of this CreateAccountSubscription.  # noqa: E501

        The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The opportunity_name__qt of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._opportunity_name__qt

    @opportunity_name__qt.setter
    def opportunity_name__qt(self, opportunity_name__qt):
        """Sets the opportunity_name__qt of this CreateAccountSubscription.

        The unique identifier of the Opportunity. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param opportunity_name__qt: The opportunity_name__qt of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._opportunity_name__qt = opportunity_name__qt

    @property
    def quote_business_type__qt(self):
        """Gets the quote_business_type__qt of this CreateAccountSubscription.  # noqa: E501

        The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_business_type__qt of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._quote_business_type__qt

    @quote_business_type__qt.setter
    def quote_business_type__qt(self, quote_business_type__qt):
        """Sets the quote_business_type__qt of this CreateAccountSubscription.

        The specific identifier for the type of business transaction the Quote represents such as New, Upsell, Downsell, Renewal or Churn. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_business_type__qt: The quote_business_type__qt of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._quote_business_type__qt = quote_business_type__qt

    @property
    def quote_number__qt(self):
        """Gets the quote_number__qt of this CreateAccountSubscription.  # noqa: E501

        The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_number__qt of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._quote_number__qt

    @quote_number__qt.setter
    def quote_number__qt(self, quote_number__qt):
        """Sets the quote_number__qt of this CreateAccountSubscription.

        The unique identifier of the Quote. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_number__qt: The quote_number__qt of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._quote_number__qt = quote_number__qt

    @property
    def quote_type__qt(self):
        """Gets the quote_type__qt of this CreateAccountSubscription.  # noqa: E501

        The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :return: The quote_type__qt of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._quote_type__qt

    @quote_type__qt.setter
    def quote_type__qt(self, quote_type__qt):
        """Sets the quote_type__qt of this CreateAccountSubscription.

        The Quote type that represents the subscription lifecycle stage such as New, Amendment, Renew or Cancel. This field is used in Zuora data sources to report on Subscription metrics. If the subscription originated from Zuora Quotes, the value is populated with the value from Zuora Quotes.   # noqa: E501

        :param quote_type__qt: The quote_type__qt of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._quote_type__qt = quote_type__qt

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this CreateAccountSubscription.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this CreateAccountSubscription.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this CreateAccountSubscription.  # noqa: E501

        Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this CreateAccountSubscription.

        Status of the subscription's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def project__ns(self):
        """Gets the project__ns of this CreateAccountSubscription.  # noqa: E501

        The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The project__ns of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._project__ns

    @project__ns.setter
    def project__ns(self, project__ns):
        """Sets the project__ns of this CreateAccountSubscription.

        The NetSuite project that the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param project__ns: The project__ns of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._project__ns = project__ns

    @property
    def sales_order__ns(self):
        """Gets the sales_order__ns of this CreateAccountSubscription.  # noqa: E501

        The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sales_order__ns of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._sales_order__ns

    @sales_order__ns.setter
    def sales_order__ns(self, sales_order__ns):
        """Sets the sales_order__ns of this CreateAccountSubscription.

        The NetSuite sales order than the subscription was created from. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sales_order__ns: The sales_order__ns of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._sales_order__ns = sales_order__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this CreateAccountSubscription.  # noqa: E501

        Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this CreateAccountSubscription.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this CreateAccountSubscription.

        Date when the subscription was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this CreateAccountSubscription.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAccountSubscription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAccountSubscription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
