# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BulkCreateDebitMemosFromChargeRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_type': 'str',
        'memos': 'list[CreateDebitMemoFromCharge]'
    }

    attribute_map = {
        'source_type': 'sourceType',
        'memos': 'memos'
    }

    def __init__(self, source_type='Standalone', memos=None):  # noqa: E501
        """BulkCreateDebitMemosFromChargeRequest - a model defined in Swagger"""  # noqa: E501
        self._source_type = None
        self._memos = None
        self.discriminator = None
        self.source_type = source_type
        if memos is not None:
            self.memos = memos

    @property
    def source_type(self):
        """Gets the source_type of this BulkCreateDebitMemosFromChargeRequest.  # noqa: E501


        :return: The source_type of this BulkCreateDebitMemosFromChargeRequest.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this BulkCreateDebitMemosFromChargeRequest.


        :param source_type: The source_type of this BulkCreateDebitMemosFromChargeRequest.  # noqa: E501
        :type: str
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Standalone"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def memos(self):
        """Gets the memos of this BulkCreateDebitMemosFromChargeRequest.  # noqa: E501

        The container for a list of debit memos. The maximum number of debit memos is 50.   # noqa: E501

        :return: The memos of this BulkCreateDebitMemosFromChargeRequest.  # noqa: E501
        :rtype: list[CreateDebitMemoFromCharge]
        """
        return self._memos

    @memos.setter
    def memos(self, memos):
        """Sets the memos of this BulkCreateDebitMemosFromChargeRequest.

        The container for a list of debit memos. The maximum number of debit memos is 50.   # noqa: E501

        :param memos: The memos of this BulkCreateDebitMemosFromChargeRequest.  # noqa: E501
        :type: list[CreateDebitMemoFromCharge]
        """

        self._memos = memos

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BulkCreateDebitMemosFromChargeRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BulkCreateDebitMemosFromChargeRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
