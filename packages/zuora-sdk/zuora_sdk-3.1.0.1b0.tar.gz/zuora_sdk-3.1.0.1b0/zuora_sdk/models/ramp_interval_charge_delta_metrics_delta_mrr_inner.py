# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RampIntervalChargeDeltaMetricsDeltaMrrInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'discount': 'float',
        'end_date': 'date',
        'gross': 'float',
        'net': 'float',
        'start_date': 'date'
    }

    attribute_map = {
        'discount': 'discount',
        'end_date': 'endDate',
        'gross': 'gross',
        'net': 'net',
        'start_date': 'startDate'
    }

    def __init__(self, discount=None, end_date=None, gross=None, net=None, start_date=None):  # noqa: E501
        """RampIntervalChargeDeltaMetricsDeltaMrrInner - a model defined in Swagger"""  # noqa: E501
        self._discount = None
        self._end_date = None
        self._gross = None
        self._net = None
        self._start_date = None
        self.discriminator = None
        if discount is not None:
            self.discount = discount
        if end_date is not None:
            self.end_date = end_date
        if gross is not None:
            self.gross = gross
        if net is not None:
            self.net = net
        if start_date is not None:
            self.start_date = start_date

    @property
    def discount(self):
        """Gets the discount of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501

        The discount delta amount for the MRR.  # noqa: E501

        :return: The discount of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this RampIntervalChargeDeltaMetricsDeltaMrrInner.

        The discount delta amount for the MRR.  # noqa: E501

        :param discount: The discount of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def end_date(self):
        """Gets the end_date of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501

        The end date.  # noqa: E501

        :return: The end_date of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this RampIntervalChargeDeltaMetricsDeltaMrrInner.

        The end date.  # noqa: E501

        :param end_date: The end_date of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def gross(self):
        """Gets the gross of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501

        The MRR delta amount before discounts charges are applied.  # noqa: E501

        :return: The gross of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :rtype: float
        """
        return self._gross

    @gross.setter
    def gross(self, gross):
        """Sets the gross of this RampIntervalChargeDeltaMetricsDeltaMrrInner.

        The MRR delta amount before discounts charges are applied.  # noqa: E501

        :param gross: The gross of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :type: float
        """

        self._gross = gross

    @property
    def net(self):
        """Gets the net of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501

        The MRR delta amount after discounts charges are applied.  # noqa: E501

        :return: The net of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :rtype: float
        """
        return self._net

    @net.setter
    def net(self, net):
        """Sets the net of this RampIntervalChargeDeltaMetricsDeltaMrrInner.

        The MRR delta amount after discounts charges are applied.  # noqa: E501

        :param net: The net of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :type: float
        """

        self._net = net

    @property
    def start_date(self):
        """Gets the start_date of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501

        The start date.  # noqa: E501

        :return: The start_date of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this RampIntervalChargeDeltaMetricsDeltaMrrInner.

        The start date.  # noqa: E501

        :param start_date: The start_date of this RampIntervalChargeDeltaMetricsDeltaMrrInner.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RampIntervalChargeDeltaMetricsDeltaMrrInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RampIntervalChargeDeltaMetricsDeltaMrrInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
