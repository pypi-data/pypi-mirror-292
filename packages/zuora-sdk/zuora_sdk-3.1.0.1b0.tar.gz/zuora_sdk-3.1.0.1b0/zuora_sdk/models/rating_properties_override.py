# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RatingPropertiesOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_prorate_partial_month': 'bool',
        'proration_unit': 'ChargeProrationRuleProrationUnit',
        'days_in_month': 'ChargeProrationRuleDaysInMonth'
    }

    attribute_map = {
        'is_prorate_partial_month': 'isProratePartialMonth',
        'proration_unit': 'prorationUnit',
        'days_in_month': 'daysInMonth'
    }

    def __init__(self, is_prorate_partial_month=None, proration_unit=None, days_in_month=None):  # noqa: E501
        """RatingPropertiesOverride - a model defined in Swagger"""  # noqa: E501
        self._is_prorate_partial_month = None
        self._proration_unit = None
        self._days_in_month = None
        self.discriminator = None
        if is_prorate_partial_month is not None:
            self.is_prorate_partial_month = is_prorate_partial_month
        if proration_unit is not None:
            self.proration_unit = proration_unit
        if days_in_month is not None:
            self.days_in_month = days_in_month

    @property
    def is_prorate_partial_month(self):
        """Gets the is_prorate_partial_month of this RatingPropertiesOverride.  # noqa: E501

        Indicates whether to prorate the charge for the partial month.   # noqa: E501

        :return: The is_prorate_partial_month of this RatingPropertiesOverride.  # noqa: E501
        :rtype: bool
        """
        return self._is_prorate_partial_month

    @is_prorate_partial_month.setter
    def is_prorate_partial_month(self, is_prorate_partial_month):
        """Sets the is_prorate_partial_month of this RatingPropertiesOverride.

        Indicates whether to prorate the charge for the partial month.   # noqa: E501

        :param is_prorate_partial_month: The is_prorate_partial_month of this RatingPropertiesOverride.  # noqa: E501
        :type: bool
        """

        self._is_prorate_partial_month = is_prorate_partial_month

    @property
    def proration_unit(self):
        """Gets the proration_unit of this RatingPropertiesOverride.  # noqa: E501


        :return: The proration_unit of this RatingPropertiesOverride.  # noqa: E501
        :rtype: ChargeProrationRuleProrationUnit
        """
        return self._proration_unit

    @proration_unit.setter
    def proration_unit(self, proration_unit):
        """Sets the proration_unit of this RatingPropertiesOverride.


        :param proration_unit: The proration_unit of this RatingPropertiesOverride.  # noqa: E501
        :type: ChargeProrationRuleProrationUnit
        """

        self._proration_unit = proration_unit

    @property
    def days_in_month(self):
        """Gets the days_in_month of this RatingPropertiesOverride.  # noqa: E501


        :return: The days_in_month of this RatingPropertiesOverride.  # noqa: E501
        :rtype: ChargeProrationRuleDaysInMonth
        """
        return self._days_in_month

    @days_in_month.setter
    def days_in_month(self, days_in_month):
        """Sets the days_in_month of this RatingPropertiesOverride.


        :param days_in_month: The days_in_month of this RatingPropertiesOverride.  # noqa: E501
        :type: ChargeProrationRuleDaysInMonth
        """

        self._days_in_month = days_in_month

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RatingPropertiesOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatingPropertiesOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
