# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ChargeOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'account_receivable_accounting_code': 'str',
        'adjustment_liability_accounting_code': 'str',
        'adjustment_revenue_accounting_code': 'str',
        'contract_asset_accounting_code': 'str',
        'contract_liability_accounting_code': 'str',
        'contract_recognized_revenue_accounting_code': 'str',
        'deferred_revenue_accounting_code': 'str',
        'recognized_revenue_accounting_code': 'str',
        'un_billed_receivables_accounting_code': 'str',
        'product_category': 'str',
        'product_class': 'str',
        'product_family': 'str',
        'product_line': 'str',
        'charge_model': 'ChargeModel',
        'charge_type': 'ChargeType',
        'tax_code': 'str',
        'tax_mode': 'TaxMode',
        'revenue_recognition_timing': 'str',
        'revenue_amortization_method': 'str',
        'is_charge_level_min_commit': 'bool',
        'commitment_type': 'CommitmentType',
        'prepaid_operation_type': 'PrepaidOperationType',
        'is_committed': 'bool',
        'charge_function': 'ChargeFunction',
        'prepaid_uom': 'str',
        'drawdown_uom': 'str',
        'prepaid_total_quantity': 'float',
        'is_prepaid': 'bool',
        'credit_option': 'PrepaidDrawdownCreditOption',
        'billing': 'ChargeOverrideBilling',
        'charge_number': 'str',
        'custom_fields': 'dict(str, object)',
        'description': 'str',
        'drawdown_rate': 'float',
        'end_date': 'EndConditions',
        'exclude_item_billing_from_revenue_accounting': 'bool',
        'exclude_item_booking_from_revenue_accounting': 'bool',
        'is_allocation_eligible': 'bool',
        'is_rollover': 'bool',
        'is_unbilled': 'bool',
        'prepaid_quantity': 'float',
        'pricing': 'ChargeOverridePricing',
        'product_rate_plan_charge_number': 'str',
        'product_rate_plan_charge_id': 'str',
        'proration_option': 'ProrationOption',
        'rating_properties_override': 'RatingPropertiesOverride',
        'rev_rec_code': 'str',
        'rev_rec_trigger_condition': 'RevRecTriggerCondition',
        'revenue_recognition_rule_name': 'str',
        'rollover_apply': 'RolloverApply',
        'rollover_periods': 'float',
        'start_date': 'TriggerParams',
        'unique_token': 'str',
        'upsell_origin_charge_number': 'str',
        'validity_period_type': 'ValidityPeriodType',
        'commitment_level': 'CommitmentLevel'
    }

    attribute_map = {
        'name': 'name',
        'account_receivable_accounting_code': 'accountReceivableAccountingCode',
        'adjustment_liability_accounting_code': 'adjustmentLiabilityAccountingCode',
        'adjustment_revenue_accounting_code': 'adjustmentRevenueAccountingCode',
        'contract_asset_accounting_code': 'contractAssetAccountingCode',
        'contract_liability_accounting_code': 'contractLiabilityAccountingCode',
        'contract_recognized_revenue_accounting_code': 'contractRecognizedRevenueAccountingCode',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'un_billed_receivables_accounting_code': 'unBilledReceivablesAccountingCode',
        'product_category': 'productCategory',
        'product_class': 'productClass',
        'product_family': 'productFamily',
        'product_line': 'productLine',
        'charge_model': 'chargeModel',
        'charge_type': 'chargeType',
        'tax_code': 'taxCode',
        'tax_mode': 'taxMode',
        'revenue_recognition_timing': 'revenueRecognitionTiming',
        'revenue_amortization_method': 'revenueAmortizationMethod',
        'is_charge_level_min_commit': 'isChargeLevelMinCommit',
        'commitment_type': 'commitmentType',
        'prepaid_operation_type': 'prepaidOperationType',
        'is_committed': 'isCommitted',
        'charge_function': 'chargeFunction',
        'prepaid_uom': 'prepaidUom',
        'drawdown_uom': 'drawdownUom',
        'prepaid_total_quantity': 'prepaidTotalQuantity',
        'is_prepaid': 'isPrepaid',
        'credit_option': 'creditOption',
        'billing': 'billing',
        'charge_number': 'chargeNumber',
        'custom_fields': 'customFields',
        'description': 'description',
        'drawdown_rate': 'drawdownRate',
        'end_date': 'endDate',
        'exclude_item_billing_from_revenue_accounting': 'excludeItemBillingFromRevenueAccounting',
        'exclude_item_booking_from_revenue_accounting': 'excludeItemBookingFromRevenueAccounting',
        'is_allocation_eligible': 'isAllocationEligible',
        'is_rollover': 'isRollover',
        'is_unbilled': 'isUnbilled',
        'prepaid_quantity': 'prepaidQuantity',
        'pricing': 'pricing',
        'product_rate_plan_charge_number': 'productRatePlanChargeNumber',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'proration_option': 'prorationOption',
        'rating_properties_override': 'ratingPropertiesOverride',
        'rev_rec_code': 'revRecCode',
        'rev_rec_trigger_condition': 'revRecTriggerCondition',
        'revenue_recognition_rule_name': 'revenueRecognitionRuleName',
        'rollover_apply': 'rolloverApply',
        'rollover_periods': 'rolloverPeriods',
        'start_date': 'startDate',
        'unique_token': 'uniqueToken',
        'upsell_origin_charge_number': 'upsellOriginChargeNumber',
        'validity_period_type': 'validityPeriodType',
        'commitment_level': 'commitmentLevel'
    }

    def __init__(self, name=None, account_receivable_accounting_code=None, adjustment_liability_accounting_code=None, adjustment_revenue_accounting_code=None, contract_asset_accounting_code=None, contract_liability_accounting_code=None, contract_recognized_revenue_accounting_code=None, deferred_revenue_accounting_code=None, recognized_revenue_accounting_code=None, un_billed_receivables_accounting_code=None, product_category=None, product_class=None, product_family=None, product_line=None, charge_model=None, charge_type=None, tax_code=None, tax_mode=None, revenue_recognition_timing=None, revenue_amortization_method=None, is_charge_level_min_commit=None, commitment_type=None, prepaid_operation_type=None, is_committed=None, charge_function=None, prepaid_uom=None, drawdown_uom=None, prepaid_total_quantity=None, is_prepaid=None, credit_option=None, billing=None, charge_number=None, custom_fields=None, description=None, drawdown_rate=None, end_date=None, exclude_item_billing_from_revenue_accounting=None, exclude_item_booking_from_revenue_accounting=None, is_allocation_eligible=None, is_rollover=None, is_unbilled=None, prepaid_quantity=None, pricing=None, product_rate_plan_charge_number=None, product_rate_plan_charge_id=None, proration_option=None, rating_properties_override=None, rev_rec_code=None, rev_rec_trigger_condition=None, revenue_recognition_rule_name=None, rollover_apply=None, rollover_periods=None, start_date=None, unique_token=None, upsell_origin_charge_number=None, validity_period_type=None, commitment_level=None):  # noqa: E501
        """ChargeOverride - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._account_receivable_accounting_code = None
        self._adjustment_liability_accounting_code = None
        self._adjustment_revenue_accounting_code = None
        self._contract_asset_accounting_code = None
        self._contract_liability_accounting_code = None
        self._contract_recognized_revenue_accounting_code = None
        self._deferred_revenue_accounting_code = None
        self._recognized_revenue_accounting_code = None
        self._un_billed_receivables_accounting_code = None
        self._product_category = None
        self._product_class = None
        self._product_family = None
        self._product_line = None
        self._charge_model = None
        self._charge_type = None
        self._tax_code = None
        self._tax_mode = None
        self._revenue_recognition_timing = None
        self._revenue_amortization_method = None
        self._is_charge_level_min_commit = None
        self._commitment_type = None
        self._prepaid_operation_type = None
        self._is_committed = None
        self._charge_function = None
        self._prepaid_uom = None
        self._drawdown_uom = None
        self._prepaid_total_quantity = None
        self._is_prepaid = None
        self._credit_option = None
        self._billing = None
        self._charge_number = None
        self._custom_fields = None
        self._description = None
        self._drawdown_rate = None
        self._end_date = None
        self._exclude_item_billing_from_revenue_accounting = None
        self._exclude_item_booking_from_revenue_accounting = None
        self._is_allocation_eligible = None
        self._is_rollover = None
        self._is_unbilled = None
        self._prepaid_quantity = None
        self._pricing = None
        self._product_rate_plan_charge_number = None
        self._product_rate_plan_charge_id = None
        self._proration_option = None
        self._rating_properties_override = None
        self._rev_rec_code = None
        self._rev_rec_trigger_condition = None
        self._revenue_recognition_rule_name = None
        self._rollover_apply = None
        self._rollover_periods = None
        self._start_date = None
        self._unique_token = None
        self._upsell_origin_charge_number = None
        self._validity_period_type = None
        self._commitment_level = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if account_receivable_accounting_code is not None:
            self.account_receivable_accounting_code = account_receivable_accounting_code
        if adjustment_liability_accounting_code is not None:
            self.adjustment_liability_accounting_code = adjustment_liability_accounting_code
        if adjustment_revenue_accounting_code is not None:
            self.adjustment_revenue_accounting_code = adjustment_revenue_accounting_code
        if contract_asset_accounting_code is not None:
            self.contract_asset_accounting_code = contract_asset_accounting_code
        if contract_liability_accounting_code is not None:
            self.contract_liability_accounting_code = contract_liability_accounting_code
        if contract_recognized_revenue_accounting_code is not None:
            self.contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if un_billed_receivables_accounting_code is not None:
            self.un_billed_receivables_accounting_code = un_billed_receivables_accounting_code
        if product_category is not None:
            self.product_category = product_category
        if product_class is not None:
            self.product_class = product_class
        if product_family is not None:
            self.product_family = product_family
        if product_line is not None:
            self.product_line = product_line
        if charge_model is not None:
            self.charge_model = charge_model
        if charge_type is not None:
            self.charge_type = charge_type
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_mode is not None:
            self.tax_mode = tax_mode
        if revenue_recognition_timing is not None:
            self.revenue_recognition_timing = revenue_recognition_timing
        if revenue_amortization_method is not None:
            self.revenue_amortization_method = revenue_amortization_method
        if is_charge_level_min_commit is not None:
            self.is_charge_level_min_commit = is_charge_level_min_commit
        if commitment_type is not None:
            self.commitment_type = commitment_type
        if prepaid_operation_type is not None:
            self.prepaid_operation_type = prepaid_operation_type
        if is_committed is not None:
            self.is_committed = is_committed
        if charge_function is not None:
            self.charge_function = charge_function
        if prepaid_uom is not None:
            self.prepaid_uom = prepaid_uom
        if drawdown_uom is not None:
            self.drawdown_uom = drawdown_uom
        if prepaid_total_quantity is not None:
            self.prepaid_total_quantity = prepaid_total_quantity
        if is_prepaid is not None:
            self.is_prepaid = is_prepaid
        if credit_option is not None:
            self.credit_option = credit_option
        if billing is not None:
            self.billing = billing
        if charge_number is not None:
            self.charge_number = charge_number
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if description is not None:
            self.description = description
        if drawdown_rate is not None:
            self.drawdown_rate = drawdown_rate
        if end_date is not None:
            self.end_date = end_date
        if exclude_item_billing_from_revenue_accounting is not None:
            self.exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting
        if exclude_item_booking_from_revenue_accounting is not None:
            self.exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting
        if is_allocation_eligible is not None:
            self.is_allocation_eligible = is_allocation_eligible
        if is_rollover is not None:
            self.is_rollover = is_rollover
        if is_unbilled is not None:
            self.is_unbilled = is_unbilled
        if prepaid_quantity is not None:
            self.prepaid_quantity = prepaid_quantity
        if pricing is not None:
            self.pricing = pricing
        if product_rate_plan_charge_number is not None:
            self.product_rate_plan_charge_number = product_rate_plan_charge_number
        self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if proration_option is not None:
            self.proration_option = proration_option
        if rating_properties_override is not None:
            self.rating_properties_override = rating_properties_override
        if rev_rec_code is not None:
            self.rev_rec_code = rev_rec_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if rollover_apply is not None:
            self.rollover_apply = rollover_apply
        if rollover_periods is not None:
            self.rollover_periods = rollover_periods
        if start_date is not None:
            self.start_date = start_date
        if unique_token is not None:
            self.unique_token = unique_token
        if upsell_origin_charge_number is not None:
            self.upsell_origin_charge_number = upsell_origin_charge_number
        if validity_period_type is not None:
            self.validity_period_type = validity_period_type
        if commitment_level is not None:
            self.commitment_level = commitment_level

    @property
    def name(self):
        """Gets the name of this ChargeOverride.  # noqa: E501

        The name of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :return: The name of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ChargeOverride.

        The name of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :param name: The name of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def account_receivable_accounting_code(self):
        """Gets the account_receivable_accounting_code of this ChargeOverride.  # noqa: E501

        The accountReceivableAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a>, <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance\" target=\"_blank\">Zuora Finance</a>, and <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement\" target=\"_blank\">Invoice Settlement</a> features are enabled.   # noqa: E501

        :return: The account_receivable_accounting_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._account_receivable_accounting_code

    @account_receivable_accounting_code.setter
    def account_receivable_accounting_code(self, account_receivable_accounting_code):
        """Sets the account_receivable_accounting_code of this ChargeOverride.

        The accountReceivableAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a>, <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance\" target=\"_blank\">Zuora Finance</a>, and <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Adjust_invoice_amounts/Invoice_Settlement/Get_started_with_Invoice_Settlement/AA_Overview_of_Invoice_Settlement\" target=\"_blank\">Invoice Settlement</a> features are enabled.   # noqa: E501

        :param account_receivable_accounting_code: The account_receivable_accounting_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._account_receivable_accounting_code = account_receivable_accounting_code

    @property
    def adjustment_liability_accounting_code(self):
        """Gets the adjustment_liability_accounting_code of this ChargeOverride.  # noqa: E501

        The adjustmentLiabilityAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :return: The adjustment_liability_accounting_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_liability_accounting_code

    @adjustment_liability_accounting_code.setter
    def adjustment_liability_accounting_code(self, adjustment_liability_accounting_code):
        """Sets the adjustment_liability_accounting_code of this ChargeOverride.

        The adjustmentLiabilityAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :param adjustment_liability_accounting_code: The adjustment_liability_accounting_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._adjustment_liability_accounting_code = adjustment_liability_accounting_code

    @property
    def adjustment_revenue_accounting_code(self):
        """Gets the adjustment_revenue_accounting_code of this ChargeOverride.  # noqa: E501

        The adjustmentRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :return: The adjustment_revenue_accounting_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_revenue_accounting_code

    @adjustment_revenue_accounting_code.setter
    def adjustment_revenue_accounting_code(self, adjustment_revenue_accounting_code):
        """Sets the adjustment_revenue_accounting_code of this ChargeOverride.

        The adjustmentRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :param adjustment_revenue_accounting_code: The adjustment_revenue_accounting_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._adjustment_revenue_accounting_code = adjustment_revenue_accounting_code

    @property
    def contract_asset_accounting_code(self):
        """Gets the contract_asset_accounting_code of this ChargeOverride.  # noqa: E501

        The contractAssetAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :return: The contract_asset_accounting_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._contract_asset_accounting_code

    @contract_asset_accounting_code.setter
    def contract_asset_accounting_code(self, contract_asset_accounting_code):
        """Sets the contract_asset_accounting_code of this ChargeOverride.

        The contractAssetAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :param contract_asset_accounting_code: The contract_asset_accounting_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._contract_asset_accounting_code = contract_asset_accounting_code

    @property
    def contract_liability_accounting_code(self):
        """Gets the contract_liability_accounting_code of this ChargeOverride.  # noqa: E501

        The contractLiabilityAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :return: The contract_liability_accounting_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._contract_liability_accounting_code

    @contract_liability_accounting_code.setter
    def contract_liability_accounting_code(self, contract_liability_accounting_code):
        """Sets the contract_liability_accounting_code of this ChargeOverride.

        The contractLiabilityAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :param contract_liability_accounting_code: The contract_liability_accounting_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._contract_liability_accounting_code = contract_liability_accounting_code

    @property
    def contract_recognized_revenue_accounting_code(self):
        """Gets the contract_recognized_revenue_accounting_code of this ChargeOverride.  # noqa: E501

        The contractRecognizedRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :return: The contract_recognized_revenue_accounting_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._contract_recognized_revenue_accounting_code

    @contract_recognized_revenue_accounting_code.setter
    def contract_recognized_revenue_accounting_code(self, contract_recognized_revenue_accounting_code):
        """Sets the contract_recognized_revenue_accounting_code of this ChargeOverride.

        The contractRecognizedRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :param contract_recognized_revenue_accounting_code: The contract_recognized_revenue_accounting_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this ChargeOverride.  # noqa: E501

        The deferredRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> and <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance\" target=\"_blank\">Zuora Finance</a> features are enabled.   # noqa: E501

        :return: The deferred_revenue_accounting_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this ChargeOverride.

        The deferredRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> and <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance\" target=\"_blank\">Zuora Finance</a> features are enabled.   # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this ChargeOverride.  # noqa: E501

        The recognizedRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> and <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance\" target=\"_blank\">Zuora Finance</a> features are enabled.   # noqa: E501

        :return: The recognized_revenue_accounting_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this ChargeOverride.

        The recognizedRevenueAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> and <a href=\"https://knowledgecenter.zuora.com/Zuora_Payments/Zuora_Finance\" target=\"_blank\">Zuora Finance</a> features are enabled.   # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def un_billed_receivables_accounting_code(self):
        """Gets the un_billed_receivables_accounting_code of this ChargeOverride.  # noqa: E501

        The unBilledReceivablesAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :return: The un_billed_receivables_accounting_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._un_billed_receivables_accounting_code

    @un_billed_receivables_accounting_code.setter
    def un_billed_receivables_accounting_code(self, un_billed_receivables_accounting_code):
        """Sets the un_billed_receivables_accounting_code of this ChargeOverride.

        The unBilledReceivablesAccountingCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature and the <a href=\"https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration\" target=\"_blank\">Billing - Revenue Integration</a> or <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Enable_Order_to_Revenue/Order_to_Revenue_introduction/AA_Overview_of_Order_to_Revenue\" target=\"_blank\">Order to Revenue</a> feature are enabled.   # noqa: E501

        :param un_billed_receivables_accounting_code: The un_billed_receivables_accounting_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._un_billed_receivables_accounting_code = un_billed_receivables_accounting_code

    @property
    def product_category(self):
        """Gets the product_category of this ChargeOverride.  # noqa: E501

        The productCategory of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :return: The product_category of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this ChargeOverride.

        The productCategory of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :param product_category: The product_category of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._product_category = product_category

    @property
    def product_class(self):
        """Gets the product_class of this ChargeOverride.  # noqa: E501

        The productClass of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :return: The product_class of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._product_class

    @product_class.setter
    def product_class(self, product_class):
        """Sets the product_class of this ChargeOverride.

        The productClass of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :param product_class: The product_class of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._product_class = product_class

    @property
    def product_family(self):
        """Gets the product_family of this ChargeOverride.  # noqa: E501

        The productFamily of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :return: The product_family of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._product_family

    @product_family.setter
    def product_family(self, product_family):
        """Sets the product_family of this ChargeOverride.

        The productFamily of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :param product_family: The product_family of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._product_family = product_family

    @property
    def product_line(self):
        """Gets the product_line of this ChargeOverride.  # noqa: E501

        The productLine of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :return: The product_line of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._product_line

    @product_line.setter
    def product_line(self, product_line):
        """Sets the product_line of this ChargeOverride.

        The productLine of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :param product_line: The product_line of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._product_line = product_line

    @property
    def charge_model(self):
        """Gets the charge_model of this ChargeOverride.  # noqa: E501


        :return: The charge_model of this ChargeOverride.  # noqa: E501
        :rtype: ChargeModel
        """
        return self._charge_model

    @charge_model.setter
    def charge_model(self, charge_model):
        """Sets the charge_model of this ChargeOverride.


        :param charge_model: The charge_model of this ChargeOverride.  # noqa: E501
        :type: ChargeModel
        """

        self._charge_model = charge_model

    @property
    def charge_type(self):
        """Gets the charge_type of this ChargeOverride.  # noqa: E501


        :return: The charge_type of this ChargeOverride.  # noqa: E501
        :rtype: ChargeType
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this ChargeOverride.


        :param charge_type: The charge_type of this ChargeOverride.  # noqa: E501
        :type: ChargeType
        """

        self._charge_type = charge_type

    @property
    def tax_code(self):
        """Gets the tax_code of this ChargeOverride.  # noqa: E501

        The taxCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :return: The tax_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this ChargeOverride.

        The taxCode of a standalone charge.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :param tax_code: The tax_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_mode(self):
        """Gets the tax_mode of this ChargeOverride.  # noqa: E501


        :return: The tax_mode of this ChargeOverride.  # noqa: E501
        :rtype: TaxMode
        """
        return self._tax_mode

    @tax_mode.setter
    def tax_mode(self, tax_mode):
        """Sets the tax_mode of this ChargeOverride.


        :param tax_mode: The tax_mode of this ChargeOverride.  # noqa: E501
        :type: TaxMode
        """

        self._tax_mode = tax_mode

    @property
    def revenue_recognition_timing(self):
        """Gets the revenue_recognition_timing of this ChargeOverride.  # noqa: E501

        This field is used to dictate the type of revenue recognition timing.   # noqa: E501

        :return: The revenue_recognition_timing of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_timing

    @revenue_recognition_timing.setter
    def revenue_recognition_timing(self, revenue_recognition_timing):
        """Sets the revenue_recognition_timing of this ChargeOverride.

        This field is used to dictate the type of revenue recognition timing.   # noqa: E501

        :param revenue_recognition_timing: The revenue_recognition_timing of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_timing = revenue_recognition_timing

    @property
    def revenue_amortization_method(self):
        """Gets the revenue_amortization_method of this ChargeOverride.  # noqa: E501

        This field is used to dictate the type of revenue amortization method.   # noqa: E501

        :return: The revenue_amortization_method of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._revenue_amortization_method

    @revenue_amortization_method.setter
    def revenue_amortization_method(self, revenue_amortization_method):
        """Sets the revenue_amortization_method of this ChargeOverride.

        This field is used to dictate the type of revenue amortization method.   # noqa: E501

        :param revenue_amortization_method: The revenue_amortization_method of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._revenue_amortization_method = revenue_amortization_method

    @property
    def is_charge_level_min_commit(self):
        """Gets the is_charge_level_min_commit of this ChargeOverride.  # noqa: E501

        The flag to indicate whether the charge is charge level min commit.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :return: The is_charge_level_min_commit of this ChargeOverride.  # noqa: E501
        :rtype: bool
        """
        return self._is_charge_level_min_commit

    @is_charge_level_min_commit.setter
    def is_charge_level_min_commit(self, is_charge_level_min_commit):
        """Sets the is_charge_level_min_commit of this ChargeOverride.

        The flag to indicate whether the charge is charge level min commit.  **Note:** This field is available when the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_subscription_transactions/Orders/Standalone_Orders/AA_Overview_of_Standalone_Orders\" target=\"_blank\">Standalone Orders</a> feature is enabled.   # noqa: E501

        :param is_charge_level_min_commit: The is_charge_level_min_commit of this ChargeOverride.  # noqa: E501
        :type: bool
        """

        self._is_charge_level_min_commit = is_charge_level_min_commit

    @property
    def commitment_type(self):
        """Gets the commitment_type of this ChargeOverride.  # noqa: E501


        :return: The commitment_type of this ChargeOverride.  # noqa: E501
        :rtype: CommitmentType
        """
        return self._commitment_type

    @commitment_type.setter
    def commitment_type(self, commitment_type):
        """Sets the commitment_type of this ChargeOverride.


        :param commitment_type: The commitment_type of this ChargeOverride.  # noqa: E501
        :type: CommitmentType
        """

        self._commitment_type = commitment_type

    @property
    def prepaid_operation_type(self):
        """Gets the prepaid_operation_type of this ChargeOverride.  # noqa: E501


        :return: The prepaid_operation_type of this ChargeOverride.  # noqa: E501
        :rtype: PrepaidOperationType
        """
        return self._prepaid_operation_type

    @prepaid_operation_type.setter
    def prepaid_operation_type(self, prepaid_operation_type):
        """Sets the prepaid_operation_type of this ChargeOverride.


        :param prepaid_operation_type: The prepaid_operation_type of this ChargeOverride.  # noqa: E501
        :type: PrepaidOperationType
        """

        self._prepaid_operation_type = prepaid_operation_type

    @property
    def is_committed(self):
        """Gets the is_committed of this ChargeOverride.  # noqa: E501

        The flag to indicate whether the charge is committed.    # noqa: E501

        :return: The is_committed of this ChargeOverride.  # noqa: E501
        :rtype: bool
        """
        return self._is_committed

    @is_committed.setter
    def is_committed(self, is_committed):
        """Sets the is_committed of this ChargeOverride.

        The flag to indicate whether the charge is committed.    # noqa: E501

        :param is_committed: The is_committed of this ChargeOverride.  # noqa: E501
        :type: bool
        """

        self._is_committed = is_committed

    @property
    def charge_function(self):
        """Gets the charge_function of this ChargeOverride.  # noqa: E501


        :return: The charge_function of this ChargeOverride.  # noqa: E501
        :rtype: ChargeFunction
        """
        return self._charge_function

    @charge_function.setter
    def charge_function(self, charge_function):
        """Sets the charge_function of this ChargeOverride.


        :param charge_function: The charge_function of this ChargeOverride.  # noqa: E501
        :type: ChargeFunction
        """

        self._charge_function = charge_function

    @property
    def prepaid_uom(self):
        """Gets the prepaid_uom of this ChargeOverride.  # noqa: E501

        The prepaid unit of measure of the charge.    # noqa: E501

        :return: The prepaid_uom of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._prepaid_uom

    @prepaid_uom.setter
    def prepaid_uom(self, prepaid_uom):
        """Sets the prepaid_uom of this ChargeOverride.

        The prepaid unit of measure of the charge.    # noqa: E501

        :param prepaid_uom: The prepaid_uom of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._prepaid_uom = prepaid_uom

    @property
    def drawdown_uom(self):
        """Gets the drawdown_uom of this ChargeOverride.  # noqa: E501

        The drawdown unit of measure of the charge.    # noqa: E501

        :return: The drawdown_uom of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._drawdown_uom

    @drawdown_uom.setter
    def drawdown_uom(self, drawdown_uom):
        """Sets the drawdown_uom of this ChargeOverride.

        The drawdown unit of measure of the charge.    # noqa: E501

        :param drawdown_uom: The drawdown_uom of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._drawdown_uom = drawdown_uom

    @property
    def prepaid_total_quantity(self):
        """Gets the prepaid_total_quantity of this ChargeOverride.  # noqa: E501

        The prepaid total quantity of the charge.    # noqa: E501

        :return: The prepaid_total_quantity of this ChargeOverride.  # noqa: E501
        :rtype: float
        """
        return self._prepaid_total_quantity

    @prepaid_total_quantity.setter
    def prepaid_total_quantity(self, prepaid_total_quantity):
        """Sets the prepaid_total_quantity of this ChargeOverride.

        The prepaid total quantity of the charge.    # noqa: E501

        :param prepaid_total_quantity: The prepaid_total_quantity of this ChargeOverride.  # noqa: E501
        :type: float
        """

        self._prepaid_total_quantity = prepaid_total_quantity

    @property
    def is_prepaid(self):
        """Gets the is_prepaid of this ChargeOverride.  # noqa: E501

        The flag to indicate whether the charge is prepaid.    # noqa: E501

        :return: The is_prepaid of this ChargeOverride.  # noqa: E501
        :rtype: bool
        """
        return self._is_prepaid

    @is_prepaid.setter
    def is_prepaid(self, is_prepaid):
        """Sets the is_prepaid of this ChargeOverride.

        The flag to indicate whether the charge is prepaid.    # noqa: E501

        :param is_prepaid: The is_prepaid of this ChargeOverride.  # noqa: E501
        :type: bool
        """

        self._is_prepaid = is_prepaid

    @property
    def credit_option(self):
        """Gets the credit_option of this ChargeOverride.  # noqa: E501


        :return: The credit_option of this ChargeOverride.  # noqa: E501
        :rtype: PrepaidDrawdownCreditOption
        """
        return self._credit_option

    @credit_option.setter
    def credit_option(self, credit_option):
        """Sets the credit_option of this ChargeOverride.


        :param credit_option: The credit_option of this ChargeOverride.  # noqa: E501
        :type: PrepaidDrawdownCreditOption
        """

        self._credit_option = credit_option

    @property
    def billing(self):
        """Gets the billing of this ChargeOverride.  # noqa: E501


        :return: The billing of this ChargeOverride.  # noqa: E501
        :rtype: ChargeOverrideBilling
        """
        return self._billing

    @billing.setter
    def billing(self, billing):
        """Sets the billing of this ChargeOverride.


        :param billing: The billing of this ChargeOverride.  # noqa: E501
        :type: ChargeOverrideBilling
        """

        self._billing = billing

    @property
    def charge_number(self):
        """Gets the charge_number of this ChargeOverride.  # noqa: E501

        Charge number of the charge. For example, C-00000307.  If you do not set this field, Zuora will generate the charge number.   # noqa: E501

        :return: The charge_number of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._charge_number

    @charge_number.setter
    def charge_number(self, charge_number):
        """Sets the charge_number of this ChargeOverride.

        Charge number of the charge. For example, C-00000307.  If you do not set this field, Zuora will generate the charge number.   # noqa: E501

        :param charge_number: The charge_number of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._charge_number = charge_number

    @property
    def custom_fields(self):
        """Gets the custom_fields of this ChargeOverride.  # noqa: E501

        Container for custom fields of a Rate Plan Charge object.   # noqa: E501

        :return: The custom_fields of this ChargeOverride.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this ChargeOverride.

        Container for custom fields of a Rate Plan Charge object.   # noqa: E501

        :param custom_fields: The custom_fields of this ChargeOverride.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this ChargeOverride.  # noqa: E501

        Description of the charge.   # noqa: E501

        :return: The description of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ChargeOverride.

        Description of the charge.   # noqa: E501

        :param description: The description of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def drawdown_rate(self):
        """Gets the drawdown_rate of this ChargeOverride.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).   # noqa: E501

        :return: The drawdown_rate of this ChargeOverride.  # noqa: E501
        :rtype: float
        """
        return self._drawdown_rate

    @drawdown_rate.setter
    def drawdown_rate(self, drawdown_rate):
        """Sets the drawdown_rate of this ChargeOverride.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  The [conversion rate](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge#UOM_Conversion) between Usage UOM and Drawdown UOM for a [drawdown charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_drawdown_charge). Must be a positive number (>0).   # noqa: E501

        :param drawdown_rate: The drawdown_rate of this ChargeOverride.  # noqa: E501
        :type: float
        """

        self._drawdown_rate = drawdown_rate

    @property
    def end_date(self):
        """Gets the end_date of this ChargeOverride.  # noqa: E501


        :return: The end_date of this ChargeOverride.  # noqa: E501
        :rtype: EndConditions
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ChargeOverride.


        :param end_date: The end_date of this ChargeOverride.  # noqa: E501
        :type: EndConditions
        """

        self._end_date = end_date

    @property
    def exclude_item_billing_from_revenue_accounting(self):
        """Gets the exclude_item_billing_from_revenue_accounting of this ChargeOverride.  # noqa: E501

        The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.    # noqa: E501

        :return: The exclude_item_billing_from_revenue_accounting of this ChargeOverride.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_billing_from_revenue_accounting

    @exclude_item_billing_from_revenue_accounting.setter
    def exclude_item_billing_from_revenue_accounting(self, exclude_item_billing_from_revenue_accounting):
        """Sets the exclude_item_billing_from_revenue_accounting of this ChargeOverride.

        The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.    # noqa: E501

        :param exclude_item_billing_from_revenue_accounting: The exclude_item_billing_from_revenue_accounting of this ChargeOverride.  # noqa: E501
        :type: bool
        """

        self._exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting

    @property
    def exclude_item_booking_from_revenue_accounting(self):
        """Gets the exclude_item_booking_from_revenue_accounting of this ChargeOverride.  # noqa: E501

        The flag to exclude rate plan charges from revenue accounting.  **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.    # noqa: E501

        :return: The exclude_item_booking_from_revenue_accounting of this ChargeOverride.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_booking_from_revenue_accounting

    @exclude_item_booking_from_revenue_accounting.setter
    def exclude_item_booking_from_revenue_accounting(self, exclude_item_booking_from_revenue_accounting):
        """Sets the exclude_item_booking_from_revenue_accounting of this ChargeOverride.

        The flag to exclude rate plan charges from revenue accounting.  **Note**: This field is only available if you have the [Zuora Billing - Revenue Integration](https://knowledgecenter.zuora.com/Zuora_Revenue/Zuora_Billing_-_Revenue_Integration) feature enabled.    # noqa: E501

        :param exclude_item_booking_from_revenue_accounting: The exclude_item_booking_from_revenue_accounting of this ChargeOverride.  # noqa: E501
        :type: bool
        """

        self._exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting

    @property
    def is_allocation_eligible(self):
        """Gets the is_allocation_eligible of this ChargeOverride.  # noqa: E501

        This field is used to identify if the charge segment is allocation eligible in revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :return: The is_allocation_eligible of this ChargeOverride.  # noqa: E501
        :rtype: bool
        """
        return self._is_allocation_eligible

    @is_allocation_eligible.setter
    def is_allocation_eligible(self, is_allocation_eligible):
        """Sets the is_allocation_eligible of this ChargeOverride.

        This field is used to identify if the charge segment is allocation eligible in revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :param is_allocation_eligible: The is_allocation_eligible of this ChargeOverride.  # noqa: E501
        :type: bool
        """

        self._is_allocation_eligible = is_allocation_eligible

    @property
    def is_rollover(self):
        """Gets the is_rollover of this ChargeOverride.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The value is either \"True\" or \"False\". It determines whether the rollover fields are needed.   # noqa: E501

        :return: The is_rollover of this ChargeOverride.  # noqa: E501
        :rtype: bool
        """
        return self._is_rollover

    @is_rollover.setter
    def is_rollover(self, is_rollover):
        """Sets the is_rollover of this ChargeOverride.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The value is either \"True\" or \"False\". It determines whether the rollover fields are needed.   # noqa: E501

        :param is_rollover: The is_rollover of this ChargeOverride.  # noqa: E501
        :type: bool
        """

        self._is_rollover = is_rollover

    @property
    def is_unbilled(self):
        """Gets the is_unbilled of this ChargeOverride.  # noqa: E501

        This field is used to dictate how to perform the accounting during revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :return: The is_unbilled of this ChargeOverride.  # noqa: E501
        :rtype: bool
        """
        return self._is_unbilled

    @is_unbilled.setter
    def is_unbilled(self, is_unbilled):
        """Sets the is_unbilled of this ChargeOverride.

        This field is used to dictate how to perform the accounting during revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :param is_unbilled: The is_unbilled of this ChargeOverride.  # noqa: E501
        :type: bool
        """

        self._is_unbilled = is_unbilled

    @property
    def prepaid_quantity(self):
        """Gets the prepaid_quantity of this ChargeOverride.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).   # noqa: E501

        :return: The prepaid_quantity of this ChargeOverride.  # noqa: E501
        :rtype: float
        """
        return self._prepaid_quantity

    @prepaid_quantity.setter
    def prepaid_quantity(self, prepaid_quantity):
        """Sets the prepaid_quantity of this ChargeOverride.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  The number of units included in a [prepayment charge](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge). Must be a positive number (>0).   # noqa: E501

        :param prepaid_quantity: The prepaid_quantity of this ChargeOverride.  # noqa: E501
        :type: float
        """

        self._prepaid_quantity = prepaid_quantity

    @property
    def pricing(self):
        """Gets the pricing of this ChargeOverride.  # noqa: E501


        :return: The pricing of this ChargeOverride.  # noqa: E501
        :rtype: ChargeOverridePricing
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this ChargeOverride.


        :param pricing: The pricing of this ChargeOverride.  # noqa: E501
        :type: ChargeOverridePricing
        """

        self._pricing = pricing

    @property
    def product_rate_plan_charge_number(self):
        """Gets the product_rate_plan_charge_number of this ChargeOverride.  # noqa: E501

        Number of a product rate-plan charge for this subscription.   # noqa: E501

        :return: The product_rate_plan_charge_number of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_number

    @product_rate_plan_charge_number.setter
    def product_rate_plan_charge_number(self, product_rate_plan_charge_number):
        """Sets the product_rate_plan_charge_number of this ChargeOverride.

        Number of a product rate-plan charge for this subscription.   # noqa: E501

        :param product_rate_plan_charge_number: The product_rate_plan_charge_number of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_number = product_rate_plan_charge_number

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this ChargeOverride.  # noqa: E501

        Internal identifier of the product rate plan charge that the charge is based on.   # noqa: E501

        :return: The product_rate_plan_charge_id of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this ChargeOverride.

        Internal identifier of the product rate plan charge that the charge is based on.   # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this ChargeOverride.  # noqa: E501
        :type: str
        """
        if product_rate_plan_charge_id is None:
            raise ValueError("Invalid value for `product_rate_plan_charge_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def proration_option(self):
        """Gets the proration_option of this ChargeOverride.  # noqa: E501


        :return: The proration_option of this ChargeOverride.  # noqa: E501
        :rtype: ProrationOption
        """
        return self._proration_option

    @proration_option.setter
    def proration_option(self, proration_option):
        """Sets the proration_option of this ChargeOverride.


        :param proration_option: The proration_option of this ChargeOverride.  # noqa: E501
        :type: ProrationOption
        """

        self._proration_option = proration_option

    @property
    def rating_properties_override(self):
        """Gets the rating_properties_override of this ChargeOverride.  # noqa: E501


        :return: The rating_properties_override of this ChargeOverride.  # noqa: E501
        :rtype: RatingPropertiesOverride
        """
        return self._rating_properties_override

    @rating_properties_override.setter
    def rating_properties_override(self, rating_properties_override):
        """Sets the rating_properties_override of this ChargeOverride.


        :param rating_properties_override: The rating_properties_override of this ChargeOverride.  # noqa: E501
        :type: RatingPropertiesOverride
        """

        self._rating_properties_override = rating_properties_override

    @property
    def rev_rec_code(self):
        """Gets the rev_rec_code of this ChargeOverride.  # noqa: E501

        Revenue Recognition Code   # noqa: E501

        :return: The rev_rec_code of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_code

    @rev_rec_code.setter
    def rev_rec_code(self, rev_rec_code):
        """Sets the rev_rec_code of this ChargeOverride.

        Revenue Recognition Code   # noqa: E501

        :param rev_rec_code: The rev_rec_code of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._rev_rec_code = rev_rec_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this ChargeOverride.  # noqa: E501


        :return: The rev_rec_trigger_condition of this ChargeOverride.  # noqa: E501
        :rtype: RevRecTriggerCondition
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this ChargeOverride.


        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this ChargeOverride.  # noqa: E501
        :type: RevRecTriggerCondition
        """

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this ChargeOverride.  # noqa: E501

        Specifies the revenue recognition rule, such as `Recognize upon invoicing` or `Recognize daily over time`.   # noqa: E501

        :return: The revenue_recognition_rule_name of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this ChargeOverride.

        Specifies the revenue recognition rule, such as `Recognize upon invoicing` or `Recognize daily over time`.   # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def rollover_apply(self):
        """Gets the rollover_apply of this ChargeOverride.  # noqa: E501


        :return: The rollover_apply of this ChargeOverride.  # noqa: E501
        :rtype: RolloverApply
        """
        return self._rollover_apply

    @rollover_apply.setter
    def rollover_apply(self, rollover_apply):
        """Sets the rollover_apply of this ChargeOverride.


        :param rollover_apply: The rollover_apply of this ChargeOverride.  # noqa: E501
        :type: RolloverApply
        """

        self._rollover_apply = rollover_apply

    @property
    def rollover_periods(self):
        """Gets the rollover_periods of this ChargeOverride.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  This field defines the number of rollover periods, it is restricted to 3.   # noqa: E501

        :return: The rollover_periods of this ChargeOverride.  # noqa: E501
        :rtype: float
        """
        return self._rollover_periods

    @rollover_periods.setter
    def rollover_periods(self, rollover_periods):
        """Sets the rollover_periods of this ChargeOverride.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  This field defines the number of rollover periods, it is restricted to 3.   # noqa: E501

        :param rollover_periods: The rollover_periods of this ChargeOverride.  # noqa: E501
        :type: float
        """

        self._rollover_periods = rollover_periods

    @property
    def start_date(self):
        """Gets the start_date of this ChargeOverride.  # noqa: E501


        :return: The start_date of this ChargeOverride.  # noqa: E501
        :rtype: TriggerParams
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ChargeOverride.


        :param start_date: The start_date of this ChargeOverride.  # noqa: E501
        :type: TriggerParams
        """

        self._start_date = start_date

    @property
    def unique_token(self):
        """Gets the unique_token of this ChargeOverride.  # noqa: E501

        Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.   # noqa: E501

        :return: The unique_token of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._unique_token

    @unique_token.setter
    def unique_token(self, unique_token):
        """Sets the unique_token of this ChargeOverride.

        Unique identifier for the charge. This identifier enables you to refer to the charge before the charge has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the charge. Then when you update the product, you can use the same unique identifier to specify which charge to modify.   # noqa: E501

        :param unique_token: The unique_token of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._unique_token = unique_token

    @property
    def upsell_origin_charge_number(self):
        """Gets the upsell_origin_charge_number of this ChargeOverride.  # noqa: E501

        **Note**: The Quantity Upsell feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).  The identifier of the original upselling charge associated with the current charge.   # noqa: E501

        :return: The upsell_origin_charge_number of this ChargeOverride.  # noqa: E501
        :rtype: str
        """
        return self._upsell_origin_charge_number

    @upsell_origin_charge_number.setter
    def upsell_origin_charge_number(self, upsell_origin_charge_number):
        """Sets the upsell_origin_charge_number of this ChargeOverride.

        **Note**: The Quantity Upsell feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).  The identifier of the original upselling charge associated with the current charge.   # noqa: E501

        :param upsell_origin_charge_number: The upsell_origin_charge_number of this ChargeOverride.  # noqa: E501
        :type: str
        """

        self._upsell_origin_charge_number = upsell_origin_charge_number

    @property
    def validity_period_type(self):
        """Gets the validity_period_type of this ChargeOverride.  # noqa: E501


        :return: The validity_period_type of this ChargeOverride.  # noqa: E501
        :rtype: ValidityPeriodType
        """
        return self._validity_period_type

    @validity_period_type.setter
    def validity_period_type(self, validity_period_type):
        """Sets the validity_period_type of this ChargeOverride.


        :param validity_period_type: The validity_period_type of this ChargeOverride.  # noqa: E501
        :type: ValidityPeriodType
        """

        self._validity_period_type = validity_period_type

    @property
    def commitment_level(self):
        """Gets the commitment_level of this ChargeOverride.  # noqa: E501


        :return: The commitment_level of this ChargeOverride.  # noqa: E501
        :rtype: CommitmentLevel
        """
        return self._commitment_level

    @commitment_level.setter
    def commitment_level(self, commitment_level):
        """Sets the commitment_level of this ChargeOverride.


        :param commitment_level: The commitment_level of this ChargeOverride.  # noqa: E501
        :type: CommitmentLevel
        """

        self._commitment_level = commitment_level

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ChargeOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ChargeOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
