# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NotificationsHistoryDeletionTaskResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'created_by': 'str',
        'created_on': 'int',
        'id': 'str',
        'status': 'NotificationsHistoryDeletionTaskResponseStatus',
        'tenant_id': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'id': 'id',
        'status': 'status',
        'tenant_id': 'tenantId'
    }

    def __init__(self, account_id=None, created_by=None, created_on=None, id=None, status=None, tenant_id=None):  # noqa: E501
        """NotificationsHistoryDeletionTaskResponse - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._created_by = None
        self._created_on = None
        self._id = None
        self._status = None
        self._tenant_id = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if tenant_id is not None:
            self.tenant_id = tenant_id

    @property
    def account_id(self):
        """Gets the account_id of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501

        The ID of the account whose notification histories are deleted by the current deletion task.  # noqa: E501

        :return: The account_id of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this NotificationsHistoryDeletionTaskResponse.

        The ID of the account whose notification histories are deleted by the current deletion task.  # noqa: E501

        :param account_id: The account_id of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def created_by(self):
        """Gets the created_by of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501

        The ID of the user who submits the notification history deletion task.  # noqa: E501

        :return: The created_by of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this NotificationsHistoryDeletionTaskResponse.

        The ID of the user who submits the notification history deletion task.  # noqa: E501

        :param created_by: The created_by of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501

        The timestamp when the notification history deletion task is created.  # noqa: E501

        :return: The created_on of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this NotificationsHistoryDeletionTaskResponse.

        The timestamp when the notification history deletion task is created.  # noqa: E501

        :param created_on: The created_on of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def id(self):
        """Gets the id of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501

        The ID of the notification history deletion task.  # noqa: E501

        :return: The id of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this NotificationsHistoryDeletionTaskResponse.

        The ID of the notification history deletion task.  # noqa: E501

        :param id: The id of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501


        :return: The status of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :rtype: NotificationsHistoryDeletionTaskResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NotificationsHistoryDeletionTaskResponse.


        :param status: The status of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :type: NotificationsHistoryDeletionTaskResponseStatus
        """

        self._status = status

    @property
    def tenant_id(self):
        """Gets the tenant_id of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501

        The ID of the tenant where the notification history deletion task runs.  # noqa: E501

        :return: The tenant_id of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this NotificationsHistoryDeletionTaskResponse.

        The ID of the tenant where the notification history deletion task runs.  # noqa: E501

        :param tenant_id: The tenant_id of this NotificationsHistoryDeletionTaskResponse.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NotificationsHistoryDeletionTaskResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NotificationsHistoryDeletionTaskResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
