# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePaymentMethodDecryptionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'card_holder_info': 'CreatePaymentMethodCardholderInfo',
        'integration_type': 'str',
        'invoice_id': 'str',
        'merchant_id': 'str',
        'mit_consent_agreement_src': 'StoredCredentialProfileConsentAgreementSrc',
        'mit_profile_action': 'StoredCredentialProfileAction',
        'mit_profile_type': 'StoredCredentialProfileType',
        'payment_gateway': 'str',
        'payment_token': 'object',
        'process_payment': 'bool'
    }

    attribute_map = {
        'account_id': 'accountID',
        'card_holder_info': 'cardHolderInfo',
        'integration_type': 'integrationType',
        'invoice_id': 'invoiceId',
        'merchant_id': 'merchantID',
        'mit_consent_agreement_src': 'mitConsentAgreementSrc',
        'mit_profile_action': 'mitProfileAction',
        'mit_profile_type': 'mitProfileType',
        'payment_gateway': 'paymentGateway',
        'payment_token': 'paymentToken',
        'process_payment': 'processPayment'
    }

    def __init__(self, account_id=None, card_holder_info=None, integration_type=None, invoice_id=None, merchant_id=None, mit_consent_agreement_src=None, mit_profile_action=None, mit_profile_type=None, payment_gateway=None, payment_token=None, process_payment=None):  # noqa: E501
        """CreatePaymentMethodDecryptionRequest - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._card_holder_info = None
        self._integration_type = None
        self._invoice_id = None
        self._merchant_id = None
        self._mit_consent_agreement_src = None
        self._mit_profile_action = None
        self._mit_profile_type = None
        self._payment_gateway = None
        self._payment_token = None
        self._process_payment = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if card_holder_info is not None:
            self.card_holder_info = card_holder_info
        self.integration_type = integration_type
        if invoice_id is not None:
            self.invoice_id = invoice_id
        self.merchant_id = merchant_id
        if mit_consent_agreement_src is not None:
            self.mit_consent_agreement_src = mit_consent_agreement_src
        if mit_profile_action is not None:
            self.mit_profile_action = mit_profile_action
        if mit_profile_type is not None:
            self.mit_profile_type = mit_profile_type
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        self.payment_token = payment_token
        if process_payment is not None:
            self.process_payment = process_payment

    @property
    def account_id(self):
        """Gets the account_id of this CreatePaymentMethodDecryptionRequest.  # noqa: E501

        The ID of the customer account associated with this payment method. To create an orphan payment method that is not associated with any customer account, you do not need to specify this field during creation. However, you must associate the orphan payment method with a customer account within 10 days. Otherwise, this orphan payment method will be deleted.  # noqa: E501

        :return: The account_id of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreatePaymentMethodDecryptionRequest.

        The ID of the customer account associated with this payment method. To create an orphan payment method that is not associated with any customer account, you do not need to specify this field during creation. However, you must associate the orphan payment method with a customer account within 10 days. Otherwise, this orphan payment method will be deleted.  # noqa: E501

        :param account_id: The account_id of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this CreatePaymentMethodDecryptionRequest.  # noqa: E501


        :return: The card_holder_info of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: CreatePaymentMethodCardholderInfo
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this CreatePaymentMethodDecryptionRequest.


        :param card_holder_info: The card_holder_info of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: CreatePaymentMethodCardholderInfo
        """

        self._card_holder_info = card_holder_info

    @property
    def integration_type(self):
        """Gets the integration_type of this CreatePaymentMethodDecryptionRequest.  # noqa: E501

        Field to identify the token decryption type.  **Note:** The only value at this time is `ApplePay`.    # noqa: E501

        :return: The integration_type of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_type

    @integration_type.setter
    def integration_type(self, integration_type):
        """Sets the integration_type of this CreatePaymentMethodDecryptionRequest.

        Field to identify the token decryption type.  **Note:** The only value at this time is `ApplePay`.    # noqa: E501

        :param integration_type: The integration_type of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: str
        """
        if integration_type is None:
            raise ValueError("Invalid value for `integration_type`, must not be `None`")  # noqa: E501

        self._integration_type = integration_type

    @property
    def invoice_id(self):
        """Gets the invoice_id of this CreatePaymentMethodDecryptionRequest.  # noqa: E501

        The id of invoice this payment will apply to.  **Note:** When `processPayment` is `true`, this field is required. Only one invoice can be paid; for scenarios where you want to pay for multiple invoices, set `processPayment` to `false` and call payment API separately.   # noqa: E501

        :return: The invoice_id of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this CreatePaymentMethodDecryptionRequest.

        The id of invoice this payment will apply to.  **Note:** When `processPayment` is `true`, this field is required. Only one invoice can be paid; for scenarios where you want to pay for multiple invoices, set `processPayment` to `false` and call payment API separately.   # noqa: E501

        :param invoice_id: The invoice_id of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this CreatePaymentMethodDecryptionRequest.  # noqa: E501

        The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center.   # noqa: E501

        :return: The merchant_id of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this CreatePaymentMethodDecryptionRequest.

        The Merchant ID that was configured for use with Apple Pay in the Apple iOS Developer Center.   # noqa: E501

        :param merchant_id: The merchant_id of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")  # noqa: E501

        self._merchant_id = merchant_id

    @property
    def mit_consent_agreement_src(self):
        """Gets the mit_consent_agreement_src of this CreatePaymentMethodDecryptionRequest.  # noqa: E501


        :return: The mit_consent_agreement_src of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: StoredCredentialProfileConsentAgreementSrc
        """
        return self._mit_consent_agreement_src

    @mit_consent_agreement_src.setter
    def mit_consent_agreement_src(self, mit_consent_agreement_src):
        """Sets the mit_consent_agreement_src of this CreatePaymentMethodDecryptionRequest.


        :param mit_consent_agreement_src: The mit_consent_agreement_src of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: StoredCredentialProfileConsentAgreementSrc
        """

        self._mit_consent_agreement_src = mit_consent_agreement_src

    @property
    def mit_profile_action(self):
        """Gets the mit_profile_action of this CreatePaymentMethodDecryptionRequest.  # noqa: E501


        :return: The mit_profile_action of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: StoredCredentialProfileAction
        """
        return self._mit_profile_action

    @mit_profile_action.setter
    def mit_profile_action(self, mit_profile_action):
        """Sets the mit_profile_action of this CreatePaymentMethodDecryptionRequest.


        :param mit_profile_action: The mit_profile_action of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: StoredCredentialProfileAction
        """

        self._mit_profile_action = mit_profile_action

    @property
    def mit_profile_type(self):
        """Gets the mit_profile_type of this CreatePaymentMethodDecryptionRequest.  # noqa: E501


        :return: The mit_profile_type of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: StoredCredentialProfileType
        """
        return self._mit_profile_type

    @mit_profile_type.setter
    def mit_profile_type(self, mit_profile_type):
        """Sets the mit_profile_type of this CreatePaymentMethodDecryptionRequest.


        :param mit_profile_type: The mit_profile_type of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: StoredCredentialProfileType
        """

        self._mit_profile_type = mit_profile_type

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this CreatePaymentMethodDecryptionRequest.  # noqa: E501

        The label name of the gateway instance configured in Zuora that should process the payment. When creating a Payment, this must be a valid gateway instance ID and this gateway must support the specific payment method. If not specified, the default gateway of your Zuora customer account will be used.  **Note:** When `processPayment` is `true`, this field is required. When `processPayment` is `false`, the default payment gateway of your Zuora customer account will be used no matter whether a payment gateway instance is specified in the `paymentGateway` field.   # noqa: E501

        :return: The payment_gateway of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this CreatePaymentMethodDecryptionRequest.

        The label name of the gateway instance configured in Zuora that should process the payment. When creating a Payment, this must be a valid gateway instance ID and this gateway must support the specific payment method. If not specified, the default gateway of your Zuora customer account will be used.  **Note:** When `processPayment` is `true`, this field is required. When `processPayment` is `false`, the default payment gateway of your Zuora customer account will be used no matter whether a payment gateway instance is specified in the `paymentGateway` field.   # noqa: E501

        :param payment_gateway: The payment_gateway of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: str
        """

        self._payment_gateway = payment_gateway

    @property
    def payment_token(self):
        """Gets the payment_token of this CreatePaymentMethodDecryptionRequest.  # noqa: E501

        The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session.    # noqa: E501

        :return: The payment_token of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: object
        """
        return self._payment_token

    @payment_token.setter
    def payment_token(self, payment_token):
        """Sets the payment_token of this CreatePaymentMethodDecryptionRequest.

        The complete JSON Object representing the encrypted payment token payload returned in the response from the Apple Pay session.    # noqa: E501

        :param payment_token: The payment_token of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: object
        """
        if payment_token is None:
            raise ValueError("Invalid value for `payment_token`, must not be `None`")  # noqa: E501

        self._payment_token = payment_token

    @property
    def process_payment(self):
        """Gets the process_payment of this CreatePaymentMethodDecryptionRequest.  # noqa: E501

        A boolean flag to control whether a payment should be processed after creating payment method. The payment amount will be equivalent to the amount the merchant supplied in the ApplePay session. Default is false.  If this field is set to `true`, you must specify the `paymentGateway` field with the payment gateway instance name.  If this field is set to `false`:   - The default payment gateway of your Zuora customer account will be used no matter whether a payment gateway instance is specified in the `paymentGateway` field.    - You must select the **Verify new credit card** check box on the gateway instance settings page. Otherwise, the cryptogram will not be sent to the gateway.   - A separate subscribe or payment API call is required after this payment method creation call.   # noqa: E501

        :return: The process_payment of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._process_payment

    @process_payment.setter
    def process_payment(self, process_payment):
        """Sets the process_payment of this CreatePaymentMethodDecryptionRequest.

        A boolean flag to control whether a payment should be processed after creating payment method. The payment amount will be equivalent to the amount the merchant supplied in the ApplePay session. Default is false.  If this field is set to `true`, you must specify the `paymentGateway` field with the payment gateway instance name.  If this field is set to `false`:   - The default payment gateway of your Zuora customer account will be used no matter whether a payment gateway instance is specified in the `paymentGateway` field.    - You must select the **Verify new credit card** check box on the gateway instance settings page. Otherwise, the cryptogram will not be sent to the gateway.   - A separate subscribe or payment API call is required after this payment method creation call.   # noqa: E501

        :param process_payment: The process_payment of this CreatePaymentMethodDecryptionRequest.  # noqa: E501
        :type: bool
        """

        self._process_payment = process_payment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePaymentMethodDecryptionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePaymentMethodDecryptionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
