# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateAccountRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'additional_email_addresses': 'list[str]',
        'application_order': 'list[str]',
        'apply_credit': 'bool',
        'apply_credit_balance': 'bool',
        'auto_pay': 'bool',
        'batch': 'str',
        'bill_cycle_day': 'int',
        'bill_to_contact': 'CreateAccountContact',
        'collect': 'bool',
        'communication_profile_id': 'str',
        'credit_card': 'CreateAccountCreditCard',
        'credit_memo_reason_code': 'str',
        'credit_memo_template_id': 'str',
        'crm_id': 'str',
        'currency': 'str',
        'debit_memo_template_id': 'str',
        'document_date': 'date',
        'hpm_credit_card_payment_method_id': 'str',
        'invoice': 'bool',
        'invoice_collect': 'bool',
        'invoice_delivery_prefs_email': 'bool',
        'invoice_delivery_prefs_print': 'bool',
        'invoice_target_date': 'date',
        'invoice_template_id': 'str',
        'name': 'str',
        'notes': 'str',
        'parent_id': 'str',
        'partner_account': 'bool',
        'payment_gateway': 'str',
        'payment_method': 'CreateAccountPaymentMethod',
        'payment_term': 'str',
        'profile_number': 'str',
        'roll_up_usage': 'bool',
        'run_billing': 'bool',
        'sales_rep': 'str',
        'sequence_set_id': 'str',
        'sold_to_contact': 'CreateAccountContact',
        'sold_to_same_as_bill_to': 'bool',
        'subscription': 'CreateAccountSubscription',
        'tagging': 'str',
        'target_date': 'date',
        'tax_info': 'TaxInfo',
        'communication_profile_name': 'str',
        'payment_gateway_number': 'str',
        'payment_gateway_name': 'str',
        'organization_id': 'str',
        'organization_name': 'str',
        'gateway_id': 'str',
        'payment_method_id': 'str',
        'parent_account_number': 'str',
        'summary_statement_template_id': 'str',
        'sequence_set_name': 'str',
        'einvoice_profile': 'AccountEInvoiceProfile',
        'organization_label': 'str',
        'class__ns': 'str',
        'customer_type__ns': 'AccountObjectNSFieldsCustomerTypeNS',
        'department__ns': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'location__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str',
        'syncto_net_suite__ns': 'AccountObjectNSFieldsSynctoNetSuiteNS'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'additional_email_addresses': 'additionalEmailAddresses',
        'application_order': 'applicationOrder',
        'apply_credit': 'applyCredit',
        'apply_credit_balance': 'applyCreditBalance',
        'auto_pay': 'autoPay',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'bill_to_contact': 'billToContact',
        'collect': 'collect',
        'communication_profile_id': 'communicationProfileId',
        'credit_card': 'creditCard',
        'credit_memo_reason_code': 'creditMemoReasonCode',
        'credit_memo_template_id': 'creditMemoTemplateId',
        'crm_id': 'crmId',
        'currency': 'currency',
        'debit_memo_template_id': 'debitMemoTemplateId',
        'document_date': 'documentDate',
        'hpm_credit_card_payment_method_id': 'hpmCreditCardPaymentMethodId',
        'invoice': 'invoice',
        'invoice_collect': 'invoiceCollect',
        'invoice_delivery_prefs_email': 'invoiceDeliveryPrefsEmail',
        'invoice_delivery_prefs_print': 'invoiceDeliveryPrefsPrint',
        'invoice_target_date': 'invoiceTargetDate',
        'invoice_template_id': 'invoiceTemplateId',
        'name': 'name',
        'notes': 'notes',
        'parent_id': 'parentId',
        'partner_account': 'partnerAccount',
        'payment_gateway': 'paymentGateway',
        'payment_method': 'paymentMethod',
        'payment_term': 'paymentTerm',
        'profile_number': 'profileNumber',
        'roll_up_usage': 'rollUpUsage',
        'run_billing': 'runBilling',
        'sales_rep': 'salesRep',
        'sequence_set_id': 'sequenceSetId',
        'sold_to_contact': 'soldToContact',
        'sold_to_same_as_bill_to': 'soldToSameAsBillTo',
        'subscription': 'subscription',
        'tagging': 'tagging',
        'target_date': 'targetDate',
        'tax_info': 'taxInfo',
        'communication_profile_name': 'communicationProfileName',
        'payment_gateway_number': 'paymentGatewayNumber',
        'payment_gateway_name': 'paymentGatewayName',
        'organization_id': 'organizationId',
        'organization_name': 'organizationName',
        'gateway_id': 'gatewayId',
        'payment_method_id': 'paymentMethodId',
        'parent_account_number': 'parentAccountNumber',
        'summary_statement_template_id': 'summaryStatementTemplateId',
        'sequence_set_name': 'sequenceSetName',
        'einvoice_profile': 'einvoiceProfile',
        'organization_label': 'organizationLabel',
        'class__ns': 'Class__NS',
        'customer_type__ns': 'CustomerType__NS',
        'department__ns': 'Department__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'location__ns': 'Location__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS',
        'syncto_net_suite__ns': 'SynctoNetSuite__NS'
    }

    def __init__(self, account_number=None, additional_email_addresses=None, application_order=None, apply_credit=None, apply_credit_balance=None, auto_pay=None, batch=None, bill_cycle_day=None, bill_to_contact=None, collect=None, communication_profile_id=None, credit_card=None, credit_memo_reason_code=None, credit_memo_template_id=None, crm_id=None, currency=None, debit_memo_template_id=None, document_date=None, hpm_credit_card_payment_method_id=None, invoice=None, invoice_collect=None, invoice_delivery_prefs_email=False, invoice_delivery_prefs_print=False, invoice_target_date=None, invoice_template_id=None, name=None, notes=None, parent_id=None, partner_account=None, payment_gateway=None, payment_method=None, payment_term=None, profile_number=None, roll_up_usage=None, run_billing=None, sales_rep=None, sequence_set_id=None, sold_to_contact=None, sold_to_same_as_bill_to=None, subscription=None, tagging=None, target_date=None, tax_info=None, communication_profile_name=None, payment_gateway_number=None, payment_gateway_name=None, organization_id=None, organization_name=None, gateway_id=None, payment_method_id=None, parent_account_number=None, summary_statement_template_id=None, sequence_set_name=None, einvoice_profile=None, organization_label=None, class__ns=None, customer_type__ns=None, department__ns=None, integration_id__ns=None, integration_status__ns=None, location__ns=None, subsidiary__ns=None, sync_date__ns=None, syncto_net_suite__ns=None):  # noqa: E501
        """CreateAccountRequest - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._additional_email_addresses = None
        self._application_order = None
        self._apply_credit = None
        self._apply_credit_balance = None
        self._auto_pay = None
        self._batch = None
        self._bill_cycle_day = None
        self._bill_to_contact = None
        self._collect = None
        self._communication_profile_id = None
        self._credit_card = None
        self._credit_memo_reason_code = None
        self._credit_memo_template_id = None
        self._crm_id = None
        self._currency = None
        self._debit_memo_template_id = None
        self._document_date = None
        self._hpm_credit_card_payment_method_id = None
        self._invoice = None
        self._invoice_collect = None
        self._invoice_delivery_prefs_email = None
        self._invoice_delivery_prefs_print = None
        self._invoice_target_date = None
        self._invoice_template_id = None
        self._name = None
        self._notes = None
        self._parent_id = None
        self._partner_account = None
        self._payment_gateway = None
        self._payment_method = None
        self._payment_term = None
        self._profile_number = None
        self._roll_up_usage = None
        self._run_billing = None
        self._sales_rep = None
        self._sequence_set_id = None
        self._sold_to_contact = None
        self._sold_to_same_as_bill_to = None
        self._subscription = None
        self._tagging = None
        self._target_date = None
        self._tax_info = None
        self._communication_profile_name = None
        self._payment_gateway_number = None
        self._payment_gateway_name = None
        self._organization_id = None
        self._organization_name = None
        self._gateway_id = None
        self._payment_method_id = None
        self._parent_account_number = None
        self._summary_statement_template_id = None
        self._sequence_set_name = None
        self._einvoice_profile = None
        self._organization_label = None
        self._class__ns = None
        self._customer_type__ns = None
        self._department__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._location__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self._syncto_net_suite__ns = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if additional_email_addresses is not None:
            self.additional_email_addresses = additional_email_addresses
        if application_order is not None:
            self.application_order = application_order
        if apply_credit is not None:
            self.apply_credit = apply_credit
        if apply_credit_balance is not None:
            self.apply_credit_balance = apply_credit_balance
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if batch is not None:
            self.batch = batch
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        self.bill_to_contact = bill_to_contact
        if collect is not None:
            self.collect = collect
        if communication_profile_id is not None:
            self.communication_profile_id = communication_profile_id
        if credit_card is not None:
            self.credit_card = credit_card
        if credit_memo_reason_code is not None:
            self.credit_memo_reason_code = credit_memo_reason_code
        if credit_memo_template_id is not None:
            self.credit_memo_template_id = credit_memo_template_id
        if crm_id is not None:
            self.crm_id = crm_id
        self.currency = currency
        if debit_memo_template_id is not None:
            self.debit_memo_template_id = debit_memo_template_id
        if document_date is not None:
            self.document_date = document_date
        if hpm_credit_card_payment_method_id is not None:
            self.hpm_credit_card_payment_method_id = hpm_credit_card_payment_method_id
        if invoice is not None:
            self.invoice = invoice
        if invoice_collect is not None:
            self.invoice_collect = invoice_collect
        if invoice_delivery_prefs_email is not None:
            self.invoice_delivery_prefs_email = invoice_delivery_prefs_email
        if invoice_delivery_prefs_print is not None:
            self.invoice_delivery_prefs_print = invoice_delivery_prefs_print
        if invoice_target_date is not None:
            self.invoice_target_date = invoice_target_date
        if invoice_template_id is not None:
            self.invoice_template_id = invoice_template_id
        self.name = name
        if notes is not None:
            self.notes = notes
        if parent_id is not None:
            self.parent_id = parent_id
        if partner_account is not None:
            self.partner_account = partner_account
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        if payment_method is not None:
            self.payment_method = payment_method
        if payment_term is not None:
            self.payment_term = payment_term
        if profile_number is not None:
            self.profile_number = profile_number
        if roll_up_usage is not None:
            self.roll_up_usage = roll_up_usage
        if run_billing is not None:
            self.run_billing = run_billing
        if sales_rep is not None:
            self.sales_rep = sales_rep
        if sequence_set_id is not None:
            self.sequence_set_id = sequence_set_id
        if sold_to_contact is not None:
            self.sold_to_contact = sold_to_contact
        if sold_to_same_as_bill_to is not None:
            self.sold_to_same_as_bill_to = sold_to_same_as_bill_to
        if subscription is not None:
            self.subscription = subscription
        if tagging is not None:
            self.tagging = tagging
        if target_date is not None:
            self.target_date = target_date
        if tax_info is not None:
            self.tax_info = tax_info
        if communication_profile_name is not None:
            self.communication_profile_name = communication_profile_name
        if payment_gateway_number is not None:
            self.payment_gateway_number = payment_gateway_number
        if payment_gateway_name is not None:
            self.payment_gateway_name = payment_gateway_name
        if organization_id is not None:
            self.organization_id = organization_id
        if organization_name is not None:
            self.organization_name = organization_name
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if parent_account_number is not None:
            self.parent_account_number = parent_account_number
        if summary_statement_template_id is not None:
            self.summary_statement_template_id = summary_statement_template_id
        if sequence_set_name is not None:
            self.sequence_set_name = sequence_set_name
        if einvoice_profile is not None:
            self.einvoice_profile = einvoice_profile
        if organization_label is not None:
            self.organization_label = organization_label
        if class__ns is not None:
            self.class__ns = class__ns
        if customer_type__ns is not None:
            self.customer_type__ns = customer_type__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if syncto_net_suite__ns is not None:
            self.syncto_net_suite__ns = syncto_net_suite__ns

    @property
    def account_number(self):
        """Gets the account_number of this CreateAccountRequest.  # noqa: E501

        A unique account number, up to 50 characters that do not begin with the default account number prefix.  If no account number is specified, one is generated.   # noqa: E501

        :return: The account_number of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateAccountRequest.

        A unique account number, up to 50 characters that do not begin with the default account number prefix.  If no account number is specified, one is generated.   # noqa: E501

        :param account_number: The account_number of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def additional_email_addresses(self):
        """Gets the additional_email_addresses of this CreateAccountRequest.  # noqa: E501

        A list of additional email addresses to receive email notifications. Use commas to separate email addresses.   # noqa: E501

        :return: The additional_email_addresses of this CreateAccountRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_email_addresses

    @additional_email_addresses.setter
    def additional_email_addresses(self, additional_email_addresses):
        """Sets the additional_email_addresses of this CreateAccountRequest.

        A list of additional email addresses to receive email notifications. Use commas to separate email addresses.   # noqa: E501

        :param additional_email_addresses: The additional_email_addresses of this CreateAccountRequest.  # noqa: E501
        :type: list[str]
        """

        self._additional_email_addresses = additional_email_addresses

    @property
    def application_order(self):
        """Gets the application_order of this CreateAccountRequest.  # noqa: E501

        The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.  **Note:**   - This field is valid only if the `applyCredit` field is set to `true`.   - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply to invoices.   # noqa: E501

        :return: The application_order of this CreateAccountRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._application_order

    @application_order.setter
    def application_order(self, application_order):
        """Sets the application_order of this CreateAccountRequest.

        The priority order to apply credit memos and/or unapplied payments to an invoice. Possible item values are: `CreditMemo`, `UnappliedPayment`.  **Note:**   - This field is valid only if the `applyCredit` field is set to `true`.   - If no value is specified for this field, the default priority order is used, [\"CreditMemo\", \"UnappliedPayment\"], to apply credit memos first and then apply unapplied payments.   - If only one item is specified, only the items of the spedified type are applied to invoices. For example, if the value is `[\"CreditMemo\"]`, only credit memos are used to apply to invoices.   # noqa: E501

        :param application_order: The application_order of this CreateAccountRequest.  # noqa: E501
        :type: list[str]
        """

        self._application_order = application_order

    @property
    def apply_credit(self):
        """Gets the apply_credit of this CreateAccountRequest.  # noqa: E501

        Whether to automatically apply credit memos or unapplied payments, or both to an invoice.  If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the invoice. If no value is specified or the value is `false`, no action is taken.  **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   # noqa: E501

        :return: The apply_credit of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._apply_credit

    @apply_credit.setter
    def apply_credit(self, apply_credit):
        """Sets the apply_credit of this CreateAccountRequest.

        Whether to automatically apply credit memos or unapplied payments, or both to an invoice.  If the value is `true`, the credit memo or unapplied payment, or both will be automatically applied to the invoice. If no value is specified or the value is `false`, no action is taken.  **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   # noqa: E501

        :param apply_credit: The apply_credit of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._apply_credit = apply_credit

    @property
    def apply_credit_balance(self):
        """Gets the apply_credit_balance of this CreateAccountRequest.  # noqa: E501

        Applies a credit balance to an invoice.  If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.  Prerequisite: `invoice` must be `true`.  To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.   **Note:**    - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.   - This field is deprecated if you have the Invoice Settlement feature enabled.    # noqa: E501

        :return: The apply_credit_balance of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._apply_credit_balance

    @apply_credit_balance.setter
    def apply_credit_balance(self, apply_credit_balance):
        """Sets the apply_credit_balance of this CreateAccountRequest.

        Applies a credit balance to an invoice.  If the value is `true`, the credit balance is applied to the invoice. If the value is `false`, no action is taken.  Prerequisite: `invoice` must be `true`.  To view the credit balance adjustment, retrieve the details of the invoice using the Get Invoices method.   **Note:**    - If you are using the field `invoiceCollect` rather than the field `invoice`, the `invoiceCollect` value must be `true`.   - This field is deprecated if you have the Invoice Settlement feature enabled.    # noqa: E501

        :param apply_credit_balance: The apply_credit_balance of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._apply_credit_balance = apply_credit_balance

    @property
    def auto_pay(self):
        """Gets the auto_pay of this CreateAccountRequest.  # noqa: E501

        Whether future payments are to be automatically billed when they are due.   - If this field is set to `true`, you must specify either the `creditCard` field or the `hpmCreditCardPaymentMethodId` field, but not both. - If this field is set to `false`, you can specify neither the `creditCard` field nor the `hpmCreditCardPaymentMethodId` field.   # noqa: E501

        :return: The auto_pay of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this CreateAccountRequest.

        Whether future payments are to be automatically billed when they are due.   - If this field is set to `true`, you must specify either the `creditCard` field or the `hpmCreditCardPaymentMethodId` field, but not both. - If this field is set to `false`, you can specify neither the `creditCard` field nor the `hpmCreditCardPaymentMethodId` field.   # noqa: E501

        :param auto_pay: The auto_pay of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def batch(self):
        """Gets the batch of this CreateAccountRequest.  # noqa: E501

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :return: The batch of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this CreateAccountRequest.

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :param batch: The batch of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this CreateAccountRequest.  # noqa: E501

        The account's bill cycle day (BCD), when bill runs generate invoices for the account.  Specify any day of the month (1-31, where 31 = end-of-month), or 0 for auto-set. Required if no subscription will be created.  Optional if a subscription is created and defaults to the day-of-the-month of the subscription's `contractEffectiveDate`.   # noqa: E501

        :return: The bill_cycle_day of this CreateAccountRequest.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this CreateAccountRequest.

        The account's bill cycle day (BCD), when bill runs generate invoices for the account.  Specify any day of the month (1-31, where 31 = end-of-month), or 0 for auto-set. Required if no subscription will be created.  Optional if a subscription is created and defaults to the day-of-the-month of the subscription's `contractEffectiveDate`.   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this CreateAccountRequest.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_to_contact(self):
        """Gets the bill_to_contact of this CreateAccountRequest.  # noqa: E501


        :return: The bill_to_contact of this CreateAccountRequest.  # noqa: E501
        :rtype: CreateAccountContact
        """
        return self._bill_to_contact

    @bill_to_contact.setter
    def bill_to_contact(self, bill_to_contact):
        """Sets the bill_to_contact of this CreateAccountRequest.


        :param bill_to_contact: The bill_to_contact of this CreateAccountRequest.  # noqa: E501
        :type: CreateAccountContact
        """
        if bill_to_contact is None:
            raise ValueError("Invalid value for `bill_to_contact`, must not be `None`")  # noqa: E501

        self._bill_to_contact = bill_to_contact

    @property
    def collect(self):
        """Gets the collect of this CreateAccountRequest.  # noqa: E501

        Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account. If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken. Prerequisite: The `invoice` or `runBilling` field must be `true`.  **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later.   # noqa: E501

        :return: The collect of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._collect

    @collect.setter
    def collect(self, collect):
        """Sets the collect of this CreateAccountRequest.

        Collects an automatic payment for a subscription. The collection generated in this operation is only for this subscription, not for the entire customer account. If the value is `true`, the automatic payment is collected. If the value is `false`, no action is taken. Prerequisite: The `invoice` or `runBilling` field must be `true`.  **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or later.   # noqa: E501

        :param collect: The collect of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._collect = collect

    @property
    def communication_profile_id(self):
        """Gets the communication_profile_id of this CreateAccountRequest.  # noqa: E501

        The ID of the communication profile that this account is linked to.  You can provide either or both of the `communicationProfileId` and `profileNumber` fields.  If both are provided, the request will fail if they do not refer to the same communication profile.   # noqa: E501

        :return: The communication_profile_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._communication_profile_id

    @communication_profile_id.setter
    def communication_profile_id(self, communication_profile_id):
        """Sets the communication_profile_id of this CreateAccountRequest.

        The ID of the communication profile that this account is linked to.  You can provide either or both of the `communicationProfileId` and `profileNumber` fields.  If both are provided, the request will fail if they do not refer to the same communication profile.   # noqa: E501

        :param communication_profile_id: The communication_profile_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._communication_profile_id = communication_profile_id

    @property
    def credit_card(self):
        """Gets the credit_card of this CreateAccountRequest.  # noqa: E501


        :return: The credit_card of this CreateAccountRequest.  # noqa: E501
        :rtype: CreateAccountCreditCard
        """
        return self._credit_card

    @credit_card.setter
    def credit_card(self, credit_card):
        """Sets the credit_card of this CreateAccountRequest.


        :param credit_card: The credit_card of this CreateAccountRequest.  # noqa: E501
        :type: CreateAccountCreditCard
        """

        self._credit_card = credit_card

    @property
    def credit_memo_reason_code(self):
        """Gets the credit_memo_reason_code of this CreateAccountRequest.  # noqa: E501

        A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.  # noqa: E501

        :return: The credit_memo_reason_code of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_reason_code

    @credit_memo_reason_code.setter
    def credit_memo_reason_code(self, credit_memo_reason_code):
        """Sets the credit_memo_reason_code of this CreateAccountRequest.

        A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.  # noqa: E501

        :param credit_memo_reason_code: The credit_memo_reason_code of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._credit_memo_reason_code = credit_memo_reason_code

    @property
    def credit_memo_template_id(self):
        """Gets the credit_memo_template_id of this CreateAccountRequest.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :return: The credit_memo_template_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_template_id

    @credit_memo_template_id.setter
    def credit_memo_template_id(self, credit_memo_template_id):
        """Sets the credit_memo_template_id of this CreateAccountRequest.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :param credit_memo_template_id: The credit_memo_template_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._credit_memo_template_id = credit_memo_template_id

    @property
    def crm_id(self):
        """Gets the crm_id of this CreateAccountRequest.  # noqa: E501

        CRM account ID for the account, up to 100 characters.   # noqa: E501

        :return: The crm_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this CreateAccountRequest.

        CRM account ID for the account, up to 100 characters.   # noqa: E501

        :param crm_id: The crm_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def currency(self):
        """Gets the currency of this CreateAccountRequest.  # noqa: E501

        A currency as defined in Billing Settings in the Zuora UI.  For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :return: The currency of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreateAccountRequest.

        A currency as defined in Billing Settings in the Zuora UI.  For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :param currency: The currency of this CreateAccountRequest.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def debit_memo_template_id(self):
        """Gets the debit_memo_template_id of this CreateAccountRequest.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :return: The debit_memo_template_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._debit_memo_template_id

    @debit_memo_template_id.setter
    def debit_memo_template_id(self, debit_memo_template_id):
        """Sets the debit_memo_template_id of this CreateAccountRequest.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :param debit_memo_template_id: The debit_memo_template_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._debit_memo_template_id = debit_memo_template_id

    @property
    def document_date(self):
        """Gets the document_date of this CreateAccountRequest.  # noqa: E501

        The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.  - If this field is specified, the specified date is used as the billing document date.  - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.   # noqa: E501

        :return: The document_date of this CreateAccountRequest.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this CreateAccountRequest.

        The date of the billing document, in `yyyy-mm-dd` format. It represents the invoice date for invoices, credit memo date for credit memos, and debit memo date for debit memos.  - If this field is specified, the specified date is used as the billing document date.  - If this field is not specified, the date specified in the `targetDate` is used as the billing document date.   # noqa: E501

        :param document_date: The document_date of this CreateAccountRequest.  # noqa: E501
        :type: date
        """

        self._document_date = document_date

    @property
    def hpm_credit_card_payment_method_id(self):
        """Gets the hpm_credit_card_payment_method_id of this CreateAccountRequest.  # noqa: E501

        The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.  If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field, but not both.  For the Credit Card Reference Transaction payment method, you can specify the payment method ID in this field or use the `paymentMethod` field to create a CC Reference Transaction payment method for an account.   # noqa: E501

        :return: The hpm_credit_card_payment_method_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._hpm_credit_card_payment_method_id

    @hpm_credit_card_payment_method_id.setter
    def hpm_credit_card_payment_method_id(self, hpm_credit_card_payment_method_id):
        """Sets the hpm_credit_card_payment_method_id of this CreateAccountRequest.

        The ID of the payment method associated with this account. The payment method specified for this field will be set as the default payment method of the account.  If the `autoPay` field is set to `true`, you must provide the credit card payment method ID for either this field or the `creditCard` field, but not both.  For the Credit Card Reference Transaction payment method, you can specify the payment method ID in this field or use the `paymentMethod` field to create a CC Reference Transaction payment method for an account.   # noqa: E501

        :param hpm_credit_card_payment_method_id: The hpm_credit_card_payment_method_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._hpm_credit_card_payment_method_id = hpm_credit_card_payment_method_id

    @property
    def invoice(self):
        """Gets the invoice of this CreateAccountRequest.  # noqa: E501

        **Note:** This field has been replaced by the `runBilling` field. The `invoice` field is only available for backward compatibility.  Creates an invoice for a subscription. The invoice generated in this operation is only for this subscription, not for the entire customer account.  If the value is `true`, an invoice is created. If the value is `false`, no action is taken.  **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or `207.0`.   # noqa: E501

        :return: The invoice of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this CreateAccountRequest.

        **Note:** This field has been replaced by the `runBilling` field. The `invoice` field is only available for backward compatibility.  Creates an invoice for a subscription. The invoice generated in this operation is only for this subscription, not for the entire customer account.  If the value is `true`, an invoice is created. If the value is `false`, no action is taken.  **Note**: This field is only available if you set the `zuora-version` request header to `196.0` or `207.0`.   # noqa: E501

        :param invoice: The invoice of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._invoice = invoice

    @property
    def invoice_collect(self):
        """Gets the invoice_collect of this CreateAccountRequest.  # noqa: E501

        This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility. If this field is set to `true`, and a subscription is created, an invoice is generated at account creation time and payment is immediately collected using the account's default payment method. This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`. The default field value is `true`.   # noqa: E501

        :return: The invoice_collect of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_collect

    @invoice_collect.setter
    def invoice_collect(self, invoice_collect):
        """Sets the invoice_collect of this CreateAccountRequest.

        This field has been replaced by the `invoice` field and the `collect` field. `invoiceCollect` is available only for backward compatibility. If this field is set to `true`, and a subscription is created, an invoice is generated at account creation time and payment is immediately collected using the account's default payment method. This field is only available if you set the `zuora-version` request header to `186.0`, `187.0`, `188.0`, or `189.0`. The default field value is `true`.   # noqa: E501

        :param invoice_collect: The invoice_collect of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._invoice_collect = invoice_collect

    @property
    def invoice_delivery_prefs_email(self):
        """Gets the invoice_delivery_prefs_email of this CreateAccountRequest.  # noqa: E501

        Whether the customer wants to receive invoices through email.    # noqa: E501

        :return: The invoice_delivery_prefs_email of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_email

    @invoice_delivery_prefs_email.setter
    def invoice_delivery_prefs_email(self, invoice_delivery_prefs_email):
        """Sets the invoice_delivery_prefs_email of this CreateAccountRequest.

        Whether the customer wants to receive invoices through email.    # noqa: E501

        :param invoice_delivery_prefs_email: The invoice_delivery_prefs_email of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_email = invoice_delivery_prefs_email

    @property
    def invoice_delivery_prefs_print(self):
        """Gets the invoice_delivery_prefs_print of this CreateAccountRequest.  # noqa: E501

        Whether the customer wants to receive printed invoices, such as through postal mail.   # noqa: E501

        :return: The invoice_delivery_prefs_print of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_print

    @invoice_delivery_prefs_print.setter
    def invoice_delivery_prefs_print(self, invoice_delivery_prefs_print):
        """Sets the invoice_delivery_prefs_print of this CreateAccountRequest.

        Whether the customer wants to receive printed invoices, such as through postal mail.   # noqa: E501

        :param invoice_delivery_prefs_print: The invoice_delivery_prefs_print of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_print = invoice_delivery_prefs_print

    @property
    def invoice_target_date(self):
        """Gets the invoice_target_date of this CreateAccountRequest.  # noqa: E501

        **Note:** This field has been replaced by the `targetDate` field. The `invoiceTargetDate` field is only available for backward compatibility.     Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.   This field is in REST API minor version control. To use this field in the method, you can set the `zuora-version` parameter to the minor version number in the request header. Supported minor versions are `207.0` and earlier.    # noqa: E501

        :return: The invoice_target_date of this CreateAccountRequest.  # noqa: E501
        :rtype: date
        """
        return self._invoice_target_date

    @invoice_target_date.setter
    def invoice_target_date(self, invoice_target_date):
        """Sets the invoice_target_date of this CreateAccountRequest.

        **Note:** This field has been replaced by the `targetDate` field. The `invoiceTargetDate` field is only available for backward compatibility.     Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.   This field is in REST API minor version control. To use this field in the method, you can set the `zuora-version` parameter to the minor version number in the request header. Supported minor versions are `207.0` and earlier.    # noqa: E501

        :param invoice_target_date: The invoice_target_date of this CreateAccountRequest.  # noqa: E501
        :type: date
        """

        self._invoice_target_date = invoice_target_date

    @property
    def invoice_template_id(self):
        """Gets the invoice_template_id of this CreateAccountRequest.  # noqa: E501

        Invoice template ID, configured in Billing Settings in the Zuora UI.   # noqa: E501

        :return: The invoice_template_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_template_id

    @invoice_template_id.setter
    def invoice_template_id(self, invoice_template_id):
        """Sets the invoice_template_id of this CreateAccountRequest.

        Invoice template ID, configured in Billing Settings in the Zuora UI.   # noqa: E501

        :param invoice_template_id: The invoice_template_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._invoice_template_id = invoice_template_id

    @property
    def name(self):
        """Gets the name of this CreateAccountRequest.  # noqa: E501

        Account name, up to 255 characters.   # noqa: E501

        :return: The name of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateAccountRequest.

        Account name, up to 255 characters.   # noqa: E501

        :param name: The name of this CreateAccountRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this CreateAccountRequest.  # noqa: E501

        A string of up to 65,535 characters.  # noqa: E501

        :return: The notes of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CreateAccountRequest.

        A string of up to 65,535 characters.  # noqa: E501

        :param notes: The notes of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def parent_id(self):
        """Gets the parent_id of this CreateAccountRequest.  # noqa: E501

        Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy\" target=\"_blank\">Customer Hierarchy</a> enabled.  # noqa: E501

        :return: The parent_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this CreateAccountRequest.

        Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy\" target=\"_blank\">Customer Hierarchy</a> enabled.  # noqa: E501

        :param parent_id: The parent_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def partner_account(self):
        """Gets the partner_account of this CreateAccountRequest.  # noqa: E501

        Whether the customer account is a partner, distributor, or reseller.  You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments.    **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   # noqa: E501

        :return: The partner_account of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._partner_account

    @partner_account.setter
    def partner_account(self, partner_account):
        """Sets the partner_account of this CreateAccountRequest.

        Whether the customer account is a partner, distributor, or reseller.  You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments.    **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   # noqa: E501

        :param partner_account: The partner_account of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._partner_account = partner_account

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this CreateAccountRequest.  # noqa: E501

        The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.   # noqa: E501

        :return: The payment_gateway of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this CreateAccountRequest.

        The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.   # noqa: E501

        :param payment_gateway: The payment_gateway of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._payment_gateway = payment_gateway

    @property
    def payment_method(self):
        """Gets the payment_method of this CreateAccountRequest.  # noqa: E501


        :return: The payment_method of this CreateAccountRequest.  # noqa: E501
        :rtype: CreateAccountPaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this CreateAccountRequest.


        :param payment_method: The payment_method of this CreateAccountRequest.  # noqa: E501
        :type: CreateAccountPaymentMethod
        """

        self._payment_method = payment_method

    @property
    def payment_term(self):
        """Gets the payment_term of this CreateAccountRequest.  # noqa: E501

        Payment terms for this account. Possible values are: `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.  **Note**: If you want to specify a payment term when creating a new account, you must set a value in this field. If you do not set a value in this field, Zuora will use `Due Upon Receipt` as the value instead of the default value set in **Billing Settings** > **Payment Terms** from Zuora UI.   # noqa: E501

        :return: The payment_term of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this CreateAccountRequest.

        Payment terms for this account. Possible values are: `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.  **Note**: If you want to specify a payment term when creating a new account, you must set a value in this field. If you do not set a value in this field, Zuora will use `Due Upon Receipt` as the value instead of the default value set in **Billing Settings** > **Payment Terms** from Zuora UI.   # noqa: E501

        :param payment_term: The payment_term of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def profile_number(self):
        """Gets the profile_number of this CreateAccountRequest.  # noqa: E501

        The number of the communication profile that this account is linked to.  You can provide either or both of the `communicationProfileId` and `profileNumber` fields.  If both are provided, the request will fail if they do not refer to the same communication profile.   # noqa: E501

        :return: The profile_number of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._profile_number

    @profile_number.setter
    def profile_number(self, profile_number):
        """Sets the profile_number of this CreateAccountRequest.

        The number of the communication profile that this account is linked to.  You can provide either or both of the `communicationProfileId` and `profileNumber` fields.  If both are provided, the request will fail if they do not refer to the same communication profile.   # noqa: E501

        :param profile_number: The profile_number of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._profile_number = profile_number

    @property
    def roll_up_usage(self):
        """Gets the roll_up_usage of this CreateAccountRequest.  # noqa: E501

        Whether roll up the usage of the account to its parent account   # noqa: E501

        :return: The roll_up_usage of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._roll_up_usage

    @roll_up_usage.setter
    def roll_up_usage(self, roll_up_usage):
        """Sets the roll_up_usage of this CreateAccountRequest.

        Whether roll up the usage of the account to its parent account   # noqa: E501

        :param roll_up_usage: The roll_up_usage of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._roll_up_usage = roll_up_usage

    @property
    def run_billing(self):
        """Gets the run_billing of this CreateAccountRequest.  # noqa: E501

        Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/B_Credit_and_Debit_Memos/Rules_for_generating_invoices_and_credit_memos).  The billing documents generated in this operation is only for this subscription, not for the entire customer account. Possible values: - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created. - `false`: No invoice is created. **Note:** This field is in Zuora REST API version control. Supported minor versions are `211.0` or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :return: The run_billing of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._run_billing

    @run_billing.setter
    def run_billing(self, run_billing):
        """Sets the run_billing of this CreateAccountRequest.

        Creates an invoice for a subscription. If you have the Invoice Settlement feature enabled, a credit memo might also be created based on the [invoice and credit memo generation rule](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/B_Credit_and_Debit_Memos/Rules_for_generating_invoices_and_credit_memos).  The billing documents generated in this operation is only for this subscription, not for the entire customer account. Possible values: - `true`: An invoice is created. If you have the Invoice Settlement feature enabled, a credit memo might also be created. - `false`: No invoice is created. **Note:** This field is in Zuora REST API version control. Supported minor versions are `211.0` or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :param run_billing: The run_billing of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._run_billing = run_billing

    @property
    def sales_rep(self):
        """Gets the sales_rep of this CreateAccountRequest.  # noqa: E501

        The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.  # noqa: E501

        :return: The sales_rep of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._sales_rep

    @sales_rep.setter
    def sales_rep(self, sales_rep):
        """Sets the sales_rep of this CreateAccountRequest.

        The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.  # noqa: E501

        :param sales_rep: The sales_rep of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._sales_rep = sales_rep

    @property
    def sequence_set_id(self):
        """Gets the sequence_set_id of this CreateAccountRequest.  # noqa: E501

        The ID of the billing document sequence set to assign to the customer account.   The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.  If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.   # noqa: E501

        :return: The sequence_set_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_id

    @sequence_set_id.setter
    def sequence_set_id(self, sequence_set_id):
        """Sets the sequence_set_id of this CreateAccountRequest.

        The ID of the billing document sequence set to assign to the customer account.   The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.  If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.   # noqa: E501

        :param sequence_set_id: The sequence_set_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._sequence_set_id = sequence_set_id

    @property
    def sold_to_contact(self):
        """Gets the sold_to_contact of this CreateAccountRequest.  # noqa: E501


        :return: The sold_to_contact of this CreateAccountRequest.  # noqa: E501
        :rtype: CreateAccountContact
        """
        return self._sold_to_contact

    @sold_to_contact.setter
    def sold_to_contact(self, sold_to_contact):
        """Sets the sold_to_contact of this CreateAccountRequest.


        :param sold_to_contact: The sold_to_contact of this CreateAccountRequest.  # noqa: E501
        :type: CreateAccountContact
        """

        self._sold_to_contact = sold_to_contact

    @property
    def sold_to_same_as_bill_to(self):
        """Gets the sold_to_same_as_bill_to of this CreateAccountRequest.  # noqa: E501

        Whether the sold-to contact and bill-to contact are the same entity.   The created account has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:  - This field is set to `true`.  - A bill-to contact is specified. - No sold-to contact is specified.   # noqa: E501

        :return: The sold_to_same_as_bill_to of this CreateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._sold_to_same_as_bill_to

    @sold_to_same_as_bill_to.setter
    def sold_to_same_as_bill_to(self, sold_to_same_as_bill_to):
        """Sets the sold_to_same_as_bill_to of this CreateAccountRequest.

        Whether the sold-to contact and bill-to contact are the same entity.   The created account has the same bill-to contact and sold-to contact entity only when all the following conditions are met in the request body:  - This field is set to `true`.  - A bill-to contact is specified. - No sold-to contact is specified.   # noqa: E501

        :param sold_to_same_as_bill_to: The sold_to_same_as_bill_to of this CreateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._sold_to_same_as_bill_to = sold_to_same_as_bill_to

    @property
    def subscription(self):
        """Gets the subscription of this CreateAccountRequest.  # noqa: E501


        :return: The subscription of this CreateAccountRequest.  # noqa: E501
        :rtype: CreateAccountSubscription
        """
        return self._subscription

    @subscription.setter
    def subscription(self, subscription):
        """Sets the subscription of this CreateAccountRequest.


        :param subscription: The subscription of this CreateAccountRequest.  # noqa: E501
        :type: CreateAccountSubscription
        """

        self._subscription = subscription

    @property
    def tagging(self):
        """Gets the tagging of this CreateAccountRequest.  # noqa: E501


        :return: The tagging of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._tagging

    @tagging.setter
    def tagging(self, tagging):
        """Sets the tagging of this CreateAccountRequest.


        :param tagging: The tagging of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._tagging = tagging

    @property
    def target_date(self):
        """Gets the target_date of this CreateAccountRequest.  # noqa: E501

        Date through which to calculate charges if an invoice or a credit memo is generated, as yyyy-mm-dd. Default is current date.  **Note:** The credit memo is only available only if you have the Invoice Settlement feature enabled.  This field is in Zuora REST API version control. Supported minor versions are `211.0` and later. To use this field in the method, you must set the  `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :return: The target_date of this CreateAccountRequest.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this CreateAccountRequest.

        Date through which to calculate charges if an invoice or a credit memo is generated, as yyyy-mm-dd. Default is current date.  **Note:** The credit memo is only available only if you have the Invoice Settlement feature enabled.  This field is in Zuora REST API version control. Supported minor versions are `211.0` and later. To use this field in the method, you must set the  `zuora-version` parameter to the minor version number in the request header.   # noqa: E501

        :param target_date: The target_date of this CreateAccountRequest.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def tax_info(self):
        """Gets the tax_info of this CreateAccountRequest.  # noqa: E501


        :return: The tax_info of this CreateAccountRequest.  # noqa: E501
        :rtype: TaxInfo
        """
        return self._tax_info

    @tax_info.setter
    def tax_info(self, tax_info):
        """Sets the tax_info of this CreateAccountRequest.


        :param tax_info: The tax_info of this CreateAccountRequest.  # noqa: E501
        :type: TaxInfo
        """

        self._tax_info = tax_info

    @property
    def communication_profile_name(self):
        """Gets the communication_profile_name of this CreateAccountRequest.  # noqa: E501

        communicationProfileName   # noqa: E501

        :return: The communication_profile_name of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._communication_profile_name

    @communication_profile_name.setter
    def communication_profile_name(self, communication_profile_name):
        """Sets the communication_profile_name of this CreateAccountRequest.

        communicationProfileName   # noqa: E501

        :param communication_profile_name: The communication_profile_name of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._communication_profile_name = communication_profile_name

    @property
    def payment_gateway_number(self):
        """Gets the payment_gateway_number of this CreateAccountRequest.  # noqa: E501

        paymentGatewayNumber   # noqa: E501

        :return: The payment_gateway_number of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_number

    @payment_gateway_number.setter
    def payment_gateway_number(self, payment_gateway_number):
        """Sets the payment_gateway_number of this CreateAccountRequest.

        paymentGatewayNumber   # noqa: E501

        :param payment_gateway_number: The payment_gateway_number of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._payment_gateway_number = payment_gateway_number

    @property
    def payment_gateway_name(self):
        """Gets the payment_gateway_name of this CreateAccountRequest.  # noqa: E501

        paymentGatewayName   # noqa: E501

        :return: The payment_gateway_name of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_name

    @payment_gateway_name.setter
    def payment_gateway_name(self, payment_gateway_name):
        """Sets the payment_gateway_name of this CreateAccountRequest.

        paymentGatewayName   # noqa: E501

        :param payment_gateway_name: The payment_gateway_name of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._payment_gateway_name = payment_gateway_name

    @property
    def organization_id(self):
        """Gets the organization_id of this CreateAccountRequest.  # noqa: E501

        organizationId   # noqa: E501

        :return: The organization_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this CreateAccountRequest.

        organizationId   # noqa: E501

        :param organization_id: The organization_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._organization_id = organization_id

    @property
    def organization_name(self):
        """Gets the organization_name of this CreateAccountRequest.  # noqa: E501

        organizationName   # noqa: E501

        :return: The organization_name of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_name

    @organization_name.setter
    def organization_name(self, organization_name):
        """Sets the organization_name of this CreateAccountRequest.

        organizationName   # noqa: E501

        :param organization_name: The organization_name of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._organization_name = organization_name

    @property
    def gateway_id(self):
        """Gets the gateway_id of this CreateAccountRequest.  # noqa: E501

        gatewayId   # noqa: E501

        :return: The gateway_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this CreateAccountRequest.

        gatewayId   # noqa: E501

        :param gateway_id: The gateway_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this CreateAccountRequest.  # noqa: E501

        paymentMethodId   # noqa: E501

        :return: The payment_method_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this CreateAccountRequest.

        paymentMethodId   # noqa: E501

        :param payment_method_id: The payment_method_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def parent_account_number(self):
        """Gets the parent_account_number of this CreateAccountRequest.  # noqa: E501

        parentAccountNumber   # noqa: E501

        :return: The parent_account_number of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_account_number

    @parent_account_number.setter
    def parent_account_number(self, parent_account_number):
        """Sets the parent_account_number of this CreateAccountRequest.

        parentAccountNumber   # noqa: E501

        :param parent_account_number: The parent_account_number of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._parent_account_number = parent_account_number

    @property
    def summary_statement_template_id(self):
        """Gets the summary_statement_template_id of this CreateAccountRequest.  # noqa: E501

        summaryStatementTemplateId   # noqa: E501

        :return: The summary_statement_template_id of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._summary_statement_template_id

    @summary_statement_template_id.setter
    def summary_statement_template_id(self, summary_statement_template_id):
        """Sets the summary_statement_template_id of this CreateAccountRequest.

        summaryStatementTemplateId   # noqa: E501

        :param summary_statement_template_id: The summary_statement_template_id of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._summary_statement_template_id = summary_statement_template_id

    @property
    def sequence_set_name(self):
        """Gets the sequence_set_name of this CreateAccountRequest.  # noqa: E501

        sequenceSetName   # noqa: E501

        :return: The sequence_set_name of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_name

    @sequence_set_name.setter
    def sequence_set_name(self, sequence_set_name):
        """Sets the sequence_set_name of this CreateAccountRequest.

        sequenceSetName   # noqa: E501

        :param sequence_set_name: The sequence_set_name of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._sequence_set_name = sequence_set_name

    @property
    def einvoice_profile(self):
        """Gets the einvoice_profile of this CreateAccountRequest.  # noqa: E501


        :return: The einvoice_profile of this CreateAccountRequest.  # noqa: E501
        :rtype: AccountEInvoiceProfile
        """
        return self._einvoice_profile

    @einvoice_profile.setter
    def einvoice_profile(self, einvoice_profile):
        """Sets the einvoice_profile of this CreateAccountRequest.


        :param einvoice_profile: The einvoice_profile of this CreateAccountRequest.  # noqa: E501
        :type: AccountEInvoiceProfile
        """

        self._einvoice_profile = einvoice_profile

    @property
    def organization_label(self):
        """Gets the organization_label of this CreateAccountRequest.  # noqa: E501


        :return: The organization_label of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_label

    @organization_label.setter
    def organization_label(self, organization_label):
        """Sets the organization_label of this CreateAccountRequest.


        :param organization_label: The organization_label of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._organization_label = organization_label

    @property
    def class__ns(self):
        """Gets the class__ns of this CreateAccountRequest.  # noqa: E501

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this CreateAccountRequest.

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._class__ns = class__ns

    @property
    def customer_type__ns(self):
        """Gets the customer_type__ns of this CreateAccountRequest.  # noqa: E501


        :return: The customer_type__ns of this CreateAccountRequest.  # noqa: E501
        :rtype: AccountObjectNSFieldsCustomerTypeNS
        """
        return self._customer_type__ns

    @customer_type__ns.setter
    def customer_type__ns(self, customer_type__ns):
        """Sets the customer_type__ns of this CreateAccountRequest.


        :param customer_type__ns: The customer_type__ns of this CreateAccountRequest.  # noqa: E501
        :type: AccountObjectNSFieldsCustomerTypeNS
        """

        self._customer_type__ns = customer_type__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this CreateAccountRequest.  # noqa: E501

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this CreateAccountRequest.

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._department__ns = department__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this CreateAccountRequest.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this CreateAccountRequest.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this CreateAccountRequest.  # noqa: E501

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this CreateAccountRequest.

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this CreateAccountRequest.  # noqa: E501

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this CreateAccountRequest.

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._location__ns = location__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this CreateAccountRequest.  # noqa: E501

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this CreateAccountRequest.

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this CreateAccountRequest.  # noqa: E501

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this CreateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this CreateAccountRequest.

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this CreateAccountRequest.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    @property
    def syncto_net_suite__ns(self):
        """Gets the syncto_net_suite__ns of this CreateAccountRequest.  # noqa: E501


        :return: The syncto_net_suite__ns of this CreateAccountRequest.  # noqa: E501
        :rtype: AccountObjectNSFieldsSynctoNetSuiteNS
        """
        return self._syncto_net_suite__ns

    @syncto_net_suite__ns.setter
    def syncto_net_suite__ns(self, syncto_net_suite__ns):
        """Sets the syncto_net_suite__ns of this CreateAccountRequest.


        :param syncto_net_suite__ns: The syncto_net_suite__ns of this CreateAccountRequest.  # noqa: E501
        :type: AccountObjectNSFieldsSynctoNetSuiteNS
        """

        self._syncto_net_suite__ns = syncto_net_suite__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAccountRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAccountRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
