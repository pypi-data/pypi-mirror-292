# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBatchQueryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'api_version': 'str',
        'convert_to_currencies': 'str',
        'deleted': 'DeletedRecord',
        'name': 'str',
        'query': 'str',
        'type': 'BatchQueryType'
    }

    attribute_map = {
        'api_version': 'apiVersion',
        'convert_to_currencies': 'convertToCurrencies',
        'deleted': 'deleted',
        'name': 'name',
        'query': 'query',
        'type': 'type'
    }

    def __init__(self, api_version=None, convert_to_currencies=None, deleted=None, name=None, query=None, type=None):  # noqa: E501
        """CreateBatchQueryRequest - a model defined in Swagger"""  # noqa: E501
        self._api_version = None
        self._convert_to_currencies = None
        self._deleted = None
        self._name = None
        self._query = None
        self._type = None
        self.discriminator = None
        if api_version is not None:
            self.api_version = api_version
        if convert_to_currencies is not None:
            self.convert_to_currencies = convert_to_currencies
        if deleted is not None:
            self.deleted = deleted
        if name is not None:
            self.name = name
        if query is not None:
            self.query = query
        if type is not None:
            self.type = type

    @property
    def api_version(self):
        """Gets the api_version of this CreateBatchQueryRequest.  # noqa: E501

        The API version for the query. If an API version is not specified, the latest version is used by default. Using the latest WSDL version is most useful for reporting use cases. For integration purposes, specify the WSDL version to ensure consistent query behavior, that is, what is supported and included in the response returned by the API.  **Note**: As of API version 69 and later, Zuora changed the format of certain fields. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/G_SOAP_API/AB_Getting_started_with_the__SOAP_API/C_Date_Field_Changes_in_the_SOAP_API\" target=\"_blank\">Date Field Changes in the SOAP API</a> for more information and a list of affected fields.   # noqa: E501

        :return: The api_version of this CreateBatchQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._api_version

    @api_version.setter
    def api_version(self, api_version):
        """Sets the api_version of this CreateBatchQueryRequest.

        The API version for the query. If an API version is not specified, the latest version is used by default. Using the latest WSDL version is most useful for reporting use cases. For integration purposes, specify the WSDL version to ensure consistent query behavior, that is, what is supported and included in the response returned by the API.  **Note**: As of API version 69 and later, Zuora changed the format of certain fields. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/G_SOAP_API/AB_Getting_started_with_the__SOAP_API/C_Date_Field_Changes_in_the_SOAP_API\" target=\"_blank\">Date Field Changes in the SOAP API</a> for more information and a list of affected fields.   # noqa: E501

        :param api_version: The api_version of this CreateBatchQueryRequest.  # noqa: E501
        :type: str
        """

        self._api_version = api_version

    @property
    def convert_to_currencies(self):
        """Gets the convert_to_currencies of this CreateBatchQueryRequest.  # noqa: E501

        The currencies that you want to convert transaction amounts into. You can specify any number of currencies. Specify the currencies using their <a href=\"https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/D_Currencies_and_Their_3-Letter_Codes\" target=\"_blank\">ISO currency codes</a> and separate each currency with a comma, for example, \"EUR,GBP,JPY\".  See <a href=\"https://knowledgecenter.zuora.com/Zuora_Collect/Zuora_Finance/D_Finance_Settings/F_Foreign_Currency_Conversion/Foreign_Currency_Conversion_for_Data_Source_Exports#Creating_the_Data_Source_Export_Using_the_AQuA_API\" target=\"_blank\">Convert Transaction Amounts Into Any Currency</a> for more information and examples.  To use this field, you must have <a href=\"https://knowledgecenter.zuora.com/Zuora_Collect/Zuora_Finance/D_Finance_Settings/F_Foreign_Currency_Conversion\" target=\"_blank\">Foreign Currency Conversion</a> enabled and you must be using API version 78 or later.   # noqa: E501

        :return: The convert_to_currencies of this CreateBatchQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._convert_to_currencies

    @convert_to_currencies.setter
    def convert_to_currencies(self, convert_to_currencies):
        """Sets the convert_to_currencies of this CreateBatchQueryRequest.

        The currencies that you want to convert transaction amounts into. You can specify any number of currencies. Specify the currencies using their <a href=\"https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/D_Currencies_and_Their_3-Letter_Codes\" target=\"_blank\">ISO currency codes</a> and separate each currency with a comma, for example, \"EUR,GBP,JPY\".  See <a href=\"https://knowledgecenter.zuora.com/Zuora_Collect/Zuora_Finance/D_Finance_Settings/F_Foreign_Currency_Conversion/Foreign_Currency_Conversion_for_Data_Source_Exports#Creating_the_Data_Source_Export_Using_the_AQuA_API\" target=\"_blank\">Convert Transaction Amounts Into Any Currency</a> for more information and examples.  To use this field, you must have <a href=\"https://knowledgecenter.zuora.com/Zuora_Collect/Zuora_Finance/D_Finance_Settings/F_Foreign_Currency_Conversion\" target=\"_blank\">Foreign Currency Conversion</a> enabled and you must be using API version 78 or later.   # noqa: E501

        :param convert_to_currencies: The convert_to_currencies of this CreateBatchQueryRequest.  # noqa: E501
        :type: str
        """

        self._convert_to_currencies = convert_to_currencies

    @property
    def deleted(self):
        """Gets the deleted of this CreateBatchQueryRequest.  # noqa: E501


        :return: The deleted of this CreateBatchQueryRequest.  # noqa: E501
        :rtype: DeletedRecord
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this CreateBatchQueryRequest.


        :param deleted: The deleted of this CreateBatchQueryRequest.  # noqa: E501
        :type: DeletedRecord
        """

        self._deleted = deleted

    @property
    def name(self):
        """Gets the name of this CreateBatchQueryRequest.  # noqa: E501

        The query name that can uniquely identify the query in this API request.   # noqa: E501

        :return: The name of this CreateBatchQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateBatchQueryRequest.

        The query name that can uniquely identify the query in this API request.   # noqa: E501

        :param name: The name of this CreateBatchQueryRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def query(self):
        """Gets the query of this CreateBatchQueryRequest.  # noqa: E501

        A valid ZOQL query or Export ZOQL query statement.   # noqa: E501

        :return: The query of this CreateBatchQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this CreateBatchQueryRequest.

        A valid ZOQL query or Export ZOQL query statement.   # noqa: E501

        :param query: The query of this CreateBatchQueryRequest.  # noqa: E501
        :type: str
        """

        self._query = query

    @property
    def type(self):
        """Gets the type of this CreateBatchQueryRequest.  # noqa: E501


        :return: The type of this CreateBatchQueryRequest.  # noqa: E501
        :rtype: BatchQueryType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateBatchQueryRequest.


        :param type: The type of this CreateBatchQueryRequest.  # noqa: E501
        :type: BatchQueryType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBatchQueryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBatchQueryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
