# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProxyCreateTaxationItemRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_code': 'str',
        'exempt_amount': 'float',
        'invoice_item_id': 'str',
        'jurisdiction': 'str',
        'location_code': 'str',
        'name': 'str',
        'tax_amount': 'float',
        'tax_code': 'str',
        'tax_code_description': 'str',
        'tax_date': 'date',
        'tax_rate': 'float',
        'tax_rate_description': 'str',
        'tax_rate_type': 'str'
    }

    attribute_map = {
        'accounting_code': 'AccountingCode',
        'exempt_amount': 'ExemptAmount',
        'invoice_item_id': 'InvoiceItemId',
        'jurisdiction': 'Jurisdiction',
        'location_code': 'LocationCode',
        'name': 'Name',
        'tax_amount': 'TaxAmount',
        'tax_code': 'TaxCode',
        'tax_code_description': 'TaxCodeDescription',
        'tax_date': 'TaxDate',
        'tax_rate': 'TaxRate',
        'tax_rate_description': 'TaxRateDescription',
        'tax_rate_type': 'TaxRateType'
    }

    def __init__(self, accounting_code=None, exempt_amount=None, invoice_item_id=None, jurisdiction=None, location_code=None, name=None, tax_amount=None, tax_code=None, tax_code_description=None, tax_date=None, tax_rate=None, tax_rate_description=None, tax_rate_type=None):  # noqa: E501
        """ProxyCreateTaxationItemRequest - a model defined in Swagger"""  # noqa: E501
        self._accounting_code = None
        self._exempt_amount = None
        self._invoice_item_id = None
        self._jurisdiction = None
        self._location_code = None
        self._name = None
        self._tax_amount = None
        self._tax_code = None
        self._tax_code_description = None
        self._tax_date = None
        self._tax_rate = None
        self._tax_rate_description = None
        self._tax_rate_type = None
        self.discriminator = None
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if exempt_amount is not None:
            self.exempt_amount = exempt_amount
        self.invoice_item_id = invoice_item_id
        self.jurisdiction = jurisdiction
        if location_code is not None:
            self.location_code = location_code
        self.name = name
        self.tax_amount = tax_amount
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_code_description is not None:
            self.tax_code_description = tax_code_description
        self.tax_date = tax_date
        self.tax_rate = tax_rate
        if tax_rate_description is not None:
            self.tax_rate_description = tax_rate_description
        self.tax_rate_type = tax_rate_type

    @property
    def accounting_code(self):
        """Gets the accounting_code of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The Chart of Accounts   # noqa: E501

        :return: The accounting_code of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this ProxyCreateTaxationItemRequest.

         The Chart of Accounts   # noqa: E501

        :param accounting_code: The accounting_code of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def exempt_amount(self):
        """Gets the exempt_amount of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The calculated tax amount excluded due to the exemption. **Character limit**: 16 **Values**: a decimal value   # noqa: E501

        :return: The exempt_amount of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: float
        """
        return self._exempt_amount

    @exempt_amount.setter
    def exempt_amount(self, exempt_amount):
        """Sets the exempt_amount of this ProxyCreateTaxationItemRequest.

         The calculated tax amount excluded due to the exemption. **Character limit**: 16 **Values**: a decimal value   # noqa: E501

        :param exempt_amount: The exempt_amount of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: float
        """

        self._exempt_amount = exempt_amount

    @property
    def invoice_item_id(self):
        """Gets the invoice_item_id of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The ID of the specific invoice item that the taxation information applies to. **Character limit**: 32 **Values**: a valid invoice item ID   # noqa: E501

        :return: The invoice_item_id of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_item_id

    @invoice_item_id.setter
    def invoice_item_id(self, invoice_item_id):
        """Sets the invoice_item_id of this ProxyCreateTaxationItemRequest.

         The ID of the specific invoice item that the taxation information applies to. **Character limit**: 32 **Values**: a valid invoice item ID   # noqa: E501

        :param invoice_item_id: The invoice_item_id of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: str
        """
        if invoice_item_id is None:
            raise ValueError("Invalid value for `invoice_item_id`, must not be `None`")  # noqa: E501

        self._invoice_item_id = invoice_item_id

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city. **Character limit**: 32 **Values**: a string of 32 characterrs or fewer   # noqa: E501

        :return: The jurisdiction of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this ProxyCreateTaxationItemRequest.

         The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city. **Character limit**: 32 **Values**: a string of 32 characterrs or fewer   # noqa: E501

        :param jurisdiction: The jurisdiction of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: str
        """
        if jurisdiction is None:
            raise ValueError("Invalid value for `jurisdiction`, must not be `None`")  # noqa: E501

        self._jurisdiction = jurisdiction

    @property
    def location_code(self):
        """Gets the location_code of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The identifier for the location based on the value of the `TaxCode` field. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :return: The location_code of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this ProxyCreateTaxationItemRequest.

         The identifier for the location based on the value of the `TaxCode` field. **Character limit**: 32 **Values**: automatically generated   # noqa: E501

        :param location_code: The location_code of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: str
        """

        self._location_code = location_code

    @property
    def name(self):
        """Gets the name of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The name of the tax rate, such as sales tax or GST. This name is displayed on invoices. **Character limit**: 128 **Values**: a string of 128 characters or fewer   # noqa: E501

        :return: The name of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProxyCreateTaxationItemRequest.

         The name of the tax rate, such as sales tax or GST. This name is displayed on invoices. **Character limit**: 128 **Values**: a string of 128 characters or fewer   # noqa: E501

        :param name: The name of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tax_amount(self):
        """Gets the tax_amount of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The amount of the tax applied to the charge. **Character limit**: 16 **Values**: a decimal value   # noqa: E501

        :return: The tax_amount of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this ProxyCreateTaxationItemRequest.

         The amount of the tax applied to the charge. **Character limit**: 16 **Values**: a decimal value   # noqa: E501

        :param tax_amount: The tax_amount of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: float
        """
        if tax_amount is None:
            raise ValueError("Invalid value for `tax_amount`, must not be `None`")  # noqa: E501

        self._tax_amount = tax_amount

    @property
    def tax_code(self):
        """Gets the tax_code of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The tax code identifies which tax rules and tax rates to apply to a specific charge. **Character limit**: 32 **Values**: a string of 32 characters or fewer   # noqa: E501

        :return: The tax_code of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this ProxyCreateTaxationItemRequest.

         The tax code identifies which tax rules and tax rates to apply to a specific charge. **Character limit**: 32 **Values**: a string of 32 characters or fewer   # noqa: E501

        :param tax_code: The tax_code of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_code_description(self):
        """Gets the tax_code_description of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The description for the tax code. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The tax_code_description of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._tax_code_description

    @tax_code_description.setter
    def tax_code_description(self, tax_code_description):
        """Sets the tax_code_description of this ProxyCreateTaxationItemRequest.

         The description for the tax code. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param tax_code_description: The tax_code_description of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: str
        """

        self._tax_code_description = tax_code_description

    @property
    def tax_date(self):
        """Gets the tax_date of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The date that the tax is applied to the charge, in `yyyy-mm-dd` format. **Character limit**: 29   # noqa: E501

        :return: The tax_date of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: date
        """
        return self._tax_date

    @tax_date.setter
    def tax_date(self, tax_date):
        """Sets the tax_date of this ProxyCreateTaxationItemRequest.

         The date that the tax is applied to the charge, in `yyyy-mm-dd` format. **Character limit**: 29   # noqa: E501

        :param tax_date: The tax_date of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: date
        """
        if tax_date is None:
            raise ValueError("Invalid value for `tax_date`, must not be `None`")  # noqa: E501

        self._tax_date = tax_date

    @property
    def tax_rate(self):
        """Gets the tax_rate of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The tax rate applied to the charge. **Character limit**: 16 **Values**: a valid decimal value   # noqa: E501

        :return: The tax_rate of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this ProxyCreateTaxationItemRequest.

         The tax rate applied to the charge. **Character limit**: 16 **Values**: a valid decimal value   # noqa: E501

        :param tax_rate: The tax_rate of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: float
        """
        if tax_rate is None:
            raise ValueError("Invalid value for `tax_rate`, must not be `None`")  # noqa: E501

        self._tax_rate = tax_rate

    @property
    def tax_rate_description(self):
        """Gets the tax_rate_description of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The description of the tax rate. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :return: The tax_rate_description of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._tax_rate_description

    @tax_rate_description.setter
    def tax_rate_description(self, tax_rate_description):
        """Sets the tax_rate_description of this ProxyCreateTaxationItemRequest.

         The description of the tax rate. **Character limit**: 255 **Values**: a string of 255 characters or fewer   # noqa: E501

        :param tax_rate_description: The tax_rate_description of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: str
        """

        self._tax_rate_description = tax_rate_description

    @property
    def tax_rate_type(self):
        """Gets the tax_rate_type of this ProxyCreateTaxationItemRequest.  # noqa: E501

         The type of the tax rate applied to the charge. **Character limit**: 10 **Values**: `Percentage`, `FlatFee`   # noqa: E501

        :return: The tax_rate_type of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :rtype: str
        """
        return self._tax_rate_type

    @tax_rate_type.setter
    def tax_rate_type(self, tax_rate_type):
        """Sets the tax_rate_type of this ProxyCreateTaxationItemRequest.

         The type of the tax rate applied to the charge. **Character limit**: 10 **Values**: `Percentage`, `FlatFee`   # noqa: E501

        :param tax_rate_type: The tax_rate_type of this ProxyCreateTaxationItemRequest.  # noqa: E501
        :type: str
        """
        if tax_rate_type is None:
            raise ValueError("Invalid value for `tax_rate_type`, must not be `None`")  # noqa: E501

        self._tax_rate_type = tax_rate_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProxyCreateTaxationItemRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProxyCreateTaxationItemRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
