# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'balance': 'float',
        'currency': 'str',
        'contracted_mrr': 'float',
        'credit_balance': 'float',
        'reserved_payment_amount': 'float',
        'total_debit_memo_balance': 'float',
        'total_invoice_balance': 'float',
        'unapplied_credit_memo_amount': 'float',
        'unapplied_payment_amount': 'float'
    }

    attribute_map = {
        'balance': 'balance',
        'currency': 'currency',
        'contracted_mrr': 'contractedMrr',
        'credit_balance': 'creditBalance',
        'reserved_payment_amount': 'reservedPaymentAmount',
        'total_debit_memo_balance': 'totalDebitMemoBalance',
        'total_invoice_balance': 'totalInvoiceBalance',
        'unapplied_credit_memo_amount': 'unappliedCreditMemoAmount',
        'unapplied_payment_amount': 'unappliedPaymentAmount'
    }

    def __init__(self, balance=None, currency=None, contracted_mrr=None, credit_balance=None, reserved_payment_amount=None, total_debit_memo_balance=None, total_invoice_balance=None, unapplied_credit_memo_amount=None, unapplied_payment_amount=None):  # noqa: E501
        """AccountMetrics - a model defined in Swagger"""  # noqa: E501
        self._balance = None
        self._currency = None
        self._contracted_mrr = None
        self._credit_balance = None
        self._reserved_payment_amount = None
        self._total_debit_memo_balance = None
        self._total_invoice_balance = None
        self._unapplied_credit_memo_amount = None
        self._unapplied_payment_amount = None
        self.discriminator = None
        if balance is not None:
            self.balance = balance
        if currency is not None:
            self.currency = currency
        if contracted_mrr is not None:
            self.contracted_mrr = contracted_mrr
        if credit_balance is not None:
            self.credit_balance = credit_balance
        if reserved_payment_amount is not None:
            self.reserved_payment_amount = reserved_payment_amount
        if total_debit_memo_balance is not None:
            self.total_debit_memo_balance = total_debit_memo_balance
        if total_invoice_balance is not None:
            self.total_invoice_balance = total_invoice_balance
        if unapplied_credit_memo_amount is not None:
            self.unapplied_credit_memo_amount = unapplied_credit_memo_amount
        if unapplied_payment_amount is not None:
            self.unapplied_payment_amount = unapplied_payment_amount

    @property
    def balance(self):
        """Gets the balance of this AccountMetrics.  # noqa: E501

        The customer's total invoice balance minus credit balance.   # noqa: E501

        :return: The balance of this AccountMetrics.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountMetrics.

        The customer's total invoice balance minus credit balance.   # noqa: E501

        :param balance: The balance of this AccountMetrics.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def currency(self):
        """Gets the currency of this AccountMetrics.  # noqa: E501

        The currency that metrics are aggregated based on.   # noqa: E501

        :return: The currency of this AccountMetrics.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountMetrics.

        The currency that metrics are aggregated based on.   # noqa: E501

        :param currency: The currency of this AccountMetrics.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def contracted_mrr(self):
        """Gets the contracted_mrr of this AccountMetrics.  # noqa: E501

        Future expected MRR that accounts for future upgrades, downgrades, upsells and cancellations.   # noqa: E501

        :return: The contracted_mrr of this AccountMetrics.  # noqa: E501
        :rtype: float
        """
        return self._contracted_mrr

    @contracted_mrr.setter
    def contracted_mrr(self, contracted_mrr):
        """Sets the contracted_mrr of this AccountMetrics.

        Future expected MRR that accounts for future upgrades, downgrades, upsells and cancellations.   # noqa: E501

        :param contracted_mrr: The contracted_mrr of this AccountMetrics.  # noqa: E501
        :type: float
        """

        self._contracted_mrr = contracted_mrr

    @property
    def credit_balance(self):
        """Gets the credit_balance of this AccountMetrics.  # noqa: E501

        Current credit balance.  # noqa: E501

        :return: The credit_balance of this AccountMetrics.  # noqa: E501
        :rtype: float
        """
        return self._credit_balance

    @credit_balance.setter
    def credit_balance(self, credit_balance):
        """Sets the credit_balance of this AccountMetrics.

        Current credit balance.  # noqa: E501

        :param credit_balance: The credit_balance of this AccountMetrics.  # noqa: E501
        :type: float
        """

        self._credit_balance = credit_balance

    @property
    def reserved_payment_amount(self):
        """Gets the reserved_payment_amount of this AccountMetrics.  # noqa: E501

        The Reserved Payment Amount of the customer account.   # noqa: E501

        :return: The reserved_payment_amount of this AccountMetrics.  # noqa: E501
        :rtype: float
        """
        return self._reserved_payment_amount

    @reserved_payment_amount.setter
    def reserved_payment_amount(self, reserved_payment_amount):
        """Sets the reserved_payment_amount of this AccountMetrics.

        The Reserved Payment Amount of the customer account.   # noqa: E501

        :param reserved_payment_amount: The reserved_payment_amount of this AccountMetrics.  # noqa: E501
        :type: float
        """

        self._reserved_payment_amount = reserved_payment_amount

    @property
    def total_debit_memo_balance(self):
        """Gets the total_debit_memo_balance of this AccountMetrics.  # noqa: E501

        Total balance of all posted debit memos.   # noqa: E501

        :return: The total_debit_memo_balance of this AccountMetrics.  # noqa: E501
        :rtype: float
        """
        return self._total_debit_memo_balance

    @total_debit_memo_balance.setter
    def total_debit_memo_balance(self, total_debit_memo_balance):
        """Sets the total_debit_memo_balance of this AccountMetrics.

        Total balance of all posted debit memos.   # noqa: E501

        :param total_debit_memo_balance: The total_debit_memo_balance of this AccountMetrics.  # noqa: E501
        :type: float
        """

        self._total_debit_memo_balance = total_debit_memo_balance

    @property
    def total_invoice_balance(self):
        """Gets the total_invoice_balance of this AccountMetrics.  # noqa: E501

        Total balance of all posted invoices.   # noqa: E501

        :return: The total_invoice_balance of this AccountMetrics.  # noqa: E501
        :rtype: float
        """
        return self._total_invoice_balance

    @total_invoice_balance.setter
    def total_invoice_balance(self, total_invoice_balance):
        """Sets the total_invoice_balance of this AccountMetrics.

        Total balance of all posted invoices.   # noqa: E501

        :param total_invoice_balance: The total_invoice_balance of this AccountMetrics.  # noqa: E501
        :type: float
        """

        self._total_invoice_balance = total_invoice_balance

    @property
    def unapplied_credit_memo_amount(self):
        """Gets the unapplied_credit_memo_amount of this AccountMetrics.  # noqa: E501


        :return: The unapplied_credit_memo_amount of this AccountMetrics.  # noqa: E501
        :rtype: float
        """
        return self._unapplied_credit_memo_amount

    @unapplied_credit_memo_amount.setter
    def unapplied_credit_memo_amount(self, unapplied_credit_memo_amount):
        """Sets the unapplied_credit_memo_amount of this AccountMetrics.


        :param unapplied_credit_memo_amount: The unapplied_credit_memo_amount of this AccountMetrics.  # noqa: E501
        :type: float
        """

        self._unapplied_credit_memo_amount = unapplied_credit_memo_amount

    @property
    def unapplied_payment_amount(self):
        """Gets the unapplied_payment_amount of this AccountMetrics.  # noqa: E501

        Total unapplied amount of all posted payments.   # noqa: E501

        :return: The unapplied_payment_amount of this AccountMetrics.  # noqa: E501
        :rtype: float
        """
        return self._unapplied_payment_amount

    @unapplied_payment_amount.setter
    def unapplied_payment_amount(self, unapplied_payment_amount):
        """Sets the unapplied_payment_amount of this AccountMetrics.

        Total unapplied amount of all posted payments.   # noqa: E501

        :param unapplied_payment_amount: The unapplied_payment_amount of this AccountMetrics.  # noqa: E501
        :type: float
        """

        self._unapplied_payment_amount = unapplied_payment_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
