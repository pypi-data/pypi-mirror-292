# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderActionRatePlanAmendment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'contract_effective_date': 'date',
        'created_by': 'str',
        'created_date': 'str',
        'customer_acceptance_date': 'date',
        'description': 'str',
        'effective_date': 'date',
        'id': 'str',
        'name': 'str',
        'service_activation_date': 'date',
        'type': 'str',
        'updated_by': 'str',
        'updated_date': 'str'
    }

    attribute_map = {
        'code': 'code',
        'contract_effective_date': 'contractEffectiveDate',
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'customer_acceptance_date': 'customerAcceptanceDate',
        'description': 'description',
        'effective_date': 'effectiveDate',
        'id': 'id',
        'name': 'name',
        'service_activation_date': 'serviceActivationDate',
        'type': 'type',
        'updated_by': 'updatedBy',
        'updated_date': 'updatedDate'
    }

    def __init__(self, code=None, contract_effective_date=None, created_by=None, created_date=None, customer_acceptance_date=None, description=None, effective_date=None, id=None, name=None, service_activation_date=None, type=None, updated_by=None, updated_date=None):  # noqa: E501
        """OrderActionRatePlanAmendment - a model defined in Swagger"""  # noqa: E501
        self._code = None
        self._contract_effective_date = None
        self._created_by = None
        self._created_date = None
        self._customer_acceptance_date = None
        self._description = None
        self._effective_date = None
        self._id = None
        self._name = None
        self._service_activation_date = None
        self._type = None
        self._updated_by = None
        self._updated_date = None
        self.discriminator = None
        if code is not None:
            self.code = code
        if contract_effective_date is not None:
            self.contract_effective_date = contract_effective_date
        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if customer_acceptance_date is not None:
            self.customer_acceptance_date = customer_acceptance_date
        if description is not None:
            self.description = description
        if effective_date is not None:
            self.effective_date = effective_date
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if service_activation_date is not None:
            self.service_activation_date = service_activation_date
        if type is not None:
            self.type = type
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def code(self):
        """Gets the code of this OrderActionRatePlanAmendment.  # noqa: E501

        The amendment code.   # noqa: E501

        :return: The code of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this OrderActionRatePlanAmendment.

        The amendment code.   # noqa: E501

        :param code: The code of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def contract_effective_date(self):
        """Gets the contract_effective_date of this OrderActionRatePlanAmendment.  # noqa: E501

        The date when the amendment becomes effective for billing purposes, as `yyyy-mm-dd`.   # noqa: E501

        :return: The contract_effective_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: date
        """
        return self._contract_effective_date

    @contract_effective_date.setter
    def contract_effective_date(self, contract_effective_date):
        """Sets the contract_effective_date of this OrderActionRatePlanAmendment.

        The date when the amendment becomes effective for billing purposes, as `yyyy-mm-dd`.   # noqa: E501

        :param contract_effective_date: The contract_effective_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: date
        """

        self._contract_effective_date = contract_effective_date

    @property
    def created_by(self):
        """Gets the created_by of this OrderActionRatePlanAmendment.  # noqa: E501

        The ID of the user who created this amendment.   # noqa: E501

        :return: The created_by of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this OrderActionRatePlanAmendment.

        The ID of the user who created this amendment.   # noqa: E501

        :param created_by: The created_by of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this OrderActionRatePlanAmendment.  # noqa: E501

        The time that the amendment gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :return: The created_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this OrderActionRatePlanAmendment.

        The time that the amendment gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :param created_date: The created_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def customer_acceptance_date(self):
        """Gets the customer_acceptance_date of this OrderActionRatePlanAmendment.  # noqa: E501

        The date when the customer accepts the amendment changes to the subscription, as `yyyy-mm-dd`.   # noqa: E501

        :return: The customer_acceptance_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: date
        """
        return self._customer_acceptance_date

    @customer_acceptance_date.setter
    def customer_acceptance_date(self, customer_acceptance_date):
        """Sets the customer_acceptance_date of this OrderActionRatePlanAmendment.

        The date when the customer accepts the amendment changes to the subscription, as `yyyy-mm-dd`.   # noqa: E501

        :param customer_acceptance_date: The customer_acceptance_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: date
        """

        self._customer_acceptance_date = customer_acceptance_date

    @property
    def description(self):
        """Gets the description of this OrderActionRatePlanAmendment.  # noqa: E501

        Description of the amendment.   # noqa: E501

        :return: The description of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrderActionRatePlanAmendment.

        Description of the amendment.   # noqa: E501

        :param description: The description of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def effective_date(self):
        """Gets the effective_date of this OrderActionRatePlanAmendment.  # noqa: E501

        The date when the amendment changes take effective.    # noqa: E501

        :return: The effective_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: date
        """
        return self._effective_date

    @effective_date.setter
    def effective_date(self, effective_date):
        """Sets the effective_date of this OrderActionRatePlanAmendment.

        The date when the amendment changes take effective.    # noqa: E501

        :param effective_date: The effective_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: date
        """

        self._effective_date = effective_date

    @property
    def id(self):
        """Gets the id of this OrderActionRatePlanAmendment.  # noqa: E501

        The amendment ID.   # noqa: E501

        :return: The id of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderActionRatePlanAmendment.

        The amendment ID.   # noqa: E501

        :param id: The id of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OrderActionRatePlanAmendment.  # noqa: E501

        The name of the amendment.   # noqa: E501

        :return: The name of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OrderActionRatePlanAmendment.

        The name of the amendment.   # noqa: E501

        :param name: The name of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def service_activation_date(self):
        """Gets the service_activation_date of this OrderActionRatePlanAmendment.  # noqa: E501

        The date when service is activated, as `yyyy-mm-dd`.   # noqa: E501

        :return: The service_activation_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: date
        """
        return self._service_activation_date

    @service_activation_date.setter
    def service_activation_date(self, service_activation_date):
        """Sets the service_activation_date of this OrderActionRatePlanAmendment.

        The date when service is activated, as `yyyy-mm-dd`.   # noqa: E501

        :param service_activation_date: The service_activation_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: date
        """

        self._service_activation_date = service_activation_date

    @property
    def type(self):
        """Gets the type of this OrderActionRatePlanAmendment.  # noqa: E501

        Type of the amendment. Possible values are:   - NewProduct - RemoveProduct - UpdateProduct   # noqa: E501

        :return: The type of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderActionRatePlanAmendment.

        Type of the amendment. Possible values are:   - NewProduct - RemoveProduct - UpdateProduct   # noqa: E501

        :param type: The type of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_by(self):
        """Gets the updated_by of this OrderActionRatePlanAmendment.  # noqa: E501

        The ID of the user who updated this amendment.  # noqa: E501

        :return: The updated_by of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this OrderActionRatePlanAmendment.

        The ID of the user who updated this amendment.  # noqa: E501

        :param updated_by: The updated_by of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_date(self):
        """Gets the updated_date of this OrderActionRatePlanAmendment.  # noqa: E501

        The time that the amendment gets updated in the system, in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :return: The updated_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this OrderActionRatePlanAmendment.

        The time that the amendment gets updated in the system, in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :param updated_date: The updated_date of this OrderActionRatePlanAmendment.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderActionRatePlanAmendment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderActionRatePlanAmendment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
