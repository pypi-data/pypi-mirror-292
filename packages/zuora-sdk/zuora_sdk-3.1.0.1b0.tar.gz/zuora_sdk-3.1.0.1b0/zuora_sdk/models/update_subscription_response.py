# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateSubscriptionResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'amount_without_tax': 'float',
        'charge_metrics': 'ChargeMetrics',
        'credit_memo': 'SubscriptionCreditMemo',
        'credit_memo_id': 'str',
        'invoice': 'PreviewSubscriptionInvoice',
        'invoice_id': 'str',
        'invoice_items': 'list[PreviewSubscriptionInvoiceItem]',
        'invoice_target_date': 'date',
        'paid_amount': 'float',
        'payment_id': 'str',
        'subscription_id': 'str',
        'success': 'bool',
        'target_date': 'date',
        'tax_amount': 'float',
        'total_delta_mrr': 'float',
        'total_delta_tcv': 'float',
        'order_numbers': 'list[str]'
    }

    attribute_map = {
        'amount': 'amount',
        'amount_without_tax': 'amountWithoutTax',
        'charge_metrics': 'chargeMetrics',
        'credit_memo': 'creditMemo',
        'credit_memo_id': 'creditMemoId',
        'invoice': 'invoice',
        'invoice_id': 'invoiceId',
        'invoice_items': 'invoiceItems',
        'invoice_target_date': 'invoiceTargetDate',
        'paid_amount': 'paidAmount',
        'payment_id': 'paymentId',
        'subscription_id': 'subscriptionId',
        'success': 'success',
        'target_date': 'targetDate',
        'tax_amount': 'taxAmount',
        'total_delta_mrr': 'totalDeltaMrr',
        'total_delta_tcv': 'totalDeltaTcv',
        'order_numbers': 'orderNumbers'
    }

    def __init__(self, amount=None, amount_without_tax=None, charge_metrics=None, credit_memo=None, credit_memo_id=None, invoice=None, invoice_id=None, invoice_items=None, invoice_target_date=None, paid_amount=None, payment_id=None, subscription_id=None, success=None, target_date=None, tax_amount=None, total_delta_mrr=None, total_delta_tcv=None, order_numbers=None):  # noqa: E501
        """UpdateSubscriptionResponse - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._amount_without_tax = None
        self._charge_metrics = None
        self._credit_memo = None
        self._credit_memo_id = None
        self._invoice = None
        self._invoice_id = None
        self._invoice_items = None
        self._invoice_target_date = None
        self._paid_amount = None
        self._payment_id = None
        self._subscription_id = None
        self._success = None
        self._target_date = None
        self._tax_amount = None
        self._total_delta_mrr = None
        self._total_delta_tcv = None
        self._order_numbers = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if amount_without_tax is not None:
            self.amount_without_tax = amount_without_tax
        if charge_metrics is not None:
            self.charge_metrics = charge_metrics
        if credit_memo is not None:
            self.credit_memo = credit_memo
        if credit_memo_id is not None:
            self.credit_memo_id = credit_memo_id
        if invoice is not None:
            self.invoice = invoice
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_items is not None:
            self.invoice_items = invoice_items
        if invoice_target_date is not None:
            self.invoice_target_date = invoice_target_date
        if paid_amount is not None:
            self.paid_amount = paid_amount
        if payment_id is not None:
            self.payment_id = payment_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if success is not None:
            self.success = success
        if target_date is not None:
            self.target_date = target_date
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if total_delta_mrr is not None:
            self.total_delta_mrr = total_delta_mrr
        if total_delta_tcv is not None:
            self.total_delta_tcv = total_delta_tcv
        if order_numbers is not None:
            self.order_numbers = order_numbers

    @property
    def amount(self):
        """Gets the amount of this UpdateSubscriptionResponse.  # noqa: E501

        Invoice amount. Preview mode only. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0   # noqa: E501

        :return: The amount of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this UpdateSubscriptionResponse.

        Invoice amount. Preview mode only. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0   # noqa: E501

        :param amount: The amount of this UpdateSubscriptionResponse.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_without_tax(self):
        """Gets the amount_without_tax of this UpdateSubscriptionResponse.  # noqa: E501

        Invoice amount minus tax. Preview mode only. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0   # noqa: E501

        :return: The amount_without_tax of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_without_tax

    @amount_without_tax.setter
    def amount_without_tax(self, amount_without_tax):
        """Sets the amount_without_tax of this UpdateSubscriptionResponse.

        Invoice amount minus tax. Preview mode only. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0   # noqa: E501

        :param amount_without_tax: The amount_without_tax of this UpdateSubscriptionResponse.  # noqa: E501
        :type: float
        """

        self._amount_without_tax = amount_without_tax

    @property
    def charge_metrics(self):
        """Gets the charge_metrics of this UpdateSubscriptionResponse.  # noqa: E501


        :return: The charge_metrics of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: ChargeMetrics
        """
        return self._charge_metrics

    @charge_metrics.setter
    def charge_metrics(self, charge_metrics):
        """Sets the charge_metrics of this UpdateSubscriptionResponse.


        :param charge_metrics: The charge_metrics of this UpdateSubscriptionResponse.  # noqa: E501
        :type: ChargeMetrics
        """

        self._charge_metrics = charge_metrics

    @property
    def credit_memo(self):
        """Gets the credit_memo of this UpdateSubscriptionResponse.  # noqa: E501


        :return: The credit_memo of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: SubscriptionCreditMemo
        """
        return self._credit_memo

    @credit_memo.setter
    def credit_memo(self, credit_memo):
        """Sets the credit_memo of this UpdateSubscriptionResponse.


        :param credit_memo: The credit_memo of this UpdateSubscriptionResponse.  # noqa: E501
        :type: SubscriptionCreditMemo
        """

        self._credit_memo = credit_memo

    @property
    def credit_memo_id(self):
        """Gets the credit_memo_id of this UpdateSubscriptionResponse.  # noqa: E501

        The credit memo ID, if a credit memo is generated during the subscription process.  **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   # noqa: E501

        :return: The credit_memo_id of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_id

    @credit_memo_id.setter
    def credit_memo_id(self, credit_memo_id):
        """Sets the credit_memo_id of this UpdateSubscriptionResponse.

        The credit memo ID, if a credit memo is generated during the subscription process.  **Note:** This container is only available if you set the Zuora REST API minor version to 207.0 or later in the request header, and you have  [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.   # noqa: E501

        :param credit_memo_id: The credit_memo_id of this UpdateSubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._credit_memo_id = credit_memo_id

    @property
    def invoice(self):
        """Gets the invoice of this UpdateSubscriptionResponse.  # noqa: E501


        :return: The invoice of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: PreviewSubscriptionInvoice
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice):
        """Sets the invoice of this UpdateSubscriptionResponse.


        :param invoice: The invoice of this UpdateSubscriptionResponse.  # noqa: E501
        :type: PreviewSubscriptionInvoice
        """

        self._invoice = invoice

    @property
    def invoice_id(self):
        """Gets the invoice_id of this UpdateSubscriptionResponse.  # noqa: E501

        Invoice ID, if an invoice is generated during the update.   # noqa: E501

        :return: The invoice_id of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this UpdateSubscriptionResponse.

        Invoice ID, if an invoice is generated during the update.   # noqa: E501

        :param invoice_id: The invoice_id of this UpdateSubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_items(self):
        """Gets the invoice_items of this UpdateSubscriptionResponse.  # noqa: E501

        This field is only available REST API max version 206.0. Container for invoice items.   # noqa: E501

        :return: The invoice_items of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: list[PreviewSubscriptionInvoiceItem]
        """
        return self._invoice_items

    @invoice_items.setter
    def invoice_items(self, invoice_items):
        """Sets the invoice_items of this UpdateSubscriptionResponse.

        This field is only available REST API max version 206.0. Container for invoice items.   # noqa: E501

        :param invoice_items: The invoice_items of this UpdateSubscriptionResponse.  # noqa: E501
        :type: list[PreviewSubscriptionInvoiceItem]
        """

        self._invoice_items = invoice_items

    @property
    def invoice_target_date(self):
        """Gets the invoice_target_date of this UpdateSubscriptionResponse.  # noqa: E501

        Date through which charges are calculated on the invoice, as yyyy-mm-dd. Preview mode only.  **Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.   # noqa: E501

        :return: The invoice_target_date of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: date
        """
        return self._invoice_target_date

    @invoice_target_date.setter
    def invoice_target_date(self, invoice_target_date):
        """Sets the invoice_target_date of this UpdateSubscriptionResponse.

        Date through which charges are calculated on the invoice, as yyyy-mm-dd. Preview mode only.  **Note:** This field is only available if you do not specify the Zuora REST API minor version or specify the minor version to 186.0, 187.0, 188.0, 189.0, and 196.0. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.   # noqa: E501

        :param invoice_target_date: The invoice_target_date of this UpdateSubscriptionResponse.  # noqa: E501
        :type: date
        """

        self._invoice_target_date = invoice_target_date

    @property
    def paid_amount(self):
        """Gets the paid_amount of this UpdateSubscriptionResponse.  # noqa: E501

        Payment amount, if a payment is collected   # noqa: E501

        :return: The paid_amount of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: float
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this UpdateSubscriptionResponse.

        Payment amount, if a payment is collected   # noqa: E501

        :param paid_amount: The paid_amount of this UpdateSubscriptionResponse.  # noqa: E501
        :type: float
        """

        self._paid_amount = paid_amount

    @property
    def payment_id(self):
        """Gets the payment_id of this UpdateSubscriptionResponse.  # noqa: E501

        Payment ID, if a payment is collected.   # noqa: E501

        :return: The payment_id of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this UpdateSubscriptionResponse.

        Payment ID, if a payment is collected.   # noqa: E501

        :param payment_id: The payment_id of this UpdateSubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this UpdateSubscriptionResponse.  # noqa: E501

        The ID of the resulting new subscription.   # noqa: E501

        :return: The subscription_id of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this UpdateSubscriptionResponse.

        The ID of the resulting new subscription.   # noqa: E501

        :param subscription_id: The subscription_id of this UpdateSubscriptionResponse.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def success(self):
        """Gets the success of this UpdateSubscriptionResponse.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this UpdateSubscriptionResponse.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this UpdateSubscriptionResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def target_date(self):
        """Gets the target_date of this UpdateSubscriptionResponse.  # noqa: E501

        Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.  **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.   # noqa: E501

        :return: The target_date of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this UpdateSubscriptionResponse.

        Date through which to calculate charges if an invoice is generated, as yyyy-mm-dd. Default is current date.  **Note:** This field is only available if you set the Zuora REST API minor version to 207.0 or later in the request header. See [Zuora REST API Versions](https://www.zuora.com/developer/api-references/api/overview/#section/API-Versions) for more information.   # noqa: E501

        :param target_date: The target_date of this UpdateSubscriptionResponse.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def tax_amount(self):
        """Gets the tax_amount of this UpdateSubscriptionResponse.  # noqa: E501

        Tax amount on the invoice. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0   # noqa: E501

        :return: The tax_amount of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this UpdateSubscriptionResponse.

        Tax amount on the invoice. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier. It is moved to this **invoice** container after 206.0   # noqa: E501

        :param tax_amount: The tax_amount of this UpdateSubscriptionResponse.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def total_delta_mrr(self):
        """Gets the total_delta_mrr of this UpdateSubscriptionResponse.  # noqa: E501

        Change in the subscription monthly recurring revenue as a result of the update.   # noqa: E501

        :return: The total_delta_mrr of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_delta_mrr

    @total_delta_mrr.setter
    def total_delta_mrr(self, total_delta_mrr):
        """Sets the total_delta_mrr of this UpdateSubscriptionResponse.

        Change in the subscription monthly recurring revenue as a result of the update.   # noqa: E501

        :param total_delta_mrr: The total_delta_mrr of this UpdateSubscriptionResponse.  # noqa: E501
        :type: float
        """

        self._total_delta_mrr = total_delta_mrr

    @property
    def total_delta_tcv(self):
        """Gets the total_delta_tcv of this UpdateSubscriptionResponse.  # noqa: E501

        Change in the total contracted value of the subscription as a result of the update.   # noqa: E501

        :return: The total_delta_tcv of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_delta_tcv

    @total_delta_tcv.setter
    def total_delta_tcv(self, total_delta_tcv):
        """Sets the total_delta_tcv of this UpdateSubscriptionResponse.

        Change in the total contracted value of the subscription as a result of the update.   # noqa: E501

        :param total_delta_tcv: The total_delta_tcv of this UpdateSubscriptionResponse.  # noqa: E501
        :type: float
        """

        self._total_delta_tcv = total_delta_tcv

    @property
    def order_numbers(self):
        """Gets the order_numbers of this UpdateSubscriptionResponse.  # noqa: E501

        The order numbers. It is available for Orders Tenants.   # noqa: E501

        :return: The order_numbers of this UpdateSubscriptionResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._order_numbers

    @order_numbers.setter
    def order_numbers(self, order_numbers):
        """Sets the order_numbers of this UpdateSubscriptionResponse.

        The order numbers. It is available for Orders Tenants.   # noqa: E501

        :param order_numbers: The order_numbers of this UpdateSubscriptionResponse.  # noqa: E501
        :type: list[str]
        """

        self._order_numbers = order_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateSubscriptionResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateSubscriptionResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
