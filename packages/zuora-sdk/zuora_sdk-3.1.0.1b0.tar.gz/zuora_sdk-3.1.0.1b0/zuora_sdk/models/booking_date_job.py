# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BookingDateJob(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'created_on': 'int',
        'created_on_readable': 'str',
        'updated_on': 'int',
        'updated_on_readable': 'str',
        'updated_by_username': 'str',
        'status': 'str',
        'batch_sent_count': 'int',
        'batch_finished_count': 'int',
        'error_count': 'int',
        'progress': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_on': 'createdOn',
        'created_on_readable': 'createdOnReadable',
        'updated_on': 'updatedOn',
        'updated_on_readable': 'updatedOnReadable',
        'updated_by_username': 'updatedByUsername',
        'status': 'status',
        'batch_sent_count': 'batchSentCount',
        'batch_finished_count': 'batchFinishedCount',
        'error_count': 'errorCount',
        'progress': 'progress'
    }

    def __init__(self, id=None, created_on=None, created_on_readable=None, updated_on=None, updated_on_readable=None, updated_by_username=None, status=None, batch_sent_count=None, batch_finished_count=None, error_count=None, progress=None):  # noqa: E501
        """BookingDateJob - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._created_on = None
        self._created_on_readable = None
        self._updated_on = None
        self._updated_on_readable = None
        self._updated_by_username = None
        self._status = None
        self._batch_sent_count = None
        self._batch_finished_count = None
        self._error_count = None
        self._progress = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if created_on is not None:
            self.created_on = created_on
        if created_on_readable is not None:
            self.created_on_readable = created_on_readable
        if updated_on is not None:
            self.updated_on = updated_on
        if updated_on_readable is not None:
            self.updated_on_readable = updated_on_readable
        if updated_by_username is not None:
            self.updated_by_username = updated_by_username
        if status is not None:
            self.status = status
        if batch_sent_count is not None:
            self.batch_sent_count = batch_sent_count
        if batch_finished_count is not None:
            self.batch_finished_count = batch_finished_count
        if error_count is not None:
            self.error_count = error_count
        if progress is not None:
            self.progress = progress

    @property
    def id(self):
        """Gets the id of this BookingDateJob.  # noqa: E501

        Job id  # noqa: E501

        :return: The id of this BookingDateJob.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BookingDateJob.

        Job id  # noqa: E501

        :param id: The id of this BookingDateJob.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_on(self):
        """Gets the created_on of this BookingDateJob.  # noqa: E501


        :return: The created_on of this BookingDateJob.  # noqa: E501
        :rtype: int
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this BookingDateJob.


        :param created_on: The created_on of this BookingDateJob.  # noqa: E501
        :type: int
        """

        self._created_on = created_on

    @property
    def created_on_readable(self):
        """Gets the created_on_readable of this BookingDateJob.  # noqa: E501


        :return: The created_on_readable of this BookingDateJob.  # noqa: E501
        :rtype: str
        """
        return self._created_on_readable

    @created_on_readable.setter
    def created_on_readable(self, created_on_readable):
        """Sets the created_on_readable of this BookingDateJob.


        :param created_on_readable: The created_on_readable of this BookingDateJob.  # noqa: E501
        :type: str
        """

        self._created_on_readable = created_on_readable

    @property
    def updated_on(self):
        """Gets the updated_on of this BookingDateJob.  # noqa: E501


        :return: The updated_on of this BookingDateJob.  # noqa: E501
        :rtype: int
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this BookingDateJob.


        :param updated_on: The updated_on of this BookingDateJob.  # noqa: E501
        :type: int
        """

        self._updated_on = updated_on

    @property
    def updated_on_readable(self):
        """Gets the updated_on_readable of this BookingDateJob.  # noqa: E501


        :return: The updated_on_readable of this BookingDateJob.  # noqa: E501
        :rtype: str
        """
        return self._updated_on_readable

    @updated_on_readable.setter
    def updated_on_readable(self, updated_on_readable):
        """Sets the updated_on_readable of this BookingDateJob.


        :param updated_on_readable: The updated_on_readable of this BookingDateJob.  # noqa: E501
        :type: str
        """

        self._updated_on_readable = updated_on_readable

    @property
    def updated_by_username(self):
        """Gets the updated_by_username of this BookingDateJob.  # noqa: E501


        :return: The updated_by_username of this BookingDateJob.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_username

    @updated_by_username.setter
    def updated_by_username(self, updated_by_username):
        """Sets the updated_by_username of this BookingDateJob.


        :param updated_by_username: The updated_by_username of this BookingDateJob.  # noqa: E501
        :type: str
        """

        self._updated_by_username = updated_by_username

    @property
    def status(self):
        """Gets the status of this BookingDateJob.  # noqa: E501

        Data Backfill job type  # noqa: E501

        :return: The status of this BookingDateJob.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BookingDateJob.

        Data Backfill job type  # noqa: E501

        :param status: The status of this BookingDateJob.  # noqa: E501
        :type: str
        """
        allowed_values = ["ACCEPTED", "PROCESSING", "COMPLETED", "FAILED", "STOPPED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def batch_sent_count(self):
        """Gets the batch_sent_count of this BookingDateJob.  # noqa: E501


        :return: The batch_sent_count of this BookingDateJob.  # noqa: E501
        :rtype: int
        """
        return self._batch_sent_count

    @batch_sent_count.setter
    def batch_sent_count(self, batch_sent_count):
        """Sets the batch_sent_count of this BookingDateJob.


        :param batch_sent_count: The batch_sent_count of this BookingDateJob.  # noqa: E501
        :type: int
        """

        self._batch_sent_count = batch_sent_count

    @property
    def batch_finished_count(self):
        """Gets the batch_finished_count of this BookingDateJob.  # noqa: E501


        :return: The batch_finished_count of this BookingDateJob.  # noqa: E501
        :rtype: int
        """
        return self._batch_finished_count

    @batch_finished_count.setter
    def batch_finished_count(self, batch_finished_count):
        """Sets the batch_finished_count of this BookingDateJob.


        :param batch_finished_count: The batch_finished_count of this BookingDateJob.  # noqa: E501
        :type: int
        """

        self._batch_finished_count = batch_finished_count

    @property
    def error_count(self):
        """Gets the error_count of this BookingDateJob.  # noqa: E501


        :return: The error_count of this BookingDateJob.  # noqa: E501
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this BookingDateJob.


        :param error_count: The error_count of this BookingDateJob.  # noqa: E501
        :type: int
        """

        self._error_count = error_count

    @property
    def progress(self):
        """Gets the progress of this BookingDateJob.  # noqa: E501


        :return: The progress of this BookingDateJob.  # noqa: E501
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this BookingDateJob.


        :param progress: The progress of this BookingDateJob.  # noqa: E501
        :type: str
        """

        self._progress = progress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BookingDateJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BookingDateJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
