# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'create_subscription': 'OrderActionCreateSubscription',
        'add_product': 'OrderActionAddProduct',
        'update_product': 'OrderActionUpdateProduct',
        'cancel_subscription': 'OrderActionCancelSubscription',
        'change_plan': 'OrderActionChangePlan',
        'owner_transfer': 'OrderActionOwnerTransfer',
        'remove_product': 'OrderActionRemoveProduct',
        'renew_subscription': 'OrderActionRenewSubscription',
        'suspend': 'OrderActionSuspend',
        'resume': 'OrderActionResume',
        'terms_and_conditions': 'OrderActionTermsAndConditions',
        'change_reason': 'str',
        'custom_fields': 'dict(str, object)',
        'sequence': 'int',
        'order_items': 'list[OrderItem]',
        'order_metrics': 'list[OrderMetric]',
        'trigger_dates': 'list[TriggerDate]',
        'type': 'OrderActionType'
    }

    attribute_map = {
        'id': 'id',
        'create_subscription': 'createSubscription',
        'add_product': 'addProduct',
        'update_product': 'updateProduct',
        'cancel_subscription': 'cancelSubscription',
        'change_plan': 'changePlan',
        'owner_transfer': 'ownerTransfer',
        'remove_product': 'removeProduct',
        'renew_subscription': 'renewSubscription',
        'suspend': 'suspend',
        'resume': 'resume',
        'terms_and_conditions': 'termsAndConditions',
        'change_reason': 'changeReason',
        'custom_fields': 'customFields',
        'sequence': 'sequence',
        'order_items': 'orderItems',
        'order_metrics': 'orderMetrics',
        'trigger_dates': 'triggerDates',
        'type': 'type'
    }

    def __init__(self, id=None, create_subscription=None, add_product=None, update_product=None, cancel_subscription=None, change_plan=None, owner_transfer=None, remove_product=None, renew_subscription=None, suspend=None, resume=None, terms_and_conditions=None, change_reason=None, custom_fields=None, sequence=None, order_items=None, order_metrics=None, trigger_dates=None, type=None):  # noqa: E501
        """OrderAction - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._create_subscription = None
        self._add_product = None
        self._update_product = None
        self._cancel_subscription = None
        self._change_plan = None
        self._owner_transfer = None
        self._remove_product = None
        self._renew_subscription = None
        self._suspend = None
        self._resume = None
        self._terms_and_conditions = None
        self._change_reason = None
        self._custom_fields = None
        self._sequence = None
        self._order_items = None
        self._order_metrics = None
        self._trigger_dates = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if create_subscription is not None:
            self.create_subscription = create_subscription
        if add_product is not None:
            self.add_product = add_product
        if update_product is not None:
            self.update_product = update_product
        if cancel_subscription is not None:
            self.cancel_subscription = cancel_subscription
        if change_plan is not None:
            self.change_plan = change_plan
        if owner_transfer is not None:
            self.owner_transfer = owner_transfer
        if remove_product is not None:
            self.remove_product = remove_product
        if renew_subscription is not None:
            self.renew_subscription = renew_subscription
        if suspend is not None:
            self.suspend = suspend
        if resume is not None:
            self.resume = resume
        if terms_and_conditions is not None:
            self.terms_and_conditions = terms_and_conditions
        if change_reason is not None:
            self.change_reason = change_reason
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if sequence is not None:
            self.sequence = sequence
        if order_items is not None:
            self.order_items = order_items
        if order_metrics is not None:
            self.order_metrics = order_metrics
        if trigger_dates is not None:
            self.trigger_dates = trigger_dates
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this OrderAction.  # noqa: E501

        The Id of the order action processed in the order.  # noqa: E501

        :return: The id of this OrderAction.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderAction.

        The Id of the order action processed in the order.  # noqa: E501

        :param id: The id of this OrderAction.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def create_subscription(self):
        """Gets the create_subscription of this OrderAction.  # noqa: E501


        :return: The create_subscription of this OrderAction.  # noqa: E501
        :rtype: OrderActionCreateSubscription
        """
        return self._create_subscription

    @create_subscription.setter
    def create_subscription(self, create_subscription):
        """Sets the create_subscription of this OrderAction.


        :param create_subscription: The create_subscription of this OrderAction.  # noqa: E501
        :type: OrderActionCreateSubscription
        """

        self._create_subscription = create_subscription

    @property
    def add_product(self):
        """Gets the add_product of this OrderAction.  # noqa: E501


        :return: The add_product of this OrderAction.  # noqa: E501
        :rtype: OrderActionAddProduct
        """
        return self._add_product

    @add_product.setter
    def add_product(self, add_product):
        """Sets the add_product of this OrderAction.


        :param add_product: The add_product of this OrderAction.  # noqa: E501
        :type: OrderActionAddProduct
        """

        self._add_product = add_product

    @property
    def update_product(self):
        """Gets the update_product of this OrderAction.  # noqa: E501


        :return: The update_product of this OrderAction.  # noqa: E501
        :rtype: OrderActionUpdateProduct
        """
        return self._update_product

    @update_product.setter
    def update_product(self, update_product):
        """Sets the update_product of this OrderAction.


        :param update_product: The update_product of this OrderAction.  # noqa: E501
        :type: OrderActionUpdateProduct
        """

        self._update_product = update_product

    @property
    def cancel_subscription(self):
        """Gets the cancel_subscription of this OrderAction.  # noqa: E501


        :return: The cancel_subscription of this OrderAction.  # noqa: E501
        :rtype: OrderActionCancelSubscription
        """
        return self._cancel_subscription

    @cancel_subscription.setter
    def cancel_subscription(self, cancel_subscription):
        """Sets the cancel_subscription of this OrderAction.


        :param cancel_subscription: The cancel_subscription of this OrderAction.  # noqa: E501
        :type: OrderActionCancelSubscription
        """

        self._cancel_subscription = cancel_subscription

    @property
    def change_plan(self):
        """Gets the change_plan of this OrderAction.  # noqa: E501


        :return: The change_plan of this OrderAction.  # noqa: E501
        :rtype: OrderActionChangePlan
        """
        return self._change_plan

    @change_plan.setter
    def change_plan(self, change_plan):
        """Sets the change_plan of this OrderAction.


        :param change_plan: The change_plan of this OrderAction.  # noqa: E501
        :type: OrderActionChangePlan
        """

        self._change_plan = change_plan

    @property
    def owner_transfer(self):
        """Gets the owner_transfer of this OrderAction.  # noqa: E501


        :return: The owner_transfer of this OrderAction.  # noqa: E501
        :rtype: OrderActionOwnerTransfer
        """
        return self._owner_transfer

    @owner_transfer.setter
    def owner_transfer(self, owner_transfer):
        """Sets the owner_transfer of this OrderAction.


        :param owner_transfer: The owner_transfer of this OrderAction.  # noqa: E501
        :type: OrderActionOwnerTransfer
        """

        self._owner_transfer = owner_transfer

    @property
    def remove_product(self):
        """Gets the remove_product of this OrderAction.  # noqa: E501


        :return: The remove_product of this OrderAction.  # noqa: E501
        :rtype: OrderActionRemoveProduct
        """
        return self._remove_product

    @remove_product.setter
    def remove_product(self, remove_product):
        """Sets the remove_product of this OrderAction.


        :param remove_product: The remove_product of this OrderAction.  # noqa: E501
        :type: OrderActionRemoveProduct
        """

        self._remove_product = remove_product

    @property
    def renew_subscription(self):
        """Gets the renew_subscription of this OrderAction.  # noqa: E501


        :return: The renew_subscription of this OrderAction.  # noqa: E501
        :rtype: OrderActionRenewSubscription
        """
        return self._renew_subscription

    @renew_subscription.setter
    def renew_subscription(self, renew_subscription):
        """Sets the renew_subscription of this OrderAction.


        :param renew_subscription: The renew_subscription of this OrderAction.  # noqa: E501
        :type: OrderActionRenewSubscription
        """

        self._renew_subscription = renew_subscription

    @property
    def suspend(self):
        """Gets the suspend of this OrderAction.  # noqa: E501


        :return: The suspend of this OrderAction.  # noqa: E501
        :rtype: OrderActionSuspend
        """
        return self._suspend

    @suspend.setter
    def suspend(self, suspend):
        """Sets the suspend of this OrderAction.


        :param suspend: The suspend of this OrderAction.  # noqa: E501
        :type: OrderActionSuspend
        """

        self._suspend = suspend

    @property
    def resume(self):
        """Gets the resume of this OrderAction.  # noqa: E501


        :return: The resume of this OrderAction.  # noqa: E501
        :rtype: OrderActionResume
        """
        return self._resume

    @resume.setter
    def resume(self, resume):
        """Sets the resume of this OrderAction.


        :param resume: The resume of this OrderAction.  # noqa: E501
        :type: OrderActionResume
        """

        self._resume = resume

    @property
    def terms_and_conditions(self):
        """Gets the terms_and_conditions of this OrderAction.  # noqa: E501


        :return: The terms_and_conditions of this OrderAction.  # noqa: E501
        :rtype: OrderActionTermsAndConditions
        """
        return self._terms_and_conditions

    @terms_and_conditions.setter
    def terms_and_conditions(self, terms_and_conditions):
        """Sets the terms_and_conditions of this OrderAction.


        :param terms_and_conditions: The terms_and_conditions of this OrderAction.  # noqa: E501
        :type: OrderActionTermsAndConditions
        """

        self._terms_and_conditions = terms_and_conditions

    @property
    def change_reason(self):
        """Gets the change_reason of this OrderAction.  # noqa: E501

        The change reason set for an order action when an order is created.   # noqa: E501

        :return: The change_reason of this OrderAction.  # noqa: E501
        :rtype: str
        """
        return self._change_reason

    @change_reason.setter
    def change_reason(self, change_reason):
        """Sets the change_reason of this OrderAction.

        The change reason set for an order action when an order is created.   # noqa: E501

        :param change_reason: The change_reason of this OrderAction.  # noqa: E501
        :type: str
        """

        self._change_reason = change_reason

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderAction.  # noqa: E501

        Container for custom fields of an Order Action object.   # noqa: E501

        :return: The custom_fields of this OrderAction.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderAction.

        Container for custom fields of an Order Action object.   # noqa: E501

        :param custom_fields: The custom_fields of this OrderAction.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def sequence(self):
        """Gets the sequence of this OrderAction.  # noqa: E501

        The sequence of the order actions processed in the order.  # noqa: E501

        :return: The sequence of this OrderAction.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this OrderAction.

        The sequence of the order actions processed in the order.  # noqa: E501

        :param sequence: The sequence of this OrderAction.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def order_items(self):
        """Gets the order_items of this OrderAction.  # noqa: E501

        The `orderItems` nested field is only available to existing Orders customers who already have access to the field.  **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics. * The Order ELP and Order Item objects  * The \"Generated Reason\" and \"Order Item ID\" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects  Existing Orders customers who have these metrics will continue to be supported.   # noqa: E501

        :return: The order_items of this OrderAction.  # noqa: E501
        :rtype: list[OrderItem]
        """
        return self._order_items

    @order_items.setter
    def order_items(self, order_items):
        """Sets the order_items of this OrderAction.

        The `orderItems` nested field is only available to existing Orders customers who already have access to the field.  **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics. * The Order ELP and Order Item objects  * The \"Generated Reason\" and \"Order Item ID\" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects  Existing Orders customers who have these metrics will continue to be supported.   # noqa: E501

        :param order_items: The order_items of this OrderAction.  # noqa: E501
        :type: list[OrderItem]
        """

        self._order_items = order_items

    @property
    def order_metrics(self):
        """Gets the order_metrics of this OrderAction.  # noqa: E501

        The container for order metrics.  **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics. * The Order ELP and Order Item objects  * The \"Generated Reason\" and \"Order Item ID\" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects  Existing Orders customers who have these metrics will continue to be supported.  **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects.  * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr) * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv) * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb)  It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/).  Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported.   # noqa: E501

        :return: The order_metrics of this OrderAction.  # noqa: E501
        :rtype: list[OrderMetric]
        """
        return self._order_metrics

    @order_metrics.setter
    def order_metrics(self, order_metrics):
        """Sets the order_metrics of this OrderAction.

        The container for order metrics.  **Note:** The following Order Metrics have been deprecated. Any new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) or [Orders Harmonization](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Orders_Harmonization/Orders_Harmonization) will not get these metrics. * The Order ELP and Order Item objects  * The \"Generated Reason\" and \"Order Item ID\" fields in the Order MRR, Order TCB, Order TCV, and Order Quantity objects  Existing Orders customers who have these metrics will continue to be supported.  **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the following Order Delta Metrics objects.  * [Order Delta Mrr](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Mrr) * [Order Delta Tcv](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcv) * [Order Delta Tcb](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/Order_Delta_Tcb)  It is recommended that all customers use the new [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/).  Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported.   # noqa: E501

        :param order_metrics: The order_metrics of this OrderAction.  # noqa: E501
        :type: list[OrderMetric]
        """

        self._order_metrics = order_metrics

    @property
    def trigger_dates(self):
        """Gets the trigger_dates of this OrderAction.  # noqa: E501

        Container for the contract effective, service activation, and customer acceptance dates of the order action.   If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.  If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.  If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions  If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions   # noqa: E501

        :return: The trigger_dates of this OrderAction.  # noqa: E501
        :rtype: list[TriggerDate]
        """
        return self._trigger_dates

    @trigger_dates.setter
    def trigger_dates(self, trigger_dates):
        """Sets the trigger_dates of this OrderAction.

        Container for the contract effective, service activation, and customer acceptance dates of the order action.   If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Activation` subscription are created.  If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for a `CreateSubscription` order action, a `Pending` order and a `Pending Acceptance` subscription are created. At the same time, if the service activation date field is also required and not set, a `Pending` order and a `Pending Activation` subscription are created instead.  If [Zuora is configured to require service activation](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Service_Activation_of_Orders.3F) and the `ServiceActivation` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions  If [Zuora is configured to require customer acceptance](https://knowledgecenter.zuora.com/CB_Billing/Billing_Settings/Define_Default_Subscription_Settings#Require_Customer_Acceptance_of_Orders.3F) and the `CustomerAcceptance` field is not set for either of the following order actions, a `Pending` order is created. The subscription status is not impacted. **Note:** This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions   # noqa: E501

        :param trigger_dates: The trigger_dates of this OrderAction.  # noqa: E501
        :type: list[TriggerDate]
        """

        self._trigger_dates = trigger_dates

    @property
    def type(self):
        """Gets the type of this OrderAction.  # noqa: E501


        :return: The type of this OrderAction.  # noqa: E501
        :rtype: OrderActionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrderAction.


        :param type: The type of this OrderAction.  # noqa: E501
        :type: OrderActionType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
