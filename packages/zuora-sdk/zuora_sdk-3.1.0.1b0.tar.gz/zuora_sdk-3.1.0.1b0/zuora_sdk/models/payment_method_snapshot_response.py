# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentMethodSnapshotResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'ach_aba_code': 'str',
        'ach_account_name': 'str',
        'ach_account_number_mask': 'str',
        'ach_account_type': 'GetPaymentMethodSnapshotResponseAchAccountType',
        'ach_bank_name': 'str',
        'bank_branch_code': 'str',
        'bank_check_digit': 'str',
        'bank_city': 'str',
        'bank_code': 'str',
        'bank_identification_number': 'str',
        'bank_name': 'str',
        'bank_postal_code': 'str',
        'bank_street_name': 'str',
        'bank_street_number': 'str',
        'bank_transfer_account_name': 'str',
        'bank_transfer_account_number_mask': 'str',
        'bank_transfer_account_type': 'str',
        'bank_transfer_type': 'GetPaymentMethodSnapshotResponseBankTransferType',
        'business_identification_code': 'str',
        'city': 'str',
        'company_name': 'str',
        'country': 'str',
        'credit_card_address1': 'str',
        'credit_card_address2': 'str',
        'credit_card_city': 'str',
        'credit_card_country': 'str',
        'credit_card_expiration_month': 'int',
        'credit_card_expiration_year': 'int',
        'credit_card_holder_name': 'str',
        'credit_card_mask_number': 'str',
        'credit_card_postal_code': 'str',
        'credit_card_state': 'str',
        'credit_card_type': 'ProxyGetPaymentMethodSnapshotCreditCardType',
        'device_session_id': 'str',
        'email': 'str',
        'existing_mandate': 'PaymentMethodMandateInfoMandateStatus',
        'first_name': 'str',
        'iban': 'str',
        'ip_address': 'str',
        'id': 'str',
        'identity_number': 'str',
        'is_company': 'bool',
        'last_failed_sale_transaction_date': 'datetime',
        'last_name': 'str',
        'last_transaction_date_time': 'datetime',
        'last_transaction_status': 'str',
        'mandate_creation_date': 'date',
        'mandate_id': 'str',
        'mandate_received': 'str',
        'mandate_update_date': 'date',
        'max_consecutive_payment_failures': 'int',
        'name': 'str',
        'num_consecutive_failures': 'int',
        'payment_method_id': 'str',
        'payment_method_status': 'GetPaymentMethodSnapshotResponsePaymentMethodStatus',
        'payment_retry_window': 'int',
        'paypal_baid': 'str',
        'paypal_email': 'str',
        'paypal_preapproval_key': 'str',
        'paypal_type': 'GetPaymentMethodSnapshotResponsePaypalType',
        'phone': 'str',
        'postal_code': 'str',
        'second_token_id': 'str',
        'state': 'str',
        'street_name': 'str',
        'street_number': 'str',
        'token_id': 'str',
        'total_number_of_error_payments': 'int',
        'total_number_of_processed_payments': 'int',
        'type': 'PaymentMethodType',
        'use_default_retry_rule': 'bool'
    }

    attribute_map = {
        'account_id': 'AccountId',
        'ach_aba_code': 'AchAbaCode',
        'ach_account_name': 'AchAccountName',
        'ach_account_number_mask': 'AchAccountNumberMask',
        'ach_account_type': 'AchAccountType',
        'ach_bank_name': 'AchBankName',
        'bank_branch_code': 'BankBranchCode',
        'bank_check_digit': 'BankCheckDigit',
        'bank_city': 'BankCity',
        'bank_code': 'BankCode',
        'bank_identification_number': 'BankIdentificationNumber',
        'bank_name': 'BankName',
        'bank_postal_code': 'BankPostalCode',
        'bank_street_name': 'BankStreetName',
        'bank_street_number': 'BankStreetNumber',
        'bank_transfer_account_name': 'BankTransferAccountName',
        'bank_transfer_account_number_mask': 'BankTransferAccountNumberMask',
        'bank_transfer_account_type': 'BankTransferAccountType',
        'bank_transfer_type': 'BankTransferType',
        'business_identification_code': 'BusinessIdentificationCode',
        'city': 'City',
        'company_name': 'CompanyName',
        'country': 'Country',
        'credit_card_address1': 'CreditCardAddress1',
        'credit_card_address2': 'CreditCardAddress2',
        'credit_card_city': 'CreditCardCity',
        'credit_card_country': 'CreditCardCountry',
        'credit_card_expiration_month': 'CreditCardExpirationMonth',
        'credit_card_expiration_year': 'CreditCardExpirationYear',
        'credit_card_holder_name': 'CreditCardHolderName',
        'credit_card_mask_number': 'CreditCardMaskNumber',
        'credit_card_postal_code': 'CreditCardPostalCode',
        'credit_card_state': 'CreditCardState',
        'credit_card_type': 'CreditCardType',
        'device_session_id': 'DeviceSessionId',
        'email': 'Email',
        'existing_mandate': 'ExistingMandate',
        'first_name': 'FirstName',
        'iban': 'IBAN',
        'ip_address': 'IPAddress',
        'id': 'Id',
        'identity_number': 'IdentityNumber',
        'is_company': 'IsCompany',
        'last_failed_sale_transaction_date': 'LastFailedSaleTransactionDate',
        'last_name': 'LastName',
        'last_transaction_date_time': 'LastTransactionDateTime',
        'last_transaction_status': 'LastTransactionStatus',
        'mandate_creation_date': 'MandateCreationDate',
        'mandate_id': 'MandateID',
        'mandate_received': 'MandateReceived',
        'mandate_update_date': 'MandateUpdateDate',
        'max_consecutive_payment_failures': 'MaxConsecutivePaymentFailures',
        'name': 'Name',
        'num_consecutive_failures': 'NumConsecutiveFailures',
        'payment_method_id': 'PaymentMethodId',
        'payment_method_status': 'PaymentMethodStatus',
        'payment_retry_window': 'PaymentRetryWindow',
        'paypal_baid': 'PaypalBaid',
        'paypal_email': 'PaypalEmail',
        'paypal_preapproval_key': 'PaypalPreapprovalKey',
        'paypal_type': 'PaypalType',
        'phone': 'Phone',
        'postal_code': 'PostalCode',
        'second_token_id': 'SecondTokenId',
        'state': 'State',
        'street_name': 'StreetName',
        'street_number': 'StreetNumber',
        'token_id': 'TokenId',
        'total_number_of_error_payments': 'TotalNumberOfErrorPayments',
        'total_number_of_processed_payments': 'TotalNumberOfProcessedPayments',
        'type': 'Type',
        'use_default_retry_rule': 'UseDefaultRetryRule'
    }

    def __init__(self, account_id=None, ach_aba_code=None, ach_account_name=None, ach_account_number_mask=None, ach_account_type=None, ach_bank_name=None, bank_branch_code=None, bank_check_digit=None, bank_city=None, bank_code=None, bank_identification_number=None, bank_name=None, bank_postal_code=None, bank_street_name=None, bank_street_number=None, bank_transfer_account_name=None, bank_transfer_account_number_mask=None, bank_transfer_account_type=None, bank_transfer_type=None, business_identification_code=None, city=None, company_name=None, country=None, credit_card_address1=None, credit_card_address2=None, credit_card_city=None, credit_card_country=None, credit_card_expiration_month=None, credit_card_expiration_year=None, credit_card_holder_name=None, credit_card_mask_number=None, credit_card_postal_code=None, credit_card_state=None, credit_card_type=None, device_session_id=None, email=None, existing_mandate=None, first_name=None, iban=None, ip_address=None, id=None, identity_number=None, is_company=None, last_failed_sale_transaction_date=None, last_name=None, last_transaction_date_time=None, last_transaction_status=None, mandate_creation_date=None, mandate_id=None, mandate_received=None, mandate_update_date=None, max_consecutive_payment_failures=None, name=None, num_consecutive_failures=None, payment_method_id=None, payment_method_status=None, payment_retry_window=None, paypal_baid=None, paypal_email=None, paypal_preapproval_key=None, paypal_type=None, phone=None, postal_code=None, second_token_id=None, state=None, street_name=None, street_number=None, token_id=None, total_number_of_error_payments=None, total_number_of_processed_payments=None, type=None, use_default_retry_rule=None):  # noqa: E501
        """PaymentMethodSnapshotResponse - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._ach_aba_code = None
        self._ach_account_name = None
        self._ach_account_number_mask = None
        self._ach_account_type = None
        self._ach_bank_name = None
        self._bank_branch_code = None
        self._bank_check_digit = None
        self._bank_city = None
        self._bank_code = None
        self._bank_identification_number = None
        self._bank_name = None
        self._bank_postal_code = None
        self._bank_street_name = None
        self._bank_street_number = None
        self._bank_transfer_account_name = None
        self._bank_transfer_account_number_mask = None
        self._bank_transfer_account_type = None
        self._bank_transfer_type = None
        self._business_identification_code = None
        self._city = None
        self._company_name = None
        self._country = None
        self._credit_card_address1 = None
        self._credit_card_address2 = None
        self._credit_card_city = None
        self._credit_card_country = None
        self._credit_card_expiration_month = None
        self._credit_card_expiration_year = None
        self._credit_card_holder_name = None
        self._credit_card_mask_number = None
        self._credit_card_postal_code = None
        self._credit_card_state = None
        self._credit_card_type = None
        self._device_session_id = None
        self._email = None
        self._existing_mandate = None
        self._first_name = None
        self._iban = None
        self._ip_address = None
        self._id = None
        self._identity_number = None
        self._is_company = None
        self._last_failed_sale_transaction_date = None
        self._last_name = None
        self._last_transaction_date_time = None
        self._last_transaction_status = None
        self._mandate_creation_date = None
        self._mandate_id = None
        self._mandate_received = None
        self._mandate_update_date = None
        self._max_consecutive_payment_failures = None
        self._name = None
        self._num_consecutive_failures = None
        self._payment_method_id = None
        self._payment_method_status = None
        self._payment_retry_window = None
        self._paypal_baid = None
        self._paypal_email = None
        self._paypal_preapproval_key = None
        self._paypal_type = None
        self._phone = None
        self._postal_code = None
        self._second_token_id = None
        self._state = None
        self._street_name = None
        self._street_number = None
        self._token_id = None
        self._total_number_of_error_payments = None
        self._total_number_of_processed_payments = None
        self._type = None
        self._use_default_retry_rule = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if ach_aba_code is not None:
            self.ach_aba_code = ach_aba_code
        if ach_account_name is not None:
            self.ach_account_name = ach_account_name
        if ach_account_number_mask is not None:
            self.ach_account_number_mask = ach_account_number_mask
        if ach_account_type is not None:
            self.ach_account_type = ach_account_type
        if ach_bank_name is not None:
            self.ach_bank_name = ach_bank_name
        if bank_branch_code is not None:
            self.bank_branch_code = bank_branch_code
        if bank_check_digit is not None:
            self.bank_check_digit = bank_check_digit
        if bank_city is not None:
            self.bank_city = bank_city
        if bank_code is not None:
            self.bank_code = bank_code
        if bank_identification_number is not None:
            self.bank_identification_number = bank_identification_number
        if bank_name is not None:
            self.bank_name = bank_name
        if bank_postal_code is not None:
            self.bank_postal_code = bank_postal_code
        if bank_street_name is not None:
            self.bank_street_name = bank_street_name
        if bank_street_number is not None:
            self.bank_street_number = bank_street_number
        if bank_transfer_account_name is not None:
            self.bank_transfer_account_name = bank_transfer_account_name
        if bank_transfer_account_number_mask is not None:
            self.bank_transfer_account_number_mask = bank_transfer_account_number_mask
        if bank_transfer_account_type is not None:
            self.bank_transfer_account_type = bank_transfer_account_type
        if bank_transfer_type is not None:
            self.bank_transfer_type = bank_transfer_type
        if business_identification_code is not None:
            self.business_identification_code = business_identification_code
        if city is not None:
            self.city = city
        if company_name is not None:
            self.company_name = company_name
        if country is not None:
            self.country = country
        if credit_card_address1 is not None:
            self.credit_card_address1 = credit_card_address1
        if credit_card_address2 is not None:
            self.credit_card_address2 = credit_card_address2
        if credit_card_city is not None:
            self.credit_card_city = credit_card_city
        if credit_card_country is not None:
            self.credit_card_country = credit_card_country
        if credit_card_expiration_month is not None:
            self.credit_card_expiration_month = credit_card_expiration_month
        if credit_card_expiration_year is not None:
            self.credit_card_expiration_year = credit_card_expiration_year
        if credit_card_holder_name is not None:
            self.credit_card_holder_name = credit_card_holder_name
        if credit_card_mask_number is not None:
            self.credit_card_mask_number = credit_card_mask_number
        if credit_card_postal_code is not None:
            self.credit_card_postal_code = credit_card_postal_code
        if credit_card_state is not None:
            self.credit_card_state = credit_card_state
        if credit_card_type is not None:
            self.credit_card_type = credit_card_type
        if device_session_id is not None:
            self.device_session_id = device_session_id
        if email is not None:
            self.email = email
        if existing_mandate is not None:
            self.existing_mandate = existing_mandate
        if first_name is not None:
            self.first_name = first_name
        if iban is not None:
            self.iban = iban
        if ip_address is not None:
            self.ip_address = ip_address
        if id is not None:
            self.id = id
        if identity_number is not None:
            self.identity_number = identity_number
        if is_company is not None:
            self.is_company = is_company
        if last_failed_sale_transaction_date is not None:
            self.last_failed_sale_transaction_date = last_failed_sale_transaction_date
        if last_name is not None:
            self.last_name = last_name
        if last_transaction_date_time is not None:
            self.last_transaction_date_time = last_transaction_date_time
        if last_transaction_status is not None:
            self.last_transaction_status = last_transaction_status
        if mandate_creation_date is not None:
            self.mandate_creation_date = mandate_creation_date
        if mandate_id is not None:
            self.mandate_id = mandate_id
        if mandate_received is not None:
            self.mandate_received = mandate_received
        if mandate_update_date is not None:
            self.mandate_update_date = mandate_update_date
        if max_consecutive_payment_failures is not None:
            self.max_consecutive_payment_failures = max_consecutive_payment_failures
        if name is not None:
            self.name = name
        if num_consecutive_failures is not None:
            self.num_consecutive_failures = num_consecutive_failures
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if payment_method_status is not None:
            self.payment_method_status = payment_method_status
        if payment_retry_window is not None:
            self.payment_retry_window = payment_retry_window
        if paypal_baid is not None:
            self.paypal_baid = paypal_baid
        if paypal_email is not None:
            self.paypal_email = paypal_email
        if paypal_preapproval_key is not None:
            self.paypal_preapproval_key = paypal_preapproval_key
        if paypal_type is not None:
            self.paypal_type = paypal_type
        if phone is not None:
            self.phone = phone
        if postal_code is not None:
            self.postal_code = postal_code
        if second_token_id is not None:
            self.second_token_id = second_token_id
        if state is not None:
            self.state = state
        if street_name is not None:
            self.street_name = street_name
        if street_number is not None:
            self.street_number = street_number
        if token_id is not None:
            self.token_id = token_id
        if total_number_of_error_payments is not None:
            self.total_number_of_error_payments = total_number_of_error_payments
        if total_number_of_processed_payments is not None:
            self.total_number_of_processed_payments = total_number_of_processed_payments
        if type is not None:
            self.type = type
        if use_default_retry_rule is not None:
            self.use_default_retry_rule = use_default_retry_rule

    @property
    def account_id(self):
        """Gets the account_id of this PaymentMethodSnapshotResponse.  # noqa: E501

        The ID of the customer account associated with this payment method.  # noqa: E501

        :return: The account_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this PaymentMethodSnapshotResponse.

        The ID of the customer account associated with this payment method.  # noqa: E501

        :param account_id: The account_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def ach_aba_code(self):
        """Gets the ach_aba_code of this PaymentMethodSnapshotResponse.  # noqa: E501

        The nine-digit routing number or ABA number used by banks. Applicable to ACH payment methods.  # noqa: E501

        :return: The ach_aba_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._ach_aba_code

    @ach_aba_code.setter
    def ach_aba_code(self, ach_aba_code):
        """Sets the ach_aba_code of this PaymentMethodSnapshotResponse.

        The nine-digit routing number or ABA number used by banks. Applicable to ACH payment methods.  # noqa: E501

        :param ach_aba_code: The ach_aba_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._ach_aba_code = ach_aba_code

    @property
    def ach_account_name(self):
        """Gets the ach_account_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The name of the account holder, which can be either a person or a company. Applicable to ACH payment methods.  # noqa: E501

        :return: The ach_account_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._ach_account_name

    @ach_account_name.setter
    def ach_account_name(self, ach_account_name):
        """Sets the ach_account_name of this PaymentMethodSnapshotResponse.

        The name of the account holder, which can be either a person or a company. Applicable to ACH payment methods.  # noqa: E501

        :param ach_account_name: The ach_account_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._ach_account_name = ach_account_name

    @property
    def ach_account_number_mask(self):
        """Gets the ach_account_number_mask of this PaymentMethodSnapshotResponse.  # noqa: E501

        This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`.  # noqa: E501

        :return: The ach_account_number_mask of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._ach_account_number_mask

    @ach_account_number_mask.setter
    def ach_account_number_mask(self, ach_account_number_mask):
        """Sets the ach_account_number_mask of this PaymentMethodSnapshotResponse.

        This is a masked displayable version of the ACH account number, used for security purposes. For example: `XXXXXXXXX54321`.  # noqa: E501

        :param ach_account_number_mask: The ach_account_number_mask of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._ach_account_number_mask = ach_account_number_mask

    @property
    def ach_account_type(self):
        """Gets the ach_account_type of this PaymentMethodSnapshotResponse.  # noqa: E501


        :return: The ach_account_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: GetPaymentMethodSnapshotResponseAchAccountType
        """
        return self._ach_account_type

    @ach_account_type.setter
    def ach_account_type(self, ach_account_type):
        """Sets the ach_account_type of this PaymentMethodSnapshotResponse.


        :param ach_account_type: The ach_account_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: GetPaymentMethodSnapshotResponseAchAccountType
        """

        self._ach_account_type = ach_account_type

    @property
    def ach_bank_name(self):
        """Gets the ach_bank_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The name of the bank where the ACH payment account is held.  # noqa: E501

        :return: The ach_bank_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._ach_bank_name

    @ach_bank_name.setter
    def ach_bank_name(self, ach_bank_name):
        """Sets the ach_bank_name of this PaymentMethodSnapshotResponse.

        The name of the bank where the ACH payment account is held.  # noqa: E501

        :param ach_bank_name: The ach_bank_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._ach_bank_name = ach_bank_name

    @property
    def bank_branch_code(self):
        """Gets the bank_branch_code of this PaymentMethodSnapshotResponse.  # noqa: E501

        The branch code of the bank used for direct debit.  # noqa: E501

        :return: The bank_branch_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_branch_code

    @bank_branch_code.setter
    def bank_branch_code(self, bank_branch_code):
        """Sets the bank_branch_code of this PaymentMethodSnapshotResponse.

        The branch code of the bank used for direct debit.  # noqa: E501

        :param bank_branch_code: The bank_branch_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_branch_code = bank_branch_code

    @property
    def bank_check_digit(self):
        """Gets the bank_check_digit of this PaymentMethodSnapshotResponse.  # noqa: E501

        The check digit in the international bank account number, which confirms the validity of the account. Applicable to direct debit payment methods.  # noqa: E501

        :return: The bank_check_digit of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_check_digit

    @bank_check_digit.setter
    def bank_check_digit(self, bank_check_digit):
        """Sets the bank_check_digit of this PaymentMethodSnapshotResponse.

        The check digit in the international bank account number, which confirms the validity of the account. Applicable to direct debit payment methods.  # noqa: E501

        :param bank_check_digit: The bank_check_digit of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_check_digit = bank_check_digit

    @property
    def bank_city(self):
        """Gets the bank_city of this PaymentMethodSnapshotResponse.  # noqa: E501

        The city of the direct debit bank.  # noqa: E501

        :return: The bank_city of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_city

    @bank_city.setter
    def bank_city(self, bank_city):
        """Sets the bank_city of this PaymentMethodSnapshotResponse.

        The city of the direct debit bank.  # noqa: E501

        :param bank_city: The bank_city of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_city = bank_city

    @property
    def bank_code(self):
        """Gets the bank_code of this PaymentMethodSnapshotResponse.  # noqa: E501

        The sort code or number that identifies the bank. This is also known as the sort code.  # noqa: E501

        :return: The bank_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this PaymentMethodSnapshotResponse.

        The sort code or number that identifies the bank. This is also known as the sort code.  # noqa: E501

        :param bank_code: The bank_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def bank_identification_number(self):
        """Gets the bank_identification_number of this PaymentMethodSnapshotResponse.  # noqa: E501

        The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.  # noqa: E501

        :return: The bank_identification_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_identification_number

    @bank_identification_number.setter
    def bank_identification_number(self, bank_identification_number):
        """Sets the bank_identification_number of this PaymentMethodSnapshotResponse.

        The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.  # noqa: E501

        :param bank_identification_number: The bank_identification_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_identification_number = bank_identification_number

    @property
    def bank_name(self):
        """Gets the bank_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The name of the direct debit bank.  # noqa: E501

        :return: The bank_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this PaymentMethodSnapshotResponse.

        The name of the direct debit bank.  # noqa: E501

        :param bank_name: The bank_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def bank_postal_code(self):
        """Gets the bank_postal_code of this PaymentMethodSnapshotResponse.  # noqa: E501

        The zip code or postal code of the direct debit bank.  # noqa: E501

        :return: The bank_postal_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_postal_code

    @bank_postal_code.setter
    def bank_postal_code(self, bank_postal_code):
        """Sets the bank_postal_code of this PaymentMethodSnapshotResponse.

        The zip code or postal code of the direct debit bank.  # noqa: E501

        :param bank_postal_code: The bank_postal_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_postal_code = bank_postal_code

    @property
    def bank_street_name(self):
        """Gets the bank_street_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The name of the street of the direct debit bank.  # noqa: E501

        :return: The bank_street_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_street_name

    @bank_street_name.setter
    def bank_street_name(self, bank_street_name):
        """Sets the bank_street_name of this PaymentMethodSnapshotResponse.

        The name of the street of the direct debit bank.  # noqa: E501

        :param bank_street_name: The bank_street_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_street_name = bank_street_name

    @property
    def bank_street_number(self):
        """Gets the bank_street_number of this PaymentMethodSnapshotResponse.  # noqa: E501

        The number of the direct debit bank.  # noqa: E501

        :return: The bank_street_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_street_number

    @bank_street_number.setter
    def bank_street_number(self, bank_street_number):
        """Sets the bank_street_number of this PaymentMethodSnapshotResponse.

        The number of the direct debit bank.  # noqa: E501

        :param bank_street_number: The bank_street_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_street_number = bank_street_number

    @property
    def bank_transfer_account_name(self):
        """Gets the bank_transfer_account_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The name on the direct debit bank account.  # noqa: E501

        :return: The bank_transfer_account_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_transfer_account_name

    @bank_transfer_account_name.setter
    def bank_transfer_account_name(self, bank_transfer_account_name):
        """Sets the bank_transfer_account_name of this PaymentMethodSnapshotResponse.

        The name on the direct debit bank account.  # noqa: E501

        :param bank_transfer_account_name: The bank_transfer_account_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_transfer_account_name = bank_transfer_account_name

    @property
    def bank_transfer_account_number_mask(self):
        """Gets the bank_transfer_account_number_mask of this PaymentMethodSnapshotResponse.  # noqa: E501

        This is a masked displayable version of the bank account number, used for security purposes. For example: `XXXXXXXXX54321`.  # noqa: E501

        :return: The bank_transfer_account_number_mask of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_transfer_account_number_mask

    @bank_transfer_account_number_mask.setter
    def bank_transfer_account_number_mask(self, bank_transfer_account_number_mask):
        """Sets the bank_transfer_account_number_mask of this PaymentMethodSnapshotResponse.

        This is a masked displayable version of the bank account number, used for security purposes. For example: `XXXXXXXXX54321`.  # noqa: E501

        :param bank_transfer_account_number_mask: The bank_transfer_account_number_mask of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_transfer_account_number_mask = bank_transfer_account_number_mask

    @property
    def bank_transfer_account_type(self):
        """Gets the bank_transfer_account_type of this PaymentMethodSnapshotResponse.  # noqa: E501

        The type of the customer's bank account. Applicable to direct debit payment methods.  # noqa: E501

        :return: The bank_transfer_account_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_transfer_account_type

    @bank_transfer_account_type.setter
    def bank_transfer_account_type(self, bank_transfer_account_type):
        """Sets the bank_transfer_account_type of this PaymentMethodSnapshotResponse.

        The type of the customer's bank account. Applicable to direct debit payment methods.  # noqa: E501

        :param bank_transfer_account_type: The bank_transfer_account_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._bank_transfer_account_type = bank_transfer_account_type

    @property
    def bank_transfer_type(self):
        """Gets the bank_transfer_type of this PaymentMethodSnapshotResponse.  # noqa: E501


        :return: The bank_transfer_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: GetPaymentMethodSnapshotResponseBankTransferType
        """
        return self._bank_transfer_type

    @bank_transfer_type.setter
    def bank_transfer_type(self, bank_transfer_type):
        """Sets the bank_transfer_type of this PaymentMethodSnapshotResponse.


        :param bank_transfer_type: The bank_transfer_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: GetPaymentMethodSnapshotResponseBankTransferType
        """

        self._bank_transfer_type = bank_transfer_type

    @property
    def business_identification_code(self):
        """Gets the business_identification_code of this PaymentMethodSnapshotResponse.  # noqa: E501

        The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Only applicable to direct debit payments in Switzerland with Global Collect.  # noqa: E501

        :return: The business_identification_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._business_identification_code

    @business_identification_code.setter
    def business_identification_code(self, business_identification_code):
        """Sets the business_identification_code of this PaymentMethodSnapshotResponse.

        The business identification code for Swiss direct payment methods that use the Global Collect payment gateway. Only applicable to direct debit payments in Switzerland with Global Collect.  # noqa: E501

        :param business_identification_code: The business_identification_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._business_identification_code = business_identification_code

    @property
    def city(self):
        """Gets the city of this PaymentMethodSnapshotResponse.  # noqa: E501

        The city of the customer's address. Applicable to debit payment methods.  # noqa: E501

        :return: The city of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this PaymentMethodSnapshotResponse.

        The city of the customer's address. Applicable to debit payment methods.  # noqa: E501

        :param city: The city of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def company_name(self):
        """Gets the company_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The name of the company.   # noqa: E501

        :return: The company_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this PaymentMethodSnapshotResponse.

        The name of the company.   # noqa: E501

        :param company_name: The company_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def country(self):
        """Gets the country of this PaymentMethodSnapshotResponse.  # noqa: E501

        The two-letter country code of the customer's address. Applicable to direct debit payment methods.  # noqa: E501

        :return: The country of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PaymentMethodSnapshotResponse.

        The two-letter country code of the customer's address. Applicable to direct debit payment methods.  # noqa: E501

        :param country: The country of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def credit_card_address1(self):
        """Gets the credit_card_address1 of this PaymentMethodSnapshotResponse.  # noqa: E501

        The first line of the card holder's address, which is often a street address or business name. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :return: The credit_card_address1 of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_address1

    @credit_card_address1.setter
    def credit_card_address1(self, credit_card_address1):
        """Sets the credit_card_address1 of this PaymentMethodSnapshotResponse.

        The first line of the card holder's address, which is often a street address or business name. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :param credit_card_address1: The credit_card_address1 of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_address1 = credit_card_address1

    @property
    def credit_card_address2(self):
        """Gets the credit_card_address2 of this PaymentMethodSnapshotResponse.  # noqa: E501

        The second line of the card holder's address. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :return: The credit_card_address2 of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_address2

    @credit_card_address2.setter
    def credit_card_address2(self, credit_card_address2):
        """Sets the credit_card_address2 of this PaymentMethodSnapshotResponse.

        The second line of the card holder's address. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :param credit_card_address2: The credit_card_address2 of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_address2 = credit_card_address2

    @property
    def credit_card_city(self):
        """Gets the credit_card_city of this PaymentMethodSnapshotResponse.  # noqa: E501

        The city of the card holder's address. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :return: The credit_card_city of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_city

    @credit_card_city.setter
    def credit_card_city(self, credit_card_city):
        """Sets the credit_card_city of this PaymentMethodSnapshotResponse.

        The city of the card holder's address. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :param credit_card_city: The credit_card_city of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_city = credit_card_city

    @property
    def credit_card_country(self):
        """Gets the credit_card_country of this PaymentMethodSnapshotResponse.  # noqa: E501

        The country of the card holder's address.  # noqa: E501

        :return: The credit_card_country of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_country

    @credit_card_country.setter
    def credit_card_country(self, credit_card_country):
        """Sets the credit_card_country of this PaymentMethodSnapshotResponse.

        The country of the card holder's address.  # noqa: E501

        :param credit_card_country: The credit_card_country of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_country = credit_card_country

    @property
    def credit_card_expiration_month(self):
        """Gets the credit_card_expiration_month of this PaymentMethodSnapshotResponse.  # noqa: E501

        The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :return: The credit_card_expiration_month of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._credit_card_expiration_month

    @credit_card_expiration_month.setter
    def credit_card_expiration_month(self, credit_card_expiration_month):
        """Sets the credit_card_expiration_month of this PaymentMethodSnapshotResponse.

        The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :param credit_card_expiration_month: The credit_card_expiration_month of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: int
        """

        self._credit_card_expiration_month = credit_card_expiration_month

    @property
    def credit_card_expiration_year(self):
        """Gets the credit_card_expiration_year of this PaymentMethodSnapshotResponse.  # noqa: E501

        The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :return: The credit_card_expiration_year of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._credit_card_expiration_year

    @credit_card_expiration_year.setter
    def credit_card_expiration_year(self, credit_card_expiration_year):
        """Sets the credit_card_expiration_year of this PaymentMethodSnapshotResponse.

        The expiration month of the credit card or debit card. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :param credit_card_expiration_year: The credit_card_expiration_year of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: int
        """

        self._credit_card_expiration_year = credit_card_expiration_year

    @property
    def credit_card_holder_name(self):
        """Gets the credit_card_holder_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The full name of the card holder. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :return: The credit_card_holder_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_holder_name

    @credit_card_holder_name.setter
    def credit_card_holder_name(self, credit_card_holder_name):
        """Sets the credit_card_holder_name of this PaymentMethodSnapshotResponse.

        The full name of the card holder. Applicable to credit card and direct debit payment methods.  # noqa: E501

        :param credit_card_holder_name: The credit_card_holder_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_holder_name = credit_card_holder_name

    @property
    def credit_card_mask_number(self):
        """Gets the credit_card_mask_number of this PaymentMethodSnapshotResponse.  # noqa: E501

        A masked version of the credit or debit card number.  # noqa: E501

        :return: The credit_card_mask_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_mask_number

    @credit_card_mask_number.setter
    def credit_card_mask_number(self, credit_card_mask_number):
        """Sets the credit_card_mask_number of this PaymentMethodSnapshotResponse.

        A masked version of the credit or debit card number.  # noqa: E501

        :param credit_card_mask_number: The credit_card_mask_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_mask_number = credit_card_mask_number

    @property
    def credit_card_postal_code(self):
        """Gets the credit_card_postal_code of this PaymentMethodSnapshotResponse.  # noqa: E501

        The billing address's zip code.  # noqa: E501

        :return: The credit_card_postal_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_postal_code

    @credit_card_postal_code.setter
    def credit_card_postal_code(self, credit_card_postal_code):
        """Sets the credit_card_postal_code of this PaymentMethodSnapshotResponse.

        The billing address's zip code.  # noqa: E501

        :param credit_card_postal_code: The credit_card_postal_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_postal_code = credit_card_postal_code

    @property
    def credit_card_state(self):
        """Gets the credit_card_state of this PaymentMethodSnapshotResponse.  # noqa: E501

        The billing address's state. Applicable if `CreditCardCountry` is either Canada or the US.  # noqa: E501

        :return: The credit_card_state of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_state

    @credit_card_state.setter
    def credit_card_state(self, credit_card_state):
        """Sets the credit_card_state of this PaymentMethodSnapshotResponse.

        The billing address's state. Applicable if `CreditCardCountry` is either Canada or the US.  # noqa: E501

        :param credit_card_state: The credit_card_state of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_state = credit_card_state

    @property
    def credit_card_type(self):
        """Gets the credit_card_type of this PaymentMethodSnapshotResponse.  # noqa: E501


        :return: The credit_card_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: ProxyGetPaymentMethodSnapshotCreditCardType
        """
        return self._credit_card_type

    @credit_card_type.setter
    def credit_card_type(self, credit_card_type):
        """Sets the credit_card_type of this PaymentMethodSnapshotResponse.


        :param credit_card_type: The credit_card_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: ProxyGetPaymentMethodSnapshotCreditCardType
        """

        self._credit_card_type = credit_card_type

    @property
    def device_session_id(self):
        """Gets the device_session_id of this PaymentMethodSnapshotResponse.  # noqa: E501

        The session ID of the user when the `PaymentMethod` was created or updated.  # noqa: E501

        :return: The device_session_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_session_id

    @device_session_id.setter
    def device_session_id(self, device_session_id):
        """Sets the device_session_id of this PaymentMethodSnapshotResponse.

        The session ID of the user when the `PaymentMethod` was created or updated.  # noqa: E501

        :param device_session_id: The device_session_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._device_session_id = device_session_id

    @property
    def email(self):
        """Gets the email of this PaymentMethodSnapshotResponse.  # noqa: E501

        An email address for the payment method in addition to the bill to contact email address.  # noqa: E501

        :return: The email of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PaymentMethodSnapshotResponse.

        An email address for the payment method in addition to the bill to contact email address.  # noqa: E501

        :param email: The email of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def existing_mandate(self):
        """Gets the existing_mandate of this PaymentMethodSnapshotResponse.  # noqa: E501


        :return: The existing_mandate of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: PaymentMethodMandateInfoMandateStatus
        """
        return self._existing_mandate

    @existing_mandate.setter
    def existing_mandate(self, existing_mandate):
        """Sets the existing_mandate of this PaymentMethodSnapshotResponse.


        :param existing_mandate: The existing_mandate of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: PaymentMethodMandateInfoMandateStatus
        """

        self._existing_mandate = existing_mandate

    @property
    def first_name(self):
        """Gets the first_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The customer's first name. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The first_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PaymentMethodSnapshotResponse.

        The customer's first name. Only applicable to direct debit payment methods.  # noqa: E501

        :param first_name: The first_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def iban(self):
        """Gets the iban of this PaymentMethodSnapshotResponse.  # noqa: E501

        The International Bank Account Number. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The iban of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this PaymentMethodSnapshotResponse.

        The International Bank Account Number. Only applicable to direct debit payment methods.  # noqa: E501

        :param iban: The iban of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def ip_address(self):
        """Gets the ip_address of this PaymentMethodSnapshotResponse.  # noqa: E501

        The IP address of the user when the payment method was created or updated.  # noqa: E501

        :return: The ip_address of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this PaymentMethodSnapshotResponse.

        The IP address of the user when the payment method was created or updated.  # noqa: E501

        :param ip_address: The ip_address of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def id(self):
        """Gets the id of this PaymentMethodSnapshotResponse.  # noqa: E501

        Object identifier.  # noqa: E501

        :return: The id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentMethodSnapshotResponse.

        Object identifier.  # noqa: E501

        :param id: The id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def identity_number(self):
        """Gets the identity_number of this PaymentMethodSnapshotResponse.  # noqa: E501

        The unique identity number of the customer account.    # noqa: E501

        :return: The identity_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._identity_number

    @identity_number.setter
    def identity_number(self, identity_number):
        """Sets the identity_number of this PaymentMethodSnapshotResponse.

        The unique identity number of the customer account.    # noqa: E501

        :param identity_number: The identity_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._identity_number = identity_number

    @property
    def is_company(self):
        """Gets the is_company of this PaymentMethodSnapshotResponse.  # noqa: E501

        Whether the customer account is a company.   # noqa: E501

        :return: The is_company of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_company

    @is_company.setter
    def is_company(self, is_company):
        """Sets the is_company of this PaymentMethodSnapshotResponse.

        Whether the customer account is a company.   # noqa: E501

        :param is_company: The is_company of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: bool
        """

        self._is_company = is_company

    @property
    def last_failed_sale_transaction_date(self):
        """Gets the last_failed_sale_transaction_date of this PaymentMethodSnapshotResponse.  # noqa: E501

        The date of the last failed attempt to collect payment with this payment method.  # noqa: E501

        :return: The last_failed_sale_transaction_date of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_failed_sale_transaction_date

    @last_failed_sale_transaction_date.setter
    def last_failed_sale_transaction_date(self, last_failed_sale_transaction_date):
        """Sets the last_failed_sale_transaction_date of this PaymentMethodSnapshotResponse.

        The date of the last failed attempt to collect payment with this payment method.  # noqa: E501

        :param last_failed_sale_transaction_date: The last_failed_sale_transaction_date of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: datetime
        """

        self._last_failed_sale_transaction_date = last_failed_sale_transaction_date

    @property
    def last_name(self):
        """Gets the last_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The customer's last name. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The last_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PaymentMethodSnapshotResponse.

        The customer's last name. Only applicable to direct debit payment methods.  # noqa: E501

        :param last_name: The last_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def last_transaction_date_time(self):
        """Gets the last_transaction_date_time of this PaymentMethodSnapshotResponse.  # noqa: E501

        The date of the most recent transaction.  # noqa: E501

        :return: The last_transaction_date_time of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_transaction_date_time

    @last_transaction_date_time.setter
    def last_transaction_date_time(self, last_transaction_date_time):
        """Sets the last_transaction_date_time of this PaymentMethodSnapshotResponse.

        The date of the most recent transaction.  # noqa: E501

        :param last_transaction_date_time: The last_transaction_date_time of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: datetime
        """

        self._last_transaction_date_time = last_transaction_date_time

    @property
    def last_transaction_status(self):
        """Gets the last_transaction_status of this PaymentMethodSnapshotResponse.  # noqa: E501

        The status of the most recent transaction.  # noqa: E501

        :return: The last_transaction_status of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_transaction_status

    @last_transaction_status.setter
    def last_transaction_status(self, last_transaction_status):
        """Sets the last_transaction_status of this PaymentMethodSnapshotResponse.

        The status of the most recent transaction.  # noqa: E501

        :param last_transaction_status: The last_transaction_status of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._last_transaction_status = last_transaction_status

    @property
    def mandate_creation_date(self):
        """Gets the mandate_creation_date of this PaymentMethodSnapshotResponse.  # noqa: E501

        The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The mandate_creation_date of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: date
        """
        return self._mandate_creation_date

    @mandate_creation_date.setter
    def mandate_creation_date(self, mandate_creation_date):
        """Sets the mandate_creation_date of this PaymentMethodSnapshotResponse.

        The date when the mandate was created, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.  # noqa: E501

        :param mandate_creation_date: The mandate_creation_date of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: date
        """

        self._mandate_creation_date = mandate_creation_date

    @property
    def mandate_id(self):
        """Gets the mandate_id of this PaymentMethodSnapshotResponse.  # noqa: E501

        The ID of the mandate. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The mandate_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._mandate_id

    @mandate_id.setter
    def mandate_id(self, mandate_id):
        """Sets the mandate_id of this PaymentMethodSnapshotResponse.

        The ID of the mandate. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.  # noqa: E501

        :param mandate_id: The mandate_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._mandate_id = mandate_id

    @property
    def mandate_received(self):
        """Gets the mandate_received of this PaymentMethodSnapshotResponse.  # noqa: E501

        Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The mandate_received of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._mandate_received

    @mandate_received.setter
    def mandate_received(self, mandate_received):
        """Sets the mandate_received of this PaymentMethodSnapshotResponse.

        Indicates if  the mandate was received. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.  # noqa: E501

        :param mandate_received: The mandate_received of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._mandate_received = mandate_received

    @property
    def mandate_update_date(self):
        """Gets the mandate_update_date of this PaymentMethodSnapshotResponse.  # noqa: E501

        The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The mandate_update_date of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: date
        """
        return self._mandate_update_date

    @mandate_update_date.setter
    def mandate_update_date(self, mandate_update_date):
        """Sets the mandate_update_date of this PaymentMethodSnapshotResponse.

        The date when the mandate was last updated, in `yyyy-mm-dd` format. A mandate is a signed authorization for UK and NL customers. Only applicable to direct debit payment methods.  # noqa: E501

        :param mandate_update_date: The mandate_update_date of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: date
        """

        self._mandate_update_date = mandate_update_date

    @property
    def max_consecutive_payment_failures(self):
        """Gets the max_consecutive_payment_failures of this PaymentMethodSnapshotResponse.  # noqa: E501

        The number of allowable consecutive failures Zuora attempts with the payment method before stopping.  # noqa: E501

        :return: The max_consecutive_payment_failures of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_consecutive_payment_failures

    @max_consecutive_payment_failures.setter
    def max_consecutive_payment_failures(self, max_consecutive_payment_failures):
        """Sets the max_consecutive_payment_failures of this PaymentMethodSnapshotResponse.

        The number of allowable consecutive failures Zuora attempts with the payment method before stopping.  # noqa: E501

        :param max_consecutive_payment_failures: The max_consecutive_payment_failures of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: int
        """

        self._max_consecutive_payment_failures = max_consecutive_payment_failures

    @property
    def name(self):
        """Gets the name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The name of the payment method.  # noqa: E501

        :return: The name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PaymentMethodSnapshotResponse.

        The name of the payment method.  # noqa: E501

        :param name: The name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_consecutive_failures(self):
        """Gets the num_consecutive_failures of this PaymentMethodSnapshotResponse.  # noqa: E501

        The number of consecutive failed payment for the payment method.  # noqa: E501

        :return: The num_consecutive_failures of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_consecutive_failures

    @num_consecutive_failures.setter
    def num_consecutive_failures(self, num_consecutive_failures):
        """Sets the num_consecutive_failures of this PaymentMethodSnapshotResponse.

        The number of consecutive failed payment for the payment method.  # noqa: E501

        :param num_consecutive_failures: The num_consecutive_failures of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: int
        """

        self._num_consecutive_failures = num_consecutive_failures

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this PaymentMethodSnapshotResponse.  # noqa: E501

        Object identifier of the payment method.  # noqa: E501

        :return: The payment_method_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this PaymentMethodSnapshotResponse.

        Object identifier of the payment method.  # noqa: E501

        :param payment_method_id: The payment_method_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def payment_method_status(self):
        """Gets the payment_method_status of this PaymentMethodSnapshotResponse.  # noqa: E501


        :return: The payment_method_status of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: GetPaymentMethodSnapshotResponsePaymentMethodStatus
        """
        return self._payment_method_status

    @payment_method_status.setter
    def payment_method_status(self, payment_method_status):
        """Sets the payment_method_status of this PaymentMethodSnapshotResponse.


        :param payment_method_status: The payment_method_status of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: GetPaymentMethodSnapshotResponsePaymentMethodStatus
        """

        self._payment_method_status = payment_method_status

    @property
    def payment_retry_window(self):
        """Gets the payment_retry_window of this PaymentMethodSnapshotResponse.  # noqa: E501

        The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.  # noqa: E501

        :return: The payment_retry_window of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._payment_retry_window

    @payment_retry_window.setter
    def payment_retry_window(self, payment_retry_window):
        """Sets the payment_retry_window of this PaymentMethodSnapshotResponse.

        The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.  # noqa: E501

        :param payment_retry_window: The payment_retry_window of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: int
        """

        self._payment_retry_window = payment_retry_window

    @property
    def paypal_baid(self):
        """Gets the paypal_baid of this PaymentMethodSnapshotResponse.  # noqa: E501

        The PayPal billing agreement ID, which is a contract between two PayPal accounts.  # noqa: E501

        :return: The paypal_baid of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._paypal_baid

    @paypal_baid.setter
    def paypal_baid(self, paypal_baid):
        """Sets the paypal_baid of this PaymentMethodSnapshotResponse.

        The PayPal billing agreement ID, which is a contract between two PayPal accounts.  # noqa: E501

        :param paypal_baid: The paypal_baid of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._paypal_baid = paypal_baid

    @property
    def paypal_email(self):
        """Gets the paypal_email of this PaymentMethodSnapshotResponse.  # noqa: E501

        The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service.  # noqa: E501

        :return: The paypal_email of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._paypal_email

    @paypal_email.setter
    def paypal_email(self, paypal_email):
        """Sets the paypal_email of this PaymentMethodSnapshotResponse.

        The email address associated with the account holder's PayPal account or of the PayPal account of the person paying for the service.  # noqa: E501

        :param paypal_email: The paypal_email of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._paypal_email = paypal_email

    @property
    def paypal_preapproval_key(self):
        """Gets the paypal_preapproval_key of this PaymentMethodSnapshotResponse.  # noqa: E501

        PayPal's Adaptive Payments API key.  # noqa: E501

        :return: The paypal_preapproval_key of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._paypal_preapproval_key

    @paypal_preapproval_key.setter
    def paypal_preapproval_key(self, paypal_preapproval_key):
        """Sets the paypal_preapproval_key of this PaymentMethodSnapshotResponse.

        PayPal's Adaptive Payments API key.  # noqa: E501

        :param paypal_preapproval_key: The paypal_preapproval_key of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._paypal_preapproval_key = paypal_preapproval_key

    @property
    def paypal_type(self):
        """Gets the paypal_type of this PaymentMethodSnapshotResponse.  # noqa: E501


        :return: The paypal_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: GetPaymentMethodSnapshotResponsePaypalType
        """
        return self._paypal_type

    @paypal_type.setter
    def paypal_type(self, paypal_type):
        """Sets the paypal_type of this PaymentMethodSnapshotResponse.


        :param paypal_type: The paypal_type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: GetPaymentMethodSnapshotResponsePaypalType
        """

        self._paypal_type = paypal_type

    @property
    def phone(self):
        """Gets the phone of this PaymentMethodSnapshotResponse.  # noqa: E501

        The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.  # noqa: E501

        :return: The phone of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this PaymentMethodSnapshotResponse.

        The phone number that the account holder registered with the bank. This field is used for credit card validation when passing to a gateway.  # noqa: E501

        :param phone: The phone of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this PaymentMethodSnapshotResponse.  # noqa: E501

        The zip code of the customer's address. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The postal_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this PaymentMethodSnapshotResponse.

        The zip code of the customer's address. Only applicable to direct debit payment methods.  # noqa: E501

        :param postal_code: The postal_code of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def second_token_id(self):
        """Gets the second_token_id of this PaymentMethodSnapshotResponse.  # noqa: E501

        A gateway unique identifier that replaces sensitive payment method data. Applicable to CC Reference Transaction payment methods.  # noqa: E501

        :return: The second_token_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._second_token_id

    @second_token_id.setter
    def second_token_id(self, second_token_id):
        """Sets the second_token_id of this PaymentMethodSnapshotResponse.

        A gateway unique identifier that replaces sensitive payment method data. Applicable to CC Reference Transaction payment methods.  # noqa: E501

        :param second_token_id: The second_token_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._second_token_id = second_token_id

    @property
    def state(self):
        """Gets the state of this PaymentMethodSnapshotResponse.  # noqa: E501

        The state of the customer's address. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The state of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this PaymentMethodSnapshotResponse.

        The state of the customer's address. Only applicable to direct debit payment methods.  # noqa: E501

        :param state: The state of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def street_name(self):
        """Gets the street_name of this PaymentMethodSnapshotResponse.  # noqa: E501

        The street name of the customer's address. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The street_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this PaymentMethodSnapshotResponse.

        The street name of the customer's address. Only applicable to direct debit payment methods.  # noqa: E501

        :param street_name: The street_name of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def street_number(self):
        """Gets the street_number of this PaymentMethodSnapshotResponse.  # noqa: E501

        The street number of the customer's address. Only applicable to direct debit payment methods.  # noqa: E501

        :return: The street_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._street_number

    @street_number.setter
    def street_number(self, street_number):
        """Sets the street_number of this PaymentMethodSnapshotResponse.

        The street number of the customer's address. Only applicable to direct debit payment methods.  # noqa: E501

        :param street_number: The street_number of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._street_number = street_number

    @property
    def token_id(self):
        """Gets the token_id of this PaymentMethodSnapshotResponse.  # noqa: E501

        A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. Applicable to CC Reference Transaction payment methods.  # noqa: E501

        :return: The token_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this PaymentMethodSnapshotResponse.

        A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. Applicable to CC Reference Transaction payment methods.  # noqa: E501

        :param token_id: The token_id of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def total_number_of_error_payments(self):
        """Gets the total_number_of_error_payments of this PaymentMethodSnapshotResponse.  # noqa: E501

        The number of error payments that used this payment method.  # noqa: E501

        :return: The total_number_of_error_payments of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_number_of_error_payments

    @total_number_of_error_payments.setter
    def total_number_of_error_payments(self, total_number_of_error_payments):
        """Sets the total_number_of_error_payments of this PaymentMethodSnapshotResponse.

        The number of error payments that used this payment method.  # noqa: E501

        :param total_number_of_error_payments: The total_number_of_error_payments of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: int
        """

        self._total_number_of_error_payments = total_number_of_error_payments

    @property
    def total_number_of_processed_payments(self):
        """Gets the total_number_of_processed_payments of this PaymentMethodSnapshotResponse.  # noqa: E501

        The number of successful payments that used this payment method.  # noqa: E501

        :return: The total_number_of_processed_payments of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_number_of_processed_payments

    @total_number_of_processed_payments.setter
    def total_number_of_processed_payments(self, total_number_of_processed_payments):
        """Sets the total_number_of_processed_payments of this PaymentMethodSnapshotResponse.

        The number of successful payments that used this payment method.  # noqa: E501

        :param total_number_of_processed_payments: The total_number_of_processed_payments of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: int
        """

        self._total_number_of_processed_payments = total_number_of_processed_payments

    @property
    def type(self):
        """Gets the type of this PaymentMethodSnapshotResponse.  # noqa: E501


        :return: The type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: PaymentMethodType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PaymentMethodSnapshotResponse.


        :param type: The type of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: PaymentMethodType
        """

        self._type = type

    @property
    def use_default_retry_rule(self):
        """Gets the use_default_retry_rule of this PaymentMethodSnapshotResponse.  # noqa: E501

        Determines whether to use the default retry rules configured in the Zuora Payments settings.  # noqa: E501

        :return: The use_default_retry_rule of this PaymentMethodSnapshotResponse.  # noqa: E501
        :rtype: bool
        """
        return self._use_default_retry_rule

    @use_default_retry_rule.setter
    def use_default_retry_rule(self, use_default_retry_rule):
        """Sets the use_default_retry_rule of this PaymentMethodSnapshotResponse.

        Determines whether to use the default retry rules configured in the Zuora Payments settings.  # noqa: E501

        :param use_default_retry_rule: The use_default_retry_rule of this PaymentMethodSnapshotResponse.  # noqa: E501
        :type: bool
        """

        self._use_default_retry_rule = use_default_retry_rule

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentMethodSnapshotResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodSnapshotResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
