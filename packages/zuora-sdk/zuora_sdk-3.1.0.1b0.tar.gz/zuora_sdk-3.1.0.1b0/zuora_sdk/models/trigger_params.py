# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TriggerParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'specific_trigger_date': 'date',
        'trigger_event': 'TriggerEvent',
        'start_date_policy': 'StartDatePolicy',
        'periods_after_charge_start': 'int',
        'start_periods_type': 'StartPeriodsType'
    }

    attribute_map = {
        'specific_trigger_date': 'specificTriggerDate',
        'trigger_event': 'triggerEvent',
        'start_date_policy': 'startDatePolicy',
        'periods_after_charge_start': 'periodsAfterChargeStart',
        'start_periods_type': 'startPeriodsType'
    }

    def __init__(self, specific_trigger_date=None, trigger_event=None, start_date_policy=None, periods_after_charge_start=None, start_periods_type=None):  # noqa: E501
        """TriggerParams - a model defined in Swagger"""  # noqa: E501
        self._specific_trigger_date = None
        self._trigger_event = None
        self._start_date_policy = None
        self._periods_after_charge_start = None
        self._start_periods_type = None
        self.discriminator = None
        if specific_trigger_date is not None:
            self.specific_trigger_date = specific_trigger_date
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if start_date_policy is not None:
            self.start_date_policy = start_date_policy
        if periods_after_charge_start is not None:
            self.periods_after_charge_start = periods_after_charge_start
        if start_periods_type is not None:
            self.start_periods_type = start_periods_type

    @property
    def specific_trigger_date(self):
        """Gets the specific_trigger_date of this TriggerParams.  # noqa: E501

        Date in YYYY-MM-DD format. Only applicable if the value of the `triggerEvent` field is `SpecificDate`.   While this field is applicable, if this field is not set, your `CreateSubscription` order action creates a `Pending` order and a `Pending Acceptance` subscription. If at the same time the service activation date is required and not set, a `Pending Activation` subscription is created.  While this field is applicable, if this field is not set, the following order actions create a `Pending` order but do not impact the subscription status. **Note**: This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions   # noqa: E501

        :return: The specific_trigger_date of this TriggerParams.  # noqa: E501
        :rtype: date
        """
        return self._specific_trigger_date

    @specific_trigger_date.setter
    def specific_trigger_date(self, specific_trigger_date):
        """Sets the specific_trigger_date of this TriggerParams.

        Date in YYYY-MM-DD format. Only applicable if the value of the `triggerEvent` field is `SpecificDate`.   While this field is applicable, if this field is not set, your `CreateSubscription` order action creates a `Pending` order and a `Pending Acceptance` subscription. If at the same time the service activation date is required and not set, a `Pending Activation` subscription is created.  While this field is applicable, if this field is not set, the following order actions create a `Pending` order but do not impact the subscription status. **Note**: This feature is in **Limited Availability**. If you want to have access to the feature, submit a request at [Zuora Global Support](http://support.zuora.com/).  * AddProduct  * UpdateProduct  * RemoveProduct  * RenewSubscription  * TermsAndConditions   # noqa: E501

        :param specific_trigger_date: The specific_trigger_date of this TriggerParams.  # noqa: E501
        :type: date
        """

        self._specific_trigger_date = specific_trigger_date

    @property
    def trigger_event(self):
        """Gets the trigger_event of this TriggerParams.  # noqa: E501


        :return: The trigger_event of this TriggerParams.  # noqa: E501
        :rtype: TriggerEvent
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this TriggerParams.


        :param trigger_event: The trigger_event of this TriggerParams.  # noqa: E501
        :type: TriggerEvent
        """

        self._trigger_event = trigger_event

    @property
    def start_date_policy(self):
        """Gets the start_date_policy of this TriggerParams.  # noqa: E501


        :return: The start_date_policy of this TriggerParams.  # noqa: E501
        :rtype: StartDatePolicy
        """
        return self._start_date_policy

    @start_date_policy.setter
    def start_date_policy(self, start_date_policy):
        """Sets the start_date_policy of this TriggerParams.


        :param start_date_policy: The start_date_policy of this TriggerParams.  # noqa: E501
        :type: StartDatePolicy
        """

        self._start_date_policy = start_date_policy

    @property
    def periods_after_charge_start(self):
        """Gets the periods_after_charge_start of this TriggerParams.  # noqa: E501

        Duration of the discount charge in days, weeks, months, or years, depending on the value of the `startPeriodsType` field. Only applicable if the value of the `startDatePolicy` field is `FixedPeriodAfterApplyToChargeStartDate`. **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.   # noqa: E501

        :return: The periods_after_charge_start of this TriggerParams.  # noqa: E501
        :rtype: int
        """
        return self._periods_after_charge_start

    @periods_after_charge_start.setter
    def periods_after_charge_start(self, periods_after_charge_start):
        """Sets the periods_after_charge_start of this TriggerParams.

        Duration of the discount charge in days, weeks, months, or years, depending on the value of the `startPeriodsType` field. Only applicable if the value of the `startDatePolicy` field is `FixedPeriodAfterApplyToChargeStartDate`. **Note**: You must enable the [Enhanced Discounts](https://knowledgecenter.zuora.com/Zuora_Billing/Build_products_and_prices/Basic_concepts_and_terms/B_Charge_Models/D_Manage_Enhanced_Discount) feature to access this field.   # noqa: E501

        :param periods_after_charge_start: The periods_after_charge_start of this TriggerParams.  # noqa: E501
        :type: int
        """

        self._periods_after_charge_start = periods_after_charge_start

    @property
    def start_periods_type(self):
        """Gets the start_periods_type of this TriggerParams.  # noqa: E501


        :return: The start_periods_type of this TriggerParams.  # noqa: E501
        :rtype: StartPeriodsType
        """
        return self._start_periods_type

    @start_periods_type.setter
    def start_periods_type(self, start_periods_type):
        """Sets the start_periods_type of this TriggerParams.


        :param start_periods_type: The start_periods_type of this TriggerParams.  # noqa: E501
        :type: StartPeriodsType
        """

        self._start_periods_type = start_periods_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TriggerParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TriggerParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
