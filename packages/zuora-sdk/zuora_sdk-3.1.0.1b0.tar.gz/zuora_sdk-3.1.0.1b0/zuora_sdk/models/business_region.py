# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BusinessRegion(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'country': 'str',
        'business_name': 'str',
        'business_number': 'str',
        'business_number_schema_id': 'str',
        'trade_name': 'str',
        'tax_register_number': 'str',
        'endpoint_id': 'str',
        'endpoint_scheme_id': 'str',
        'address_line1': 'str',
        'address_line2': 'str',
        'postal_code': 'str',
        'city': 'str',
        'state': 'str',
        'contact_name': 'str',
        'email': 'str',
        'phone_number': 'str',
        'service_provider_id': 'str',
        'business_region_number': 'str',
        'digital_signature_enable': 'bool',
        'digital_signature_box_enable': 'bool',
        'digital_signature_box_pos_x': 'float',
        'digital_signature_box_pos_y': 'float',
        'response_mapping': 'dict(str, object)',
        'process_type': 'str',
        'invoice_enabled': 'bool',
        'credit_memo_enabled': 'bool',
        'debit_memo_enabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'country': 'country',
        'business_name': 'businessName',
        'business_number': 'businessNumber',
        'business_number_schema_id': 'businessNumberSchemaId',
        'trade_name': 'tradeName',
        'tax_register_number': 'taxRegisterNumber',
        'endpoint_id': 'endpointId',
        'endpoint_scheme_id': 'endpointSchemeId',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'postal_code': 'postalCode',
        'city': 'city',
        'state': 'state',
        'contact_name': 'contactName',
        'email': 'email',
        'phone_number': 'phoneNumber',
        'service_provider_id': 'serviceProviderId',
        'business_region_number': 'businessRegionNumber',
        'digital_signature_enable': 'digitalSignatureEnable',
        'digital_signature_box_enable': 'digitalSignatureBoxEnable',
        'digital_signature_box_pos_x': 'digitalSignatureBoxPosX',
        'digital_signature_box_pos_y': 'digitalSignatureBoxPosY',
        'response_mapping': 'responseMapping',
        'process_type': 'processType',
        'invoice_enabled': 'invoiceEnabled',
        'credit_memo_enabled': 'creditMemoEnabled',
        'debit_memo_enabled': 'debitMemoEnabled'
    }

    def __init__(self, id=None, country=None, business_name=None, business_number=None, business_number_schema_id=None, trade_name=None, tax_register_number=None, endpoint_id=None, endpoint_scheme_id=None, address_line1=None, address_line2=None, postal_code=None, city=None, state=None, contact_name=None, email=None, phone_number=None, service_provider_id=None, business_region_number=None, digital_signature_enable=None, digital_signature_box_enable=None, digital_signature_box_pos_x=None, digital_signature_box_pos_y=None, response_mapping=None, process_type=None, invoice_enabled=None, credit_memo_enabled=None, debit_memo_enabled=None):  # noqa: E501
        """BusinessRegion - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._country = None
        self._business_name = None
        self._business_number = None
        self._business_number_schema_id = None
        self._trade_name = None
        self._tax_register_number = None
        self._endpoint_id = None
        self._endpoint_scheme_id = None
        self._address_line1 = None
        self._address_line2 = None
        self._postal_code = None
        self._city = None
        self._state = None
        self._contact_name = None
        self._email = None
        self._phone_number = None
        self._service_provider_id = None
        self._business_region_number = None
        self._digital_signature_enable = None
        self._digital_signature_box_enable = None
        self._digital_signature_box_pos_x = None
        self._digital_signature_box_pos_y = None
        self._response_mapping = None
        self._process_type = None
        self._invoice_enabled = None
        self._credit_memo_enabled = None
        self._debit_memo_enabled = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if country is not None:
            self.country = country
        if business_name is not None:
            self.business_name = business_name
        if business_number is not None:
            self.business_number = business_number
        if business_number_schema_id is not None:
            self.business_number_schema_id = business_number_schema_id
        if trade_name is not None:
            self.trade_name = trade_name
        if tax_register_number is not None:
            self.tax_register_number = tax_register_number
        if endpoint_id is not None:
            self.endpoint_id = endpoint_id
        if endpoint_scheme_id is not None:
            self.endpoint_scheme_id = endpoint_scheme_id
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if postal_code is not None:
            self.postal_code = postal_code
        if city is not None:
            self.city = city
        if state is not None:
            self.state = state
        if contact_name is not None:
            self.contact_name = contact_name
        if email is not None:
            self.email = email
        if phone_number is not None:
            self.phone_number = phone_number
        if service_provider_id is not None:
            self.service_provider_id = service_provider_id
        if business_region_number is not None:
            self.business_region_number = business_region_number
        if digital_signature_enable is not None:
            self.digital_signature_enable = digital_signature_enable
        if digital_signature_box_enable is not None:
            self.digital_signature_box_enable = digital_signature_box_enable
        if digital_signature_box_pos_x is not None:
            self.digital_signature_box_pos_x = digital_signature_box_pos_x
        if digital_signature_box_pos_y is not None:
            self.digital_signature_box_pos_y = digital_signature_box_pos_y
        if response_mapping is not None:
            self.response_mapping = response_mapping
        if process_type is not None:
            self.process_type = process_type
        if invoice_enabled is not None:
            self.invoice_enabled = invoice_enabled
        if credit_memo_enabled is not None:
            self.credit_memo_enabled = credit_memo_enabled
        if debit_memo_enabled is not None:
            self.debit_memo_enabled = debit_memo_enabled

    @property
    def id(self):
        """Gets the id of this BusinessRegion.  # noqa: E501

        The unique ID of the e-invoicing business region.   # noqa: E501

        :return: The id of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BusinessRegion.

        The unique ID of the e-invoicing business region.   # noqa: E501

        :param id: The id of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def country(self):
        """Gets the country of this BusinessRegion.  # noqa: E501

        The short name of a country or region where you must comply with e-invoicing requirements. For example, `IN` for India. For the full list of country names and codes, see <a href=\"https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes\" target=\"_blank\">ISO Standard Country Codes</a>.   # noqa: E501

        :return: The country of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BusinessRegion.

        The short name of a country or region where you must comply with e-invoicing requirements. For example, `IN` for India. For the full list of country names and codes, see <a href=\"https://knowledgecenter.zuora.com/Quick_References/Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes\" target=\"_blank\">ISO Standard Country Codes</a>.   # noqa: E501

        :param country: The country of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def business_name(self):
        """Gets the business_name of this BusinessRegion.  # noqa: E501

        The full official name that the Seller is registered with the relevant legal authority.   # noqa: E501

        :return: The business_name of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._business_name

    @business_name.setter
    def business_name(self, business_name):
        """Sets the business_name of this BusinessRegion.

        The full official name that the Seller is registered with the relevant legal authority.   # noqa: E501

        :param business_name: The business_name of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._business_name = business_name

    @property
    def business_number(self):
        """Gets the business_number of this BusinessRegion.  # noqa: E501

        The specify the unique identifier number of the legal entity or person that you do business with.  For example, you must use a GSTIN for India and Tax Identification Number (TIN) for Saudi Arabia.   # noqa: E501

        :return: The business_number of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._business_number

    @business_number.setter
    def business_number(self, business_number):
        """Sets the business_number of this BusinessRegion.

        The specify the unique identifier number of the legal entity or person that you do business with.  For example, you must use a GSTIN for India and Tax Identification Number (TIN) for Saudi Arabia.   # noqa: E501

        :param business_number: The business_number of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._business_number = business_number

    @property
    def business_number_schema_id(self):
        """Gets the business_number_schema_id of this BusinessRegion.  # noqa: E501

        The identification scheme identifier that an official registrar issues to identify the Seller as a legal entity or person.   # noqa: E501

        :return: The business_number_schema_id of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._business_number_schema_id

    @business_number_schema_id.setter
    def business_number_schema_id(self, business_number_schema_id):
        """Sets the business_number_schema_id of this BusinessRegion.

        The identification scheme identifier that an official registrar issues to identify the Seller as a legal entity or person.   # noqa: E501

        :param business_number_schema_id: The business_number_schema_id of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._business_number_schema_id = business_number_schema_id

    @property
    def trade_name(self):
        """Gets the trade_name of this BusinessRegion.  # noqa: E501

        The name that the Seller is known as, other than the legal business name.   # noqa: E501

        :return: The trade_name of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._trade_name

    @trade_name.setter
    def trade_name(self, trade_name):
        """Sets the trade_name of this BusinessRegion.

        The name that the Seller is known as, other than the legal business name.   # noqa: E501

        :param trade_name: The trade_name of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._trade_name = trade_name

    @property
    def tax_register_number(self):
        """Gets the tax_register_number of this BusinessRegion.  # noqa: E501

        The Seller's VAT identifier (also known as Seller VAT identification number) or the local identification (defined by the Seller’s address) of the Seller for tax purposes, or a reference that enables the Seller to state the registered tax status.   # noqa: E501

        :return: The tax_register_number of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._tax_register_number

    @tax_register_number.setter
    def tax_register_number(self, tax_register_number):
        """Sets the tax_register_number of this BusinessRegion.

        The Seller's VAT identifier (also known as Seller VAT identification number) or the local identification (defined by the Seller’s address) of the Seller for tax purposes, or a reference that enables the Seller to state the registered tax status.   # noqa: E501

        :param tax_register_number: The tax_register_number of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._tax_register_number = tax_register_number

    @property
    def endpoint_id(self):
        """Gets the endpoint_id of this BusinessRegion.  # noqa: E501

        The Seller's electronic address, to which the application-level response to the e-invoice file might be delivered.   # noqa: E501

        :return: The endpoint_id of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id):
        """Sets the endpoint_id of this BusinessRegion.

        The Seller's electronic address, to which the application-level response to the e-invoice file might be delivered.   # noqa: E501

        :param endpoint_id: The endpoint_id of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._endpoint_id = endpoint_id

    @property
    def endpoint_scheme_id(self):
        """Gets the endpoint_scheme_id of this BusinessRegion.  # noqa: E501

        The identification scheme identifier of the Seller’s electronic address.   # noqa: E501

        :return: The endpoint_scheme_id of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._endpoint_scheme_id

    @endpoint_scheme_id.setter
    def endpoint_scheme_id(self, endpoint_scheme_id):
        """Sets the endpoint_scheme_id of this BusinessRegion.

        The identification scheme identifier of the Seller’s electronic address.   # noqa: E501

        :param endpoint_scheme_id: The endpoint_scheme_id of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._endpoint_scheme_id = endpoint_scheme_id

    @property
    def address_line1(self):
        """Gets the address_line1 of this BusinessRegion.  # noqa: E501

        The first line of the Seller’s address, which is often a street address or business name.   # noqa: E501

        :return: The address_line1 of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this BusinessRegion.

        The first line of the Seller’s address, which is often a street address or business name.   # noqa: E501

        :param address_line1: The address_line1 of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this BusinessRegion.  # noqa: E501

        The second line of the Seller’s address, which is often the name of a building.   # noqa: E501

        :return: The address_line2 of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this BusinessRegion.

        The second line of the Seller’s address, which is often the name of a building.   # noqa: E501

        :param address_line2: The address_line2 of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def postal_code(self):
        """Gets the postal_code of this BusinessRegion.  # noqa: E501

        The short code that can identify the business address.   # noqa: E501

        :return: The postal_code of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this BusinessRegion.

        The short code that can identify the business address.   # noqa: E501

        :param postal_code: The postal_code of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def city(self):
        """Gets the city of this BusinessRegion.  # noqa: E501

        The the name of the city where the business is located.   # noqa: E501

        :return: The city of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this BusinessRegion.

        The the name of the city where the business is located.   # noqa: E501

        :param city: The city of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def state(self):
        """Gets the state of this BusinessRegion.  # noqa: E501

        The name of the state or province where the business is located.   # noqa: E501

        :return: The state of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this BusinessRegion.

        The name of the state or province where the business is located.   # noqa: E501

        :param state: The state of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def contact_name(self):
        """Gets the contact_name of this BusinessRegion.  # noqa: E501

        The name of the Seller contact to receive e-invoicing data.   # noqa: E501

        :return: The contact_name of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this BusinessRegion.

        The name of the Seller contact to receive e-invoicing data.   # noqa: E501

        :param contact_name: The contact_name of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def email(self):
        """Gets the email of this BusinessRegion.  # noqa: E501

        The email address of the Seller contact to receive e-invoicing data.   # noqa: E501

        :return: The email of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this BusinessRegion.

        The email address of the Seller contact to receive e-invoicing data.   # noqa: E501

        :param email: The email of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone_number(self):
        """Gets the phone_number of this BusinessRegion.  # noqa: E501

        The business phone number of the Seller contact to receive e-invoicing data.   # noqa: E501

        :return: The phone_number of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this BusinessRegion.

        The business phone number of the Seller contact to receive e-invoicing data.   # noqa: E501

        :param phone_number: The phone_number of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def service_provider_id(self):
        """Gets the service_provider_id of this BusinessRegion.  # noqa: E501

        The unique ID of the e-invoicing service provider that is associated to the business region.   # noqa: E501

        :return: The service_provider_id of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._service_provider_id

    @service_provider_id.setter
    def service_provider_id(self, service_provider_id):
        """Sets the service_provider_id of this BusinessRegion.

        The unique ID of the e-invoicing service provider that is associated to the business region.   # noqa: E501

        :param service_provider_id: The service_provider_id of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._service_provider_id = service_provider_id

    @property
    def business_region_number(self):
        """Gets the business_region_number of this BusinessRegion.  # noqa: E501

        The unique number of the e-invoicing business region.   # noqa: E501

        :return: The business_region_number of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._business_region_number

    @business_region_number.setter
    def business_region_number(self, business_region_number):
        """Sets the business_region_number of this BusinessRegion.

        The unique number of the e-invoicing business region.   # noqa: E501

        :param business_region_number: The business_region_number of this BusinessRegion.  # noqa: E501
        :type: str
        """

        self._business_region_number = business_region_number

    @property
    def digital_signature_enable(self):
        """Gets the digital_signature_enable of this BusinessRegion.  # noqa: E501

        It will control that whether the pdf should be signed by vendor.   # noqa: E501

        :return: The digital_signature_enable of this BusinessRegion.  # noqa: E501
        :rtype: bool
        """
        return self._digital_signature_enable

    @digital_signature_enable.setter
    def digital_signature_enable(self, digital_signature_enable):
        """Sets the digital_signature_enable of this BusinessRegion.

        It will control that whether the pdf should be signed by vendor.   # noqa: E501

        :param digital_signature_enable: The digital_signature_enable of this BusinessRegion.  # noqa: E501
        :type: bool
        """

        self._digital_signature_enable = digital_signature_enable

    @property
    def digital_signature_box_enable(self):
        """Gets the digital_signature_box_enable of this BusinessRegion.  # noqa: E501

        It will control whether the dignature box will be shown on the pdf.   # noqa: E501

        :return: The digital_signature_box_enable of this BusinessRegion.  # noqa: E501
        :rtype: bool
        """
        return self._digital_signature_box_enable

    @digital_signature_box_enable.setter
    def digital_signature_box_enable(self, digital_signature_box_enable):
        """Sets the digital_signature_box_enable of this BusinessRegion.

        It will control whether the dignature box will be shown on the pdf.   # noqa: E501

        :param digital_signature_box_enable: The digital_signature_box_enable of this BusinessRegion.  # noqa: E501
        :type: bool
        """

        self._digital_signature_box_enable = digital_signature_box_enable

    @property
    def digital_signature_box_pos_x(self):
        """Gets the digital_signature_box_pos_x of this BusinessRegion.  # noqa: E501

        It is the X-axis that the box will be shown.   # noqa: E501

        :return: The digital_signature_box_pos_x of this BusinessRegion.  # noqa: E501
        :rtype: float
        """
        return self._digital_signature_box_pos_x

    @digital_signature_box_pos_x.setter
    def digital_signature_box_pos_x(self, digital_signature_box_pos_x):
        """Sets the digital_signature_box_pos_x of this BusinessRegion.

        It is the X-axis that the box will be shown.   # noqa: E501

        :param digital_signature_box_pos_x: The digital_signature_box_pos_x of this BusinessRegion.  # noqa: E501
        :type: float
        """

        self._digital_signature_box_pos_x = digital_signature_box_pos_x

    @property
    def digital_signature_box_pos_y(self):
        """Gets the digital_signature_box_pos_y of this BusinessRegion.  # noqa: E501

        It is the Y-axis that the box will be shown.   # noqa: E501

        :return: The digital_signature_box_pos_y of this BusinessRegion.  # noqa: E501
        :rtype: float
        """
        return self._digital_signature_box_pos_y

    @digital_signature_box_pos_y.setter
    def digital_signature_box_pos_y(self, digital_signature_box_pos_y):
        """Sets the digital_signature_box_pos_y of this BusinessRegion.

        It is the Y-axis that the box will be shown.   # noqa: E501

        :param digital_signature_box_pos_y: The digital_signature_box_pos_y of this BusinessRegion.  # noqa: E501
        :type: float
        """

        self._digital_signature_box_pos_y = digital_signature_box_pos_y

    @property
    def response_mapping(self):
        """Gets the response_mapping of this BusinessRegion.  # noqa: E501

        The response mapping of the e-invoicing business region.   # noqa: E501

        :return: The response_mapping of this BusinessRegion.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._response_mapping

    @response_mapping.setter
    def response_mapping(self, response_mapping):
        """Sets the response_mapping of this BusinessRegion.

        The response mapping of the e-invoicing business region.   # noqa: E501

        :param response_mapping: The response_mapping of this BusinessRegion.  # noqa: E501
        :type: dict(str, object)
        """

        self._response_mapping = response_mapping

    @property
    def process_type(self):
        """Gets the process_type of this BusinessRegion.  # noqa: E501

        The process type of the e-invoicing business region.   # noqa: E501

        :return: The process_type of this BusinessRegion.  # noqa: E501
        :rtype: str
        """
        return self._process_type

    @process_type.setter
    def process_type(self, process_type):
        """Sets the process_type of this BusinessRegion.

        The process type of the e-invoicing business region.   # noqa: E501

        :param process_type: The process_type of this BusinessRegion.  # noqa: E501
        :type: str
        """
        allowed_values = ["Clearance", "ClearanceWithCancellation", "PostAudit", "PEPPOLNetwork", "Unknown"]  # noqa: E501
        if process_type not in allowed_values:
            raise ValueError(
                "Invalid value for `process_type` ({0}), must be one of {1}"  # noqa: E501
                .format(process_type, allowed_values)
            )

        self._process_type = process_type

    @property
    def invoice_enabled(self):
        """Gets the invoice_enabled of this BusinessRegion.  # noqa: E501

        It will control that whether the invoice should be supported by the process type or not.   # noqa: E501

        :return: The invoice_enabled of this BusinessRegion.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_enabled

    @invoice_enabled.setter
    def invoice_enabled(self, invoice_enabled):
        """Sets the invoice_enabled of this BusinessRegion.

        It will control that whether the invoice should be supported by the process type or not.   # noqa: E501

        :param invoice_enabled: The invoice_enabled of this BusinessRegion.  # noqa: E501
        :type: bool
        """

        self._invoice_enabled = invoice_enabled

    @property
    def credit_memo_enabled(self):
        """Gets the credit_memo_enabled of this BusinessRegion.  # noqa: E501

        It will control that whether the credit memo should be supported by the process type or not.   # noqa: E501

        :return: The credit_memo_enabled of this BusinessRegion.  # noqa: E501
        :rtype: bool
        """
        return self._credit_memo_enabled

    @credit_memo_enabled.setter
    def credit_memo_enabled(self, credit_memo_enabled):
        """Sets the credit_memo_enabled of this BusinessRegion.

        It will control that whether the credit memo should be supported by the process type or not.   # noqa: E501

        :param credit_memo_enabled: The credit_memo_enabled of this BusinessRegion.  # noqa: E501
        :type: bool
        """

        self._credit_memo_enabled = credit_memo_enabled

    @property
    def debit_memo_enabled(self):
        """Gets the debit_memo_enabled of this BusinessRegion.  # noqa: E501

        It will control that whether the debit memo should be supported by the process type or not.   # noqa: E501

        :return: The debit_memo_enabled of this BusinessRegion.  # noqa: E501
        :rtype: bool
        """
        return self._debit_memo_enabled

    @debit_memo_enabled.setter
    def debit_memo_enabled(self, debit_memo_enabled):
        """Sets the debit_memo_enabled of this BusinessRegion.

        It will control that whether the debit memo should be supported by the process type or not.   # noqa: E501

        :param debit_memo_enabled: The debit_memo_enabled of this BusinessRegion.  # noqa: E501
        :type: bool
        """

        self._debit_memo_enabled = debit_memo_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BusinessRegion, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BusinessRegion):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
