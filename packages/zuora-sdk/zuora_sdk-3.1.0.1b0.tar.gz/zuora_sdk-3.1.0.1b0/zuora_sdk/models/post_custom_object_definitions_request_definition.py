# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostCustomObjectDefinitionsRequestDefinition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auditable': 'list[str]',
        'enable_create_record_auditing': 'bool',
        'enable_delete_record_auditing': 'bool',
        'filterable': 'list[str]',
        'label': 'str',
        'object': 'str',
        'properties': 'dict(str, PostCustomObjectDefinitionFieldDefinitionRequest)',
        'relationships': 'list[object]',
        'required': 'list[str]',
        'unique': 'list[str]'
    }

    attribute_map = {
        'auditable': 'auditable',
        'enable_create_record_auditing': 'enableCreateRecordAuditing',
        'enable_delete_record_auditing': 'enableDeleteRecordAuditing',
        'filterable': 'filterable',
        'label': 'label',
        'object': 'object',
        'properties': 'properties',
        'relationships': 'relationships',
        'required': 'required',
        'unique': 'unique'
    }

    def __init__(self, auditable=None, enable_create_record_auditing=False, enable_delete_record_auditing=False, filterable=None, label=None, object=None, properties=None, relationships=None, required=None, unique=None):  # noqa: E501
        """PostCustomObjectDefinitionsRequestDefinition - a model defined in Swagger"""  # noqa: E501
        self._auditable = None
        self._enable_create_record_auditing = None
        self._enable_delete_record_auditing = None
        self._filterable = None
        self._label = None
        self._object = None
        self._properties = None
        self._relationships = None
        self._required = None
        self._unique = None
        self.discriminator = None
        if auditable is not None:
            self.auditable = auditable
        if enable_create_record_auditing is not None:
            self.enable_create_record_auditing = enable_create_record_auditing
        if enable_delete_record_auditing is not None:
            self.enable_delete_record_auditing = enable_delete_record_auditing
        if filterable is not None:
            self.filterable = filterable
        self.label = label
        self.object = object
        if properties is not None:
            self.properties = properties
        if relationships is not None:
            self.relationships = relationships
        if required is not None:
            self.required = required
        if unique is not None:
            self.unique = unique

    @property
    def auditable(self):
        """Gets the auditable of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501

        The set of fields which Audit Trail tracks and records changes of. You can change auditable fields to non-auditable, and vice versa. One custom object can have a maximum of five auditable fields.  # noqa: E501

        :return: The auditable of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._auditable

    @auditable.setter
    def auditable(self, auditable):
        """Sets the auditable of this PostCustomObjectDefinitionsRequestDefinition.

        The set of fields which Audit Trail tracks and records changes of. You can change auditable fields to non-auditable, and vice versa. One custom object can have a maximum of five auditable fields.  # noqa: E501

        :param auditable: The auditable of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: list[str]
        """

        self._auditable = auditable

    @property
    def enable_create_record_auditing(self):
        """Gets the enable_create_record_auditing of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501

        Indicates whether to audit the creation of custom object records of this custom object definition.  Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record creation. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.   # noqa: E501

        :return: The enable_create_record_auditing of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._enable_create_record_auditing

    @enable_create_record_auditing.setter
    def enable_create_record_auditing(self, enable_create_record_auditing):
        """Sets the enable_create_record_auditing of this PostCustomObjectDefinitionsRequestDefinition.

        Indicates whether to audit the creation of custom object records of this custom object definition.  Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record creation. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.   # noqa: E501

        :param enable_create_record_auditing: The enable_create_record_auditing of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: bool
        """

        self._enable_create_record_auditing = enable_create_record_auditing

    @property
    def enable_delete_record_auditing(self):
        """Gets the enable_delete_record_auditing of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501

        Indicates whether to audit the deletion of custom object records of this custom object definition.  Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record deletion. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.   # noqa: E501

        :return: The enable_delete_record_auditing of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: bool
        """
        return self._enable_delete_record_auditing

    @enable_delete_record_auditing.setter
    def enable_delete_record_auditing(self, enable_delete_record_auditing):
        """Sets the enable_delete_record_auditing of this PostCustomObjectDefinitionsRequestDefinition.

        Indicates whether to audit the deletion of custom object records of this custom object definition.  Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record deletion. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.   # noqa: E501

        :param enable_delete_record_auditing: The enable_delete_record_auditing of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: bool
        """

        self._enable_delete_record_auditing = enable_delete_record_auditing

    @property
    def filterable(self):
        """Gets the filterable of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501

        The set of fields that are allowed to be queried on. Queries on non-filterable fields will be rejected. You can not change a non-filterable field to filterable.  # noqa: E501

        :return: The filterable of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._filterable

    @filterable.setter
    def filterable(self, filterable):
        """Sets the filterable of this PostCustomObjectDefinitionsRequestDefinition.

        The set of fields that are allowed to be queried on. Queries on non-filterable fields will be rejected. You can not change a non-filterable field to filterable.  # noqa: E501

        :param filterable: The filterable of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: list[str]
        """

        self._filterable = filterable

    @property
    def label(self):
        """Gets the label of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501

        A UI label for the custom object  # noqa: E501

        :return: The label of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PostCustomObjectDefinitionsRequestDefinition.

        A UI label for the custom object  # noqa: E501

        :param label: The label of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def object(self):
        """Gets the object of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501

        The API name of the custom object  # noqa: E501

        :return: The object of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this PostCustomObjectDefinitionsRequestDefinition.

        The API name of the custom object  # noqa: E501

        :param object: The object of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def properties(self):
        """Gets the properties of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501


        :return: The properties of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: dict(str, PostCustomObjectDefinitionFieldDefinitionRequest)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this PostCustomObjectDefinitionsRequestDefinition.


        :param properties: The properties of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: dict(str, PostCustomObjectDefinitionFieldDefinitionRequest)
        """

        self._properties = properties

    @property
    def relationships(self):
        """Gets the relationships of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501

        An array of relationships with Zuora objects or other custom objects. You can add at most 2 `manyToOne` relationships when creating a custom field definition.  # noqa: E501

        :return: The relationships of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: list[object]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships):
        """Sets the relationships of this PostCustomObjectDefinitionsRequestDefinition.

        An array of relationships with Zuora objects or other custom objects. You can add at most 2 `manyToOne` relationships when creating a custom field definition.  # noqa: E501

        :param relationships: The relationships of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: list[object]
        """

        self._relationships = relationships

    @property
    def required(self):
        """Gets the required of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501

        The required fields of the custom object. You can change required fields to optional. However, you can only change optional fields to required on the custom objects with no records.  # noqa: E501

        :return: The required of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this PostCustomObjectDefinitionsRequestDefinition.

        The required fields of the custom object. You can change required fields to optional. However, you can only change optional fields to required on the custom objects with no records.  # noqa: E501

        :param required: The required of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: list[str]
        """

        self._required = required

    @property
    def unique(self):
        """Gets the unique of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501

        The fields with unique constraints. You can remove the unique constraint on a field. However, you can only add a unique constraint to a filterable field if the custom object contains no record. One custom object can have a maximum of five fields with unique constraints.  # noqa: E501

        :return: The unique of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :rtype: list[str]
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this PostCustomObjectDefinitionsRequestDefinition.

        The fields with unique constraints. You can remove the unique constraint on a field. However, you can only add a unique constraint to a filterable field if the custom object contains no record. One custom object can have a maximum of five fields with unique constraints.  # noqa: E501

        :param unique: The unique of this PostCustomObjectDefinitionsRequestDefinition.  # noqa: E501
        :type: list[str]
        """

        self._unique = unique

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostCustomObjectDefinitionsRequestDefinition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostCustomObjectDefinitionsRequestDefinition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
