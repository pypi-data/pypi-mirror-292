# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateCustomObjectCusotmField(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auditable': 'bool',
        'definition': 'CustomObjectCustomFieldDefinitionUpdate',
        'filterable': 'bool',
        'name': 'str',
        'required': 'bool',
        'target_name': 'str',
        'unique': 'bool'
    }

    attribute_map = {
        'auditable': 'auditable',
        'definition': 'definition',
        'filterable': 'filterable',
        'name': 'name',
        'required': 'required',
        'target_name': 'targetName',
        'unique': 'unique'
    }

    def __init__(self, auditable=None, definition=None, filterable=None, name=None, required=None, target_name=None, unique=None):  # noqa: E501
        """UpdateCustomObjectCusotmField - a model defined in Swagger"""  # noqa: E501
        self._auditable = None
        self._definition = None
        self._filterable = None
        self._name = None
        self._required = None
        self._target_name = None
        self._unique = None
        self.discriminator = None
        if auditable is not None:
            self.auditable = auditable
        if definition is not None:
            self.definition = definition
        if filterable is not None:
            self.filterable = filterable
        if name is not None:
            self.name = name
        if required is not None:
            self.required = required
        if target_name is not None:
            self.target_name = target_name
        if unique is not None:
            self.unique = unique

    @property
    def auditable(self):
        """Gets the auditable of this UpdateCustomObjectCusotmField.  # noqa: E501

        Indicates whether Audit Trail will record changes of this custom field. You can change auditable fields to non-auditable, and vice versa. One custom object can have a maximum of five auditable fields.   # noqa: E501

        :return: The auditable of this UpdateCustomObjectCusotmField.  # noqa: E501
        :rtype: bool
        """
        return self._auditable

    @auditable.setter
    def auditable(self, auditable):
        """Sets the auditable of this UpdateCustomObjectCusotmField.

        Indicates whether Audit Trail will record changes of this custom field. You can change auditable fields to non-auditable, and vice versa. One custom object can have a maximum of five auditable fields.   # noqa: E501

        :param auditable: The auditable of this UpdateCustomObjectCusotmField.  # noqa: E501
        :type: bool
        """

        self._auditable = auditable

    @property
    def definition(self):
        """Gets the definition of this UpdateCustomObjectCusotmField.  # noqa: E501


        :return: The definition of this UpdateCustomObjectCusotmField.  # noqa: E501
        :rtype: CustomObjectCustomFieldDefinitionUpdate
        """
        return self._definition

    @definition.setter
    def definition(self, definition):
        """Sets the definition of this UpdateCustomObjectCusotmField.


        :param definition: The definition of this UpdateCustomObjectCusotmField.  # noqa: E501
        :type: CustomObjectCustomFieldDefinitionUpdate
        """

        self._definition = definition

    @property
    def filterable(self):
        """Gets the filterable of this UpdateCustomObjectCusotmField.  # noqa: E501

        Indicates whether the field is filterable or not. Applicable to `addField` and `updateField` actions.  You can change a filterable field to non-filterable and vice versa. You can also add a filterable field. One custom object can have a maximum of 10 filterable fields.  Note that changing filterable fields triggers reindexing. It will take 12-24 hours before all your data are reindexed and available to query.   # noqa: E501

        :return: The filterable of this UpdateCustomObjectCusotmField.  # noqa: E501
        :rtype: bool
        """
        return self._filterable

    @filterable.setter
    def filterable(self, filterable):
        """Sets the filterable of this UpdateCustomObjectCusotmField.

        Indicates whether the field is filterable or not. Applicable to `addField` and `updateField` actions.  You can change a filterable field to non-filterable and vice versa. You can also add a filterable field. One custom object can have a maximum of 10 filterable fields.  Note that changing filterable fields triggers reindexing. It will take 12-24 hours before all your data are reindexed and available to query.   # noqa: E501

        :param filterable: The filterable of this UpdateCustomObjectCusotmField.  # noqa: E501
        :type: bool
        """

        self._filterable = filterable

    @property
    def name(self):
        """Gets the name of this UpdateCustomObjectCusotmField.  # noqa: E501

        The name of the custom field to be updated  # noqa: E501

        :return: The name of this UpdateCustomObjectCusotmField.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCustomObjectCusotmField.

        The name of the custom field to be updated  # noqa: E501

        :param name: The name of this UpdateCustomObjectCusotmField.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def required(self):
        """Gets the required of this UpdateCustomObjectCusotmField.  # noqa: E501

        Indicates whether the field is required or optional.  You can update a required field to optional. On the other hand, you can only update an optional field to required on the custom object with no records.  You can only add a required field to the custom object with no records.   # noqa: E501

        :return: The required of this UpdateCustomObjectCusotmField.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this UpdateCustomObjectCusotmField.

        Indicates whether the field is required or optional.  You can update a required field to optional. On the other hand, you can only update an optional field to required on the custom object with no records.  You can only add a required field to the custom object with no records.   # noqa: E501

        :param required: The required of this UpdateCustomObjectCusotmField.  # noqa: E501
        :type: bool
        """

        self._required = required

    @property
    def target_name(self):
        """Gets the target_name of this UpdateCustomObjectCusotmField.  # noqa: E501

        Required if the `type` of the action is `renameField`  # noqa: E501

        :return: The target_name of this UpdateCustomObjectCusotmField.  # noqa: E501
        :rtype: str
        """
        return self._target_name

    @target_name.setter
    def target_name(self, target_name):
        """Sets the target_name of this UpdateCustomObjectCusotmField.

        Required if the `type` of the action is `renameField`  # noqa: E501

        :param target_name: The target_name of this UpdateCustomObjectCusotmField.  # noqa: E501
        :type: str
        """

        self._target_name = target_name

    @property
    def unique(self):
        """Gets the unique of this UpdateCustomObjectCusotmField.  # noqa: E501

        Indicates whether to specify a unique constraint to the field. You can remove the unique constraint on the field. However, you can only add a unique constraint to a filterable field if the custom object contains no record. One custom object can have a maximum of five fields with unique constraints.   # noqa: E501

        :return: The unique of this UpdateCustomObjectCusotmField.  # noqa: E501
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this UpdateCustomObjectCusotmField.

        Indicates whether to specify a unique constraint to the field. You can remove the unique constraint on the field. However, you can only add a unique constraint to a filterable field if the custom object contains no record. One custom object can have a maximum of five fields with unique constraints.   # noqa: E501

        :param unique: The unique of this UpdateCustomObjectCusotmField.  # noqa: E501
        :type: bool
        """

        self._unique = unique

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateCustomObjectCusotmField, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateCustomObjectCusotmField):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
