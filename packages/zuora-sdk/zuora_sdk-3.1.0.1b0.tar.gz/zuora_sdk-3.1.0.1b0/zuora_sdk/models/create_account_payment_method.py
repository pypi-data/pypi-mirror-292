# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateAccountPaymentMethod(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'account_key': 'str',
        'auth_gateway': 'str',
        'ip_address': 'str',
        'make_default': 'bool',
        'address_line1': 'str',
        'address_line2': 'str',
        'bank_aba_code': 'str',
        'bank_account_name': 'str',
        'bank_account_number': 'str',
        'bank_account_mask_number': 'str',
        'bank_account_type': 'PaymentMethodACHBankAccountType',
        'bank_name': 'str',
        'city': 'str',
        'country': 'str',
        'phone': 'str',
        'state': 'str',
        'zip_code': 'str',
        'iban': 'str',
        'account_holder_info': 'CreatePaymentMethodBankTransferAccountHolderInfo',
        'account_number': 'str',
        'bank_code': 'str',
        'branch_code': 'str',
        'business_identification_code': 'str',
        'currency_code': 'str',
        'identity_number': 'str',
        'card_holder_info': 'CreatePaymentMethodCardholderInfo',
        'card_number': 'str',
        'card_mask_number': 'str',
        'card_type': 'str',
        'check_duplicated': 'bool',
        'expiration_month': 'int',
        'expiration_year': 'int',
        'mit_consent_agreement_ref': 'str',
        'mit_consent_agreement_src': 'StoredCredentialProfileConsentAgreementSrc',
        'mit_network_transaction_id': 'str',
        'mit_profile_action': 'StoredCredentialProfileAction',
        'mit_profile_agreed_on': 'date',
        'mit_profile_type': 'StoredCredentialProfileType',
        'security_code': 'str',
        'credit_card_mask_number': 'str',
        'second_token_id': 'str',
        'token_id': 'str',
        'baid': 'str',
        'email': 'str',
        'preapproval_key': 'str',
        'apple_payment_data': 'str',
        'google_payment_token': 'str'
    }

    attribute_map = {
        'type': 'type',
        'account_key': 'accountKey',
        'auth_gateway': 'authGateway',
        'ip_address': 'ipAddress',
        'make_default': 'makeDefault',
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'bank_aba_code': 'bankABACode',
        'bank_account_name': 'bankAccountName',
        'bank_account_number': 'bankAccountNumber',
        'bank_account_mask_number': 'bankAccountMaskNumber',
        'bank_account_type': 'bankAccountType',
        'bank_name': 'bankName',
        'city': 'city',
        'country': 'country',
        'phone': 'phone',
        'state': 'state',
        'zip_code': 'zipCode',
        'iban': 'IBAN',
        'account_holder_info': 'accountHolderInfo',
        'account_number': 'accountNumber',
        'bank_code': 'bankCode',
        'branch_code': 'branchCode',
        'business_identification_code': 'businessIdentificationCode',
        'currency_code': 'currencyCode',
        'identity_number': 'identityNumber',
        'card_holder_info': 'cardHolderInfo',
        'card_number': 'cardNumber',
        'card_mask_number': 'cardMaskNumber',
        'card_type': 'cardType',
        'check_duplicated': 'checkDuplicated',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'mit_consent_agreement_ref': 'mitConsentAgreementRef',
        'mit_consent_agreement_src': 'mitConsentAgreementSrc',
        'mit_network_transaction_id': 'mitNetworkTransactionId',
        'mit_profile_action': 'mitProfileAction',
        'mit_profile_agreed_on': 'mitProfileAgreedOn',
        'mit_profile_type': 'mitProfileType',
        'security_code': 'securityCode',
        'credit_card_mask_number': 'creditCardMaskNumber',
        'second_token_id': 'secondTokenId',
        'token_id': 'tokenId',
        'baid': 'BAID',
        'email': 'email',
        'preapproval_key': 'preapprovalKey',
        'apple_payment_data': 'applePaymentData',
        'google_payment_token': 'googlePaymentToken'
    }

    def __init__(self, type=None, account_key=None, auth_gateway=None, ip_address=None, make_default=False, address_line1=None, address_line2=None, bank_aba_code=None, bank_account_name=None, bank_account_number=None, bank_account_mask_number=None, bank_account_type=None, bank_name=None, city=None, country=None, phone=None, state=None, zip_code=None, iban=None, account_holder_info=None, account_number=None, bank_code=None, branch_code=None, business_identification_code=None, currency_code=None, identity_number=None, card_holder_info=None, card_number=None, card_mask_number=None, card_type=None, check_duplicated=None, expiration_month=None, expiration_year=None, mit_consent_agreement_ref=None, mit_consent_agreement_src=None, mit_network_transaction_id=None, mit_profile_action=None, mit_profile_agreed_on=None, mit_profile_type=None, security_code=None, credit_card_mask_number=None, second_token_id=None, token_id=None, baid=None, email=None, preapproval_key=None, apple_payment_data=None, google_payment_token=None):  # noqa: E501
        """CreateAccountPaymentMethod - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._account_key = None
        self._auth_gateway = None
        self._ip_address = None
        self._make_default = None
        self._address_line1 = None
        self._address_line2 = None
        self._bank_aba_code = None
        self._bank_account_name = None
        self._bank_account_number = None
        self._bank_account_mask_number = None
        self._bank_account_type = None
        self._bank_name = None
        self._city = None
        self._country = None
        self._phone = None
        self._state = None
        self._zip_code = None
        self._iban = None
        self._account_holder_info = None
        self._account_number = None
        self._bank_code = None
        self._branch_code = None
        self._business_identification_code = None
        self._currency_code = None
        self._identity_number = None
        self._card_holder_info = None
        self._card_number = None
        self._card_mask_number = None
        self._card_type = None
        self._check_duplicated = None
        self._expiration_month = None
        self._expiration_year = None
        self._mit_consent_agreement_ref = None
        self._mit_consent_agreement_src = None
        self._mit_network_transaction_id = None
        self._mit_profile_action = None
        self._mit_profile_agreed_on = None
        self._mit_profile_type = None
        self._security_code = None
        self._credit_card_mask_number = None
        self._second_token_id = None
        self._token_id = None
        self._baid = None
        self._email = None
        self._preapproval_key = None
        self._apple_payment_data = None
        self._google_payment_token = None
        self.discriminator = None
        self.type = type
        if account_key is not None:
            self.account_key = account_key
        if auth_gateway is not None:
            self.auth_gateway = auth_gateway
        if ip_address is not None:
            self.ip_address = ip_address
        if make_default is not None:
            self.make_default = make_default
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if bank_aba_code is not None:
            self.bank_aba_code = bank_aba_code
        if bank_account_name is not None:
            self.bank_account_name = bank_account_name
        if bank_account_number is not None:
            self.bank_account_number = bank_account_number
        if bank_account_mask_number is not None:
            self.bank_account_mask_number = bank_account_mask_number
        if bank_account_type is not None:
            self.bank_account_type = bank_account_type
        if bank_name is not None:
            self.bank_name = bank_name
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if phone is not None:
            self.phone = phone
        if state is not None:
            self.state = state
        if zip_code is not None:
            self.zip_code = zip_code
        if iban is not None:
            self.iban = iban
        if account_holder_info is not None:
            self.account_holder_info = account_holder_info
        if account_number is not None:
            self.account_number = account_number
        if bank_code is not None:
            self.bank_code = bank_code
        if branch_code is not None:
            self.branch_code = branch_code
        if business_identification_code is not None:
            self.business_identification_code = business_identification_code
        if currency_code is not None:
            self.currency_code = currency_code
        if identity_number is not None:
            self.identity_number = identity_number
        if card_holder_info is not None:
            self.card_holder_info = card_holder_info
        if card_number is not None:
            self.card_number = card_number
        if card_mask_number is not None:
            self.card_mask_number = card_mask_number
        if card_type is not None:
            self.card_type = card_type
        if check_duplicated is not None:
            self.check_duplicated = check_duplicated
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        if mit_consent_agreement_ref is not None:
            self.mit_consent_agreement_ref = mit_consent_agreement_ref
        if mit_consent_agreement_src is not None:
            self.mit_consent_agreement_src = mit_consent_agreement_src
        if mit_network_transaction_id is not None:
            self.mit_network_transaction_id = mit_network_transaction_id
        if mit_profile_action is not None:
            self.mit_profile_action = mit_profile_action
        if mit_profile_agreed_on is not None:
            self.mit_profile_agreed_on = mit_profile_agreed_on
        if mit_profile_type is not None:
            self.mit_profile_type = mit_profile_type
        if security_code is not None:
            self.security_code = security_code
        if credit_card_mask_number is not None:
            self.credit_card_mask_number = credit_card_mask_number
        if second_token_id is not None:
            self.second_token_id = second_token_id
        if token_id is not None:
            self.token_id = token_id
        if baid is not None:
            self.baid = baid
        if email is not None:
            self.email = email
        if preapproval_key is not None:
            self.preapproval_key = preapproval_key
        if apple_payment_data is not None:
            self.apple_payment_data = apple_payment_data
        if google_payment_token is not None:
            self.google_payment_token = google_payment_token

    @property
    def type(self):
        """Gets the type of this CreateAccountPaymentMethod.  # noqa: E501

        Type of payment method. Possible values include:  * `CreditCard` - Credit card payment method. * `CreditCardReferenceTransaction` - Credit Card Reference Transaction. See [Supported payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Supported_Payment_Methods) for payment gateways that support this type of payment method. * `ACH` - ACH payment method. * `SEPA` - Single Euro Payments Area. * `Betalingsservice` - Direct Debit DK. * `Autogiro` - Direct Debit SE. * `Bacs` - Direct Debit UK. * `Becs` - Direct Entry AU. * `Becsnz` - Direct Debit NZ. * `PAD` - Pre-Authorized Debit. * `PayPalCP` - PayPal Commerce Platform payment method. Use this type if you are using a [PayPal Commerce Platform Gateway](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Commerce_Platform_Gateway) instance. * `PayPalEC` - PayPal Express Checkout payment method. Use this type if you are using a [PayPal Payflow Pro Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Payflow_Pro%2C_Website_Payments_Payflow_Edition%2C_Website_Pro_Payment_Gateway) instance. * `PayPalNativeEC` - PayPal Native Express Checkout payment method. Use this type if you are using a [PayPal Express Checkout Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Express_Checkout_Gateway) instance. * `PayPalAdaptive` - PayPal Adaptive payment method. Use this type if you are using a [PayPal Adaptive Payment Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Adaptive_Payments_Gateway) instance. * `AdyenApplePay` - Apple Pay on Adyen Integration v2.0. See [Set up Adyen Apple Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Apple_Pay_on_Web/Set_up_Adyen_Apple_Pay) for details. * `AdyenGooglePay` - Google Pay on Adyen Integration v2.0. See [Set up Adyen Google Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Adyen_Google_Pay) for details. * `GooglePay` - Google Pay on Chase Paymentech Orbital gateway integration. See [Set up Google Pay on Chase](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Google_Pay_on_Chase) for details. * You can also specify a custom payment method type. See [Set up custom payment gateways and payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/MB_Set_up_custom_payment_gateways_and_payment_methods) for details.   # noqa: E501

        :return: The type of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateAccountPaymentMethod.

        Type of payment method. Possible values include:  * `CreditCard` - Credit card payment method. * `CreditCardReferenceTransaction` - Credit Card Reference Transaction. See [Supported payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Supported_Payment_Methods) for payment gateways that support this type of payment method. * `ACH` - ACH payment method. * `SEPA` - Single Euro Payments Area. * `Betalingsservice` - Direct Debit DK. * `Autogiro` - Direct Debit SE. * `Bacs` - Direct Debit UK. * `Becs` - Direct Entry AU. * `Becsnz` - Direct Debit NZ. * `PAD` - Pre-Authorized Debit. * `PayPalCP` - PayPal Commerce Platform payment method. Use this type if you are using a [PayPal Commerce Platform Gateway](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Commerce_Platform_Gateway) instance. * `PayPalEC` - PayPal Express Checkout payment method. Use this type if you are using a [PayPal Payflow Pro Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Payflow_Pro%2C_Website_Payments_Payflow_Edition%2C_Website_Pro_Payment_Gateway) instance. * `PayPalNativeEC` - PayPal Native Express Checkout payment method. Use this type if you are using a [PayPal Express Checkout Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Express_Checkout_Gateway) instance. * `PayPalAdaptive` - PayPal Adaptive payment method. Use this type if you are using a [PayPal Adaptive Payment Gateway](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways/PayPal_Adaptive_Payments_Gateway) instance. * `AdyenApplePay` - Apple Pay on Adyen Integration v2.0. See [Set up Adyen Apple Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Apple_Pay_on_Web/Set_up_Adyen_Apple_Pay) for details. * `AdyenGooglePay` - Google Pay on Adyen Integration v2.0. See [Set up Adyen Google Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Adyen_Google_Pay) for details. * `GooglePay` - Google Pay on Chase Paymentech Orbital gateway integration. See [Set up Google Pay on Chase](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Google_Pay_on_Chase) for details. * You can also specify a custom payment method type. See [Set up custom payment gateways and payment methods](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/MB_Set_up_custom_payment_gateways_and_payment_methods) for details.   # noqa: E501

        :param type: The type of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def account_key(self):
        """Gets the account_key of this CreateAccountPaymentMethod.  # noqa: E501

        Internal ID of the customer account that will own the payment method.   # noqa: E501

        :return: The account_key of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this CreateAccountPaymentMethod.

        Internal ID of the customer account that will own the payment method.   # noqa: E501

        :param account_key: The account_key of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._account_key = account_key

    @property
    def auth_gateway(self):
        """Gets the auth_gateway of this CreateAccountPaymentMethod.  # noqa: E501

        Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.   # noqa: E501

        :return: The auth_gateway of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._auth_gateway

    @auth_gateway.setter
    def auth_gateway(self, auth_gateway):
        """Sets the auth_gateway of this CreateAccountPaymentMethod.

        Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.   # noqa: E501

        :param auth_gateway: The auth_gateway of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._auth_gateway = auth_gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this CreateAccountPaymentMethod.  # noqa: E501

        The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways.   If the IP address length is beyond 45 characters, a validation error occurs.  For validating SEPA payment methods on Stripe v2, this field is required.   # noqa: E501

        :return: The ip_address of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this CreateAccountPaymentMethod.

        The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways.   If the IP address length is beyond 45 characters, a validation error occurs.  For validating SEPA payment methods on Stripe v2, this field is required.   # noqa: E501

        :param ip_address: The ip_address of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def make_default(self):
        """Gets the make_default of this CreateAccountPaymentMethod.  # noqa: E501

        Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.   # noqa: E501

        :return: The make_default of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._make_default

    @make_default.setter
    def make_default(self, make_default):
        """Sets the make_default of this CreateAccountPaymentMethod.

        Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.   # noqa: E501

        :param make_default: The make_default of this CreateAccountPaymentMethod.  # noqa: E501
        :type: bool
        """

        self._make_default = make_default

    @property
    def address_line1(self):
        """Gets the address_line1 of this CreateAccountPaymentMethod.  # noqa: E501

        First address line, 255 characters or less.   # noqa: E501

        :return: The address_line1 of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CreateAccountPaymentMethod.

        First address line, 255 characters or less.   # noqa: E501

        :param address_line1: The address_line1 of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CreateAccountPaymentMethod.  # noqa: E501

        Second address line, 255 characters or less.   # noqa: E501

        :return: The address_line2 of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CreateAccountPaymentMethod.

        Second address line, 255 characters or less.   # noqa: E501

        :param address_line2: The address_line2 of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def bank_aba_code(self):
        """Gets the bank_aba_code of this CreateAccountPaymentMethod.  # noqa: E501

        The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :return: The bank_aba_code of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_aba_code

    @bank_aba_code.setter
    def bank_aba_code(self, bank_aba_code):
        """Sets the bank_aba_code of this CreateAccountPaymentMethod.

        The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :param bank_aba_code: The bank_aba_code of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._bank_aba_code = bank_aba_code

    @property
    def bank_account_name(self):
        """Gets the bank_account_name of this CreateAccountPaymentMethod.  # noqa: E501

        The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.  For ACH payment methods on the BlueSnap integration, see [Overview of BlueSnap gateway integration](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways/BlueSnap_Gateway/Overview_of_BlueSnap_gateway_integration#Payer_Name_Extraction) for more information about how Zuora splits the string in this field into two parts and passes them to BlueSnap's `firstName` and `lastName` fields.   # noqa: E501

        :return: The bank_account_name of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_name

    @bank_account_name.setter
    def bank_account_name(self, bank_account_name):
        """Sets the bank_account_name of this CreateAccountPaymentMethod.

        The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.  For ACH payment methods on the BlueSnap integration, see [Overview of BlueSnap gateway integration](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways/BlueSnap_Gateway/Overview_of_BlueSnap_gateway_integration#Payer_Name_Extraction) for more information about how Zuora splits the string in this field into two parts and passes them to BlueSnap's `firstName` and `lastName` fields.   # noqa: E501

        :param bank_account_name: The bank_account_name of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._bank_account_name = bank_account_name

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this CreateAccountPaymentMethod.  # noqa: E501

        The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`. However, for creating tokenized ACH payment methods on  Stripe v2, this field is optional if the `tokens` and `bankAccountMaskNumber` fields are specified.   # noqa: E501

        :return: The bank_account_number of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this CreateAccountPaymentMethod.

        The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`. However, for creating tokenized ACH payment methods on  Stripe v2, this field is optional if the `tokens` and `bankAccountMaskNumber` fields are specified.   # noqa: E501

        :param bank_account_number: The bank_account_number of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_account_mask_number(self):
        """Gets the bank_account_mask_number of this CreateAccountPaymentMethod.  # noqa: E501

        The masked bank account number associated with the ACH payment. This field is only required if the ACH payment method is created using tokens.   # noqa: E501

        :return: The bank_account_mask_number of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_mask_number

    @bank_account_mask_number.setter
    def bank_account_mask_number(self, bank_account_mask_number):
        """Sets the bank_account_mask_number of this CreateAccountPaymentMethod.

        The masked bank account number associated with the ACH payment. This field is only required if the ACH payment method is created using tokens.   # noqa: E501

        :param bank_account_mask_number: The bank_account_mask_number of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._bank_account_mask_number = bank_account_mask_number

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this CreateAccountPaymentMethod.  # noqa: E501


        :return: The bank_account_type of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: PaymentMethodACHBankAccountType
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this CreateAccountPaymentMethod.


        :param bank_account_type: The bank_account_type of this CreateAccountPaymentMethod.  # noqa: E501
        :type: PaymentMethodACHBankAccountType
        """

        self._bank_account_type = bank_account_type

    @property
    def bank_name(self):
        """Gets the bank_name of this CreateAccountPaymentMethod.  # noqa: E501

        The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`.  When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.   # noqa: E501

        :return: The bank_name of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this CreateAccountPaymentMethod.

        The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`.  When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.   # noqa: E501

        :param bank_name: The bank_name of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def city(self):
        """Gets the city of this CreateAccountPaymentMethod.  # noqa: E501

        City, 40 characters or less.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.        # noqa: E501

        :return: The city of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CreateAccountPaymentMethod.

        City, 40 characters or less.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.        # noqa: E501

        :param city: The city of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this CreateAccountPaymentMethod.  # noqa: E501

        Country, must be a valid country name or abbreviation.  See [Country Names and Their ISO Standard 2- and 3-Digit Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes) for the list of supported country names and abbreviations.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.   # noqa: E501

        :return: The country of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CreateAccountPaymentMethod.

        Country, must be a valid country name or abbreviation.  See [Country Names and Their ISO Standard 2- and 3-Digit Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes) for the list of supported country names and abbreviations.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.   # noqa: E501

        :param country: The country of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def phone(self):
        """Gets the phone of this CreateAccountPaymentMethod.  # noqa: E501

        Phone number, 40 characters or less.   # noqa: E501

        :return: The phone of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CreateAccountPaymentMethod.

        Phone number, 40 characters or less.   # noqa: E501

        :param phone: The phone of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def state(self):
        """Gets the state of this CreateAccountPaymentMethod.  # noqa: E501

        State, must be a valid state name or 2-character abbreviation.  See [United States Standard State Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes) and [Canadian Standard Province Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/C_Canadian_Province_Names_and_2-Digit_Codes) for the list of supported names and abbreviations.   # noqa: E501

        :return: The state of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreateAccountPaymentMethod.

        State, must be a valid state name or 2-character abbreviation.  See [United States Standard State Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes) and [Canadian Standard Province Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/C_Canadian_Province_Names_and_2-Digit_Codes) for the list of supported names and abbreviations.   # noqa: E501

        :param state: The state of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip_code(self):
        """Gets the zip_code of this CreateAccountPaymentMethod.  # noqa: E501

        Zip code, 20 characters or less.   # noqa: E501

        :return: The zip_code of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this CreateAccountPaymentMethod.

        Zip code, 20 characters or less.   # noqa: E501

        :param zip_code: The zip_code of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def iban(self):
        """Gets the iban of this CreateAccountPaymentMethod.  # noqa: E501

        The International Bank Account Number. This field is required if the `type` field is set to `SEPA`.   # noqa: E501

        :return: The iban of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this CreateAccountPaymentMethod.

        The International Bank Account Number. This field is required if the `type` field is set to `SEPA`.   # noqa: E501

        :param iban: The iban of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def account_holder_info(self):
        """Gets the account_holder_info of this CreateAccountPaymentMethod.  # noqa: E501


        :return: The account_holder_info of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: CreatePaymentMethodBankTransferAccountHolderInfo
        """
        return self._account_holder_info

    @account_holder_info.setter
    def account_holder_info(self, account_holder_info):
        """Sets the account_holder_info of this CreateAccountPaymentMethod.


        :param account_holder_info: The account_holder_info of this CreateAccountPaymentMethod.  # noqa: E501
        :type: CreatePaymentMethodBankTransferAccountHolderInfo
        """

        self._account_holder_info = account_holder_info

    @property
    def account_number(self):
        """Gets the account_number of this CreateAccountPaymentMethod.  # noqa: E501

        The number of the customer's bank account. This field is required for the following bank transfer payment methods:   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :return: The account_number of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateAccountPaymentMethod.

        The number of the customer's bank account. This field is required for the following bank transfer payment methods:   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :param account_number: The account_number of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def bank_code(self):
        """Gets the bank_code of this CreateAccountPaymentMethod.  # noqa: E501

        The sort code or number that identifies the bank. This is also known as the sort code. This field is required for the following bank transfer payment methods:   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :return: The bank_code of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this CreateAccountPaymentMethod.

        The sort code or number that identifies the bank. This is also known as the sort code. This field is required for the following bank transfer payment methods:   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :param bank_code: The bank_code of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def branch_code(self):
        """Gets the branch_code of this CreateAccountPaymentMethod.  # noqa: E501

        The branch code of the bank used for direct debit. This field is required for the following bank transfer payment methods:   - Sweden Direct Debit (`Autogiro`)   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :return: The branch_code of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code):
        """Sets the branch_code of this CreateAccountPaymentMethod.

        The branch code of the bank used for direct debit. This field is required for the following bank transfer payment methods:   - Sweden Direct Debit (`Autogiro`)   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :param branch_code: The branch_code of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._branch_code = branch_code

    @property
    def business_identification_code(self):
        """Gets the business_identification_code of this CreateAccountPaymentMethod.  # noqa: E501

        The BIC code used for SEPA.   # noqa: E501

        :return: The business_identification_code of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._business_identification_code

    @business_identification_code.setter
    def business_identification_code(self, business_identification_code):
        """Sets the business_identification_code of this CreateAccountPaymentMethod.

        The BIC code used for SEPA.   # noqa: E501

        :param business_identification_code: The business_identification_code of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._business_identification_code = business_identification_code

    @property
    def currency_code(self):
        """Gets the currency_code of this CreateAccountPaymentMethod.  # noqa: E501

        The currency used for payment method authorization.  If this field is not specified, `currency` specified for the account is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :return: The currency_code of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CreateAccountPaymentMethod.

        The currency used for payment method authorization.  If this field is not specified, `currency` specified for the account is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :param currency_code: The currency_code of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def identity_number(self):
        """Gets the identity_number of this CreateAccountPaymentMethod.  # noqa: E501

        The identity number of the customer. This field is required for the following bank transfer payment methods:   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`)   # noqa: E501

        :return: The identity_number of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._identity_number

    @identity_number.setter
    def identity_number(self, identity_number):
        """Sets the identity_number of this CreateAccountPaymentMethod.

        The identity number of the customer. This field is required for the following bank transfer payment methods:   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`)   # noqa: E501

        :param identity_number: The identity_number of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._identity_number = identity_number

    @property
    def card_holder_info(self):
        """Gets the card_holder_info of this CreateAccountPaymentMethod.  # noqa: E501


        :return: The card_holder_info of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: CreatePaymentMethodCardholderInfo
        """
        return self._card_holder_info

    @card_holder_info.setter
    def card_holder_info(self, card_holder_info):
        """Sets the card_holder_info of this CreateAccountPaymentMethod.


        :param card_holder_info: The card_holder_info of this CreateAccountPaymentMethod.  # noqa: E501
        :type: CreatePaymentMethodCardholderInfo
        """

        self._card_holder_info = card_holder_info

    @property
    def card_number(self):
        """Gets the card_number of this CreateAccountPaymentMethod.  # noqa: E501

        Credit card number. This field is required if `type` is set to `CreditCard`. However, for creating tokenized credit card payment methods,  this field is optional if the `tokens` and `cardMaskNumber` fields are specified.   # noqa: E501

        :return: The card_number of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this CreateAccountPaymentMethod.

        Credit card number. This field is required if `type` is set to `CreditCard`. However, for creating tokenized credit card payment methods,  this field is optional if the `tokens` and `cardMaskNumber` fields are specified.   # noqa: E501

        :param card_number: The card_number of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def card_mask_number(self):
        """Gets the card_mask_number of this CreateAccountPaymentMethod.  # noqa: E501

        The masked card number associated with the credit card payment. This field is only required if the credit card payment method is created using tokens.    # noqa: E501

        :return: The card_mask_number of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._card_mask_number

    @card_mask_number.setter
    def card_mask_number(self, card_mask_number):
        """Sets the card_mask_number of this CreateAccountPaymentMethod.

        The masked card number associated with the credit card payment. This field is only required if the credit card payment method is created using tokens.    # noqa: E501

        :param card_mask_number: The card_mask_number of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._card_mask_number = card_mask_number

    @property
    def card_type(self):
        """Gets the card_type of this CreateAccountPaymentMethod.  # noqa: E501

        The type of the credit card. This field is required if `type` is set to `CreditCard`.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :return: The card_type of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this CreateAccountPaymentMethod.

        The type of the credit card. This field is required if `type` is set to `CreditCard`.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).   # noqa: E501

        :param card_type: The card_type of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def check_duplicated(self):
        """Gets the check_duplicated of this CreateAccountPaymentMethod.  # noqa: E501

        Indicates whether the duplication check is performed when you create a new credit card payment method. The default value is `false`.  With this field set to `true`, Zuora will check all active payment methods associated with the same billing account to ensure that no duplicate credit card payment methods are created. An error is returned if a duplicate payment method is found.          The following fields are used for the duplication check:   - `cardHolderName`   - `expirationMonth`   - `expirationYear`   - `creditCardMaskNumber`. It is the masked credit card number generated by Zuora. For example:     ```     ************1234     ```   # noqa: E501

        :return: The check_duplicated of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: bool
        """
        return self._check_duplicated

    @check_duplicated.setter
    def check_duplicated(self, check_duplicated):
        """Sets the check_duplicated of this CreateAccountPaymentMethod.

        Indicates whether the duplication check is performed when you create a new credit card payment method. The default value is `false`.  With this field set to `true`, Zuora will check all active payment methods associated with the same billing account to ensure that no duplicate credit card payment methods are created. An error is returned if a duplicate payment method is found.          The following fields are used for the duplication check:   - `cardHolderName`   - `expirationMonth`   - `expirationYear`   - `creditCardMaskNumber`. It is the masked credit card number generated by Zuora. For example:     ```     ************1234     ```   # noqa: E501

        :param check_duplicated: The check_duplicated of this CreateAccountPaymentMethod.  # noqa: E501
        :type: bool
        """

        self._check_duplicated = check_duplicated

    @property
    def expiration_month(self):
        """Gets the expiration_month of this CreateAccountPaymentMethod.  # noqa: E501

        One or two digit expiration month (1-12) of the credit card. This field is required if `type` is set to `CreditCard`. However, for creating tokenized credit card payment methods,  this field is optional if the `tokens` and `cardMaskNumber` fields are specified.   # noqa: E501

        :return: The expiration_month of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this CreateAccountPaymentMethod.

        One or two digit expiration month (1-12) of the credit card. This field is required if `type` is set to `CreditCard`. However, for creating tokenized credit card payment methods,  this field is optional if the `tokens` and `cardMaskNumber` fields are specified.   # noqa: E501

        :param expiration_month: The expiration_month of this CreateAccountPaymentMethod.  # noqa: E501
        :type: int
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this CreateAccountPaymentMethod.  # noqa: E501

        Four-digit expiration year of the credit card. This field is required if `type` is set to `CreditCard`. However, for creating tokenized credit card payment methods,  this field is optional if the `tokens` and `cardMaskNumber` fields are specified.   # noqa: E501

        :return: The expiration_year of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this CreateAccountPaymentMethod.

        Four-digit expiration year of the credit card. This field is required if `type` is set to `CreditCard`. However, for creating tokenized credit card payment methods,  this field is optional if the `tokens` and `cardMaskNumber` fields are specified.   # noqa: E501

        :param expiration_year: The expiration_year of this CreateAccountPaymentMethod.  # noqa: E501
        :type: int
        """

        self._expiration_year = expiration_year

    @property
    def mit_consent_agreement_ref(self):
        """Gets the mit_consent_agreement_ref of this CreateAccountPaymentMethod.  # noqa: E501

        Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.   # noqa: E501

        :return: The mit_consent_agreement_ref of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._mit_consent_agreement_ref

    @mit_consent_agreement_ref.setter
    def mit_consent_agreement_ref(self, mit_consent_agreement_ref):
        """Sets the mit_consent_agreement_ref of this CreateAccountPaymentMethod.

        Specifies your reference for the stored credential consent agreement that you have established with the customer. Only applicable if you set the `mitProfileAction` field.   # noqa: E501

        :param mit_consent_agreement_ref: The mit_consent_agreement_ref of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._mit_consent_agreement_ref = mit_consent_agreement_ref

    @property
    def mit_consent_agreement_src(self):
        """Gets the mit_consent_agreement_src of this CreateAccountPaymentMethod.  # noqa: E501


        :return: The mit_consent_agreement_src of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: StoredCredentialProfileConsentAgreementSrc
        """
        return self._mit_consent_agreement_src

    @mit_consent_agreement_src.setter
    def mit_consent_agreement_src(self, mit_consent_agreement_src):
        """Sets the mit_consent_agreement_src of this CreateAccountPaymentMethod.


        :param mit_consent_agreement_src: The mit_consent_agreement_src of this CreateAccountPaymentMethod.  # noqa: E501
        :type: StoredCredentialProfileConsentAgreementSrc
        """

        self._mit_consent_agreement_src = mit_consent_agreement_src

    @property
    def mit_network_transaction_id(self):
        """Gets the mit_network_transaction_id of this CreateAccountPaymentMethod.  # noqa: E501

        Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.   # noqa: E501

        :return: The mit_network_transaction_id of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._mit_network_transaction_id

    @mit_network_transaction_id.setter
    def mit_network_transaction_id(self, mit_network_transaction_id):
        """Sets the mit_network_transaction_id of this CreateAccountPaymentMethod.

        Specifies the ID of a network transaction. Only applicable if you set the `mitProfileAction` field to `Persist`.   # noqa: E501

        :param mit_network_transaction_id: The mit_network_transaction_id of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._mit_network_transaction_id = mit_network_transaction_id

    @property
    def mit_profile_action(self):
        """Gets the mit_profile_action of this CreateAccountPaymentMethod.  # noqa: E501


        :return: The mit_profile_action of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: StoredCredentialProfileAction
        """
        return self._mit_profile_action

    @mit_profile_action.setter
    def mit_profile_action(self, mit_profile_action):
        """Sets the mit_profile_action of this CreateAccountPaymentMethod.


        :param mit_profile_action: The mit_profile_action of this CreateAccountPaymentMethod.  # noqa: E501
        :type: StoredCredentialProfileAction
        """

        self._mit_profile_action = mit_profile_action

    @property
    def mit_profile_agreed_on(self):
        """Gets the mit_profile_agreed_on of this CreateAccountPaymentMethod.  # noqa: E501

        The date on which the profile is agreed. The date format is `yyyy-mm-dd`.   # noqa: E501

        :return: The mit_profile_agreed_on of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: date
        """
        return self._mit_profile_agreed_on

    @mit_profile_agreed_on.setter
    def mit_profile_agreed_on(self, mit_profile_agreed_on):
        """Sets the mit_profile_agreed_on of this CreateAccountPaymentMethod.

        The date on which the profile is agreed. The date format is `yyyy-mm-dd`.   # noqa: E501

        :param mit_profile_agreed_on: The mit_profile_agreed_on of this CreateAccountPaymentMethod.  # noqa: E501
        :type: date
        """

        self._mit_profile_agreed_on = mit_profile_agreed_on

    @property
    def mit_profile_type(self):
        """Gets the mit_profile_type of this CreateAccountPaymentMethod.  # noqa: E501


        :return: The mit_profile_type of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: StoredCredentialProfileType
        """
        return self._mit_profile_type

    @mit_profile_type.setter
    def mit_profile_type(self, mit_profile_type):
        """Sets the mit_profile_type of this CreateAccountPaymentMethod.


        :param mit_profile_type: The mit_profile_type of this CreateAccountPaymentMethod.  # noqa: E501
        :type: StoredCredentialProfileType
        """

        self._mit_profile_type = mit_profile_type

    @property
    def security_code(self):
        """Gets the security_code of this CreateAccountPaymentMethod.  # noqa: E501

        CVV or CVV2 security code of the credit card.  To ensure PCI compliance, this value is not stored and cannot be queried.   # noqa: E501

        :return: The security_code of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this CreateAccountPaymentMethod.

        CVV or CVV2 security code of the credit card.  To ensure PCI compliance, this value is not stored and cannot be queried.   # noqa: E501

        :param security_code: The security_code of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    @property
    def credit_card_mask_number(self):
        """Gets the credit_card_mask_number of this CreateAccountPaymentMethod.  # noqa: E501

        The masked credit card number, such as: ``` *********1112 ```  This field is specific for the CC Reference Transaction payment method. It is an optional field that you can use to distinguish different CC Reference Transaction payment methods.  Though there are no special restrictions on the input string, it is highly recommended to specify a card number that is masked.   # noqa: E501

        :return: The credit_card_mask_number of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_mask_number

    @credit_card_mask_number.setter
    def credit_card_mask_number(self, credit_card_mask_number):
        """Sets the credit_card_mask_number of this CreateAccountPaymentMethod.

        The masked credit card number, such as: ``` *********1112 ```  This field is specific for the CC Reference Transaction payment method. It is an optional field that you can use to distinguish different CC Reference Transaction payment methods.  Though there are no special restrictions on the input string, it is highly recommended to specify a card number that is masked.   # noqa: E501

        :param credit_card_mask_number: The credit_card_mask_number of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._credit_card_mask_number = credit_card_mask_number

    @property
    def second_token_id(self):
        """Gets the second_token_id of this CreateAccountPaymentMethod.  # noqa: E501

        A gateway unique identifier that replaces sensitive payment method data.   `secondTokenId` is conditionally required only when `tokenId` is being used to represent a gateway customer profile. `secondTokenId` is used in the CC Reference Transaction payment method.   # noqa: E501

        :return: The second_token_id of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._second_token_id

    @second_token_id.setter
    def second_token_id(self, second_token_id):
        """Sets the second_token_id of this CreateAccountPaymentMethod.

        A gateway unique identifier that replaces sensitive payment method data.   `secondTokenId` is conditionally required only when `tokenId` is being used to represent a gateway customer profile. `secondTokenId` is used in the CC Reference Transaction payment method.   # noqa: E501

        :param second_token_id: The second_token_id of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._second_token_id = second_token_id

    @property
    def token_id(self):
        """Gets the token_id of this CreateAccountPaymentMethod.  # noqa: E501

        A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. `tokenId` is required for the CC Reference Transaction payment method.  When `tokenId` is used to represent a customer profile, `secondTokenId` is conditionally required for representing the underlying tokenized payment method.  The values for the `tokenId` and `secondTokenId` fields differ for gateways. For more information, see the Knowledge Center article specific to each gateway that supports the CC Reference Transaction payment method.  **Note:** When creating an ACH payment method, if you need to pass in tokenized information, use the `mandateId` instead of `tokenId` field.   # noqa: E501

        :return: The token_id of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this CreateAccountPaymentMethod.

        A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile. `tokenId` is required for the CC Reference Transaction payment method.  When `tokenId` is used to represent a customer profile, `secondTokenId` is conditionally required for representing the underlying tokenized payment method.  The values for the `tokenId` and `secondTokenId` fields differ for gateways. For more information, see the Knowledge Center article specific to each gateway that supports the CC Reference Transaction payment method.  **Note:** When creating an ACH payment method, if you need to pass in tokenized information, use the `mandateId` instead of `tokenId` field.   # noqa: E501

        :param token_id: The token_id of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def baid(self):
        """Gets the baid of this CreateAccountPaymentMethod.  # noqa: E501

        ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.   # noqa: E501

        :return: The baid of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._baid

    @baid.setter
    def baid(self, baid):
        """Sets the baid of this CreateAccountPaymentMethod.

        ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.   # noqa: E501

        :param baid: The baid of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._baid = baid

    @property
    def email(self):
        """Gets the email of this CreateAccountPaymentMethod.  # noqa: E501

        Email address associated with the payment method. This field is supported for the following payment methods:   - PayPal payment methods. This field is required for creating any of the following PayPal payment methods.     - PayPal Express Checkout     - PayPal Adaptive     - PayPal Commerce Platform   - Apple Pay and Google Pay payment methods on Adyen v2.0. This field will be passed to Adyen as `shopperEmail`.   # noqa: E501

        :return: The email of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this CreateAccountPaymentMethod.

        Email address associated with the payment method. This field is supported for the following payment methods:   - PayPal payment methods. This field is required for creating any of the following PayPal payment methods.     - PayPal Express Checkout     - PayPal Adaptive     - PayPal Commerce Platform   - Apple Pay and Google Pay payment methods on Adyen v2.0. This field will be passed to Adyen as `shopperEmail`.   # noqa: E501

        :param email: The email of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def preapproval_key(self):
        """Gets the preapproval_key of this CreateAccountPaymentMethod.  # noqa: E501

        The PayPal preapproval key.   # noqa: E501

        :return: The preapproval_key of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._preapproval_key

    @preapproval_key.setter
    def preapproval_key(self, preapproval_key):
        """Sets the preapproval_key of this CreateAccountPaymentMethod.

        The PayPal preapproval key.   # noqa: E501

        :param preapproval_key: The preapproval_key of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._preapproval_key = preapproval_key

    @property
    def apple_payment_data(self):
        """Gets the apple_payment_data of this CreateAccountPaymentMethod.  # noqa: E501

        This field is specific for setting up Apple Pay for Adyen to include payload with Apple Pay token or Apple payment data. This information should be stringified. For more information, see [Set up Adyen Apple Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Apple_Pay_on_Web/Set_up_Adyen_Apple_Pay).   # noqa: E501

        :return: The apple_payment_data of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._apple_payment_data

    @apple_payment_data.setter
    def apple_payment_data(self, apple_payment_data):
        """Sets the apple_payment_data of this CreateAccountPaymentMethod.

        This field is specific for setting up Apple Pay for Adyen to include payload with Apple Pay token or Apple payment data. This information should be stringified. For more information, see [Set up Adyen Apple Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Apple_Pay_on_Web/Set_up_Adyen_Apple_Pay).   # noqa: E501

        :param apple_payment_data: The apple_payment_data of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._apple_payment_data = apple_payment_data

    @property
    def google_payment_token(self):
        """Gets the google_payment_token of this CreateAccountPaymentMethod.  # noqa: E501

        This field is specific for setting up Google Pay for Adyen and Chase gateway integrations to specify the stringified Google Pay token. For more information, see [Set up Adyen Google Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Adyen_Google_Pay) and [Set up Google Pay on Chase](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Google_Pay_on_Chase).   # noqa: E501

        :return: The google_payment_token of this CreateAccountPaymentMethod.  # noqa: E501
        :rtype: str
        """
        return self._google_payment_token

    @google_payment_token.setter
    def google_payment_token(self, google_payment_token):
        """Sets the google_payment_token of this CreateAccountPaymentMethod.

        This field is specific for setting up Google Pay for Adyen and Chase gateway integrations to specify the stringified Google Pay token. For more information, see [Set up Adyen Google Pay](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Adyen_Google_Pay) and [Set up Google Pay on Chase](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/L_Payment_Methods/Payment_Method_Types/Set_up_Google_Pay_on_Chase).   # noqa: E501

        :param google_payment_token: The google_payment_token of this CreateAccountPaymentMethod.  # noqa: E501
        :type: str
        """

        self._google_payment_token = google_payment_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAccountPaymentMethod, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAccountPaymentMethod):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
