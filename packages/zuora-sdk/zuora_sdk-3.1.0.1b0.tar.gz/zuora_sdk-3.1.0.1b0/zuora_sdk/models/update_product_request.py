# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateProductRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sku': 'str',
        'name': 'str',
        'product_number': 'str',
        'category': 'ProductCategory',
        'description': 'str',
        'effective_start_date': 'date',
        'effective_end_date': 'date',
        'allow_feature_changes': 'bool',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'item_type__ns': 'ProductObjectNSFieldsItemTypeNS',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'sku': 'SKU',
        'name': 'Name',
        'product_number': 'ProductNumber',
        'category': 'Category',
        'description': 'Description',
        'effective_start_date': 'EffectiveStartDate',
        'effective_end_date': 'EffectiveEndDate',
        'allow_feature_changes': 'AllowFeatureChanges',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'item_type__ns': 'ItemType__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, sku=None, name=None, product_number=None, category=None, description=None, effective_start_date=None, effective_end_date=None, allow_feature_changes=None, integration_id__ns=None, integration_status__ns=None, item_type__ns=None, sync_date__ns=None):  # noqa: E501
        """UpdateProductRequest - a model defined in Swagger"""  # noqa: E501
        self._sku = None
        self._name = None
        self._product_number = None
        self._category = None
        self._description = None
        self._effective_start_date = None
        self._effective_end_date = None
        self._allow_feature_changes = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._item_type__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        if sku is not None:
            self.sku = sku
        if name is not None:
            self.name = name
        if product_number is not None:
            self.product_number = product_number
        if category is not None:
            self.category = category
        if description is not None:
            self.description = description
        if effective_start_date is not None:
            self.effective_start_date = effective_start_date
        if effective_end_date is not None:
            self.effective_end_date = effective_end_date
        if allow_feature_changes is not None:
            self.allow_feature_changes = allow_feature_changes
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if item_type__ns is not None:
            self.item_type__ns = item_type__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def sku(self):
        """Gets the sku of this UpdateProductRequest.  # noqa: E501

        The unique SKU for the product.   # noqa: E501

        :return: The sku of this UpdateProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this UpdateProductRequest.

        The unique SKU for the product.   # noqa: E501

        :param sku: The sku of this UpdateProductRequest.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def name(self):
        """Gets the name of this UpdateProductRequest.  # noqa: E501

        The name of the product. This information is displayed in the product catalog pages in the web-based UI.   # noqa: E501

        :return: The name of this UpdateProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateProductRequest.

        The name of the product. This information is displayed in the product catalog pages in the web-based UI.   # noqa: E501

        :param name: The name of this UpdateProductRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_number(self):
        """Gets the product_number of this UpdateProductRequest.  # noqa: E501

        The natural key of the product.   For existing Product objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).  **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.   # noqa: E501

        :return: The product_number of this UpdateProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_number

    @product_number.setter
    def product_number(self, product_number):
        """Sets the product_number of this UpdateProductRequest.

        The natural key of the product.   For existing Product objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).  **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.   # noqa: E501

        :param product_number: The product_number of this UpdateProductRequest.  # noqa: E501
        :type: str
        """

        self._product_number = product_number

    @property
    def category(self):
        """Gets the category of this UpdateProductRequest.  # noqa: E501


        :return: The category of this UpdateProductRequest.  # noqa: E501
        :rtype: ProductCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this UpdateProductRequest.


        :param category: The category of this UpdateProductRequest.  # noqa: E501
        :type: ProductCategory
        """

        self._category = category

    @property
    def description(self):
        """Gets the description of this UpdateProductRequest.  # noqa: E501

        A description of the product.    # noqa: E501

        :return: The description of this UpdateProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProductRequest.

        A description of the product.    # noqa: E501

        :param description: The description of this UpdateProductRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def effective_start_date(self):
        """Gets the effective_start_date of this UpdateProductRequest.  # noqa: E501

        The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The effective_start_date of this UpdateProductRequest.  # noqa: E501
        :rtype: date
        """
        return self._effective_start_date

    @effective_start_date.setter
    def effective_start_date(self, effective_start_date):
        """Sets the effective_start_date of this UpdateProductRequest.

        The date when the product becomes available and can be subscribed to, in `yyyy-mm-dd` format.   # noqa: E501

        :param effective_start_date: The effective_start_date of this UpdateProductRequest.  # noqa: E501
        :type: date
        """

        self._effective_start_date = effective_start_date

    @property
    def effective_end_date(self):
        """Gets the effective_end_date of this UpdateProductRequest.  # noqa: E501

        The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The effective_end_date of this UpdateProductRequest.  # noqa: E501
        :rtype: date
        """
        return self._effective_end_date

    @effective_end_date.setter
    def effective_end_date(self, effective_end_date):
        """Sets the effective_end_date of this UpdateProductRequest.

        The date when the product expires and can't be subscribed to anymore, in `yyyy-mm-dd` format.   # noqa: E501

        :param effective_end_date: The effective_end_date of this UpdateProductRequest.  # noqa: E501
        :type: date
        """

        self._effective_end_date = effective_end_date

    @property
    def allow_feature_changes(self):
        """Gets the allow_feature_changes of this UpdateProductRequest.  # noqa: E501

        Controls whether to allow your users to add or remove features while creating or amending a subscription.  **Values**: true, false (default)   # noqa: E501

        :return: The allow_feature_changes of this UpdateProductRequest.  # noqa: E501
        :rtype: bool
        """
        return self._allow_feature_changes

    @allow_feature_changes.setter
    def allow_feature_changes(self, allow_feature_changes):
        """Sets the allow_feature_changes of this UpdateProductRequest.

        Controls whether to allow your users to add or remove features while creating or amending a subscription.  **Values**: true, false (default)   # noqa: E501

        :param allow_feature_changes: The allow_feature_changes of this UpdateProductRequest.  # noqa: E501
        :type: bool
        """

        self._allow_feature_changes = allow_feature_changes

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this UpdateProductRequest.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this UpdateProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this UpdateProductRequest.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this UpdateProductRequest.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this UpdateProductRequest.  # noqa: E501

        Status of the product's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this UpdateProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this UpdateProductRequest.

        Status of the product's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this UpdateProductRequest.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def item_type__ns(self):
        """Gets the item_type__ns of this UpdateProductRequest.  # noqa: E501


        :return: The item_type__ns of this UpdateProductRequest.  # noqa: E501
        :rtype: ProductObjectNSFieldsItemTypeNS
        """
        return self._item_type__ns

    @item_type__ns.setter
    def item_type__ns(self, item_type__ns):
        """Sets the item_type__ns of this UpdateProductRequest.


        :param item_type__ns: The item_type__ns of this UpdateProductRequest.  # noqa: E501
        :type: ProductObjectNSFieldsItemTypeNS
        """

        self._item_type__ns = item_type__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this UpdateProductRequest.  # noqa: E501

        Date when the product was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this UpdateProductRequest.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this UpdateProductRequest.

        Date when the product was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this UpdateProductRequest.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateProductRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProductRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
