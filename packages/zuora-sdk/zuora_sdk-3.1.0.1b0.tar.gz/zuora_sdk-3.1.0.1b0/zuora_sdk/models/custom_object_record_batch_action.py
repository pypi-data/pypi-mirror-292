# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomObjectRecordBatchAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_partial_success': 'bool',
        'ids': 'list[str]',
        'records': 'dict(str, object)',
        'type': 'CustomObjectRecordBatchActionType'
    }

    attribute_map = {
        'allow_partial_success': 'allowPartialSuccess',
        'ids': 'ids',
        'records': 'records',
        'type': 'type'
    }

    def __init__(self, allow_partial_success=False, ids=None, records=None, type=None):  # noqa: E501
        """CustomObjectRecordBatchAction - a model defined in Swagger"""  # noqa: E501
        self._allow_partial_success = None
        self._ids = None
        self._records = None
        self._type = None
        self.discriminator = None
        if allow_partial_success is not None:
            self.allow_partial_success = allow_partial_success
        if ids is not None:
            self.ids = ids
        if records is not None:
            self.records = records
        self.type = type

    @property
    def allow_partial_success(self):
        """Gets the allow_partial_success of this CustomObjectRecordBatchAction.  # noqa: E501

        Indicates whether the records that pass the schema validation should be updated when not all records in the request pass the schema validation.  Only applicable when `type` is `update`.   # noqa: E501

        :return: The allow_partial_success of this CustomObjectRecordBatchAction.  # noqa: E501
        :rtype: bool
        """
        return self._allow_partial_success

    @allow_partial_success.setter
    def allow_partial_success(self, allow_partial_success):
        """Sets the allow_partial_success of this CustomObjectRecordBatchAction.

        Indicates whether the records that pass the schema validation should be updated when not all records in the request pass the schema validation.  Only applicable when `type` is `update`.   # noqa: E501

        :param allow_partial_success: The allow_partial_success of this CustomObjectRecordBatchAction.  # noqa: E501
        :type: bool
        """

        self._allow_partial_success = allow_partial_success

    @property
    def ids(self):
        """Gets the ids of this CustomObjectRecordBatchAction.  # noqa: E501

        Ids of the custom object records that you want to delete. Each ID must be a string of 36 characters. Only applicable when `type` is `delete`.  # noqa: E501

        :return: The ids of this CustomObjectRecordBatchAction.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this CustomObjectRecordBatchAction.

        Ids of the custom object records that you want to delete. Each ID must be a string of 36 characters. Only applicable when `type` is `delete`.  # noqa: E501

        :param ids: The ids of this CustomObjectRecordBatchAction.  # noqa: E501
        :type: list[str]
        """

        self._ids = ids

    @property
    def records(self):
        """Gets the records of this CustomObjectRecordBatchAction.  # noqa: E501

        Object records that you want to update. Only applicable when `type` is `update`.  # noqa: E501

        :return: The records of this CustomObjectRecordBatchAction.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this CustomObjectRecordBatchAction.

        Object records that you want to update. Only applicable when `type` is `update`.  # noqa: E501

        :param records: The records of this CustomObjectRecordBatchAction.  # noqa: E501
        :type: dict(str, object)
        """

        self._records = records

    @property
    def type(self):
        """Gets the type of this CustomObjectRecordBatchAction.  # noqa: E501


        :return: The type of this CustomObjectRecordBatchAction.  # noqa: E501
        :rtype: CustomObjectRecordBatchActionType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomObjectRecordBatchAction.


        :param type: The type of this CustomObjectRecordBatchAction.  # noqa: E501
        :type: CustomObjectRecordBatchActionType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomObjectRecordBatchAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomObjectRecordBatchAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
