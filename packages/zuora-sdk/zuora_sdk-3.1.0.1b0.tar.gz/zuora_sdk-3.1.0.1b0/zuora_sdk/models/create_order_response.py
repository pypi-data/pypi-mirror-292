# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from zuora_sdk.models.common_response import CommonResponse  # noqa: F401,E501

class CreateOrderResponse(CommonResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_number': 'str',
        'credit_memo_ids': 'list[str]',
        'credit_memo_numbers': 'list[str]',
        'invoice_ids': 'list[str]',
        'invoice_numbers': 'list[str]',
        'order_id': 'str',
        'order_line_items': 'list[CreateOrderResponseOrderLineItems]',
        'order_number': 'str',
        'paid_amount': 'str',
        'payment_id': 'str',
        'payment_number': 'str',
        'ramps': 'list[CreateOrderResponseRamps]',
        'refunds': 'list[CreateOrderResponseRefunds]',
        'status': 'OrderStatus',
        'subscription_ids': 'list[str]',
        'subscription_numbers': 'list[str]',
        'subscriptions': 'list[CreateOrderResponseSubscriptions]',
        'write_off': 'list[CreateOrderResponseWriteOff]'
    }
    if hasattr(CommonResponse, "swagger_types"):
        swagger_types.update(CommonResponse.swagger_types)

    attribute_map = {
        'account_id': 'accountId',
        'account_number': 'accountNumber',
        'credit_memo_ids': 'creditMemoIds',
        'credit_memo_numbers': 'creditMemoNumbers',
        'invoice_ids': 'invoiceIds',
        'invoice_numbers': 'invoiceNumbers',
        'order_id': 'orderId',
        'order_line_items': 'orderLineItems',
        'order_number': 'orderNumber',
        'paid_amount': 'paidAmount',
        'payment_id': 'paymentId',
        'payment_number': 'paymentNumber',
        'ramps': 'ramps',
        'refunds': 'refunds',
        'status': 'status',
        'subscription_ids': 'subscriptionIds',
        'subscription_numbers': 'subscriptionNumbers',
        'subscriptions': 'subscriptions',
        'write_off': 'writeOff'
    }
    if hasattr(CommonResponse, "attribute_map"):
        attribute_map.update(CommonResponse.attribute_map)

    def __init__(self, account_id=None, account_number=None, credit_memo_ids=None, credit_memo_numbers=None, invoice_ids=None, invoice_numbers=None, order_id=None, order_line_items=None, order_number=None, paid_amount=None, payment_id=None, payment_number=None, ramps=None, refunds=None, status=None, subscription_ids=None, subscription_numbers=None, subscriptions=None, write_off=None, *args, **kwargs):  # noqa: E501
        """CreateOrderResponse - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_number = None
        self._credit_memo_ids = None
        self._credit_memo_numbers = None
        self._invoice_ids = None
        self._invoice_numbers = None
        self._order_id = None
        self._order_line_items = None
        self._order_number = None
        self._paid_amount = None
        self._payment_id = None
        self._payment_number = None
        self._ramps = None
        self._refunds = None
        self._status = None
        self._subscription_ids = None
        self._subscription_numbers = None
        self._subscriptions = None
        self._write_off = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_number is not None:
            self.account_number = account_number
        if credit_memo_ids is not None:
            self.credit_memo_ids = credit_memo_ids
        if credit_memo_numbers is not None:
            self.credit_memo_numbers = credit_memo_numbers
        if invoice_ids is not None:
            self.invoice_ids = invoice_ids
        if invoice_numbers is not None:
            self.invoice_numbers = invoice_numbers
        if order_id is not None:
            self.order_id = order_id
        if order_line_items is not None:
            self.order_line_items = order_line_items
        if order_number is not None:
            self.order_number = order_number
        if paid_amount is not None:
            self.paid_amount = paid_amount
        if payment_id is not None:
            self.payment_id = payment_id
        if payment_number is not None:
            self.payment_number = payment_number
        if ramps is not None:
            self.ramps = ramps
        if refunds is not None:
            self.refunds = refunds
        if status is not None:
            self.status = status
        if subscription_ids is not None:
            self.subscription_ids = subscription_ids
        if subscription_numbers is not None:
            self.subscription_numbers = subscription_numbers
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if write_off is not None:
            self.write_off = write_off
        CommonResponse.__init__(self, *args, **kwargs)

    @property
    def account_id(self):
        """Gets the account_id of this CreateOrderResponse.  # noqa: E501

        The account ID for the order. This field is returned instead of the `accountNumber` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :return: The account_id of this CreateOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateOrderResponse.

        The account ID for the order. This field is returned instead of the `accountNumber` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :param account_id: The account_id of this CreateOrderResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this CreateOrderResponse.  # noqa: E501

        The account number for the order.  # noqa: E501

        :return: The account_number of this CreateOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateOrderResponse.

        The account number for the order.  # noqa: E501

        :param account_number: The account_number of this CreateOrderResponse.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def credit_memo_ids(self):
        """Gets the credit_memo_ids of this CreateOrderResponse.  # noqa: E501

        An array of the credit memo IDs generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled. This field is returned instead of the `creditMemoNumbers` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :return: The credit_memo_ids of this CreateOrderResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._credit_memo_ids

    @credit_memo_ids.setter
    def credit_memo_ids(self, credit_memo_ids):
        """Sets the credit_memo_ids of this CreateOrderResponse.

        An array of the credit memo IDs generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled. This field is returned instead of the `creditMemoNumbers` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :param credit_memo_ids: The credit_memo_ids of this CreateOrderResponse.  # noqa: E501
        :type: list[str]
        """

        self._credit_memo_ids = credit_memo_ids

    @property
    def credit_memo_numbers(self):
        """Gets the credit_memo_numbers of this CreateOrderResponse.  # noqa: E501

        An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.  # noqa: E501

        :return: The credit_memo_numbers of this CreateOrderResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._credit_memo_numbers

    @credit_memo_numbers.setter
    def credit_memo_numbers(self, credit_memo_numbers):
        """Sets the credit_memo_numbers of this CreateOrderResponse.

        An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.  # noqa: E501

        :param credit_memo_numbers: The credit_memo_numbers of this CreateOrderResponse.  # noqa: E501
        :type: list[str]
        """

        self._credit_memo_numbers = credit_memo_numbers

    @property
    def invoice_ids(self):
        """Gets the invoice_ids of this CreateOrderResponse.  # noqa: E501

        An array of the invoice IDs generated in this order request. Normally it includes one invoice ID only, but can include multiple items when a subscription was tagged as invoice separately. This field is returned instead of the `invoiceNumbers` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :return: The invoice_ids of this CreateOrderResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._invoice_ids

    @invoice_ids.setter
    def invoice_ids(self, invoice_ids):
        """Sets the invoice_ids of this CreateOrderResponse.

        An array of the invoice IDs generated in this order request. Normally it includes one invoice ID only, but can include multiple items when a subscription was tagged as invoice separately. This field is returned instead of the `invoiceNumbers` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :param invoice_ids: The invoice_ids of this CreateOrderResponse.  # noqa: E501
        :type: list[str]
        """

        self._invoice_ids = invoice_ids

    @property
    def invoice_numbers(self):
        """Gets the invoice_numbers of this CreateOrderResponse.  # noqa: E501

        An array of the invoice numbers generated in this order request. Normally it includes one invoice number only, but can include multiple items when a subscription was tagged as invoice separately.  # noqa: E501

        :return: The invoice_numbers of this CreateOrderResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._invoice_numbers

    @invoice_numbers.setter
    def invoice_numbers(self, invoice_numbers):
        """Sets the invoice_numbers of this CreateOrderResponse.

        An array of the invoice numbers generated in this order request. Normally it includes one invoice number only, but can include multiple items when a subscription was tagged as invoice separately.  # noqa: E501

        :param invoice_numbers: The invoice_numbers of this CreateOrderResponse.  # noqa: E501
        :type: list[str]
        """

        self._invoice_numbers = invoice_numbers

    @property
    def order_id(self):
        """Gets the order_id of this CreateOrderResponse.  # noqa: E501

        The ID of the order created. This field is returned instead of the `orderNumber` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :return: The order_id of this CreateOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this CreateOrderResponse.

        The ID of the order created. This field is returned instead of the `orderNumber` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :param order_id: The order_id of this CreateOrderResponse.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def order_line_items(self):
        """Gets the order_line_items of this CreateOrderResponse.  # noqa: E501


        :return: The order_line_items of this CreateOrderResponse.  # noqa: E501
        :rtype: list[CreateOrderResponseOrderLineItems]
        """
        return self._order_line_items

    @order_line_items.setter
    def order_line_items(self, order_line_items):
        """Sets the order_line_items of this CreateOrderResponse.


        :param order_line_items: The order_line_items of this CreateOrderResponse.  # noqa: E501
        :type: list[CreateOrderResponseOrderLineItems]
        """

        self._order_line_items = order_line_items

    @property
    def order_number(self):
        """Gets the order_number of this CreateOrderResponse.  # noqa: E501

        The order number of the order created.  # noqa: E501

        :return: The order_number of this CreateOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this CreateOrderResponse.

        The order number of the order created.  # noqa: E501

        :param order_number: The order_number of this CreateOrderResponse.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def paid_amount(self):
        """Gets the paid_amount of this CreateOrderResponse.  # noqa: E501

        The total amount collected in this order request.  # noqa: E501

        :return: The paid_amount of this CreateOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this CreateOrderResponse.

        The total amount collected in this order request.  # noqa: E501

        :param paid_amount: The paid_amount of this CreateOrderResponse.  # noqa: E501
        :type: str
        """

        self._paid_amount = paid_amount

    @property
    def payment_id(self):
        """Gets the payment_id of this CreateOrderResponse.  # noqa: E501

        The payment Id that is collected in this order request. This field is returned instead of the `paymentNumber` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :return: The payment_id of this CreateOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this CreateOrderResponse.

        The payment Id that is collected in this order request. This field is returned instead of the `paymentNumber` field if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :param payment_id: The payment_id of this CreateOrderResponse.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def payment_number(self):
        """Gets the payment_number of this CreateOrderResponse.  # noqa: E501

        The payment number that is collected in this order request.  # noqa: E501

        :return: The payment_number of this CreateOrderResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_number

    @payment_number.setter
    def payment_number(self, payment_number):
        """Sets the payment_number of this CreateOrderResponse.

        The payment number that is collected in this order request.  # noqa: E501

        :param payment_number: The payment_number of this CreateOrderResponse.  # noqa: E501
        :type: str
        """

        self._payment_number = payment_number

    @property
    def ramps(self):
        """Gets the ramps of this CreateOrderResponse.  # noqa: E501

        **Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.  The ramp definitions created by this order request.   # noqa: E501

        :return: The ramps of this CreateOrderResponse.  # noqa: E501
        :rtype: list[CreateOrderResponseRamps]
        """
        return self._ramps

    @ramps.setter
    def ramps(self, ramps):
        """Sets the ramps of this CreateOrderResponse.

        **Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.  The ramp definitions created by this order request.   # noqa: E501

        :param ramps: The ramps of this CreateOrderResponse.  # noqa: E501
        :type: list[CreateOrderResponseRamps]
        """

        self._ramps = ramps

    @property
    def refunds(self):
        """Gets the refunds of this CreateOrderResponse.  # noqa: E501


        :return: The refunds of this CreateOrderResponse.  # noqa: E501
        :rtype: list[CreateOrderResponseRefunds]
        """
        return self._refunds

    @refunds.setter
    def refunds(self, refunds):
        """Sets the refunds of this CreateOrderResponse.


        :param refunds: The refunds of this CreateOrderResponse.  # noqa: E501
        :type: list[CreateOrderResponseRefunds]
        """

        self._refunds = refunds

    @property
    def status(self):
        """Gets the status of this CreateOrderResponse.  # noqa: E501


        :return: The status of this CreateOrderResponse.  # noqa: E501
        :rtype: OrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateOrderResponse.


        :param status: The status of this CreateOrderResponse.  # noqa: E501
        :type: OrderStatus
        """

        self._status = status

    @property
    def subscription_ids(self):
        """Gets the subscription_ids of this CreateOrderResponse.  # noqa: E501

        Container for the subscription IDs of the subscriptions in an order. This field is returned if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :return: The subscription_ids of this CreateOrderResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._subscription_ids

    @subscription_ids.setter
    def subscription_ids(self, subscription_ids):
        """Sets the subscription_ids of this CreateOrderResponse.

        Container for the subscription IDs of the subscriptions in an order. This field is returned if the `returnIds` query parameter is set to `true`.  # noqa: E501

        :param subscription_ids: The subscription_ids of this CreateOrderResponse.  # noqa: E501
        :type: list[str]
        """

        self._subscription_ids = subscription_ids

    @property
    def subscription_numbers(self):
        """Gets the subscription_numbers of this CreateOrderResponse.  # noqa: E501

        Container for the subscription numbers of the subscriptions in an order. Subscriptions in the response are displayed in the same sequence as the subscriptions defined in the request. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier.  # noqa: E501

        :return: The subscription_numbers of this CreateOrderResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._subscription_numbers

    @subscription_numbers.setter
    def subscription_numbers(self, subscription_numbers):
        """Sets the subscription_numbers of this CreateOrderResponse.

        Container for the subscription numbers of the subscriptions in an order. Subscriptions in the response are displayed in the same sequence as the subscriptions defined in the request. This field is in Zuora REST API version control. Supported minor versions are `206.0` and earlier.  # noqa: E501

        :param subscription_numbers: The subscription_numbers of this CreateOrderResponse.  # noqa: E501
        :type: list[str]
        """

        self._subscription_numbers = subscription_numbers

    @property
    def subscriptions(self):
        """Gets the subscriptions of this CreateOrderResponse.  # noqa: E501

        **Note:** This field is in Zuora REST API version control. Supported minor versions are 223.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers and statuses in an order.   # noqa: E501

        :return: The subscriptions of this CreateOrderResponse.  # noqa: E501
        :rtype: list[CreateOrderResponseSubscriptions]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this CreateOrderResponse.

        **Note:** This field is in Zuora REST API version control. Supported minor versions are 223.0 or later. To use this field in the method, you must set the `zuora-version` parameter to the minor version number in the request header.  Container for the subscription numbers and statuses in an order.   # noqa: E501

        :param subscriptions: The subscriptions of this CreateOrderResponse.  # noqa: E501
        :type: list[CreateOrderResponseSubscriptions]
        """

        self._subscriptions = subscriptions

    @property
    def write_off(self):
        """Gets the write_off of this CreateOrderResponse.  # noqa: E501


        :return: The write_off of this CreateOrderResponse.  # noqa: E501
        :rtype: list[CreateOrderResponseWriteOff]
        """
        return self._write_off

    @write_off.setter
    def write_off(self, write_off):
        """Sets the write_off of this CreateOrderResponse.


        :param write_off: The write_off of this CreateOrderResponse.  # noqa: E501
        :type: list[CreateOrderResponseWriteOff]
        """

        self._write_off = write_off

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOrderResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrderResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
