# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateStoredCredentialProfileRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'StoredCredentialProfileAction',
        'agreed_on': 'date',
        'auth_gateway': 'str',
        'card_security_code': 'str',
        'consent_agreement_ref': 'str',
        'consent_agreement_src': 'StoredCredentialProfileConsentAgreementSrc',
        'network_transaction_id': 'str',
        'status': 'CreateStoredCredentialProfileRequestStatus',
        'type': 'StoredCredentialProfileType'
    }

    attribute_map = {
        'action': 'action',
        'agreed_on': 'agreedOn',
        'auth_gateway': 'authGateway',
        'card_security_code': 'cardSecurityCode',
        'consent_agreement_ref': 'consentAgreementRef',
        'consent_agreement_src': 'consentAgreementSrc',
        'network_transaction_id': 'networkTransactionId',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, action=None, agreed_on=None, auth_gateway=None, card_security_code=None, consent_agreement_ref=None, consent_agreement_src=None, network_transaction_id=None, status=None, type=None):  # noqa: E501
        """CreateStoredCredentialProfileRequest - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._agreed_on = None
        self._auth_gateway = None
        self._card_security_code = None
        self._consent_agreement_ref = None
        self._consent_agreement_src = None
        self._network_transaction_id = None
        self._status = None
        self._type = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if agreed_on is not None:
            self.agreed_on = agreed_on
        if auth_gateway is not None:
            self.auth_gateway = auth_gateway
        if card_security_code is not None:
            self.card_security_code = card_security_code
        if consent_agreement_ref is not None:
            self.consent_agreement_ref = consent_agreement_ref
        self.consent_agreement_src = consent_agreement_src
        if network_transaction_id is not None:
            self.network_transaction_id = network_transaction_id
        self.status = status
        self.type = type

    @property
    def action(self):
        """Gets the action of this CreateStoredCredentialProfileRequest.  # noqa: E501


        :return: The action of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: StoredCredentialProfileAction
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CreateStoredCredentialProfileRequest.


        :param action: The action of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: StoredCredentialProfileAction
        """

        self._action = action

    @property
    def agreed_on(self):
        """Gets the agreed_on of this CreateStoredCredentialProfileRequest.  # noqa: E501

        The date on which the profile is agreed. The date format is `yyyy-mm-dd`.   # noqa: E501

        :return: The agreed_on of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: date
        """
        return self._agreed_on

    @agreed_on.setter
    def agreed_on(self, agreed_on):
        """Sets the agreed_on of this CreateStoredCredentialProfileRequest.

        The date on which the profile is agreed. The date format is `yyyy-mm-dd`.   # noqa: E501

        :param agreed_on: The agreed_on of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: date
        """

        self._agreed_on = agreed_on

    @property
    def auth_gateway(self):
        """Gets the auth_gateway of this CreateStoredCredentialProfileRequest.  # noqa: E501

        Specifies the ID of the payment gateway that Zuora will use when activating the stored credential profile.   # noqa: E501

        :return: The auth_gateway of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._auth_gateway

    @auth_gateway.setter
    def auth_gateway(self, auth_gateway):
        """Sets the auth_gateway of this CreateStoredCredentialProfileRequest.

        Specifies the ID of the payment gateway that Zuora will use when activating the stored credential profile.   # noqa: E501

        :param auth_gateway: The auth_gateway of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """

        self._auth_gateway = auth_gateway

    @property
    def card_security_code(self):
        """Gets the card_security_code of this CreateStoredCredentialProfileRequest.  # noqa: E501

        The security code of the credit card.   # noqa: E501

        :return: The card_security_code of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._card_security_code

    @card_security_code.setter
    def card_security_code(self, card_security_code):
        """Sets the card_security_code of this CreateStoredCredentialProfileRequest.

        The security code of the credit card.   # noqa: E501

        :param card_security_code: The card_security_code of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """

        self._card_security_code = card_security_code

    @property
    def consent_agreement_ref(self):
        """Gets the consent_agreement_ref of this CreateStoredCredentialProfileRequest.  # noqa: E501

        Specifies your reference for the consent agreement that you have established with the customer.   # noqa: E501

        :return: The consent_agreement_ref of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._consent_agreement_ref

    @consent_agreement_ref.setter
    def consent_agreement_ref(self, consent_agreement_ref):
        """Sets the consent_agreement_ref of this CreateStoredCredentialProfileRequest.

        Specifies your reference for the consent agreement that you have established with the customer.   # noqa: E501

        :param consent_agreement_ref: The consent_agreement_ref of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """

        self._consent_agreement_ref = consent_agreement_ref

    @property
    def consent_agreement_src(self):
        """Gets the consent_agreement_src of this CreateStoredCredentialProfileRequest.  # noqa: E501


        :return: The consent_agreement_src of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: StoredCredentialProfileConsentAgreementSrc
        """
        return self._consent_agreement_src

    @consent_agreement_src.setter
    def consent_agreement_src(self, consent_agreement_src):
        """Sets the consent_agreement_src of this CreateStoredCredentialProfileRequest.


        :param consent_agreement_src: The consent_agreement_src of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: StoredCredentialProfileConsentAgreementSrc
        """
        if consent_agreement_src is None:
            raise ValueError("Invalid value for `consent_agreement_src`, must not be `None`")  # noqa: E501

        self._consent_agreement_src = consent_agreement_src

    @property
    def network_transaction_id(self):
        """Gets the network_transaction_id of this CreateStoredCredentialProfileRequest.  # noqa: E501

        The ID of a network transaction. Only applicable if you set the `action` field to `Persist`.   # noqa: E501

        :return: The network_transaction_id of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: str
        """
        return self._network_transaction_id

    @network_transaction_id.setter
    def network_transaction_id(self, network_transaction_id):
        """Sets the network_transaction_id of this CreateStoredCredentialProfileRequest.

        The ID of a network transaction. Only applicable if you set the `action` field to `Persist`.   # noqa: E501

        :param network_transaction_id: The network_transaction_id of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: str
        """

        self._network_transaction_id = network_transaction_id

    @property
    def status(self):
        """Gets the status of this CreateStoredCredentialProfileRequest.  # noqa: E501


        :return: The status of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: CreateStoredCredentialProfileRequestStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateStoredCredentialProfileRequest.


        :param status: The status of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: CreateStoredCredentialProfileRequestStatus
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this CreateStoredCredentialProfileRequest.  # noqa: E501


        :return: The type of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :rtype: StoredCredentialProfileType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateStoredCredentialProfileRequest.


        :param type: The type of this CreateStoredCredentialProfileRequest.  # noqa: E501
        :type: StoredCredentialProfileType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateStoredCredentialProfileRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateStoredCredentialProfileRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
