# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventTrigger(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'base_object': 'str',
        'condition': 'str',
        'description': 'str',
        'event_type': 'EventType',
        'id': 'str'
    }

    attribute_map = {
        'active': 'active',
        'base_object': 'baseObject',
        'condition': 'condition',
        'description': 'description',
        'event_type': 'eventType',
        'id': 'id'
    }

    def __init__(self, active=None, base_object=None, condition=None, description=None, event_type=None, id=None):  # noqa: E501
        """EventTrigger - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._base_object = None
        self._condition = None
        self._description = None
        self._event_type = None
        self._id = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if base_object is not None:
            self.base_object = base_object
        if condition is not None:
            self.condition = condition
        if description is not None:
            self.description = description
        if event_type is not None:
            self.event_type = event_type
        if id is not None:
            self.id = id

    @property
    def active(self):
        """Gets the active of this EventTrigger.  # noqa: E501

        The status of the trigger.  # noqa: E501

        :return: The active of this EventTrigger.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this EventTrigger.

        The status of the trigger.  # noqa: E501

        :param active: The active of this EventTrigger.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def base_object(self):
        """Gets the base_object of this EventTrigger.  # noqa: E501

        The base object that the trigger rule is defined upon. Should be specified in the pattern: ^[A-Z][\\\\w\\\\-]*$  # noqa: E501

        :return: The base_object of this EventTrigger.  # noqa: E501
        :rtype: str
        """
        return self._base_object

    @base_object.setter
    def base_object(self, base_object):
        """Sets the base_object of this EventTrigger.

        The base object that the trigger rule is defined upon. Should be specified in the pattern: ^[A-Z][\\\\w\\\\-]*$  # noqa: E501

        :param base_object: The base_object of this EventTrigger.  # noqa: E501
        :type: str
        """

        self._base_object = base_object

    @property
    def condition(self):
        """Gets the condition of this EventTrigger.  # noqa: E501

        The JEXL expression to be evaluated against object changes. See above for more information and an example.  # noqa: E501

        :return: The condition of this EventTrigger.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this EventTrigger.

        The JEXL expression to be evaluated against object changes. See above for more information and an example.  # noqa: E501

        :param condition: The condition of this EventTrigger.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def description(self):
        """Gets the description of this EventTrigger.  # noqa: E501

        The description of the trigger.  # noqa: E501

        :return: The description of this EventTrigger.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventTrigger.

        The description of the trigger.  # noqa: E501

        :param description: The description of this EventTrigger.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def event_type(self):
        """Gets the event_type of this EventTrigger.  # noqa: E501


        :return: The event_type of this EventTrigger.  # noqa: E501
        :rtype: EventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventTrigger.


        :param event_type: The event_type of this EventTrigger.  # noqa: E501
        :type: EventType
        """

        self._event_type = event_type

    @property
    def id(self):
        """Gets the id of this EventTrigger.  # noqa: E501


        :return: The id of this EventTrigger.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventTrigger.


        :param id: The id of this EventTrigger.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventTrigger, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventTrigger):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
