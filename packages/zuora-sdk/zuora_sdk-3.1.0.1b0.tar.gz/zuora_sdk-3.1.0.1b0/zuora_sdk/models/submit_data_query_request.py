# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubmitDataQueryRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'column_separator': 'str',
        'compression': 'SubmitDataQueryRequestCompression',
        'encryption_key': 'str',
        'output': 'SubmitDataQueryRequestOutput',
        'output_format': 'SubmitDataQueryRequestOutputFormat',
        'query': 'str',
        'read_deleted': 'bool',
        'source_data': 'SubmitDataQueryRequestSourceData',
        'use_index_join': 'bool'
    }

    attribute_map = {
        'column_separator': 'columnSeparator',
        'compression': 'compression',
        'encryption_key': 'encryptionKey',
        'output': 'output',
        'output_format': 'outputFormat',
        'query': 'query',
        'read_deleted': 'readDeleted',
        'source_data': 'sourceData',
        'use_index_join': 'useIndexJoin'
    }

    def __init__(self, column_separator=None, compression=None, encryption_key=None, output=None, output_format=None, query=None, read_deleted=False, source_data=None, use_index_join=None):  # noqa: E501
        """SubmitDataQueryRequest - a model defined in Swagger"""  # noqa: E501
        self._column_separator = None
        self._compression = None
        self._encryption_key = None
        self._output = None
        self._output_format = None
        self._query = None
        self._read_deleted = None
        self._source_data = None
        self._use_index_join = None
        self.discriminator = None
        if column_separator is not None:
            self.column_separator = column_separator
        self.compression = compression
        if encryption_key is not None:
            self.encryption_key = encryption_key
        self.output = output
        self.output_format = output_format
        self.query = query
        if read_deleted is not None:
            self.read_deleted = read_deleted
        if source_data is not None:
            self.source_data = source_data
        if use_index_join is not None:
            self.use_index_join = use_index_join

    @property
    def column_separator(self):
        """Gets the column_separator of this SubmitDataQueryRequest.  # noqa: E501

        The column separator. Only applicable if the `outputFormat` is `DSV`.   # noqa: E501

        :return: The column_separator of this SubmitDataQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._column_separator

    @column_separator.setter
    def column_separator(self, column_separator):
        """Sets the column_separator of this SubmitDataQueryRequest.

        The column separator. Only applicable if the `outputFormat` is `DSV`.   # noqa: E501

        :param column_separator: The column_separator of this SubmitDataQueryRequest.  # noqa: E501
        :type: str
        """

        self._column_separator = column_separator

    @property
    def compression(self):
        """Gets the compression of this SubmitDataQueryRequest.  # noqa: E501


        :return: The compression of this SubmitDataQueryRequest.  # noqa: E501
        :rtype: SubmitDataQueryRequestCompression
        """
        return self._compression

    @compression.setter
    def compression(self, compression):
        """Sets the compression of this SubmitDataQueryRequest.


        :param compression: The compression of this SubmitDataQueryRequest.  # noqa: E501
        :type: SubmitDataQueryRequestCompression
        """
        if compression is None:
            raise ValueError("Invalid value for `compression`, must not be `None`")  # noqa: E501

        self._compression = compression

    @property
    def encryption_key(self):
        """Gets the encryption_key of this SubmitDataQueryRequest.  # noqa: E501

        Base-64 encoded public key of an RSA key-pair.   Note that Data Query only supports 1024-bit RSA keys.  If you set this field, Zuora encrypts the query results using the provided public key. You must use the corresponding private key to decrypt the query results.   # noqa: E501

        :return: The encryption_key of this SubmitDataQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this SubmitDataQueryRequest.

        Base-64 encoded public key of an RSA key-pair.   Note that Data Query only supports 1024-bit RSA keys.  If you set this field, Zuora encrypts the query results using the provided public key. You must use the corresponding private key to decrypt the query results.   # noqa: E501

        :param encryption_key: The encryption_key of this SubmitDataQueryRequest.  # noqa: E501
        :type: str
        """

        self._encryption_key = encryption_key

    @property
    def output(self):
        """Gets the output of this SubmitDataQueryRequest.  # noqa: E501


        :return: The output of this SubmitDataQueryRequest.  # noqa: E501
        :rtype: SubmitDataQueryRequestOutput
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this SubmitDataQueryRequest.


        :param output: The output of this SubmitDataQueryRequest.  # noqa: E501
        :type: SubmitDataQueryRequestOutput
        """
        if output is None:
            raise ValueError("Invalid value for `output`, must not be `None`")  # noqa: E501

        self._output = output

    @property
    def output_format(self):
        """Gets the output_format of this SubmitDataQueryRequest.  # noqa: E501


        :return: The output_format of this SubmitDataQueryRequest.  # noqa: E501
        :rtype: SubmitDataQueryRequestOutputFormat
        """
        return self._output_format

    @output_format.setter
    def output_format(self, output_format):
        """Sets the output_format of this SubmitDataQueryRequest.


        :param output_format: The output_format of this SubmitDataQueryRequest.  # noqa: E501
        :type: SubmitDataQueryRequestOutputFormat
        """
        if output_format is None:
            raise ValueError("Invalid value for `output_format`, must not be `None`")  # noqa: E501

        self._output_format = output_format

    @property
    def query(self):
        """Gets the query of this SubmitDataQueryRequest.  # noqa: E501

        The query to perform. See [SQL Queries in Data Query](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query/BA_SQL_Queries_in_Data_Query) for more information.   # noqa: E501

        :return: The query of this SubmitDataQueryRequest.  # noqa: E501
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SubmitDataQueryRequest.

        The query to perform. See [SQL Queries in Data Query](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query/BA_SQL_Queries_in_Data_Query) for more information.   # noqa: E501

        :param query: The query of this SubmitDataQueryRequest.  # noqa: E501
        :type: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")  # noqa: E501

        self._query = query

    @property
    def read_deleted(self):
        """Gets the read_deleted of this SubmitDataQueryRequest.  # noqa: E501

        Indicates whether the query will retrieve only the deleted record. If `readDeleted` is set to `false` or it is not included in the request body, the query will retrieve only the non-deleted records. If it is set to `true`, only the deleted records will be retrieved.  If you select the `deleted` column in the `query` field, both non-deleted and deleted records will be retrieved regardless of the value in the `readDeleted` field.  Note that Data Query is subject to Zuora Data Retention Policy. The retention period of deleted data is 30 days. You can only retrieve deleted data for 30 days through Data Query.   # noqa: E501

        :return: The read_deleted of this SubmitDataQueryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._read_deleted

    @read_deleted.setter
    def read_deleted(self, read_deleted):
        """Sets the read_deleted of this SubmitDataQueryRequest.

        Indicates whether the query will retrieve only the deleted record. If `readDeleted` is set to `false` or it is not included in the request body, the query will retrieve only the non-deleted records. If it is set to `true`, only the deleted records will be retrieved.  If you select the `deleted` column in the `query` field, both non-deleted and deleted records will be retrieved regardless of the value in the `readDeleted` field.  Note that Data Query is subject to Zuora Data Retention Policy. The retention period of deleted data is 30 days. You can only retrieve deleted data for 30 days through Data Query.   # noqa: E501

        :param read_deleted: The read_deleted of this SubmitDataQueryRequest.  # noqa: E501
        :type: bool
        """

        self._read_deleted = read_deleted

    @property
    def source_data(self):
        """Gets the source_data of this SubmitDataQueryRequest.  # noqa: E501


        :return: The source_data of this SubmitDataQueryRequest.  # noqa: E501
        :rtype: SubmitDataQueryRequestSourceData
        """
        return self._source_data

    @source_data.setter
    def source_data(self, source_data):
        """Sets the source_data of this SubmitDataQueryRequest.


        :param source_data: The source_data of this SubmitDataQueryRequest.  # noqa: E501
        :type: SubmitDataQueryRequestSourceData
        """

        self._source_data = source_data

    @property
    def use_index_join(self):
        """Gets the use_index_join of this SubmitDataQueryRequest.  # noqa: E501

        Indicates whether to use Index Join. Index join is useful when you have a specific reference value in your WHERE clause to index another large table by. See [Use Index Join](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query/Best_practices_of_Data_Query#Use_Index_Join) for more information.  # noqa: E501

        :return: The use_index_join of this SubmitDataQueryRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_index_join

    @use_index_join.setter
    def use_index_join(self, use_index_join):
        """Sets the use_index_join of this SubmitDataQueryRequest.

        Indicates whether to use Index Join. Index join is useful when you have a specific reference value in your WHERE clause to index another large table by. See [Use Index Join](https://knowledgecenter.zuora.com/DC_Developers/BA_Data_Query/Best_practices_of_Data_Query#Use_Index_Join) for more information.  # noqa: E501

        :param use_index_join: The use_index_join of this SubmitDataQueryRequest.  # noqa: E501
        :type: bool
        """

        self._use_index_join = use_index_join

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmitDataQueryRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmitDataQueryRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
