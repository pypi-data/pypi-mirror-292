# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from zuora_sdk.models.common_response import CommonResponse  # noqa: F401,E501

class GetBillingAdjustmentsResponse(CommonResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adjustments': 'list[BillingAdjustment]',
        'ineligible_adjustments': 'list[IneligibleBillingAdjustment]',
        'total_amount': 'float',
        'total_quantity': 'float',
        'total_number_of_deliveries': 'float'
    }
    if hasattr(CommonResponse, "swagger_types"):
        swagger_types.update(CommonResponse.swagger_types)

    attribute_map = {
        'adjustments': 'adjustments',
        'ineligible_adjustments': 'ineligibleAdjustments',
        'total_amount': 'totalAmount',
        'total_quantity': 'totalQuantity',
        'total_number_of_deliveries': 'totalNumberOfDeliveries'
    }
    if hasattr(CommonResponse, "attribute_map"):
        attribute_map.update(CommonResponse.attribute_map)

    def __init__(self, adjustments=None, ineligible_adjustments=None, total_amount=None, total_quantity=None, total_number_of_deliveries=None, *args, **kwargs):  # noqa: E501
        """GetBillingAdjustmentsResponse - a model defined in Swagger"""  # noqa: E501
        self._adjustments = None
        self._ineligible_adjustments = None
        self._total_amount = None
        self._total_quantity = None
        self._total_number_of_deliveries = None
        self.discriminator = None
        if adjustments is not None:
            self.adjustments = adjustments
        if ineligible_adjustments is not None:
            self.ineligible_adjustments = ineligible_adjustments
        if total_amount is not None:
            self.total_amount = total_amount
        if total_quantity is not None:
            self.total_quantity = total_quantity
        if total_number_of_deliveries is not None:
            self.total_number_of_deliveries = total_number_of_deliveries
        CommonResponse.__init__(self, *args, **kwargs)

    @property
    def adjustments(self):
        """Gets the adjustments of this GetBillingAdjustmentsResponse.  # noqa: E501

        Container for adjustments of a subscription.   # noqa: E501

        :return: The adjustments of this GetBillingAdjustmentsResponse.  # noqa: E501
        :rtype: list[BillingAdjustment]
        """
        return self._adjustments

    @adjustments.setter
    def adjustments(self, adjustments):
        """Sets the adjustments of this GetBillingAdjustmentsResponse.

        Container for adjustments of a subscription.   # noqa: E501

        :param adjustments: The adjustments of this GetBillingAdjustmentsResponse.  # noqa: E501
        :type: list[BillingAdjustment]
        """

        self._adjustments = adjustments

    @property
    def ineligible_adjustments(self):
        """Gets the ineligible_adjustments of this GetBillingAdjustmentsResponse.  # noqa: E501

        Container for ineligible adjustments of a subscription.   # noqa: E501

        :return: The ineligible_adjustments of this GetBillingAdjustmentsResponse.  # noqa: E501
        :rtype: list[IneligibleBillingAdjustment]
        """
        return self._ineligible_adjustments

    @ineligible_adjustments.setter
    def ineligible_adjustments(self, ineligible_adjustments):
        """Sets the ineligible_adjustments of this GetBillingAdjustmentsResponse.

        Container for ineligible adjustments of a subscription.   # noqa: E501

        :param ineligible_adjustments: The ineligible_adjustments of this GetBillingAdjustmentsResponse.  # noqa: E501
        :type: list[IneligibleBillingAdjustment]
        """

        self._ineligible_adjustments = ineligible_adjustments

    @property
    def total_amount(self):
        """Gets the total_amount of this GetBillingAdjustmentsResponse.  # noqa: E501

        The total amount of all the adjustments.   # noqa: E501

        :return: The total_amount of this GetBillingAdjustmentsResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this GetBillingAdjustmentsResponse.

        The total amount of all the adjustments.   # noqa: E501

        :param total_amount: The total_amount of this GetBillingAdjustmentsResponse.  # noqa: E501
        :type: float
        """

        self._total_amount = total_amount

    @property
    def total_quantity(self):
        """Gets the total_quantity of this GetBillingAdjustmentsResponse.  # noqa: E501

        The total quantity of all the adjustments.   # noqa: E501

        :return: The total_quantity of this GetBillingAdjustmentsResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_quantity

    @total_quantity.setter
    def total_quantity(self, total_quantity):
        """Sets the total_quantity of this GetBillingAdjustmentsResponse.

        The total quantity of all the adjustments.   # noqa: E501

        :param total_quantity: The total_quantity of this GetBillingAdjustmentsResponse.  # noqa: E501
        :type: float
        """

        self._total_quantity = total_quantity

    @property
    def total_number_of_deliveries(self):
        """Gets the total_number_of_deliveries of this GetBillingAdjustmentsResponse.  # noqa: E501


        :return: The total_number_of_deliveries of this GetBillingAdjustmentsResponse.  # noqa: E501
        :rtype: float
        """
        return self._total_number_of_deliveries

    @total_number_of_deliveries.setter
    def total_number_of_deliveries(self, total_number_of_deliveries):
        """Sets the total_number_of_deliveries of this GetBillingAdjustmentsResponse.


        :param total_number_of_deliveries: The total_number_of_deliveries of this GetBillingAdjustmentsResponse.  # noqa: E501
        :type: float
        """

        self._total_number_of_deliveries = total_number_of_deliveries

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetBillingAdjustmentsResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetBillingAdjustmentsResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
