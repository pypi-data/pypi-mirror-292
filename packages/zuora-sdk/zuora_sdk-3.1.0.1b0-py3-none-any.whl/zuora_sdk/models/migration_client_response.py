# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MigrationClientResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email_ids': 'str',
        'environment': 'str',
        'id': 'str',
        'migrated_by': 'str',
        'migration_description': 'str',
        'migration_end': 'str',
        'migration_name': 'str',
        'migration_start': 'str',
        'response': 'list[MigrationComponentContent]',
        'source_tenant_description': 'str',
        'source_tenant_name': 'str',
        'status': 'str',
        'type': 'str'
    }

    attribute_map = {
        'email_ids': 'emailIds',
        'environment': 'environment',
        'id': 'id',
        'migrated_by': 'migratedBy',
        'migration_description': 'migrationDescription',
        'migration_end': 'migrationEnd',
        'migration_name': 'migrationName',
        'migration_start': 'migrationStart',
        'response': 'response',
        'source_tenant_description': 'sourceTenantDescription',
        'source_tenant_name': 'sourceTenantName',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, email_ids=None, environment=None, id=None, migrated_by=None, migration_description=None, migration_end=None, migration_name=None, migration_start=None, response=None, source_tenant_description=None, source_tenant_name=None, status=None, type=None):  # noqa: E501
        """MigrationClientResponse - a model defined in Swagger"""  # noqa: E501
        self._email_ids = None
        self._environment = None
        self._id = None
        self._migrated_by = None
        self._migration_description = None
        self._migration_end = None
        self._migration_name = None
        self._migration_start = None
        self._response = None
        self._source_tenant_description = None
        self._source_tenant_name = None
        self._status = None
        self._type = None
        self.discriminator = None
        if email_ids is not None:
            self.email_ids = email_ids
        if environment is not None:
            self.environment = environment
        self.id = id
        self.migrated_by = migrated_by
        self.migration_description = migration_description
        self.migration_end = migration_end
        self.migration_name = migration_name
        self.migration_start = migration_start
        if response is not None:
            self.response = response
        self.source_tenant_description = source_tenant_description
        self.source_tenant_name = source_tenant_name
        self.status = status
        if type is not None:
            self.type = type

    @property
    def email_ids(self):
        """Gets the email_ids of this MigrationClientResponse.  # noqa: E501

        List of Emails with comma separator   # noqa: E501

        :return: The email_ids of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._email_ids

    @email_ids.setter
    def email_ids(self, email_ids):
        """Sets the email_ids of this MigrationClientResponse.

        List of Emails with comma separator   # noqa: E501

        :param email_ids: The email_ids of this MigrationClientResponse.  # noqa: E501
        :type: str
        """

        self._email_ids = email_ids

    @property
    def environment(self):
        """Gets the environment of this MigrationClientResponse.  # noqa: E501

        Environment information  # noqa: E501

        :return: The environment of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this MigrationClientResponse.

        Environment information  # noqa: E501

        :param environment: The environment of this MigrationClientResponse.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def id(self):
        """Gets the id of this MigrationClientResponse.  # noqa: E501

        Variable to hold the job ID.  # noqa: E501

        :return: The id of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MigrationClientResponse.

        Variable to hold the job ID.  # noqa: E501

        :param id: The id of this MigrationClientResponse.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def migrated_by(self):
        """Gets the migrated_by of this MigrationClientResponse.  # noqa: E501

        User responsible for migration.  # noqa: E501

        :return: The migrated_by of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._migrated_by

    @migrated_by.setter
    def migrated_by(self, migrated_by):
        """Sets the migrated_by of this MigrationClientResponse.

        User responsible for migration.  # noqa: E501

        :param migrated_by: The migrated_by of this MigrationClientResponse.  # noqa: E501
        :type: str
        """
        if migrated_by is None:
            raise ValueError("Invalid value for `migrated_by`, must not be `None`")  # noqa: E501

        self._migrated_by = migrated_by

    @property
    def migration_description(self):
        """Gets the migration_description of this MigrationClientResponse.  # noqa: E501

        Description of the migration.  # noqa: E501

        :return: The migration_description of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._migration_description

    @migration_description.setter
    def migration_description(self, migration_description):
        """Sets the migration_description of this MigrationClientResponse.

        Description of the migration.  # noqa: E501

        :param migration_description: The migration_description of this MigrationClientResponse.  # noqa: E501
        :type: str
        """
        if migration_description is None:
            raise ValueError("Invalid value for `migration_description`, must not be `None`")  # noqa: E501

        self._migration_description = migration_description

    @property
    def migration_end(self):
        """Gets the migration_end of this MigrationClientResponse.  # noqa: E501

        Timestamp when migration ended.  # noqa: E501

        :return: The migration_end of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._migration_end

    @migration_end.setter
    def migration_end(self, migration_end):
        """Sets the migration_end of this MigrationClientResponse.

        Timestamp when migration ended.  # noqa: E501

        :param migration_end: The migration_end of this MigrationClientResponse.  # noqa: E501
        :type: str
        """
        if migration_end is None:
            raise ValueError("Invalid value for `migration_end`, must not be `None`")  # noqa: E501

        self._migration_end = migration_end

    @property
    def migration_name(self):
        """Gets the migration_name of this MigrationClientResponse.  # noqa: E501

        Name of the migration.  # noqa: E501

        :return: The migration_name of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._migration_name

    @migration_name.setter
    def migration_name(self, migration_name):
        """Sets the migration_name of this MigrationClientResponse.

        Name of the migration.  # noqa: E501

        :param migration_name: The migration_name of this MigrationClientResponse.  # noqa: E501
        :type: str
        """
        if migration_name is None:
            raise ValueError("Invalid value for `migration_name`, must not be `None`")  # noqa: E501

        self._migration_name = migration_name

    @property
    def migration_start(self):
        """Gets the migration_start of this MigrationClientResponse.  # noqa: E501

        Timestamp when migration started.  # noqa: E501

        :return: The migration_start of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._migration_start

    @migration_start.setter
    def migration_start(self, migration_start):
        """Sets the migration_start of this MigrationClientResponse.

        Timestamp when migration started.  # noqa: E501

        :param migration_start: The migration_start of this MigrationClientResponse.  # noqa: E501
        :type: str
        """
        if migration_start is None:
            raise ValueError("Invalid value for `migration_start`, must not be `None`")  # noqa: E501

        self._migration_start = migration_start

    @property
    def response(self):
        """Gets the response of this MigrationClientResponse.  # noqa: E501


        :return: The response of this MigrationClientResponse.  # noqa: E501
        :rtype: list[MigrationComponentContent]
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this MigrationClientResponse.


        :param response: The response of this MigrationClientResponse.  # noqa: E501
        :type: list[MigrationComponentContent]
        """

        self._response = response

    @property
    def source_tenant_description(self):
        """Gets the source_tenant_description of this MigrationClientResponse.  # noqa: E501

        Source Tenant Description.  # noqa: E501

        :return: The source_tenant_description of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_tenant_description

    @source_tenant_description.setter
    def source_tenant_description(self, source_tenant_description):
        """Sets the source_tenant_description of this MigrationClientResponse.

        Source Tenant Description.  # noqa: E501

        :param source_tenant_description: The source_tenant_description of this MigrationClientResponse.  # noqa: E501
        :type: str
        """
        if source_tenant_description is None:
            raise ValueError("Invalid value for `source_tenant_description`, must not be `None`")  # noqa: E501

        self._source_tenant_description = source_tenant_description

    @property
    def source_tenant_name(self):
        """Gets the source_tenant_name of this MigrationClientResponse.  # noqa: E501

        Source Tenant Name.  # noqa: E501

        :return: The source_tenant_name of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_tenant_name

    @source_tenant_name.setter
    def source_tenant_name(self, source_tenant_name):
        """Sets the source_tenant_name of this MigrationClientResponse.

        Source Tenant Name.  # noqa: E501

        :param source_tenant_name: The source_tenant_name of this MigrationClientResponse.  # noqa: E501
        :type: str
        """
        if source_tenant_name is None:
            raise ValueError("Invalid value for `source_tenant_name`, must not be `None`")  # noqa: E501

        self._source_tenant_name = source_tenant_name

    @property
    def status(self):
        """Gets the status of this MigrationClientResponse.  # noqa: E501

        Status of the Migration Job.  # noqa: E501

        :return: The status of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this MigrationClientResponse.

        Status of the Migration Job.  # noqa: E501

        :param status: The status of this MigrationClientResponse.  # noqa: E501
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def type(self):
        """Gets the type of this MigrationClientResponse.  # noqa: E501


        :return: The type of this MigrationClientResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MigrationClientResponse.


        :param type: The type of this MigrationClientResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MigrationClientResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MigrationClientResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
