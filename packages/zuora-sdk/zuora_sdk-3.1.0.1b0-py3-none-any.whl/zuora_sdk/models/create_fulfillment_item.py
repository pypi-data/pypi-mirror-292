# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateFulfillmentItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fulfillment_number': 'str',
        'custom_fields': 'dict(str, object)',
        'description': 'str',
        'item_identifier': 'str',
        'fulfillment_id': 'str',
        'fulfillment_external_id': 'str'
    }

    attribute_map = {
        'fulfillment_number': 'fulfillmentNumber',
        'custom_fields': 'customFields',
        'description': 'description',
        'item_identifier': 'itemIdentifier',
        'fulfillment_id': 'fulfillmentId',
        'fulfillment_external_id': 'fulfillmentExternalId'
    }

    def __init__(self, fulfillment_number=None, custom_fields=None, description=None, item_identifier=None, fulfillment_id=None, fulfillment_external_id=None):  # noqa: E501
        """CreateFulfillmentItem - a model defined in Swagger"""  # noqa: E501
        self._fulfillment_number = None
        self._custom_fields = None
        self._description = None
        self._item_identifier = None
        self._fulfillment_id = None
        self._fulfillment_external_id = None
        self.discriminator = None
        if fulfillment_number is not None:
            self.fulfillment_number = fulfillment_number
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if description is not None:
            self.description = description
        if item_identifier is not None:
            self.item_identifier = item_identifier
        if fulfillment_id is not None:
            self.fulfillment_id = fulfillment_id
        if fulfillment_external_id is not None:
            self.fulfillment_external_id = fulfillment_external_id

    @property
    def fulfillment_number(self):
        """Gets the fulfillment_number of this CreateFulfillmentItem.  # noqa: E501

        The reference of the related Fulfillment.   # noqa: E501

        :return: The fulfillment_number of this CreateFulfillmentItem.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_number

    @fulfillment_number.setter
    def fulfillment_number(self, fulfillment_number):
        """Sets the fulfillment_number of this CreateFulfillmentItem.

        The reference of the related Fulfillment.   # noqa: E501

        :param fulfillment_number: The fulfillment_number of this CreateFulfillmentItem.  # noqa: E501
        :type: str
        """

        self._fulfillment_number = fulfillment_number

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CreateFulfillmentItem.  # noqa: E501

        Container for custom fields of a Fulfillment Item object.   # noqa: E501

        :return: The custom_fields of this CreateFulfillmentItem.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CreateFulfillmentItem.

        Container for custom fields of a Fulfillment Item object.   # noqa: E501

        :param custom_fields: The custom_fields of this CreateFulfillmentItem.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this CreateFulfillmentItem.  # noqa: E501

        The description of the Fulfillment Item.   # noqa: E501

        :return: The description of this CreateFulfillmentItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateFulfillmentItem.

        The description of the Fulfillment Item.   # noqa: E501

        :param description: The description of this CreateFulfillmentItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def item_identifier(self):
        """Gets the item_identifier of this CreateFulfillmentItem.  # noqa: E501

        The external identifier of the Fulfillment Item.   # noqa: E501

        :return: The item_identifier of this CreateFulfillmentItem.  # noqa: E501
        :rtype: str
        """
        return self._item_identifier

    @item_identifier.setter
    def item_identifier(self, item_identifier):
        """Sets the item_identifier of this CreateFulfillmentItem.

        The external identifier of the Fulfillment Item.   # noqa: E501

        :param item_identifier: The item_identifier of this CreateFulfillmentItem.  # noqa: E501
        :type: str
        """

        self._item_identifier = item_identifier

    @property
    def fulfillment_id(self):
        """Gets the fulfillment_id of this CreateFulfillmentItem.  # noqa: E501

        The fulfillment Id of the Fulfillment Item.   # noqa: E501

        :return: The fulfillment_id of this CreateFulfillmentItem.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_id

    @fulfillment_id.setter
    def fulfillment_id(self, fulfillment_id):
        """Sets the fulfillment_id of this CreateFulfillmentItem.

        The fulfillment Id of the Fulfillment Item.   # noqa: E501

        :param fulfillment_id: The fulfillment_id of this CreateFulfillmentItem.  # noqa: E501
        :type: str
        """

        self._fulfillment_id = fulfillment_id

    @property
    def fulfillment_external_id(self):
        """Gets the fulfillment_external_id of this CreateFulfillmentItem.  # noqa: E501

        The fulfillmentExternalId of the Fulfillment Item.   # noqa: E501

        :return: The fulfillment_external_id of this CreateFulfillmentItem.  # noqa: E501
        :rtype: str
        """
        return self._fulfillment_external_id

    @fulfillment_external_id.setter
    def fulfillment_external_id(self, fulfillment_external_id):
        """Sets the fulfillment_external_id of this CreateFulfillmentItem.

        The fulfillmentExternalId of the Fulfillment Item.   # noqa: E501

        :param fulfillment_external_id: The fulfillment_external_id of this CreateFulfillmentItem.  # noqa: E501
        :type: str
        """

        self._fulfillment_external_id = fulfillment_external_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateFulfillmentItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateFulfillmentItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
