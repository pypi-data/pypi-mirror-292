# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetCreditMemoTaxationItemResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'applied_amount': 'float',
        'exempt_amount': 'float',
        'finance_information': 'GetCreditMemoTaxItemFinanceInformation',
        'id': 'str',
        'jurisdiction': 'str',
        'location_code': 'str',
        'name': 'str',
        'refund_amount': 'float',
        'source_tax_item_id': 'str',
        'tax_amount': 'float',
        'tax_code': 'str',
        'tax_code_description': 'str',
        'tax_date': 'date',
        'tax_rate': 'float',
        'tax_rate_description': 'str',
        'tax_rate_type': 'TaxRateType',
        'unapplied_amount': 'float'
    }

    attribute_map = {
        'applied_amount': 'appliedAmount',
        'exempt_amount': 'exemptAmount',
        'finance_information': 'financeInformation',
        'id': 'id',
        'jurisdiction': 'jurisdiction',
        'location_code': 'locationCode',
        'name': 'name',
        'refund_amount': 'refundAmount',
        'source_tax_item_id': 'sourceTaxItemId',
        'tax_amount': 'taxAmount',
        'tax_code': 'taxCode',
        'tax_code_description': 'taxCodeDescription',
        'tax_date': 'taxDate',
        'tax_rate': 'taxRate',
        'tax_rate_description': 'taxRateDescription',
        'tax_rate_type': 'taxRateType',
        'unapplied_amount': 'unappliedAmount'
    }

    def __init__(self, applied_amount=None, exempt_amount=None, finance_information=None, id=None, jurisdiction=None, location_code=None, name=None, refund_amount=None, source_tax_item_id=None, tax_amount=None, tax_code=None, tax_code_description=None, tax_date=None, tax_rate=None, tax_rate_description=None, tax_rate_type=None, unapplied_amount=None):  # noqa: E501
        """GetCreditMemoTaxationItemResponse - a model defined in Swagger"""  # noqa: E501
        self._applied_amount = None
        self._exempt_amount = None
        self._finance_information = None
        self._id = None
        self._jurisdiction = None
        self._location_code = None
        self._name = None
        self._refund_amount = None
        self._source_tax_item_id = None
        self._tax_amount = None
        self._tax_code = None
        self._tax_code_description = None
        self._tax_date = None
        self._tax_rate = None
        self._tax_rate_description = None
        self._tax_rate_type = None
        self._unapplied_amount = None
        self.discriminator = None
        if applied_amount is not None:
            self.applied_amount = applied_amount
        if exempt_amount is not None:
            self.exempt_amount = exempt_amount
        if finance_information is not None:
            self.finance_information = finance_information
        if id is not None:
            self.id = id
        if jurisdiction is not None:
            self.jurisdiction = jurisdiction
        if location_code is not None:
            self.location_code = location_code
        if name is not None:
            self.name = name
        if refund_amount is not None:
            self.refund_amount = refund_amount
        if source_tax_item_id is not None:
            self.source_tax_item_id = source_tax_item_id
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_code_description is not None:
            self.tax_code_description = tax_code_description
        if tax_date is not None:
            self.tax_date = tax_date
        if tax_rate is not None:
            self.tax_rate = tax_rate
        if tax_rate_description is not None:
            self.tax_rate_description = tax_rate_description
        if tax_rate_type is not None:
            self.tax_rate_type = tax_rate_type
        if unapplied_amount is not None:
            self.unapplied_amount = unapplied_amount

    @property
    def applied_amount(self):
        """Gets the applied_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The applied amount of the taxation item.   # noqa: E501

        :return: The applied_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: float
        """
        return self._applied_amount

    @applied_amount.setter
    def applied_amount(self, applied_amount):
        """Sets the applied_amount of this GetCreditMemoTaxationItemResponse.

        The applied amount of the taxation item.   # noqa: E501

        :param applied_amount: The applied_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: float
        """

        self._applied_amount = applied_amount

    @property
    def exempt_amount(self):
        """Gets the exempt_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The calculated tax amount excluded due to the exemption.   # noqa: E501

        :return: The exempt_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: float
        """
        return self._exempt_amount

    @exempt_amount.setter
    def exempt_amount(self, exempt_amount):
        """Sets the exempt_amount of this GetCreditMemoTaxationItemResponse.

        The calculated tax amount excluded due to the exemption.   # noqa: E501

        :param exempt_amount: The exempt_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: float
        """

        self._exempt_amount = exempt_amount

    @property
    def finance_information(self):
        """Gets the finance_information of this GetCreditMemoTaxationItemResponse.  # noqa: E501


        :return: The finance_information of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: GetCreditMemoTaxItemFinanceInformation
        """
        return self._finance_information

    @finance_information.setter
    def finance_information(self, finance_information):
        """Sets the finance_information of this GetCreditMemoTaxationItemResponse.


        :param finance_information: The finance_information of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: GetCreditMemoTaxItemFinanceInformation
        """

        self._finance_information = finance_information

    @property
    def id(self):
        """Gets the id of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The ID of the taxation item.   # noqa: E501

        :return: The id of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetCreditMemoTaxationItemResponse.

        The ID of the taxation item.   # noqa: E501

        :param id: The id of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def jurisdiction(self):
        """Gets the jurisdiction of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.   # noqa: E501

        :return: The jurisdiction of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._jurisdiction

    @jurisdiction.setter
    def jurisdiction(self, jurisdiction):
        """Sets the jurisdiction of this GetCreditMemoTaxationItemResponse.

        The jurisdiction that applies the tax or VAT. This value is typically a state, province, county, or city.   # noqa: E501

        :param jurisdiction: The jurisdiction of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: str
        """

        self._jurisdiction = jurisdiction

    @property
    def location_code(self):
        """Gets the location_code of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The identifier for the location based on the value of the `taxCode` field.   # noqa: E501

        :return: The location_code of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._location_code

    @location_code.setter
    def location_code(self, location_code):
        """Sets the location_code of this GetCreditMemoTaxationItemResponse.

        The identifier for the location based on the value of the `taxCode` field.   # noqa: E501

        :param location_code: The location_code of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: str
        """

        self._location_code = location_code

    @property
    def name(self):
        """Gets the name of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The name of the taxation item.   # noqa: E501

        :return: The name of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetCreditMemoTaxationItemResponse.

        The name of the taxation item.   # noqa: E501

        :param name: The name of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def refund_amount(self):
        """Gets the refund_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The amount of the refund on the taxation item.   # noqa: E501

        :return: The refund_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this GetCreditMemoTaxationItemResponse.

        The amount of the refund on the taxation item.   # noqa: E501

        :param refund_amount: The refund_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: float
        """

        self._refund_amount = refund_amount

    @property
    def source_tax_item_id(self):
        """Gets the source_tax_item_id of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The ID of the source taxation item.   # noqa: E501

        :return: The source_tax_item_id of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._source_tax_item_id

    @source_tax_item_id.setter
    def source_tax_item_id(self, source_tax_item_id):
        """Sets the source_tax_item_id of this GetCreditMemoTaxationItemResponse.

        The ID of the source taxation item.   # noqa: E501

        :param source_tax_item_id: The source_tax_item_id of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: str
        """

        self._source_tax_item_id = source_tax_item_id

    @property
    def tax_amount(self):
        """Gets the tax_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The amount of taxation.   # noqa: E501

        :return: The tax_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this GetCreditMemoTaxationItemResponse.

        The amount of taxation.   # noqa: E501

        :param tax_amount: The tax_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_code(self):
        """Gets the tax_code of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The tax code identifies which tax rules and tax rates to apply to a specific credit memo.   # noqa: E501

        :return: The tax_code of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this GetCreditMemoTaxationItemResponse.

        The tax code identifies which tax rules and tax rates to apply to a specific credit memo.   # noqa: E501

        :param tax_code: The tax_code of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_code_description(self):
        """Gets the tax_code_description of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The description of the tax code.   # noqa: E501

        :return: The tax_code_description of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._tax_code_description

    @tax_code_description.setter
    def tax_code_description(self, tax_code_description):
        """Sets the tax_code_description of this GetCreditMemoTaxationItemResponse.

        The description of the tax code.   # noqa: E501

        :param tax_code_description: The tax_code_description of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: str
        """

        self._tax_code_description = tax_code_description

    @property
    def tax_date(self):
        """Gets the tax_date of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The date that the tax is applied to the credit memo, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The tax_date of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: date
        """
        return self._tax_date

    @tax_date.setter
    def tax_date(self, tax_date):
        """Sets the tax_date of this GetCreditMemoTaxationItemResponse.

        The date that the tax is applied to the credit memo, in `yyyy-mm-dd` format.   # noqa: E501

        :param tax_date: The tax_date of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: date
        """

        self._tax_date = tax_date

    @property
    def tax_rate(self):
        """Gets the tax_rate of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The tax rate applied to the credit memo.   # noqa: E501

        :return: The tax_rate of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this GetCreditMemoTaxationItemResponse.

        The tax rate applied to the credit memo.   # noqa: E501

        :param tax_rate: The tax_rate of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: float
        """

        self._tax_rate = tax_rate

    @property
    def tax_rate_description(self):
        """Gets the tax_rate_description of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The description of the tax rate.   # noqa: E501

        :return: The tax_rate_description of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: str
        """
        return self._tax_rate_description

    @tax_rate_description.setter
    def tax_rate_description(self, tax_rate_description):
        """Sets the tax_rate_description of this GetCreditMemoTaxationItemResponse.

        The description of the tax rate.   # noqa: E501

        :param tax_rate_description: The tax_rate_description of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: str
        """

        self._tax_rate_description = tax_rate_description

    @property
    def tax_rate_type(self):
        """Gets the tax_rate_type of this GetCreditMemoTaxationItemResponse.  # noqa: E501


        :return: The tax_rate_type of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: TaxRateType
        """
        return self._tax_rate_type

    @tax_rate_type.setter
    def tax_rate_type(self, tax_rate_type):
        """Sets the tax_rate_type of this GetCreditMemoTaxationItemResponse.


        :param tax_rate_type: The tax_rate_type of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: TaxRateType
        """

        self._tax_rate_type = tax_rate_type

    @property
    def unapplied_amount(self):
        """Gets the unapplied_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501

        The unapplied amount of the taxation item.   # noqa: E501

        :return: The unapplied_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :rtype: float
        """
        return self._unapplied_amount

    @unapplied_amount.setter
    def unapplied_amount(self, unapplied_amount):
        """Sets the unapplied_amount of this GetCreditMemoTaxationItemResponse.

        The unapplied amount of the taxation item.   # noqa: E501

        :param unapplied_amount: The unapplied_amount of this GetCreditMemoTaxationItemResponse.  # noqa: E501
        :type: float
        """

        self._unapplied_amount = unapplied_amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetCreditMemoTaxationItemResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetCreditMemoTaxationItemResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
