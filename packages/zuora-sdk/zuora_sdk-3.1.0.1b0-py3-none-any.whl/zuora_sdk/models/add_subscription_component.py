# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddSubscriptionComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amended_by_order_on': 'str',
        'apply_discount_to': 'str',
        'bill_cycle_day': 'str',
        'bill_cycle_type': 'str',
        'billing_period': 'str',
        'billing_period_alignment': 'str',
        'billing_timing': 'str',
        'charge_model_configuration': 'ChargeModelConfigurationForSubscription',
        'description': 'str',
        'discount_amount': 'float',
        'discount_level': 'str',
        'discount_percentage': 'float',
        'end_date_condition': 'str',
        'exclude_item_billing_from_revenue_accounting': 'bool',
        'exclude_item_booking_from_revenue_accounting': 'bool',
        'included_units': 'float',
        'is_allocation_eligible': 'bool',
        'is_unbilled': 'bool',
        'list_price_base': 'str',
        'number': 'str',
        'number_of_periods': 'int',
        'original_order_date': 'date',
        'overage_price': 'float',
        'overage_unused_units_credit_option': 'str',
        'price': 'float',
        'price_change_option': 'str',
        'price_increase_percentage': 'float',
        'product_rate_plan_charge_id': 'str',
        'product_rate_plan_charge_number': 'str',
        'quantity': 'float',
        'rating_group': 'str',
        'specific_billing_period': 'int',
        'specific_end_date': 'date',
        'specific_list_price_base': 'int',
        'tiers': 'list[Tier]',
        'trigger_date': 'date',
        'trigger_event': 'str',
        'unused_units_credit_rates': 'float',
        'up_to_periods': 'int',
        'up_to_periods_type': 'str'
    }

    attribute_map = {
        'amended_by_order_on': 'amendedByOrderOn',
        'apply_discount_to': 'applyDiscountTo',
        'bill_cycle_day': 'billCycleDay',
        'bill_cycle_type': 'billCycleType',
        'billing_period': 'billingPeriod',
        'billing_period_alignment': 'billingPeriodAlignment',
        'billing_timing': 'billingTiming',
        'charge_model_configuration': 'chargeModelConfiguration',
        'description': 'description',
        'discount_amount': 'discountAmount',
        'discount_level': 'discountLevel',
        'discount_percentage': 'discountPercentage',
        'end_date_condition': 'endDateCondition',
        'exclude_item_billing_from_revenue_accounting': 'excludeItemBillingFromRevenueAccounting',
        'exclude_item_booking_from_revenue_accounting': 'excludeItemBookingFromRevenueAccounting',
        'included_units': 'includedUnits',
        'is_allocation_eligible': 'isAllocationEligible',
        'is_unbilled': 'isUnbilled',
        'list_price_base': 'listPriceBase',
        'number': 'number',
        'number_of_periods': 'numberOfPeriods',
        'original_order_date': 'originalOrderDate',
        'overage_price': 'overagePrice',
        'overage_unused_units_credit_option': 'overageUnusedUnitsCreditOption',
        'price': 'price',
        'price_change_option': 'priceChangeOption',
        'price_increase_percentage': 'priceIncreasePercentage',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'product_rate_plan_charge_number': 'productRatePlanChargeNumber',
        'quantity': 'quantity',
        'rating_group': 'ratingGroup',
        'specific_billing_period': 'specificBillingPeriod',
        'specific_end_date': 'specificEndDate',
        'specific_list_price_base': 'specificListPriceBase',
        'tiers': 'tiers',
        'trigger_date': 'triggerDate',
        'trigger_event': 'triggerEvent',
        'unused_units_credit_rates': 'unusedUnitsCreditRates',
        'up_to_periods': 'upToPeriods',
        'up_to_periods_type': 'upToPeriodsType'
    }

    def __init__(self, amended_by_order_on=None, apply_discount_to=None, bill_cycle_day=None, bill_cycle_type=None, billing_period=None, billing_period_alignment=None, billing_timing=None, charge_model_configuration=None, description=None, discount_amount=None, discount_level=None, discount_percentage=None, end_date_condition=None, exclude_item_billing_from_revenue_accounting=None, exclude_item_booking_from_revenue_accounting=None, included_units=None, is_allocation_eligible=None, is_unbilled=None, list_price_base=None, number=None, number_of_periods=None, original_order_date=None, overage_price=None, overage_unused_units_credit_option=None, price=None, price_change_option=None, price_increase_percentage=None, product_rate_plan_charge_id=None, product_rate_plan_charge_number=None, quantity=None, rating_group=None, specific_billing_period=None, specific_end_date=None, specific_list_price_base=None, tiers=None, trigger_date=None, trigger_event=None, unused_units_credit_rates=None, up_to_periods=None, up_to_periods_type=None):  # noqa: E501
        """AddSubscriptionComponent - a model defined in Swagger"""  # noqa: E501
        self._amended_by_order_on = None
        self._apply_discount_to = None
        self._bill_cycle_day = None
        self._bill_cycle_type = None
        self._billing_period = None
        self._billing_period_alignment = None
        self._billing_timing = None
        self._charge_model_configuration = None
        self._description = None
        self._discount_amount = None
        self._discount_level = None
        self._discount_percentage = None
        self._end_date_condition = None
        self._exclude_item_billing_from_revenue_accounting = None
        self._exclude_item_booking_from_revenue_accounting = None
        self._included_units = None
        self._is_allocation_eligible = None
        self._is_unbilled = None
        self._list_price_base = None
        self._number = None
        self._number_of_periods = None
        self._original_order_date = None
        self._overage_price = None
        self._overage_unused_units_credit_option = None
        self._price = None
        self._price_change_option = None
        self._price_increase_percentage = None
        self._product_rate_plan_charge_id = None
        self._product_rate_plan_charge_number = None
        self._quantity = None
        self._rating_group = None
        self._specific_billing_period = None
        self._specific_end_date = None
        self._specific_list_price_base = None
        self._tiers = None
        self._trigger_date = None
        self._trigger_event = None
        self._unused_units_credit_rates = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self.discriminator = None
        if amended_by_order_on is not None:
            self.amended_by_order_on = amended_by_order_on
        if apply_discount_to is not None:
            self.apply_discount_to = apply_discount_to
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if bill_cycle_type is not None:
            self.bill_cycle_type = bill_cycle_type
        if billing_period is not None:
            self.billing_period = billing_period
        if billing_period_alignment is not None:
            self.billing_period_alignment = billing_period_alignment
        if billing_timing is not None:
            self.billing_timing = billing_timing
        if charge_model_configuration is not None:
            self.charge_model_configuration = charge_model_configuration
        if description is not None:
            self.description = description
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_level is not None:
            self.discount_level = discount_level
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if exclude_item_billing_from_revenue_accounting is not None:
            self.exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting
        if exclude_item_booking_from_revenue_accounting is not None:
            self.exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting
        if included_units is not None:
            self.included_units = included_units
        if is_allocation_eligible is not None:
            self.is_allocation_eligible = is_allocation_eligible
        if is_unbilled is not None:
            self.is_unbilled = is_unbilled
        if list_price_base is not None:
            self.list_price_base = list_price_base
        if number is not None:
            self.number = number
        if number_of_periods is not None:
            self.number_of_periods = number_of_periods
        if original_order_date is not None:
            self.original_order_date = original_order_date
        if overage_price is not None:
            self.overage_price = overage_price
        if overage_unused_units_credit_option is not None:
            self.overage_unused_units_credit_option = overage_unused_units_credit_option
        if price is not None:
            self.price = price
        if price_change_option is not None:
            self.price_change_option = price_change_option
        if price_increase_percentage is not None:
            self.price_increase_percentage = price_increase_percentage
        self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if product_rate_plan_charge_number is not None:
            self.product_rate_plan_charge_number = product_rate_plan_charge_number
        if quantity is not None:
            self.quantity = quantity
        if rating_group is not None:
            self.rating_group = rating_group
        if specific_billing_period is not None:
            self.specific_billing_period = specific_billing_period
        if specific_end_date is not None:
            self.specific_end_date = specific_end_date
        if specific_list_price_base is not None:
            self.specific_list_price_base = specific_list_price_base
        if tiers is not None:
            self.tiers = tiers
        if trigger_date is not None:
            self.trigger_date = trigger_date
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if unused_units_credit_rates is not None:
            self.unused_units_credit_rates = unused_units_credit_rates
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type

    @property
    def amended_by_order_on(self):
        """Gets the amended_by_order_on of this AddSubscriptionComponent.  # noqa: E501

        The date when the rate plan charge is amended through an order or amendment. This field is not updatable.  This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :return: The amended_by_order_on of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._amended_by_order_on

    @amended_by_order_on.setter
    def amended_by_order_on(self, amended_by_order_on):
        """Sets the amended_by_order_on of this AddSubscriptionComponent.

        The date when the rate plan charge is amended through an order or amendment. This field is not updatable.  This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :param amended_by_order_on: The amended_by_order_on of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._amended_by_order_on = amended_by_order_on

    @property
    def apply_discount_to(self):
        """Gets the apply_discount_to of this AddSubscriptionComponent.  # noqa: E501

        Specifies the type of charges that you want a specific discount to apply to.  Values:  * `ONETIME` * `RECURRING` * `USAGE` * `ONETIMERECURRING` * `ONETIMEUSAGE` * `RECURRINGUSAGE` * `ONETIMERECURRINGUSAGE`  Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:  * Recurring   # noqa: E501

        :return: The apply_discount_to of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._apply_discount_to

    @apply_discount_to.setter
    def apply_discount_to(self, apply_discount_to):
        """Sets the apply_discount_to of this AddSubscriptionComponent.

        Specifies the type of charges that you want a specific discount to apply to.  Values:  * `ONETIME` * `RECURRING` * `USAGE` * `ONETIMERECURRING` * `ONETIMEUSAGE` * `RECURRINGUSAGE` * `ONETIMERECURRINGUSAGE`  Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:  * Recurring   # noqa: E501

        :param apply_discount_to: The apply_discount_to of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._apply_discount_to = apply_discount_to

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this AddSubscriptionComponent.  # noqa: E501

        Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed.  Values: `1`-`31`  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :return: The bill_cycle_day of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this AddSubscriptionComponent.

        Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month customer is billed.  Values: `1`-`31`  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_cycle_type(self):
        """Gets the bill_cycle_type of this AddSubscriptionComponent.  # noqa: E501

        Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayofMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayofWeek`, set the `weeklyBillCycleDay` field.  Values:  * `DefaultFromCustomer` * `SpecificDayofMonth` * `SubscriptionStartDay` * `ChargeTriggerDay` * `SpecificDayofWeek`  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :return: The bill_cycle_type of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_type

    @bill_cycle_type.setter
    def bill_cycle_type(self, bill_cycle_type):
        """Sets the bill_cycle_type of this AddSubscriptionComponent.

        Specifies how to determine the billing day for the charge. When this field is set to `SpecificDayofMonth`, set the `BillCycleDay` field. When this field is set to `SpecificDayofWeek`, set the `weeklyBillCycleDay` field.  Values:  * `DefaultFromCustomer` * `SpecificDayofMonth` * `SubscriptionStartDay` * `ChargeTriggerDay` * `SpecificDayofWeek`  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :param bill_cycle_type: The bill_cycle_type of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._bill_cycle_type = bill_cycle_type

    @property
    def billing_period(self):
        """Gets the billing_period of this AddSubscriptionComponent.  # noqa: E501

        Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD). When you renew a subscription, the current subscription term is extended by creating a new term. If any charge in your subscription has the billing period set as `SubscriptionTerm`， a new charge segment is generated for the new term.  Values:  * `Month` * `Quarter` * `Semi_Annual` * `Annual` * `Eighteen_Months` * `Two_Years` * `Three_Years` * `Five_Years` * `Specific_Months` * `Subscription_Term` * `Week` * `Specific_Weeks`  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :return: The billing_period of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this AddSubscriptionComponent.

        Billing period for the charge. The start day of the billing period is also called the bill cycle day (BCD). When you renew a subscription, the current subscription term is extended by creating a new term. If any charge in your subscription has the billing period set as `SubscriptionTerm`， a new charge segment is generated for the new term.  Values:  * `Month` * `Quarter` * `Semi_Annual` * `Annual` * `Eighteen_Months` * `Two_Years` * `Three_Years` * `Five_Years` * `Specific_Months` * `Subscription_Term` * `Week` * `Specific_Weeks`  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :param billing_period: The billing_period of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._billing_period = billing_period

    @property
    def billing_period_alignment(self):
        """Gets the billing_period_alignment of this AddSubscriptionComponent.  # noqa: E501

        Aligns charges within the same subscription if multiple charges begin on different dates.  Values:  * `AlignToCharge` * `AlignToSubscriptionStart` * `AlignToTermStart`  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :return: The billing_period_alignment of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._billing_period_alignment

    @billing_period_alignment.setter
    def billing_period_alignment(self, billing_period_alignment):
        """Sets the billing_period_alignment of this AddSubscriptionComponent.

        Aligns charges within the same subscription if multiple charges begin on different dates.  Values:  * `AlignToCharge` * `AlignToSubscriptionStart` * `AlignToTermStart`  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :param billing_period_alignment: The billing_period_alignment of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._billing_period_alignment = billing_period_alignment

    @property
    def billing_timing(self):
        """Gets the billing_timing of this AddSubscriptionComponent.  # noqa: E501

        Billing timing for the charge for recurring charge types. Not avaliable for one time, usage and discount charges.  Values:  * `IN_ADVANCE` (default) * `IN_ARREARS`   # noqa: E501

        :return: The billing_timing of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this AddSubscriptionComponent.

        Billing timing for the charge for recurring charge types. Not avaliable for one time, usage and discount charges.  Values:  * `IN_ADVANCE` (default) * `IN_ARREARS`   # noqa: E501

        :param billing_timing: The billing_timing of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._billing_timing = billing_timing

    @property
    def charge_model_configuration(self):
        """Gets the charge_model_configuration of this AddSubscriptionComponent.  # noqa: E501


        :return: The charge_model_configuration of this AddSubscriptionComponent.  # noqa: E501
        :rtype: ChargeModelConfigurationForSubscription
        """
        return self._charge_model_configuration

    @charge_model_configuration.setter
    def charge_model_configuration(self, charge_model_configuration):
        """Sets the charge_model_configuration of this AddSubscriptionComponent.


        :param charge_model_configuration: The charge_model_configuration of this AddSubscriptionComponent.  # noqa: E501
        :type: ChargeModelConfigurationForSubscription
        """

        self._charge_model_configuration = charge_model_configuration

    @property
    def description(self):
        """Gets the description of this AddSubscriptionComponent.  # noqa: E501

        Description of the charge.   # noqa: E501

        :return: The description of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AddSubscriptionComponent.

        Description of the charge.   # noqa: E501

        :param description: The description of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this AddSubscriptionComponent.  # noqa: E501

        Specifies the amount of fixed-amount discount.  Available for the following charge type for the Discount-Fixed Amount charge model:  * Recurring   # noqa: E501

        :return: The discount_amount of this AddSubscriptionComponent.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this AddSubscriptionComponent.

        Specifies the amount of fixed-amount discount.  Available for the following charge type for the Discount-Fixed Amount charge model:  * Recurring   # noqa: E501

        :param discount_amount: The discount_amount of this AddSubscriptionComponent.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_level(self):
        """Gets the discount_level of this AddSubscriptionComponent.  # noqa: E501

        Specifies if the discount applies to the product rate plan only , the entire subscription, or to any activity in the account.  Values:  * `rateplan` * `subscription` * `account`  Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:  * Recurring   # noqa: E501

        :return: The discount_level of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._discount_level

    @discount_level.setter
    def discount_level(self, discount_level):
        """Sets the discount_level of this AddSubscriptionComponent.

        Specifies if the discount applies to the product rate plan only , the entire subscription, or to any activity in the account.  Values:  * `rateplan` * `subscription` * `account`  Available for the following charge type for the Discount-Fixed Amount and Discount-Percentage charge models:  * Recurring   # noqa: E501

        :param discount_level: The discount_level of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._discount_level = discount_level

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this AddSubscriptionComponent.  # noqa: E501

        Specifies the percentage of a percentage discount.   Available for the following charge type for the Discount-Percentage charge model:  * Recurring   # noqa: E501

        :return: The discount_percentage of this AddSubscriptionComponent.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this AddSubscriptionComponent.

        Specifies the percentage of a percentage discount.   Available for the following charge type for the Discount-Percentage charge model:  * Recurring   # noqa: E501

        :param discount_percentage: The discount_percentage of this AddSubscriptionComponent.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this AddSubscriptionComponent.  # noqa: E501

        Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.  Values:  * `Subscription_End` * `Fixed_Period` * `Specific_End_Date` * `One_Time`   # noqa: E501

        :return: The end_date_condition of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this AddSubscriptionComponent.

        Defines when the charge ends after the charge trigger date. If the subscription ends before the charge end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the charge end date.  Values:  * `Subscription_End` * `Fixed_Period` * `Specific_End_Date` * `One_Time`   # noqa: E501

        :param end_date_condition: The end_date_condition of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._end_date_condition = end_date_condition

    @property
    def exclude_item_billing_from_revenue_accounting(self):
        """Gets the exclude_item_billing_from_revenue_accounting of this AddSubscriptionComponent.  # noqa: E501

        The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.   # noqa: E501

        :return: The exclude_item_billing_from_revenue_accounting of this AddSubscriptionComponent.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_billing_from_revenue_accounting

    @exclude_item_billing_from_revenue_accounting.setter
    def exclude_item_billing_from_revenue_accounting(self, exclude_item_billing_from_revenue_accounting):
        """Sets the exclude_item_billing_from_revenue_accounting of this AddSubscriptionComponent.

        The flag to exclude rate plan charge related invoice items, invoice item adjustments, credit memo items, and debit memo items from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.   # noqa: E501

        :param exclude_item_billing_from_revenue_accounting: The exclude_item_billing_from_revenue_accounting of this AddSubscriptionComponent.  # noqa: E501
        :type: bool
        """

        self._exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting

    @property
    def exclude_item_booking_from_revenue_accounting(self):
        """Gets the exclude_item_booking_from_revenue_accounting of this AddSubscriptionComponent.  # noqa: E501

        The flag to exclude rate plan charges from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.   # noqa: E501

        :return: The exclude_item_booking_from_revenue_accounting of this AddSubscriptionComponent.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_booking_from_revenue_accounting

    @exclude_item_booking_from_revenue_accounting.setter
    def exclude_item_booking_from_revenue_accounting(self, exclude_item_booking_from_revenue_accounting):
        """Sets the exclude_item_booking_from_revenue_accounting of this AddSubscriptionComponent.

        The flag to exclude rate plan charges from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.   # noqa: E501

        :param exclude_item_booking_from_revenue_accounting: The exclude_item_booking_from_revenue_accounting of this AddSubscriptionComponent.  # noqa: E501
        :type: bool
        """

        self._exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting

    @property
    def included_units(self):
        """Gets the included_units of this AddSubscriptionComponent.  # noqa: E501

        Specifies the number of units in the base set of units for this charge. Must be >=`0`.  Available for the following charge type for the Overage charge model:  * Usage-based   # noqa: E501

        :return: The included_units of this AddSubscriptionComponent.  # noqa: E501
        :rtype: float
        """
        return self._included_units

    @included_units.setter
    def included_units(self, included_units):
        """Sets the included_units of this AddSubscriptionComponent.

        Specifies the number of units in the base set of units for this charge. Must be >=`0`.  Available for the following charge type for the Overage charge model:  * Usage-based   # noqa: E501

        :param included_units: The included_units of this AddSubscriptionComponent.  # noqa: E501
        :type: float
        """

        self._included_units = included_units

    @property
    def is_allocation_eligible(self):
        """Gets the is_allocation_eligible of this AddSubscriptionComponent.  # noqa: E501

        This field is used to identify if the charge segment is allocation eligible in revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :return: The is_allocation_eligible of this AddSubscriptionComponent.  # noqa: E501
        :rtype: bool
        """
        return self._is_allocation_eligible

    @is_allocation_eligible.setter
    def is_allocation_eligible(self, is_allocation_eligible):
        """Sets the is_allocation_eligible of this AddSubscriptionComponent.

        This field is used to identify if the charge segment is allocation eligible in revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :param is_allocation_eligible: The is_allocation_eligible of this AddSubscriptionComponent.  # noqa: E501
        :type: bool
        """

        self._is_allocation_eligible = is_allocation_eligible

    @property
    def is_unbilled(self):
        """Gets the is_unbilled of this AddSubscriptionComponent.  # noqa: E501

        This field is used to dictate how to perform the accounting during revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :return: The is_unbilled of this AddSubscriptionComponent.  # noqa: E501
        :rtype: bool
        """
        return self._is_unbilled

    @is_unbilled.setter
    def is_unbilled(self, is_unbilled):
        """Sets the is_unbilled of this AddSubscriptionComponent.

        This field is used to dictate how to perform the accounting during revenue recognition.  **Note**: This feature is in the **Early Adopter** phase. If you want to use the feature, submit a request at <a href=\"https://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>, and we will evaluate whether the feature is suitable for your use cases.   # noqa: E501

        :param is_unbilled: The is_unbilled of this AddSubscriptionComponent.  # noqa: E501
        :type: bool
        """

        self._is_unbilled = is_unbilled

    @property
    def list_price_base(self):
        """Gets the list_price_base of this AddSubscriptionComponent.  # noqa: E501

        The list price base for the product rate plan charge.  Values:  * `Per_Billing_Period` * `Per_Month` * `Per_Week` * `Per_Year` * `Per_Specific_Months`  Available for the following charge type for the Flat Fee, Per Unit, Volume Pricing, and Tiered Pricing charge models:  * Recurring   # noqa: E501

        :return: The list_price_base of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._list_price_base

    @list_price_base.setter
    def list_price_base(self, list_price_base):
        """Sets the list_price_base of this AddSubscriptionComponent.

        The list price base for the product rate plan charge.  Values:  * `Per_Billing_Period` * `Per_Month` * `Per_Week` * `Per_Year` * `Per_Specific_Months`  Available for the following charge type for the Flat Fee, Per Unit, Volume Pricing, and Tiered Pricing charge models:  * Recurring   # noqa: E501

        :param list_price_base: The list_price_base of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._list_price_base = list_price_base

    @property
    def number(self):
        """Gets the number of this AddSubscriptionComponent.  # noqa: E501

        Unique number that identifies the charge. System-generated if not provided.   # noqa: E501

        :return: The number of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this AddSubscriptionComponent.

        Unique number that identifies the charge. System-generated if not provided.   # noqa: E501

        :param number: The number of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def number_of_periods(self):
        """Gets the number_of_periods of this AddSubscriptionComponent.  # noqa: E501

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model.  Available for the following charge type for the Overage and Tiered with Overage charge models:  * Usage-based   # noqa: E501

        :return: The number_of_periods of this AddSubscriptionComponent.  # noqa: E501
        :rtype: int
        """
        return self._number_of_periods

    @number_of_periods.setter
    def number_of_periods(self, number_of_periods):
        """Sets the number_of_periods of this AddSubscriptionComponent.

        Specifies the number of periods to use when calculating charges in an overage smoothing charge model.  Available for the following charge type for the Overage and Tiered with Overage charge models:  * Usage-based   # noqa: E501

        :param number_of_periods: The number_of_periods of this AddSubscriptionComponent.  # noqa: E501
        :type: int
        """

        self._number_of_periods = number_of_periods

    @property
    def original_order_date(self):
        """Gets the original_order_date of this AddSubscriptionComponent.  # noqa: E501

        The date when the rate plan charge is created through an order or amendment. This field is not updatable.  This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :return: The original_order_date of this AddSubscriptionComponent.  # noqa: E501
        :rtype: date
        """
        return self._original_order_date

    @original_order_date.setter
    def original_order_date(self, original_order_date):
        """Sets the original_order_date of this AddSubscriptionComponent.

        The date when the rate plan charge is created through an order or amendment. This field is not updatable.  This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :param original_order_date: The original_order_date of this AddSubscriptionComponent.  # noqa: E501
        :type: date
        """

        self._original_order_date = original_order_date

    @property
    def overage_price(self):
        """Gets the overage_price of this AddSubscriptionComponent.  # noqa: E501

        Price for units over the allowed amount.   Available for the following charge type for the Overage and Tiered with Overage charge models:  * Usage-based   # noqa: E501

        :return: The overage_price of this AddSubscriptionComponent.  # noqa: E501
        :rtype: float
        """
        return self._overage_price

    @overage_price.setter
    def overage_price(self, overage_price):
        """Sets the overage_price of this AddSubscriptionComponent.

        Price for units over the allowed amount.   Available for the following charge type for the Overage and Tiered with Overage charge models:  * Usage-based   # noqa: E501

        :param overage_price: The overage_price of this AddSubscriptionComponent.  # noqa: E501
        :type: float
        """

        self._overage_price = overage_price

    @property
    def overage_unused_units_credit_option(self):
        """Gets the overage_unused_units_credit_option of this AddSubscriptionComponent.  # noqa: E501

        Determines whether to credit the customer with unused units of usage.  Values:  * `NoCredit` * `CreditBySpecificRate`  Available for the following charge type for the Overage and Tiered with Overage charge models:  * Usage-based   # noqa: E501

        :return: The overage_unused_units_credit_option of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._overage_unused_units_credit_option

    @overage_unused_units_credit_option.setter
    def overage_unused_units_credit_option(self, overage_unused_units_credit_option):
        """Sets the overage_unused_units_credit_option of this AddSubscriptionComponent.

        Determines whether to credit the customer with unused units of usage.  Values:  * `NoCredit` * `CreditBySpecificRate`  Available for the following charge type for the Overage and Tiered with Overage charge models:  * Usage-based   # noqa: E501

        :param overage_unused_units_credit_option: The overage_unused_units_credit_option of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._overage_unused_units_credit_option = overage_unused_units_credit_option

    @property
    def price(self):
        """Gets the price of this AddSubscriptionComponent.  # noqa: E501

        Price for units in the subscription rate plan.  Supports all charge types for the Flat Fee and Per Unit charge models   # noqa: E501

        :return: The price of this AddSubscriptionComponent.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this AddSubscriptionComponent.

        Price for units in the subscription rate plan.  Supports all charge types for the Flat Fee and Per Unit charge models   # noqa: E501

        :param price: The price of this AddSubscriptionComponent.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_change_option(self):
        """Gets the price_change_option of this AddSubscriptionComponent.  # noqa: E501

        Applies an automatic price change when a termed subscription is renewed. The Zuora Billing Admin setting Enable Automatic Price Change When Subscriptions are Renewed?  must be set to Yes to use this field.  See Define Default Subscription Settings for more information on setting this option.  Values:  * `NoChange` (default) * `SpecificPercentageValue` * `UseLatestProductCatalogPricing`  Available for the following charge types:  * Recurring * Usage-based * Not available for the Fixed-Amount Discount charge model.   # noqa: E501

        :return: The price_change_option of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this AddSubscriptionComponent.

        Applies an automatic price change when a termed subscription is renewed. The Zuora Billing Admin setting Enable Automatic Price Change When Subscriptions are Renewed?  must be set to Yes to use this field.  See Define Default Subscription Settings for more information on setting this option.  Values:  * `NoChange` (default) * `SpecificPercentageValue` * `UseLatestProductCatalogPricing`  Available for the following charge types:  * Recurring * Usage-based * Not available for the Fixed-Amount Discount charge model.   # noqa: E501

        :param price_change_option: The price_change_option of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._price_change_option = price_change_option

    @property
    def price_increase_percentage(self):
        """Gets the price_increase_percentage of this AddSubscriptionComponent.  # noqa: E501

        Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.  Decimal between -100 and 100.  Available for the following charge types:  * Recurring * Usage-based  Not available for the Fixed-Amount Discount charge model.   # noqa: E501

        :return: The price_increase_percentage of this AddSubscriptionComponent.  # noqa: E501
        :rtype: float
        """
        return self._price_increase_percentage

    @price_increase_percentage.setter
    def price_increase_percentage(self, price_increase_percentage):
        """Sets the price_increase_percentage of this AddSubscriptionComponent.

        Specifies the percentage to increase or decrease the price of a termed subscription's renewal. Required if you set the `PriceChangeOption` field to `SpecificPercentageValue`.  Decimal between -100 and 100.  Available for the following charge types:  * Recurring * Usage-based  Not available for the Fixed-Amount Discount charge model.   # noqa: E501

        :param price_increase_percentage: The price_increase_percentage of this AddSubscriptionComponent.  # noqa: E501
        :type: float
        """

        self._price_increase_percentage = price_increase_percentage

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this AddSubscriptionComponent.  # noqa: E501


        :return: The product_rate_plan_charge_id of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this AddSubscriptionComponent.


        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """
        if product_rate_plan_charge_id is None:
            raise ValueError("Invalid value for `product_rate_plan_charge_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def product_rate_plan_charge_number(self):
        """Gets the product_rate_plan_charge_number of this AddSubscriptionComponent.  # noqa: E501

        Number of a product rate-plan charge for this subscription.                       # noqa: E501

        :return: The product_rate_plan_charge_number of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_number

    @product_rate_plan_charge_number.setter
    def product_rate_plan_charge_number(self, product_rate_plan_charge_number):
        """Sets the product_rate_plan_charge_number of this AddSubscriptionComponent.

        Number of a product rate-plan charge for this subscription.                       # noqa: E501

        :param product_rate_plan_charge_number: The product_rate_plan_charge_number of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_number = product_rate_plan_charge_number

    @property
    def quantity(self):
        """Gets the quantity of this AddSubscriptionComponent.  # noqa: E501

        Number of units. Must be >=`0`.  Available for the following charge types for the Per Unit, Volume Pricing, and Tiered Pricing charge models:  * One-time * Recurring   # noqa: E501

        :return: The quantity of this AddSubscriptionComponent.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this AddSubscriptionComponent.

        Number of units. Must be >=`0`.  Available for the following charge types for the Per Unit, Volume Pricing, and Tiered Pricing charge models:  * One-time * Recurring   # noqa: E501

        :param quantity: The quantity of this AddSubscriptionComponent.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def rating_group(self):
        """Gets the rating_group of this AddSubscriptionComponent.  # noqa: E501

        Specifies a rating group based on which usage records are rated.  Possible values:  - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period. - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  - `ByUsageRecord`: The rating is based on each usage record. - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`). - `ByGroupId`: The rating is based on all the usages in a custom group.  **Note:**  - The `ByBillingPeriod` value can be applied for all charge models.  - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.  - The `ByGroupId` value is only available if you have the Active Rating feature enabled. - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :return: The rating_group of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._rating_group

    @rating_group.setter
    def rating_group(self, rating_group):
        """Sets the rating_group of this AddSubscriptionComponent.

        Specifies a rating group based on which usage records are rated.  Possible values:  - `ByBillingPeriod` (default): The rating is based on all the usages in a billing period. - `ByUsageStartDate`: The rating is based on all the usages on the same usage start date.  - `ByUsageRecord`: The rating is based on each usage record. - `ByUsageUpload`: The rating is based on all the  usages in a uploaded usage file (`.xls` or `.csv`). - `ByGroupId`: The rating is based on all the usages in a custom group.  **Note:**  - The `ByBillingPeriod` value can be applied for all charge models.  - The `ByUsageStartDate`, `ByUsageRecord`, and `ByUsageUpload` values can only be applied for per unit, volume pricing, and tiered pricing charge models.  - The `ByGroupId` value is only available if you have the Active Rating feature enabled. - Use this field only for Usage charges. One-Time Charges and Recurring Charges return `NULL`.   # noqa: E501

        :param rating_group: The rating_group of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._rating_group = rating_group

    @property
    def specific_billing_period(self):
        """Gets the specific_billing_period of this AddSubscriptionComponent.  # noqa: E501

        Specifies the number of month or week for the charges billing period. Required if you set the value of the `billingPeriod` field to `Specific_Months` or `Specific_Weeks`.  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :return: The specific_billing_period of this AddSubscriptionComponent.  # noqa: E501
        :rtype: int
        """
        return self._specific_billing_period

    @specific_billing_period.setter
    def specific_billing_period(self, specific_billing_period):
        """Sets the specific_billing_period of this AddSubscriptionComponent.

        Specifies the number of month or week for the charges billing period. Required if you set the value of the `billingPeriod` field to `Specific_Months` or `Specific_Weeks`.  Available for the following charge types:  * Recurring * Usage-based   # noqa: E501

        :param specific_billing_period: The specific_billing_period of this AddSubscriptionComponent.  # noqa: E501
        :type: int
        """

        self._specific_billing_period = specific_billing_period

    @property
    def specific_end_date(self):
        """Gets the specific_end_date of this AddSubscriptionComponent.  # noqa: E501

        Defines when the charge ends after the charge trigger date.  This field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.  If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.   # noqa: E501

        :return: The specific_end_date of this AddSubscriptionComponent.  # noqa: E501
        :rtype: date
        """
        return self._specific_end_date

    @specific_end_date.setter
    def specific_end_date(self, specific_end_date):
        """Sets the specific_end_date of this AddSubscriptionComponent.

        Defines when the charge ends after the charge trigger date.  This field is only applicable when the `endDateCondition` field is set to `Specific_End_Date`.  If the subscription ends before the specific end date, the charge ends when the subscription ends. But if the subscription end date is subsequently changed through a Renewal, or Terms and Conditions amendment, the charge will end on the specific end date.   # noqa: E501

        :param specific_end_date: The specific_end_date of this AddSubscriptionComponent.  # noqa: E501
        :type: date
        """

        self._specific_end_date = specific_end_date

    @property
    def specific_list_price_base(self):
        """Gets the specific_list_price_base of this AddSubscriptionComponent.  # noqa: E501

        The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.  **Note**:    - This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price\" target=\"_blank\">Annual List Price</a> feature enabled.   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.   # noqa: E501

        :return: The specific_list_price_base of this AddSubscriptionComponent.  # noqa: E501
        :rtype: int
        """
        return self._specific_list_price_base

    @specific_list_price_base.setter
    def specific_list_price_base(self, specific_list_price_base):
        """Sets the specific_list_price_base of this AddSubscriptionComponent.

        The number of months for the list price base of the charge. This field is required if you set the value of the `listPriceBase` field to `Per_Specific_Months`.  **Note**:    - This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Product_Catalog/I_Annual_List_Price\" target=\"_blank\">Annual List Price</a> feature enabled.   - The value of this field is `null` if you do not set the value of the `listPriceBase` field to `Per_Specific_Months`.   # noqa: E501

        :param specific_list_price_base: The specific_list_price_base of this AddSubscriptionComponent.  # noqa: E501
        :type: int
        """

        self._specific_list_price_base = specific_list_price_base

    @property
    def tiers(self):
        """Gets the tiers of this AddSubscriptionComponent.  # noqa: E501

        Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:  * One-time * Recurring * Usage-based   # noqa: E501

        :return: The tiers of this AddSubscriptionComponent.  # noqa: E501
        :rtype: list[Tier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this AddSubscriptionComponent.

        Container for Volume, Tiered or Tiered with Overage charge models. Supports the following charge types:  * One-time * Recurring * Usage-based   # noqa: E501

        :param tiers: The tiers of this AddSubscriptionComponent.  # noqa: E501
        :type: list[Tier]
        """

        self._tiers = tiers

    @property
    def trigger_date(self):
        """Gets the trigger_date of this AddSubscriptionComponent.  # noqa: E501

        Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to `USD`.   # noqa: E501

        :return: The trigger_date of this AddSubscriptionComponent.  # noqa: E501
        :rtype: date
        """
        return self._trigger_date

    @trigger_date.setter
    def trigger_date(self, trigger_date):
        """Sets the trigger_date of this AddSubscriptionComponent.

        Specifies when to start billing the customer for the charge. Required if the `triggerEvent` field is set to `USD`.   # noqa: E501

        :param trigger_date: The trigger_date of this AddSubscriptionComponent.  # noqa: E501
        :type: date
        """

        self._trigger_date = trigger_date

    @property
    def trigger_event(self):
        """Gets the trigger_event of this AddSubscriptionComponent.  # noqa: E501

        Specifies when to start billing the customer for the charge.  Values:  * `UCE` * `USA` * `UCA` * `USD`   # noqa: E501

        :return: The trigger_event of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this AddSubscriptionComponent.

        Specifies when to start billing the customer for the charge.  Values:  * `UCE` * `USA` * `UCA` * `USD`   # noqa: E501

        :param trigger_event: The trigger_event of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._trigger_event = trigger_event

    @property
    def unused_units_credit_rates(self):
        """Gets the unused_units_credit_rates of this AddSubscriptionComponent.  # noqa: E501

        Specifies the rate to credit a customer for unused units of usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption` field is set to `CreditBySpecificRate`.  Available for the following charge type for the Overage and Tiered with Overage charge models:  * Usage-based   # noqa: E501

        :return: The unused_units_credit_rates of this AddSubscriptionComponent.  # noqa: E501
        :rtype: float
        """
        return self._unused_units_credit_rates

    @unused_units_credit_rates.setter
    def unused_units_credit_rates(self, unused_units_credit_rates):
        """Sets the unused_units_credit_rates of this AddSubscriptionComponent.

        Specifies the rate to credit a customer for unused units of usage. This field applies only for overage charge models when the `OverageUnusedUnitsCreditOption` field is set to `CreditBySpecificRate`.  Available for the following charge type for the Overage and Tiered with Overage charge models:  * Usage-based   # noqa: E501

        :param unused_units_credit_rates: The unused_units_credit_rates of this AddSubscriptionComponent.  # noqa: E501
        :type: float
        """

        self._unused_units_credit_rates = unused_units_credit_rates

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this AddSubscriptionComponent.  # noqa: E501

        The period type used to define when the charge ends.   Values:  * `Billing_Periods` * `Days` * `Weeks` * `Months` * `Years`  You must use this field together with the `upToPeriods` field to specify the time period.  This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`.    # noqa: E501

        :return: The up_to_periods of this AddSubscriptionComponent.  # noqa: E501
        :rtype: int
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this AddSubscriptionComponent.

        The period type used to define when the charge ends.   Values:  * `Billing_Periods` * `Days` * `Weeks` * `Months` * `Years`  You must use this field together with the `upToPeriods` field to specify the time period.  This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`.    # noqa: E501

        :param up_to_periods: The up_to_periods of this AddSubscriptionComponent.  # noqa: E501
        :type: int
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this AddSubscriptionComponent.  # noqa: E501

        The period type used to define when the charge ends.   Values:  * `Billing_Periods` * `Days` * `Weeks` * `Months` * `Years`  You must use this field together with the `upToPeriods` field to specify the time period.  This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`.    # noqa: E501

        :return: The up_to_periods_type of this AddSubscriptionComponent.  # noqa: E501
        :rtype: str
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this AddSubscriptionComponent.

        The period type used to define when the charge ends.   Values:  * `Billing_Periods` * `Days` * `Weeks` * `Months` * `Years`  You must use this field together with the `upToPeriods` field to specify the time period.  This field is applicable only when the `endDateCondition` field is set to `Fixed_Period`.    # noqa: E501

        :param up_to_periods_type: The up_to_periods_type of this AddSubscriptionComponent.  # noqa: E501
        :type: str
        """

        self._up_to_periods_type = up_to_periods_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddSubscriptionComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddSubscriptionComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
