# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderActionRatePlanOverride(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_overrides': 'list[OrderActionRatePlanChargeOverride]',
        'custom_fields': 'dict(str, object)',
        'new_rate_plan_id': 'str',
        'product_rate_plan_id': 'str',
        'unique_token': 'str'
    }

    attribute_map = {
        'charge_overrides': 'chargeOverrides',
        'custom_fields': 'customFields',
        'new_rate_plan_id': 'newRatePlanId',
        'product_rate_plan_id': 'productRatePlanId',
        'unique_token': 'uniqueToken'
    }

    def __init__(self, charge_overrides=None, custom_fields=None, new_rate_plan_id=None, product_rate_plan_id=None, unique_token=None):  # noqa: E501
        """OrderActionRatePlanOverride - a model defined in Swagger"""  # noqa: E501
        self._charge_overrides = None
        self._custom_fields = None
        self._new_rate_plan_id = None
        self._product_rate_plan_id = None
        self._unique_token = None
        self.discriminator = None
        if charge_overrides is not None:
            self.charge_overrides = charge_overrides
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if new_rate_plan_id is not None:
            self.new_rate_plan_id = new_rate_plan_id
        self.product_rate_plan_id = product_rate_plan_id
        if unique_token is not None:
            self.unique_token = unique_token

    @property
    def charge_overrides(self):
        """Gets the charge_overrides of this OrderActionRatePlanOverride.  # noqa: E501

        List of charges associated with the rate plan.   # noqa: E501

        :return: The charge_overrides of this OrderActionRatePlanOverride.  # noqa: E501
        :rtype: list[OrderActionRatePlanChargeOverride]
        """
        return self._charge_overrides

    @charge_overrides.setter
    def charge_overrides(self, charge_overrides):
        """Sets the charge_overrides of this OrderActionRatePlanOverride.

        List of charges associated with the rate plan.   # noqa: E501

        :param charge_overrides: The charge_overrides of this OrderActionRatePlanOverride.  # noqa: E501
        :type: list[OrderActionRatePlanChargeOverride]
        """

        self._charge_overrides = charge_overrides

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderActionRatePlanOverride.  # noqa: E501

        Container for custom fields of a Rate Plan object.   # noqa: E501

        :return: The custom_fields of this OrderActionRatePlanOverride.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderActionRatePlanOverride.

        Container for custom fields of a Rate Plan object.   # noqa: E501

        :param custom_fields: The custom_fields of this OrderActionRatePlanOverride.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def new_rate_plan_id(self):
        """Gets the new_rate_plan_id of this OrderActionRatePlanOverride.  # noqa: E501

        Internal identifier of the rate plan.   # noqa: E501

        :return: The new_rate_plan_id of this OrderActionRatePlanOverride.  # noqa: E501
        :rtype: str
        """
        return self._new_rate_plan_id

    @new_rate_plan_id.setter
    def new_rate_plan_id(self, new_rate_plan_id):
        """Sets the new_rate_plan_id of this OrderActionRatePlanOverride.

        Internal identifier of the rate plan.   # noqa: E501

        :param new_rate_plan_id: The new_rate_plan_id of this OrderActionRatePlanOverride.  # noqa: E501
        :type: str
        """

        self._new_rate_plan_id = new_rate_plan_id

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this OrderActionRatePlanOverride.  # noqa: E501

        Internal identifier of the product rate plan that the rate plan is based on.   # noqa: E501

        :return: The product_rate_plan_id of this OrderActionRatePlanOverride.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this OrderActionRatePlanOverride.

        Internal identifier of the product rate plan that the rate plan is based on.   # noqa: E501

        :param product_rate_plan_id: The product_rate_plan_id of this OrderActionRatePlanOverride.  # noqa: E501
        :type: str
        """
        if product_rate_plan_id is None:
            raise ValueError("Invalid value for `product_rate_plan_id`, must not be `None`")  # noqa: E501

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def unique_token(self):
        """Gets the unique_token of this OrderActionRatePlanOverride.  # noqa: E501

        Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify.   # noqa: E501

        :return: The unique_token of this OrderActionRatePlanOverride.  # noqa: E501
        :rtype: str
        """
        return self._unique_token

    @unique_token.setter
    def unique_token(self, unique_token):
        """Sets the unique_token of this OrderActionRatePlanOverride.

        Unique identifier for the rate plan. This identifier enables you to refer to the rate plan before the rate plan has an internal identifier in Zuora.  For instance, suppose that you want to use a single order to add a product to a subscription and later update the same product. When you add the product, you can set a unique identifier for the rate plan. Then when you update the product, you can use the same unique identifier to specify which rate plan to modify.   # noqa: E501

        :param unique_token: The unique_token of this OrderActionRatePlanOverride.  # noqa: E501
        :type: str
        """

        self._unique_token = unique_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderActionRatePlanOverride, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderActionRatePlanOverride):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
