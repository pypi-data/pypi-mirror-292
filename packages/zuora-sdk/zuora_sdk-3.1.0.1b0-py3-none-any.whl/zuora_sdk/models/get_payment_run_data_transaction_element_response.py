# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetPaymentRunDataTransactionElementResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'applied_amount': 'float',
        'error_code': 'str',
        'error_message': 'str',
        'id': 'str',
        'status': 'GetPaymentRunDataTransactionElementResponseStatus',
        'type': 'GetPaymentRunDataTransactionElementResponseType'
    }

    attribute_map = {
        'amount': 'amount',
        'applied_amount': 'appliedAmount',
        'error_code': 'errorCode',
        'error_message': 'errorMessage',
        'id': 'id',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, amount=None, applied_amount=None, error_code=None, error_message=None, id=None, status=None, type=None):  # noqa: E501
        """GetPaymentRunDataTransactionElementResponse - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._applied_amount = None
        self._error_code = None
        self._error_message = None
        self._id = None
        self._status = None
        self._type = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if applied_amount is not None:
            self.applied_amount = applied_amount
        if error_code is not None:
            self.error_code = error_code
        if error_message is not None:
            self.error_message = error_message
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def amount(self):
        """Gets the amount of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501

        The total amount of the newly generated payment.  **Note:** This field is only available if `type` is `Payment`.   # noqa: E501

        :return: The amount of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this GetPaymentRunDataTransactionElementResponse.

        The total amount of the newly generated payment.  **Note:** This field is only available if `type` is `Payment`.   # noqa: E501

        :param amount: The amount of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def applied_amount(self):
        """Gets the applied_amount of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501

        The amount allocated to this data record.   # noqa: E501

        :return: The applied_amount of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :rtype: float
        """
        return self._applied_amount

    @applied_amount.setter
    def applied_amount(self, applied_amount):
        """Sets the applied_amount of this GetPaymentRunDataTransactionElementResponse.

        The amount allocated to this data record.   # noqa: E501

        :param applied_amount: The applied_amount of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :type: float
        """

        self._applied_amount = applied_amount

    @property
    def error_code(self):
        """Gets the error_code of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501

        The error code of the response.  **Note:** This field is only available if `type` is `Payment`.   # noqa: E501

        :return: The error_code of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this GetPaymentRunDataTransactionElementResponse.

        The error code of the response.  **Note:** This field is only available if `type` is `Payment`.   # noqa: E501

        :param error_code: The error_code of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def error_message(self):
        """Gets the error_message of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501

        The detailed information of the error response.  **Note:** This field is only available if `type` is `Payment`.   # noqa: E501

        :return: The error_message of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this GetPaymentRunDataTransactionElementResponse.

        The detailed information of the error response.  **Note:** This field is only available if `type` is `Payment`.   # noqa: E501

        :param error_message: The error_message of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def id(self):
        """Gets the id of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501

        The ID of the current transaction.   # noqa: E501

        :return: The id of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetPaymentRunDataTransactionElementResponse.

        The ID of the current transaction.   # noqa: E501

        :param id: The id of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501


        :return: The status of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :rtype: GetPaymentRunDataTransactionElementResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetPaymentRunDataTransactionElementResponse.


        :param status: The status of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :type: GetPaymentRunDataTransactionElementResponseStatus
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501


        :return: The type of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :rtype: GetPaymentRunDataTransactionElementResponseType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetPaymentRunDataTransactionElementResponse.


        :param type: The type of this GetPaymentRunDataTransactionElementResponse.  # noqa: E501
        :type: GetPaymentRunDataTransactionElementResponseType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPaymentRunDataTransactionElementResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPaymentRunDataTransactionElementResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
