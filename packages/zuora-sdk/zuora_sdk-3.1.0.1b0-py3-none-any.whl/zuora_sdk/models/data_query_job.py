# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from zuora_sdk.models.data_query_job_common import DataQueryJobCommon  # noqa: F401,E501

class DataQueryJob(DataQueryJobCommon):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_file': 'str',
        'output_rows': 'int',
        'processing_time': 'int',
        'query_status': 'str'
    }
    if hasattr(DataQueryJobCommon, "swagger_types"):
        swagger_types.update(DataQueryJobCommon.swagger_types)

    attribute_map = {
        'data_file': 'dataFile',
        'output_rows': 'outputRows',
        'processing_time': 'processingTime',
        'query_status': 'queryStatus'
    }
    if hasattr(DataQueryJobCommon, "attribute_map"):
        attribute_map.update(DataQueryJobCommon.attribute_map)

    def __init__(self, data_file=None, output_rows=None, processing_time=None, query_status=None, *args, **kwargs):  # noqa: E501
        """DataQueryJob - a model defined in Swagger"""  # noqa: E501
        self._data_file = None
        self._output_rows = None
        self._processing_time = None
        self._query_status = None
        self.discriminator = None
        if data_file is not None:
            self.data_file = data_file
        if output_rows is not None:
            self.output_rows = output_rows
        if processing_time is not None:
            self.processing_time = processing_time
        if query_status is not None:
            self.query_status = query_status
        DataQueryJobCommon.__init__(self, *args, **kwargs)

    @property
    def data_file(self):
        """Gets the data_file of this DataQueryJob.  # noqa: E501

        The URL of the query results. Only applicable if the value of the `queryStatus` field is `completed`.   # noqa: E501

        :return: The data_file of this DataQueryJob.  # noqa: E501
        :rtype: str
        """
        return self._data_file

    @data_file.setter
    def data_file(self, data_file):
        """Sets the data_file of this DataQueryJob.

        The URL of the query results. Only applicable if the value of the `queryStatus` field is `completed`.   # noqa: E501

        :param data_file: The data_file of this DataQueryJob.  # noqa: E501
        :type: str
        """

        self._data_file = data_file

    @property
    def output_rows(self):
        """Gets the output_rows of this DataQueryJob.  # noqa: E501

        The number of rows the query results. Only applicable if the value of the `queryStatus` field is `completed`.   # noqa: E501

        :return: The output_rows of this DataQueryJob.  # noqa: E501
        :rtype: int
        """
        return self._output_rows

    @output_rows.setter
    def output_rows(self, output_rows):
        """Sets the output_rows of this DataQueryJob.

        The number of rows the query results. Only applicable if the value of the `queryStatus` field is `completed`.   # noqa: E501

        :param output_rows: The output_rows of this DataQueryJob.  # noqa: E501
        :type: int
        """

        self._output_rows = output_rows

    @property
    def processing_time(self):
        """Gets the processing_time of this DataQueryJob.  # noqa: E501

        Processing time of the query job, in milliseconds. Only applicable if the value of the `queryStatus` field is `completed`.   # noqa: E501

        :return: The processing_time of this DataQueryJob.  # noqa: E501
        :rtype: int
        """
        return self._processing_time

    @processing_time.setter
    def processing_time(self, processing_time):
        """Sets the processing_time of this DataQueryJob.

        Processing time of the query job, in milliseconds. Only applicable if the value of the `queryStatus` field is `completed`.   # noqa: E501

        :param processing_time: The processing_time of this DataQueryJob.  # noqa: E501
        :type: int
        """

        self._processing_time = processing_time

    @property
    def query_status(self):
        """Gets the query_status of this DataQueryJob.  # noqa: E501

        Status of the query job.  * `submitted` - query submitted to query service for processing * `accepted` - query accepted by the query service * `in_progress` - query executed by the query service * `completed` - query execution completed by the query service * `failed` - query unable to be processed by the query service * `cancelled` - query cancelled by the user  If the value of this field is `completed`, the `dataFile` field contains the location of the query results.  If the value of this field is `accepted` or `in_progress`, you can use [Cancel a data query job](#operation/Delete_DataQueryJob) to prevent Zuora from performing the query. Zuora then sets the status of the query job to `cancelled`.   # noqa: E501

        :return: The query_status of this DataQueryJob.  # noqa: E501
        :rtype: str
        """
        return self._query_status

    @query_status.setter
    def query_status(self, query_status):
        """Sets the query_status of this DataQueryJob.

        Status of the query job.  * `submitted` - query submitted to query service for processing * `accepted` - query accepted by the query service * `in_progress` - query executed by the query service * `completed` - query execution completed by the query service * `failed` - query unable to be processed by the query service * `cancelled` - query cancelled by the user  If the value of this field is `completed`, the `dataFile` field contains the location of the query results.  If the value of this field is `accepted` or `in_progress`, you can use [Cancel a data query job](#operation/Delete_DataQueryJob) to prevent Zuora from performing the query. Zuora then sets the status of the query job to `cancelled`.   # noqa: E501

        :param query_status: The query_status of this DataQueryJob.  # noqa: E501
        :type: str
        """
        allowed_values = ["submitted", "accepted", "in_progress", "completed", "failed", "cancelled"]  # noqa: E501
        if query_status not in allowed_values:
            raise ValueError(
                "Invalid value for `query_status` ({0}), must be one of {1}"  # noqa: E501
                .format(query_status, allowed_values)
            )

        self._query_status = query_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataQueryJob, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataQueryJob):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
