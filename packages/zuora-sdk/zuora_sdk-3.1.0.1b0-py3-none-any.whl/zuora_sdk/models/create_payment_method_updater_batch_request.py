# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePaymentMethodUpdaterBatchRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_cycle_day': 'int',
        'updater_account_id': 'str'
    }

    attribute_map = {
        'billing_cycle_day': 'billingCycleDay',
        'updater_account_id': 'updaterAccountId'
    }

    def __init__(self, billing_cycle_day=None, updater_account_id=None):  # noqa: E501
        """CreatePaymentMethodUpdaterBatchRequest - a model defined in Swagger"""  # noqa: E501
        self._billing_cycle_day = None
        self._updater_account_id = None
        self.discriminator = None
        self.billing_cycle_day = billing_cycle_day
        self.updater_account_id = updater_account_id

    @property
    def billing_cycle_day(self):
        """Gets the billing_cycle_day of this CreatePaymentMethodUpdaterBatchRequest.  # noqa: E501

        The billing cycle day. The allowed value is an integer in the range of 1 - 31.  The payment methods from accounts where the billing cycle day is the specified value in this field will be included in the updates.   # noqa: E501

        :return: The billing_cycle_day of this CreatePaymentMethodUpdaterBatchRequest.  # noqa: E501
        :rtype: int
        """
        return self._billing_cycle_day

    @billing_cycle_day.setter
    def billing_cycle_day(self, billing_cycle_day):
        """Sets the billing_cycle_day of this CreatePaymentMethodUpdaterBatchRequest.

        The billing cycle day. The allowed value is an integer in the range of 1 - 31.  The payment methods from accounts where the billing cycle day is the specified value in this field will be included in the updates.   # noqa: E501

        :param billing_cycle_day: The billing_cycle_day of this CreatePaymentMethodUpdaterBatchRequest.  # noqa: E501
        :type: int
        """
        if billing_cycle_day is None:
            raise ValueError("Invalid value for `billing_cycle_day`, must not be `None`")  # noqa: E501

        self._billing_cycle_day = billing_cycle_day

    @property
    def updater_account_id(self):
        """Gets the updater_account_id of this CreatePaymentMethodUpdaterBatchRequest.  # noqa: E501

        The ID (UUID) of the PMU account. This field must be a string of 32 characters consisting of digits and letters a - f.   # noqa: E501

        :return: The updater_account_id of this CreatePaymentMethodUpdaterBatchRequest.  # noqa: E501
        :rtype: str
        """
        return self._updater_account_id

    @updater_account_id.setter
    def updater_account_id(self, updater_account_id):
        """Sets the updater_account_id of this CreatePaymentMethodUpdaterBatchRequest.

        The ID (UUID) of the PMU account. This field must be a string of 32 characters consisting of digits and letters a - f.   # noqa: E501

        :param updater_account_id: The updater_account_id of this CreatePaymentMethodUpdaterBatchRequest.  # noqa: E501
        :type: str
        """
        if updater_account_id is None:
            raise ValueError("Invalid value for `updater_account_id`, must not be `None`")  # noqa: E501

        self._updater_account_id = updater_account_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePaymentMethodUpdaterBatchRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePaymentMethodUpdaterBatchRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
