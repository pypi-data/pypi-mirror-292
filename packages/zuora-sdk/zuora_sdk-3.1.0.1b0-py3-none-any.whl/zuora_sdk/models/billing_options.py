# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BillingOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_memo_reason_code': 'str',
        'document_date': 'date',
        'generate_draft_invoice': 'bool',
        'target_date': 'date'
    }

    attribute_map = {
        'credit_memo_reason_code': 'creditMemoReasonCode',
        'document_date': 'documentDate',
        'generate_draft_invoice': 'generateDraftInvoice',
        'target_date': 'targetDate'
    }

    def __init__(self, credit_memo_reason_code=None, document_date=None, generate_draft_invoice=None, target_date=None):  # noqa: E501
        """BillingOptions - a model defined in Swagger"""  # noqa: E501
        self._credit_memo_reason_code = None
        self._document_date = None
        self._generate_draft_invoice = None
        self._target_date = None
        self.discriminator = None
        if credit_memo_reason_code is not None:
            self.credit_memo_reason_code = credit_memo_reason_code
        if document_date is not None:
            self.document_date = document_date
        if generate_draft_invoice is not None:
            self.generate_draft_invoice = generate_draft_invoice
        if target_date is not None:
            self.target_date = target_date

    @property
    def credit_memo_reason_code(self):
        """Gets the credit_memo_reason_code of this BillingOptions.  # noqa: E501

        A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.  # noqa: E501

        :return: The credit_memo_reason_code of this BillingOptions.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_reason_code

    @credit_memo_reason_code.setter
    def credit_memo_reason_code(self, credit_memo_reason_code):
        """Sets the credit_memo_reason_code of this BillingOptions.

        A code identifying the reason for the credit memo transaction that is generated by the request. The value must be an existing reason code. If you do not pass the field or pass the field with empty value, Zuora uses the default reason code.  # noqa: E501

        :param credit_memo_reason_code: The credit_memo_reason_code of this BillingOptions.  # noqa: E501
        :type: str
        """

        self._credit_memo_reason_code = credit_memo_reason_code

    @property
    def document_date(self):
        """Gets the document_date of this BillingOptions.  # noqa: E501

        The invoice date displayed on the invoice.   # noqa: E501

        :return: The document_date of this BillingOptions.  # noqa: E501
        :rtype: date
        """
        return self._document_date

    @document_date.setter
    def document_date(self, document_date):
        """Sets the document_date of this BillingOptions.

        The invoice date displayed on the invoice.   # noqa: E501

        :param document_date: The document_date of this BillingOptions.  # noqa: E501
        :type: date
        """

        self._document_date = document_date

    @property
    def generate_draft_invoice(self):
        """Gets the generate_draft_invoice of this BillingOptions.  # noqa: E501

        Indicates if the current request needs to generate a draft invoice.  Values are:  * `true` * `false` (default)   # noqa: E501

        :return: The generate_draft_invoice of this BillingOptions.  # noqa: E501
        :rtype: bool
        """
        return self._generate_draft_invoice

    @generate_draft_invoice.setter
    def generate_draft_invoice(self, generate_draft_invoice):
        """Sets the generate_draft_invoice of this BillingOptions.

        Indicates if the current request needs to generate a draft invoice.  Values are:  * `true` * `false` (default)   # noqa: E501

        :param generate_draft_invoice: The generate_draft_invoice of this BillingOptions.  # noqa: E501
        :type: bool
        """

        self._generate_draft_invoice = generate_draft_invoice

    @property
    def target_date(self):
        """Gets the target_date of this BillingOptions.  # noqa: E501

        Date through which to calculate charges if an invoice is generated. See [What is a Target Date?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs#What_is_a_Target_Date.3F).   # noqa: E501

        :return: The target_date of this BillingOptions.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this BillingOptions.

        Date through which to calculate charges if an invoice is generated. See [What is a Target Date?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs#What_is_a_Target_Date.3F).   # noqa: E501

        :param target_date: The target_date of this BillingOptions.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
