# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetWorkflowResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpu_time': 'str',
        'created_at': 'str',
        'finished_at': 'str',
        'id': 'int',
        'messages': 'object',
        'name': 'str',
        'original_workflow_id': 'str',
        'run_time': 'float',
        'status': 'GetWorkflowResponseStatus',
        'tasks': 'GetWorkflowResponseTasks',
        'type': 'str',
        'updated_at': 'str'
    }

    attribute_map = {
        'cpu_time': 'cpuTime',
        'created_at': 'createdAt',
        'finished_at': 'finishedAt',
        'id': 'id',
        'messages': 'messages',
        'name': 'name',
        'original_workflow_id': 'originalWorkflowId',
        'run_time': 'runTime',
        'status': 'status',
        'tasks': 'tasks',
        'type': 'type',
        'updated_at': 'updatedAt'
    }

    def __init__(self, cpu_time=None, created_at=None, finished_at=None, id=None, messages=None, name=None, original_workflow_id=None, run_time=None, status=None, tasks=None, type=None, updated_at=None):  # noqa: E501
        """GetWorkflowResponse - a model defined in Swagger"""  # noqa: E501
        self._cpu_time = None
        self._created_at = None
        self._finished_at = None
        self._id = None
        self._messages = None
        self._name = None
        self._original_workflow_id = None
        self._run_time = None
        self._status = None
        self._tasks = None
        self._type = None
        self._updated_at = None
        self.discriminator = None
        if cpu_time is not None:
            self.cpu_time = cpu_time
        if created_at is not None:
            self.created_at = created_at
        if finished_at is not None:
            self.finished_at = finished_at
        if id is not None:
            self.id = id
        if messages is not None:
            self.messages = messages
        if name is not None:
            self.name = name
        if original_workflow_id is not None:
            self.original_workflow_id = original_workflow_id
        if run_time is not None:
            self.run_time = run_time
        if status is not None:
            self.status = status
        if tasks is not None:
            self.tasks = tasks
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def cpu_time(self):
        """Gets the cpu_time of this GetWorkflowResponse.  # noqa: E501

        The overall CPU time for the execution of the workflow.   # noqa: E501

        :return: The cpu_time of this GetWorkflowResponse.  # noqa: E501
        :rtype: str
        """
        return self._cpu_time

    @cpu_time.setter
    def cpu_time(self, cpu_time):
        """Sets the cpu_time of this GetWorkflowResponse.

        The overall CPU time for the execution of the workflow.   # noqa: E501

        :param cpu_time: The cpu_time of this GetWorkflowResponse.  # noqa: E501
        :type: str
        """

        self._cpu_time = cpu_time

    @property
    def created_at(self):
        """Gets the created_at of this GetWorkflowResponse.  # noqa: E501

        The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format..   # noqa: E501

        :return: The created_at of this GetWorkflowResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GetWorkflowResponse.

        The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format..   # noqa: E501

        :param created_at: The created_at of this GetWorkflowResponse.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def finished_at(self):
        """Gets the finished_at of this GetWorkflowResponse.  # noqa: E501

        The date and time when the execution of the workflow completes, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :return: The finished_at of this GetWorkflowResponse.  # noqa: E501
        :rtype: str
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this GetWorkflowResponse.

        The date and time when the execution of the workflow completes, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :param finished_at: The finished_at of this GetWorkflowResponse.  # noqa: E501
        :type: str
        """

        self._finished_at = finished_at

    @property
    def id(self):
        """Gets the id of this GetWorkflowResponse.  # noqa: E501

        The unique ID of the workflow.   # noqa: E501

        :return: The id of this GetWorkflowResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetWorkflowResponse.

        The unique ID of the workflow.   # noqa: E501

        :param id: The id of this GetWorkflowResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def messages(self):
        """Gets the messages of this GetWorkflowResponse.  # noqa: E501

        Messages from tasks.   **Note:** This field is only returned in Production.   # noqa: E501

        :return: The messages of this GetWorkflowResponse.  # noqa: E501
        :rtype: object
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this GetWorkflowResponse.

        Messages from tasks.   **Note:** This field is only returned in Production.   # noqa: E501

        :param messages: The messages of this GetWorkflowResponse.  # noqa: E501
        :type: object
        """

        self._messages = messages

    @property
    def name(self):
        """Gets the name of this GetWorkflowResponse.  # noqa: E501

        The unique run number of the workflow.   # noqa: E501

        :return: The name of this GetWorkflowResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetWorkflowResponse.

        The unique run number of the workflow.   # noqa: E501

        :param name: The name of this GetWorkflowResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_workflow_id(self):
        """Gets the original_workflow_id of this GetWorkflowResponse.  # noqa: E501

        The ID of the workflow setup.   # noqa: E501

        :return: The original_workflow_id of this GetWorkflowResponse.  # noqa: E501
        :rtype: str
        """
        return self._original_workflow_id

    @original_workflow_id.setter
    def original_workflow_id(self, original_workflow_id):
        """Sets the original_workflow_id of this GetWorkflowResponse.

        The ID of the workflow setup.   # noqa: E501

        :param original_workflow_id: The original_workflow_id of this GetWorkflowResponse.  # noqa: E501
        :type: str
        """

        self._original_workflow_id = original_workflow_id

    @property
    def run_time(self):
        """Gets the run_time of this GetWorkflowResponse.  # noqa: E501

        The execution time of the workflow including the waiting time, in seconds.   # noqa: E501

        :return: The run_time of this GetWorkflowResponse.  # noqa: E501
        :rtype: float
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """Sets the run_time of this GetWorkflowResponse.

        The execution time of the workflow including the waiting time, in seconds.   # noqa: E501

        :param run_time: The run_time of this GetWorkflowResponse.  # noqa: E501
        :type: float
        """

        self._run_time = run_time

    @property
    def status(self):
        """Gets the status of this GetWorkflowResponse.  # noqa: E501


        :return: The status of this GetWorkflowResponse.  # noqa: E501
        :rtype: GetWorkflowResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetWorkflowResponse.


        :param status: The status of this GetWorkflowResponse.  # noqa: E501
        :type: GetWorkflowResponseStatus
        """

        self._status = status

    @property
    def tasks(self):
        """Gets the tasks of this GetWorkflowResponse.  # noqa: E501


        :return: The tasks of this GetWorkflowResponse.  # noqa: E501
        :rtype: GetWorkflowResponseTasks
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks):
        """Sets the tasks of this GetWorkflowResponse.


        :param tasks: The tasks of this GetWorkflowResponse.  # noqa: E501
        :type: GetWorkflowResponseTasks
        """

        self._tasks = tasks

    @property
    def type(self):
        """Gets the type of this GetWorkflowResponse.  # noqa: E501

        The type of the current workflow. Possible values:   - `Workflow::Setup`: The workflow is a setup and is used for creating workflow instances.   - `Workflow::Instance`: The workflow is an execution that has data.   # noqa: E501

        :return: The type of this GetWorkflowResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetWorkflowResponse.

        The type of the current workflow. Possible values:   - `Workflow::Setup`: The workflow is a setup and is used for creating workflow instances.   - `Workflow::Instance`: The workflow is an execution that has data.   # noqa: E501

        :param type: The type of this GetWorkflowResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this GetWorkflowResponse.  # noqa: E501

        The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :return: The updated_at of this GetWorkflowResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this GetWorkflowResponse.

        The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :param updated_at: The updated_at of this GetWorkflowResponse.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWorkflowResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWorkflowResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
