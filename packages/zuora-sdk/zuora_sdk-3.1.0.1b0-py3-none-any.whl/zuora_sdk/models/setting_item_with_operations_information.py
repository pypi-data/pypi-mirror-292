# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SettingItemWithOperationsInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'SettingItemWithOperationsInformationContext',
        'description': 'str',
        'http_operations': 'list[SettingItemHttpOperation]',
        'key': 'str',
        'path_pattern': 'str'
    }

    attribute_map = {
        'context': 'context',
        'description': 'description',
        'http_operations': 'httpOperations',
        'key': 'key',
        'path_pattern': 'pathPattern'
    }

    def __init__(self, context=None, description=None, http_operations=None, key=None, path_pattern=None):  # noqa: E501
        """SettingItemWithOperationsInformation - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._description = None
        self._http_operations = None
        self._key = None
        self._path_pattern = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if description is not None:
            self.description = description
        if http_operations is not None:
            self.http_operations = http_operations
        if key is not None:
            self.key = key
        if path_pattern is not None:
            self.path_pattern = path_pattern

    @property
    def context(self):
        """Gets the context of this SettingItemWithOperationsInformation.  # noqa: E501


        :return: The context of this SettingItemWithOperationsInformation.  # noqa: E501
        :rtype: SettingItemWithOperationsInformationContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this SettingItemWithOperationsInformation.


        :param context: The context of this SettingItemWithOperationsInformation.  # noqa: E501
        :type: SettingItemWithOperationsInformationContext
        """

        self._context = context

    @property
    def description(self):
        """Gets the description of this SettingItemWithOperationsInformation.  # noqa: E501

        The description of the setting item as you see from Zuora UI.  # noqa: E501

        :return: The description of this SettingItemWithOperationsInformation.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SettingItemWithOperationsInformation.

        The description of the setting item as you see from Zuora UI.  # noqa: E501

        :param description: The description of this SettingItemWithOperationsInformation.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def http_operations(self):
        """Gets the http_operations of this SettingItemWithOperationsInformation.  # noqa: E501

        An array of HTTP operation methods that are supported on this setting endpoint.  # noqa: E501

        :return: The http_operations of this SettingItemWithOperationsInformation.  # noqa: E501
        :rtype: list[SettingItemHttpOperation]
        """
        return self._http_operations

    @http_operations.setter
    def http_operations(self, http_operations):
        """Sets the http_operations of this SettingItemWithOperationsInformation.

        An array of HTTP operation methods that are supported on this setting endpoint.  # noqa: E501

        :param http_operations: The http_operations of this SettingItemWithOperationsInformation.  # noqa: E501
        :type: list[SettingItemHttpOperation]
        """

        self._http_operations = http_operations

    @property
    def key(self):
        """Gets the key of this SettingItemWithOperationsInformation.  # noqa: E501

        The unique key to distinguish the setting item.  # noqa: E501

        :return: The key of this SettingItemWithOperationsInformation.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this SettingItemWithOperationsInformation.

        The unique key to distinguish the setting item.  # noqa: E501

        :param key: The key of this SettingItemWithOperationsInformation.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def path_pattern(self):
        """Gets the path_pattern of this SettingItemWithOperationsInformation.  # noqa: E501

        The path pattern of the setting endpoint, relative to `/settings`. For example, `/billing-rules`.  # noqa: E501

        :return: The path_pattern of this SettingItemWithOperationsInformation.  # noqa: E501
        :rtype: str
        """
        return self._path_pattern

    @path_pattern.setter
    def path_pattern(self, path_pattern):
        """Sets the path_pattern of this SettingItemWithOperationsInformation.

        The path pattern of the setting endpoint, relative to `/settings`. For example, `/billing-rules`.  # noqa: E501

        :param path_pattern: The path_pattern of this SettingItemWithOperationsInformation.  # noqa: E501
        :type: str
        """

        self._path_pattern = path_pattern

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingItemWithOperationsInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingItemWithOperationsInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
