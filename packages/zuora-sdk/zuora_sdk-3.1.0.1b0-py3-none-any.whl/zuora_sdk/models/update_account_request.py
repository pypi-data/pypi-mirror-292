# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateAccountRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_email_addresses': 'list[str]',
        'auto_pay': 'bool',
        'batch': 'str',
        'bill_cycle_day': 'int',
        'bill_to_contact': 'UpdateAccountContact',
        'communication_profile_id': 'str',
        'credit_memo_template_id': 'str',
        'crm_id': 'str',
        'customer_service_rep_name': 'str',
        'debit_memo_template_id': 'str',
        'default_payment_method_id': 'str',
        'invoice_delivery_prefs_email': 'bool',
        'invoice_delivery_prefs_print': 'bool',
        'invoice_template_id': 'str',
        'name': 'str',
        'notes': 'str',
        'parent_id': 'str',
        'partner_account': 'bool',
        'payment_gateway': 'str',
        'payment_term': 'str',
        'profile_number': 'str',
        'purchase_order_number': 'str',
        'roll_up_usage': 'bool',
        'sales_rep': 'str',
        'sequence_set_id': 'str',
        'sold_to_contact': 'UpdateAccountContact',
        'tagging': 'str',
        'tax_info': 'TaxInfo',
        'payment_gateway_number': 'str',
        'summary_statement_template_id': 'str',
        'einvoice_profile': 'AccountEInvoiceProfile',
        'organization_label': 'str',
        'class__ns': 'str',
        'customer_type__ns': 'AccountObjectNSFieldsCustomerTypeNS',
        'department__ns': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'location__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str',
        'syncto_net_suite__ns': 'AccountObjectNSFieldsSynctoNetSuiteNS'
    }

    attribute_map = {
        'additional_email_addresses': 'additionalEmailAddresses',
        'auto_pay': 'autoPay',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'bill_to_contact': 'billToContact',
        'communication_profile_id': 'communicationProfileId',
        'credit_memo_template_id': 'creditMemoTemplateId',
        'crm_id': 'crmId',
        'customer_service_rep_name': 'customerServiceRepName',
        'debit_memo_template_id': 'debitMemoTemplateId',
        'default_payment_method_id': 'defaultPaymentMethodId',
        'invoice_delivery_prefs_email': 'invoiceDeliveryPrefsEmail',
        'invoice_delivery_prefs_print': 'invoiceDeliveryPrefsPrint',
        'invoice_template_id': 'invoiceTemplateId',
        'name': 'name',
        'notes': 'notes',
        'parent_id': 'parentId',
        'partner_account': 'partnerAccount',
        'payment_gateway': 'paymentGateway',
        'payment_term': 'paymentTerm',
        'profile_number': 'profileNumber',
        'purchase_order_number': 'purchaseOrderNumber',
        'roll_up_usage': 'rollUpUsage',
        'sales_rep': 'salesRep',
        'sequence_set_id': 'sequenceSetId',
        'sold_to_contact': 'soldToContact',
        'tagging': 'tagging',
        'tax_info': 'taxInfo',
        'payment_gateway_number': 'paymentGatewayNumber',
        'summary_statement_template_id': 'summaryStatementTemplateId',
        'einvoice_profile': 'einvoiceProfile',
        'organization_label': 'organizationLabel',
        'class__ns': 'Class__NS',
        'customer_type__ns': 'CustomerType__NS',
        'department__ns': 'Department__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'location__ns': 'Location__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS',
        'syncto_net_suite__ns': 'SynctoNetSuite__NS'
    }

    def __init__(self, additional_email_addresses=None, auto_pay=None, batch=None, bill_cycle_day=None, bill_to_contact=None, communication_profile_id=None, credit_memo_template_id=None, crm_id=None, customer_service_rep_name=None, debit_memo_template_id=None, default_payment_method_id=None, invoice_delivery_prefs_email=None, invoice_delivery_prefs_print=None, invoice_template_id=None, name=None, notes=None, parent_id=None, partner_account=None, payment_gateway=None, payment_term=None, profile_number=None, purchase_order_number=None, roll_up_usage=None, sales_rep=None, sequence_set_id=None, sold_to_contact=None, tagging=None, tax_info=None, payment_gateway_number=None, summary_statement_template_id=None, einvoice_profile=None, organization_label=None, class__ns=None, customer_type__ns=None, department__ns=None, integration_id__ns=None, integration_status__ns=None, location__ns=None, subsidiary__ns=None, sync_date__ns=None, syncto_net_suite__ns=None):  # noqa: E501
        """UpdateAccountRequest - a model defined in Swagger"""  # noqa: E501
        self._additional_email_addresses = None
        self._auto_pay = None
        self._batch = None
        self._bill_cycle_day = None
        self._bill_to_contact = None
        self._communication_profile_id = None
        self._credit_memo_template_id = None
        self._crm_id = None
        self._customer_service_rep_name = None
        self._debit_memo_template_id = None
        self._default_payment_method_id = None
        self._invoice_delivery_prefs_email = None
        self._invoice_delivery_prefs_print = None
        self._invoice_template_id = None
        self._name = None
        self._notes = None
        self._parent_id = None
        self._partner_account = None
        self._payment_gateway = None
        self._payment_term = None
        self._profile_number = None
        self._purchase_order_number = None
        self._roll_up_usage = None
        self._sales_rep = None
        self._sequence_set_id = None
        self._sold_to_contact = None
        self._tagging = None
        self._tax_info = None
        self._payment_gateway_number = None
        self._summary_statement_template_id = None
        self._einvoice_profile = None
        self._organization_label = None
        self._class__ns = None
        self._customer_type__ns = None
        self._department__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._location__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self._syncto_net_suite__ns = None
        self.discriminator = None
        if additional_email_addresses is not None:
            self.additional_email_addresses = additional_email_addresses
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if batch is not None:
            self.batch = batch
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if bill_to_contact is not None:
            self.bill_to_contact = bill_to_contact
        if communication_profile_id is not None:
            self.communication_profile_id = communication_profile_id
        if credit_memo_template_id is not None:
            self.credit_memo_template_id = credit_memo_template_id
        if crm_id is not None:
            self.crm_id = crm_id
        if customer_service_rep_name is not None:
            self.customer_service_rep_name = customer_service_rep_name
        if debit_memo_template_id is not None:
            self.debit_memo_template_id = debit_memo_template_id
        if default_payment_method_id is not None:
            self.default_payment_method_id = default_payment_method_id
        if invoice_delivery_prefs_email is not None:
            self.invoice_delivery_prefs_email = invoice_delivery_prefs_email
        if invoice_delivery_prefs_print is not None:
            self.invoice_delivery_prefs_print = invoice_delivery_prefs_print
        if invoice_template_id is not None:
            self.invoice_template_id = invoice_template_id
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if parent_id is not None:
            self.parent_id = parent_id
        if partner_account is not None:
            self.partner_account = partner_account
        if payment_gateway is not None:
            self.payment_gateway = payment_gateway
        if payment_term is not None:
            self.payment_term = payment_term
        if profile_number is not None:
            self.profile_number = profile_number
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if roll_up_usage is not None:
            self.roll_up_usage = roll_up_usage
        if sales_rep is not None:
            self.sales_rep = sales_rep
        if sequence_set_id is not None:
            self.sequence_set_id = sequence_set_id
        if sold_to_contact is not None:
            self.sold_to_contact = sold_to_contact
        if tagging is not None:
            self.tagging = tagging
        if tax_info is not None:
            self.tax_info = tax_info
        if payment_gateway_number is not None:
            self.payment_gateway_number = payment_gateway_number
        if summary_statement_template_id is not None:
            self.summary_statement_template_id = summary_statement_template_id
        if einvoice_profile is not None:
            self.einvoice_profile = einvoice_profile
        if organization_label is not None:
            self.organization_label = organization_label
        if class__ns is not None:
            self.class__ns = class__ns
        if customer_type__ns is not None:
            self.customer_type__ns = customer_type__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if syncto_net_suite__ns is not None:
            self.syncto_net_suite__ns = syncto_net_suite__ns

    @property
    def additional_email_addresses(self):
        """Gets the additional_email_addresses of this UpdateAccountRequest.  # noqa: E501

        A list of additional email addresses to receive email notifications. Use commas to separate email addresses.   # noqa: E501

        :return: The additional_email_addresses of this UpdateAccountRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_email_addresses

    @additional_email_addresses.setter
    def additional_email_addresses(self, additional_email_addresses):
        """Sets the additional_email_addresses of this UpdateAccountRequest.

        A list of additional email addresses to receive email notifications. Use commas to separate email addresses.   # noqa: E501

        :param additional_email_addresses: The additional_email_addresses of this UpdateAccountRequest.  # noqa: E501
        :type: list[str]
        """

        self._additional_email_addresses = additional_email_addresses

    @property
    def auto_pay(self):
        """Gets the auto_pay of this UpdateAccountRequest.  # noqa: E501

        Whether future payments are to be automatically billed when they are due.    # noqa: E501

        :return: The auto_pay of this UpdateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this UpdateAccountRequest.

        Whether future payments are to be automatically billed when they are due.    # noqa: E501

        :param auto_pay: The auto_pay of this UpdateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def batch(self):
        """Gets the batch of this UpdateAccountRequest.  # noqa: E501

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :return: The batch of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this UpdateAccountRequest.

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :param batch: The batch of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this UpdateAccountRequest.  # noqa: E501

        Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month the customer is billed. Values: Any activated system-defined bill cycle day （`1`-`31`）   # noqa: E501

        :return: The bill_cycle_day of this UpdateAccountRequest.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this UpdateAccountRequest.

        Sets the bill cycle day (BCD) for the charge. The BCD determines which day of the month the customer is billed. Values: Any activated system-defined bill cycle day （`1`-`31`）   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this UpdateAccountRequest.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_to_contact(self):
        """Gets the bill_to_contact of this UpdateAccountRequest.  # noqa: E501


        :return: The bill_to_contact of this UpdateAccountRequest.  # noqa: E501
        :rtype: UpdateAccountContact
        """
        return self._bill_to_contact

    @bill_to_contact.setter
    def bill_to_contact(self, bill_to_contact):
        """Sets the bill_to_contact of this UpdateAccountRequest.


        :param bill_to_contact: The bill_to_contact of this UpdateAccountRequest.  # noqa: E501
        :type: UpdateAccountContact
        """

        self._bill_to_contact = bill_to_contact

    @property
    def communication_profile_id(self):
        """Gets the communication_profile_id of this UpdateAccountRequest.  # noqa: E501

        The ID of the communication profile that this account is linked to.  You can provide either or both of the `communicationProfileId` and `profileNumber` fields.  If both are provided, the request will fail if they do not refer to the same communication profile.   # noqa: E501

        :return: The communication_profile_id of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._communication_profile_id

    @communication_profile_id.setter
    def communication_profile_id(self, communication_profile_id):
        """Sets the communication_profile_id of this UpdateAccountRequest.

        The ID of the communication profile that this account is linked to.  You can provide either or both of the `communicationProfileId` and `profileNumber` fields.  If both are provided, the request will fail if they do not refer to the same communication profile.   # noqa: E501

        :param communication_profile_id: The communication_profile_id of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._communication_profile_id = communication_profile_id

    @property
    def credit_memo_template_id(self):
        """Gets the credit_memo_template_id of this UpdateAccountRequest.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :return: The credit_memo_template_id of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_template_id

    @credit_memo_template_id.setter
    def credit_memo_template_id(self, credit_memo_template_id):
        """Sets the credit_memo_template_id of this UpdateAccountRequest.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :param credit_memo_template_id: The credit_memo_template_id of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._credit_memo_template_id = credit_memo_template_id

    @property
    def crm_id(self):
        """Gets the crm_id of this UpdateAccountRequest.  # noqa: E501

        CRM account ID for the account, up to 100 characters.   # noqa: E501

        :return: The crm_id of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this UpdateAccountRequest.

        CRM account ID for the account, up to 100 characters.   # noqa: E501

        :param crm_id: The crm_id of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def customer_service_rep_name(self):
        """Gets the customer_service_rep_name of this UpdateAccountRequest.  # noqa: E501

        Name of the account’s customer service representative, if applicable.   # noqa: E501

        :return: The customer_service_rep_name of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._customer_service_rep_name

    @customer_service_rep_name.setter
    def customer_service_rep_name(self, customer_service_rep_name):
        """Sets the customer_service_rep_name of this UpdateAccountRequest.

        Name of the account’s customer service representative, if applicable.   # noqa: E501

        :param customer_service_rep_name: The customer_service_rep_name of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._customer_service_rep_name = customer_service_rep_name

    @property
    def debit_memo_template_id(self):
        """Gets the debit_memo_template_id of this UpdateAccountRequest.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :return: The debit_memo_template_id of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._debit_memo_template_id

    @debit_memo_template_id.setter
    def debit_memo_template_id(self, debit_memo_template_id):
        """Sets the debit_memo_template_id of this UpdateAccountRequest.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :param debit_memo_template_id: The debit_memo_template_id of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._debit_memo_template_id = debit_memo_template_id

    @property
    def default_payment_method_id(self):
        """Gets the default_payment_method_id of this UpdateAccountRequest.  # noqa: E501

        ID of the default payment method for the account.  Values: a valid ID for an existing payment method.   # noqa: E501

        :return: The default_payment_method_id of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._default_payment_method_id

    @default_payment_method_id.setter
    def default_payment_method_id(self, default_payment_method_id):
        """Sets the default_payment_method_id of this UpdateAccountRequest.

        ID of the default payment method for the account.  Values: a valid ID for an existing payment method.   # noqa: E501

        :param default_payment_method_id: The default_payment_method_id of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._default_payment_method_id = default_payment_method_id

    @property
    def invoice_delivery_prefs_email(self):
        """Gets the invoice_delivery_prefs_email of this UpdateAccountRequest.  # noqa: E501

        Whether the customer wants to receive invoices through email.   The default value is `false`.   # noqa: E501

        :return: The invoice_delivery_prefs_email of this UpdateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_email

    @invoice_delivery_prefs_email.setter
    def invoice_delivery_prefs_email(self, invoice_delivery_prefs_email):
        """Sets the invoice_delivery_prefs_email of this UpdateAccountRequest.

        Whether the customer wants to receive invoices through email.   The default value is `false`.   # noqa: E501

        :param invoice_delivery_prefs_email: The invoice_delivery_prefs_email of this UpdateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_email = invoice_delivery_prefs_email

    @property
    def invoice_delivery_prefs_print(self):
        """Gets the invoice_delivery_prefs_print of this UpdateAccountRequest.  # noqa: E501

        Whether the customer wants to receive printed invoices, such as through postal mail.  The default value is `false`.   # noqa: E501

        :return: The invoice_delivery_prefs_print of this UpdateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_print

    @invoice_delivery_prefs_print.setter
    def invoice_delivery_prefs_print(self, invoice_delivery_prefs_print):
        """Sets the invoice_delivery_prefs_print of this UpdateAccountRequest.

        Whether the customer wants to receive printed invoices, such as through postal mail.  The default value is `false`.   # noqa: E501

        :param invoice_delivery_prefs_print: The invoice_delivery_prefs_print of this UpdateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_print = invoice_delivery_prefs_print

    @property
    def invoice_template_id(self):
        """Gets the invoice_template_id of this UpdateAccountRequest.  # noqa: E501

        Invoice template ID, configured in Billing Settings in the Zuora UI.   # noqa: E501

        :return: The invoice_template_id of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._invoice_template_id

    @invoice_template_id.setter
    def invoice_template_id(self, invoice_template_id):
        """Sets the invoice_template_id of this UpdateAccountRequest.

        Invoice template ID, configured in Billing Settings in the Zuora UI.   # noqa: E501

        :param invoice_template_id: The invoice_template_id of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._invoice_template_id = invoice_template_id

    @property
    def name(self):
        """Gets the name of this UpdateAccountRequest.  # noqa: E501

        Account name, up to 255 characters.   # noqa: E501

        :return: The name of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateAccountRequest.

        Account name, up to 255 characters.   # noqa: E501

        :param name: The name of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this UpdateAccountRequest.  # noqa: E501

        A string of up to 65,535 characters.   # noqa: E501

        :return: The notes of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateAccountRequest.

        A string of up to 65,535 characters.   # noqa: E501

        :param notes: The notes of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def parent_id(self):
        """Gets the parent_id of this UpdateAccountRequest.  # noqa: E501

        Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy\" target=\"_blank\">Customer Hierarchy</a> enabled.  # noqa: E501

        :return: The parent_id of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this UpdateAccountRequest.

        Identifier of the parent customer account for this Account object. The length is 32 characters. Use this field if you have <a href=\"https://knowledgecenter.zuora.com/Billing/Subscriptions/Customer_Accounts/A_Customer_Account_Introduction#Customer_Hierarchy\" target=\"_blank\">Customer Hierarchy</a> enabled.  # noqa: E501

        :param parent_id: The parent_id of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    @property
    def partner_account(self):
        """Gets the partner_account of this UpdateAccountRequest.  # noqa: E501

        Whether the customer account is a partner, distributor, or reseller.  You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   # noqa: E501

        :return: The partner_account of this UpdateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._partner_account

    @partner_account.setter
    def partner_account(self, partner_account):
        """Sets the partner_account of this UpdateAccountRequest.

        Whether the customer account is a partner, distributor, or reseller.  You can set this field to `true` if you have business with distributors or resellers, or operating in B2B model to manage numerous subscriptions through concurrent API requests. After this field is set to `true`, the calculation of account metrics is performed asynchronously during operations such as subscription creation, order changes, invoice generation, and payments. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   # noqa: E501

        :param partner_account: The partner_account of this UpdateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._partner_account = partner_account

    @property
    def payment_gateway(self):
        """Gets the payment_gateway of this UpdateAccountRequest.  # noqa: E501

        The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.   # noqa: E501

        :return: The payment_gateway of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway

    @payment_gateway.setter
    def payment_gateway(self, payment_gateway):
        """Sets the payment_gateway of this UpdateAccountRequest.

        The name of the payment gateway instance. If null or left unassigned, the Account will use the Default Gateway.   # noqa: E501

        :param payment_gateway: The payment_gateway of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._payment_gateway = payment_gateway

    @property
    def payment_term(self):
        """Gets the payment_term of this UpdateAccountRequest.  # noqa: E501

        Payment terms for this account. Possible values are `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.  # noqa: E501

        :return: The payment_term of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this UpdateAccountRequest.

        Payment terms for this account. Possible values are `Due Upon Receipt`, `Net 30`, `Net 60`, `Net 90`.  # noqa: E501

        :param payment_term: The payment_term of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def profile_number(self):
        """Gets the profile_number of this UpdateAccountRequest.  # noqa: E501

        The number of the communication profile that this account is linked to.  You can provide either or both of the `communicationProfileId` and `profileNumber` fields.  If both are provided, the request will fail if they do not refer to the same communication profile.   # noqa: E501

        :return: The profile_number of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._profile_number

    @profile_number.setter
    def profile_number(self, profile_number):
        """Sets the profile_number of this UpdateAccountRequest.

        The number of the communication profile that this account is linked to.  You can provide either or both of the `communicationProfileId` and `profileNumber` fields.  If both are provided, the request will fail if they do not refer to the same communication profile.   # noqa: E501

        :param profile_number: The profile_number of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._profile_number = profile_number

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this UpdateAccountRequest.  # noqa: E501

        The purchase order number provided by your customer for services, products, or both purchased.  # noqa: E501

        :return: The purchase_order_number of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this UpdateAccountRequest.

        The purchase order number provided by your customer for services, products, or both purchased.  # noqa: E501

        :param purchase_order_number: The purchase_order_number of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def roll_up_usage(self):
        """Gets the roll_up_usage of this UpdateAccountRequest.  # noqa: E501

        Whether the usage of the account roll up to its parent account  # noqa: E501

        :return: The roll_up_usage of this UpdateAccountRequest.  # noqa: E501
        :rtype: bool
        """
        return self._roll_up_usage

    @roll_up_usage.setter
    def roll_up_usage(self, roll_up_usage):
        """Sets the roll_up_usage of this UpdateAccountRequest.

        Whether the usage of the account roll up to its parent account  # noqa: E501

        :param roll_up_usage: The roll_up_usage of this UpdateAccountRequest.  # noqa: E501
        :type: bool
        """

        self._roll_up_usage = roll_up_usage

    @property
    def sales_rep(self):
        """Gets the sales_rep of this UpdateAccountRequest.  # noqa: E501

        The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.  # noqa: E501

        :return: The sales_rep of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._sales_rep

    @sales_rep.setter
    def sales_rep(self, sales_rep):
        """Sets the sales_rep of this UpdateAccountRequest.

        The name of the sales representative associated with this account, if applicable. Maximum of 50 characters.  # noqa: E501

        :param sales_rep: The sales_rep of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._sales_rep = sales_rep

    @property
    def sequence_set_id(self):
        """Gets the sequence_set_id of this UpdateAccountRequest.  # noqa: E501

        The ID of the billing document sequence set to assign to the customer account.   The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.  If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.   # noqa: E501

        :return: The sequence_set_id of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_id

    @sequence_set_id.setter
    def sequence_set_id(self, sequence_set_id):
        """Sets the sequence_set_id of this UpdateAccountRequest.

        The ID of the billing document sequence set to assign to the customer account.   The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.  If a customer account has no assigned billing document sequence set, billing documents generated for this account adopt the prefix and starting document number from the default sequence set.   # noqa: E501

        :param sequence_set_id: The sequence_set_id of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._sequence_set_id = sequence_set_id

    @property
    def sold_to_contact(self):
        """Gets the sold_to_contact of this UpdateAccountRequest.  # noqa: E501


        :return: The sold_to_contact of this UpdateAccountRequest.  # noqa: E501
        :rtype: UpdateAccountContact
        """
        return self._sold_to_contact

    @sold_to_contact.setter
    def sold_to_contact(self, sold_to_contact):
        """Sets the sold_to_contact of this UpdateAccountRequest.


        :param sold_to_contact: The sold_to_contact of this UpdateAccountRequest.  # noqa: E501
        :type: UpdateAccountContact
        """

        self._sold_to_contact = sold_to_contact

    @property
    def tagging(self):
        """Gets the tagging of this UpdateAccountRequest.  # noqa: E501


        :return: The tagging of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._tagging

    @tagging.setter
    def tagging(self, tagging):
        """Sets the tagging of this UpdateAccountRequest.


        :param tagging: The tagging of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._tagging = tagging

    @property
    def tax_info(self):
        """Gets the tax_info of this UpdateAccountRequest.  # noqa: E501


        :return: The tax_info of this UpdateAccountRequest.  # noqa: E501
        :rtype: TaxInfo
        """
        return self._tax_info

    @tax_info.setter
    def tax_info(self, tax_info):
        """Sets the tax_info of this UpdateAccountRequest.


        :param tax_info: The tax_info of this UpdateAccountRequest.  # noqa: E501
        :type: TaxInfo
        """

        self._tax_info = tax_info

    @property
    def payment_gateway_number(self):
        """Gets the payment_gateway_number of this UpdateAccountRequest.  # noqa: E501

        paymentGatewayNumber   # noqa: E501

        :return: The payment_gateway_number of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_number

    @payment_gateway_number.setter
    def payment_gateway_number(self, payment_gateway_number):
        """Sets the payment_gateway_number of this UpdateAccountRequest.

        paymentGatewayNumber   # noqa: E501

        :param payment_gateway_number: The payment_gateway_number of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._payment_gateway_number = payment_gateway_number

    @property
    def summary_statement_template_id(self):
        """Gets the summary_statement_template_id of this UpdateAccountRequest.  # noqa: E501

        summaryStatementTemplateId   # noqa: E501

        :return: The summary_statement_template_id of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._summary_statement_template_id

    @summary_statement_template_id.setter
    def summary_statement_template_id(self, summary_statement_template_id):
        """Sets the summary_statement_template_id of this UpdateAccountRequest.

        summaryStatementTemplateId   # noqa: E501

        :param summary_statement_template_id: The summary_statement_template_id of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._summary_statement_template_id = summary_statement_template_id

    @property
    def einvoice_profile(self):
        """Gets the einvoice_profile of this UpdateAccountRequest.  # noqa: E501


        :return: The einvoice_profile of this UpdateAccountRequest.  # noqa: E501
        :rtype: AccountEInvoiceProfile
        """
        return self._einvoice_profile

    @einvoice_profile.setter
    def einvoice_profile(self, einvoice_profile):
        """Sets the einvoice_profile of this UpdateAccountRequest.


        :param einvoice_profile: The einvoice_profile of this UpdateAccountRequest.  # noqa: E501
        :type: AccountEInvoiceProfile
        """

        self._einvoice_profile = einvoice_profile

    @property
    def organization_label(self):
        """Gets the organization_label of this UpdateAccountRequest.  # noqa: E501


        :return: The organization_label of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._organization_label

    @organization_label.setter
    def organization_label(self, organization_label):
        """Sets the organization_label of this UpdateAccountRequest.


        :param organization_label: The organization_label of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._organization_label = organization_label

    @property
    def class__ns(self):
        """Gets the class__ns of this UpdateAccountRequest.  # noqa: E501

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this UpdateAccountRequest.

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._class__ns = class__ns

    @property
    def customer_type__ns(self):
        """Gets the customer_type__ns of this UpdateAccountRequest.  # noqa: E501


        :return: The customer_type__ns of this UpdateAccountRequest.  # noqa: E501
        :rtype: AccountObjectNSFieldsCustomerTypeNS
        """
        return self._customer_type__ns

    @customer_type__ns.setter
    def customer_type__ns(self, customer_type__ns):
        """Sets the customer_type__ns of this UpdateAccountRequest.


        :param customer_type__ns: The customer_type__ns of this UpdateAccountRequest.  # noqa: E501
        :type: AccountObjectNSFieldsCustomerTypeNS
        """

        self._customer_type__ns = customer_type__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this UpdateAccountRequest.  # noqa: E501

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this UpdateAccountRequest.

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._department__ns = department__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this UpdateAccountRequest.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this UpdateAccountRequest.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this UpdateAccountRequest.  # noqa: E501

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this UpdateAccountRequest.

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this UpdateAccountRequest.  # noqa: E501

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this UpdateAccountRequest.

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._location__ns = location__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this UpdateAccountRequest.  # noqa: E501

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this UpdateAccountRequest.

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this UpdateAccountRequest.  # noqa: E501

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this UpdateAccountRequest.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this UpdateAccountRequest.

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this UpdateAccountRequest.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    @property
    def syncto_net_suite__ns(self):
        """Gets the syncto_net_suite__ns of this UpdateAccountRequest.  # noqa: E501


        :return: The syncto_net_suite__ns of this UpdateAccountRequest.  # noqa: E501
        :rtype: AccountObjectNSFieldsSynctoNetSuiteNS
        """
        return self._syncto_net_suite__ns

    @syncto_net_suite__ns.setter
    def syncto_net_suite__ns(self, syncto_net_suite__ns):
        """Sets the syncto_net_suite__ns of this UpdateAccountRequest.


        :param syncto_net_suite__ns: The syncto_net_suite__ns of this UpdateAccountRequest.  # noqa: E501
        :type: AccountObjectNSFieldsSynctoNetSuiteNS
        """

        self._syncto_net_suite__ns = syncto_net_suite__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAccountRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAccountRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
