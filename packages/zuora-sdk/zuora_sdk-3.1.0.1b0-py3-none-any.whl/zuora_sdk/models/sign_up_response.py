# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SignUpResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_number': 'str',
        'credit_memo_id': 'str',
        'credit_memo_number': 'str',
        'invoice_id': 'str',
        'invoice_number': 'str',
        'order_number': 'str',
        'paid_amount': 'str',
        'payment_id': 'str',
        'payment_number': 'str',
        'process_id': 'str',
        'reasons': 'list[SignUpResponseReasons]',
        'status': 'SignUpResponseStatus',
        'subscription_id': 'str',
        'subscription_number': 'str',
        'success': 'bool'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_number': 'accountNumber',
        'credit_memo_id': 'creditMemoId',
        'credit_memo_number': 'creditMemoNumber',
        'invoice_id': 'invoiceId',
        'invoice_number': 'invoiceNumber',
        'order_number': 'orderNumber',
        'paid_amount': 'paidAmount',
        'payment_id': 'paymentId',
        'payment_number': 'paymentNumber',
        'process_id': 'processId',
        'reasons': 'reasons',
        'status': 'status',
        'subscription_id': 'subscriptionId',
        'subscription_number': 'subscriptionNumber',
        'success': 'success'
    }

    def __init__(self, account_id=None, account_number=None, credit_memo_id=None, credit_memo_number=None, invoice_id=None, invoice_number=None, order_number=None, paid_amount=None, payment_id=None, payment_number=None, process_id=None, reasons=None, status=None, subscription_id=None, subscription_number=None, success=None):  # noqa: E501
        """SignUpResponse - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_number = None
        self._credit_memo_id = None
        self._credit_memo_number = None
        self._invoice_id = None
        self._invoice_number = None
        self._order_number = None
        self._paid_amount = None
        self._payment_id = None
        self._payment_number = None
        self._process_id = None
        self._reasons = None
        self._status = None
        self._subscription_id = None
        self._subscription_number = None
        self._success = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_number is not None:
            self.account_number = account_number
        if credit_memo_id is not None:
            self.credit_memo_id = credit_memo_id
        if credit_memo_number is not None:
            self.credit_memo_number = credit_memo_number
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if order_number is not None:
            self.order_number = order_number
        if paid_amount is not None:
            self.paid_amount = paid_amount
        if payment_id is not None:
            self.payment_id = payment_id
        if payment_number is not None:
            self.payment_number = payment_number
        if process_id is not None:
            self.process_id = process_id
        if reasons is not None:
            self.reasons = reasons
        if status is not None:
            self.status = status
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if success is not None:
            self.success = success

    @property
    def account_id(self):
        """Gets the account_id of this SignUpResponse.  # noqa: E501

        The account id for the order.  # noqa: E501

        :return: The account_id of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this SignUpResponse.

        The account id for the order.  # noqa: E501

        :param account_id: The account_id of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this SignUpResponse.  # noqa: E501

        The account number for the order.  # noqa: E501

        :return: The account_number of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this SignUpResponse.

        The account number for the order.  # noqa: E501

        :param account_number: The account_number of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def credit_memo_id(self):
        """Gets the credit_memo_id of this SignUpResponse.  # noqa: E501

        An array of the credit memo id generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.  # noqa: E501

        :return: The credit_memo_id of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_id

    @credit_memo_id.setter
    def credit_memo_id(self, credit_memo_id):
        """Sets the credit_memo_id of this SignUpResponse.

        An array of the credit memo id generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.  # noqa: E501

        :param credit_memo_id: The credit_memo_id of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._credit_memo_id = credit_memo_id

    @property
    def credit_memo_number(self):
        """Gets the credit_memo_number of this SignUpResponse.  # noqa: E501

        An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.  # noqa: E501

        :return: The credit_memo_number of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_number

    @credit_memo_number.setter
    def credit_memo_number(self, credit_memo_number):
        """Sets the credit_memo_number of this SignUpResponse.

        An array of the credit memo numbers generated in this order request. The credit memo is only available if you have the Invoice Settlement feature enabled.  # noqa: E501

        :param credit_memo_number: The credit_memo_number of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._credit_memo_number = credit_memo_number

    @property
    def invoice_id(self):
        """Gets the invoice_id of this SignUpResponse.  # noqa: E501

        The invoice id generated in this order request  # noqa: E501

        :return: The invoice_id of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this SignUpResponse.

        The invoice id generated in this order request  # noqa: E501

        :param invoice_id: The invoice_id of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this SignUpResponse.  # noqa: E501

        The invoice number generated in this order request  # noqa: E501

        :return: The invoice_number of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this SignUpResponse.

        The invoice number generated in this order request  # noqa: E501

        :param invoice_number: The invoice_number of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def order_number(self):
        """Gets the order_number of this SignUpResponse.  # noqa: E501

        The order number of the order created.  # noqa: E501

        :return: The order_number of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this SignUpResponse.

        The order number of the order created.  # noqa: E501

        :param order_number: The order_number of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def paid_amount(self):
        """Gets the paid_amount of this SignUpResponse.  # noqa: E501

        The total amount collected in this order request.  # noqa: E501

        :return: The paid_amount of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._paid_amount

    @paid_amount.setter
    def paid_amount(self, paid_amount):
        """Sets the paid_amount of this SignUpResponse.

        The total amount collected in this order request.  # noqa: E501

        :param paid_amount: The paid_amount of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._paid_amount = paid_amount

    @property
    def payment_id(self):
        """Gets the payment_id of this SignUpResponse.  # noqa: E501

        The payment id that is collected in this order request.  # noqa: E501

        :return: The payment_id of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this SignUpResponse.

        The payment id that is collected in this order request.  # noqa: E501

        :param payment_id: The payment_id of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def payment_number(self):
        """Gets the payment_number of this SignUpResponse.  # noqa: E501

        The payment number that is collected in this order request.  # noqa: E501

        :return: The payment_number of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_number

    @payment_number.setter
    def payment_number(self, payment_number):
        """Sets the payment_number of this SignUpResponse.

        The payment number that is collected in this order request.  # noqa: E501

        :param payment_number: The payment_number of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._payment_number = payment_number

    @property
    def process_id(self):
        """Gets the process_id of this SignUpResponse.  # noqa: E501

        The Id of the process that handles the operation.   # noqa: E501

        :return: The process_id of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this SignUpResponse.

        The Id of the process that handles the operation.   # noqa: E501

        :param process_id: The process_id of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._process_id = process_id

    @property
    def reasons(self):
        """Gets the reasons of this SignUpResponse.  # noqa: E501


        :return: The reasons of this SignUpResponse.  # noqa: E501
        :rtype: list[SignUpResponseReasons]
        """
        return self._reasons

    @reasons.setter
    def reasons(self, reasons):
        """Sets the reasons of this SignUpResponse.


        :param reasons: The reasons of this SignUpResponse.  # noqa: E501
        :type: list[SignUpResponseReasons]
        """

        self._reasons = reasons

    @property
    def status(self):
        """Gets the status of this SignUpResponse.  # noqa: E501


        :return: The status of this SignUpResponse.  # noqa: E501
        :rtype: SignUpResponseStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SignUpResponse.


        :param status: The status of this SignUpResponse.  # noqa: E501
        :type: SignUpResponseStatus
        """

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SignUpResponse.  # noqa: E501

        The subscription id of the order.  # noqa: E501

        :return: The subscription_id of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SignUpResponse.

        The subscription id of the order.  # noqa: E501

        :param subscription_id: The subscription_id of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_number(self):
        """Gets the subscription_number of this SignUpResponse.  # noqa: E501

        The subscription number of the order.  # noqa: E501

        :return: The subscription_number of this SignUpResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this SignUpResponse.

        The subscription number of the order.  # noqa: E501

        :param subscription_number: The subscription_number of this SignUpResponse.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def success(self):
        """Gets the success of this SignUpResponse.  # noqa: E501

        Indicates whether the call succeeded.   # noqa: E501

        :return: The success of this SignUpResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this SignUpResponse.

        Indicates whether the call succeeded.   # noqa: E501

        :param success: The success of this SignUpResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignUpResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignUpResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
