# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollectDebitMemoResponseProcessedPayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'gateway_id': 'str',
        'gateway_response': 'str',
        'gateway_response_code': 'str',
        'id': 'str',
        'number': 'str',
        'payment_method_id': 'str',
        'status': 'CollectDebitMemoResponseProcessedPaymentStatus'
    }

    attribute_map = {
        'amount': 'amount',
        'gateway_id': 'gatewayId',
        'gateway_response': 'gatewayResponse',
        'gateway_response_code': 'gatewayResponseCode',
        'id': 'id',
        'number': 'number',
        'payment_method_id': 'paymentMethodId',
        'status': 'status'
    }

    def __init__(self, amount=None, gateway_id=None, gateway_response=None, gateway_response_code=None, id=None, number=None, payment_method_id=None, status=None):  # noqa: E501
        """CollectDebitMemoResponseProcessedPayment - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._gateway_id = None
        self._gateway_response = None
        self._gateway_response_code = None
        self._id = None
        self._number = None
        self._payment_method_id = None
        self._status = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if gateway_response is not None:
            self.gateway_response = gateway_response
        if gateway_response_code is not None:
            self.gateway_response_code = gateway_response_code
        if id is not None:
            self.id = id
        if number is not None:
            self.number = number
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if status is not None:
            self.status = status

    @property
    def amount(self):
        """Gets the amount of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501

        The total amount of the payment.  # noqa: E501

        :return: The amount of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CollectDebitMemoResponseProcessedPayment.

        The total amount of the payment.  # noqa: E501

        :param amount: The amount of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def gateway_id(self):
        """Gets the gateway_id of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501

        The ID of the gateway instance that processes the payment.  # noqa: E501

        :return: The gateway_id of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this CollectDebitMemoResponseProcessedPayment.

        The ID of the gateway instance that processes the payment.  # noqa: E501

        :param gateway_id: The gateway_id of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def gateway_response(self):
        """Gets the gateway_response of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501

        The message returned from the payment gateway for the payment. This message is gateway-dependent.  # noqa: E501

        :return: The gateway_response of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response

    @gateway_response.setter
    def gateway_response(self, gateway_response):
        """Sets the gateway_response of this CollectDebitMemoResponseProcessedPayment.

        The message returned from the payment gateway for the payment. This message is gateway-dependent.  # noqa: E501

        :param gateway_response: The gateway_response of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :type: str
        """

        self._gateway_response = gateway_response

    @property
    def gateway_response_code(self):
        """Gets the gateway_response_code of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501

        The code returned from the payment gateway for the payment. This code is gateway-dependent.  # noqa: E501

        :return: The gateway_response_code of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response_code

    @gateway_response_code.setter
    def gateway_response_code(self, gateway_response_code):
        """Sets the gateway_response_code of this CollectDebitMemoResponseProcessedPayment.

        The code returned from the payment gateway for the payment. This code is gateway-dependent.  # noqa: E501

        :param gateway_response_code: The gateway_response_code of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :type: str
        """

        self._gateway_response_code = gateway_response_code

    @property
    def id(self):
        """Gets the id of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501

        The unique ID of the created payment. For example, 4028905f5a87c0ff015a87eb6b75007f.  # noqa: E501

        :return: The id of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectDebitMemoResponseProcessedPayment.

        The unique ID of the created payment. For example, 4028905f5a87c0ff015a87eb6b75007f.  # noqa: E501

        :param id: The id of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def number(self):
        """Gets the number of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501

        The unique identification number of the payment. For example, P-00000001.  # noqa: E501

        :return: The number of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CollectDebitMemoResponseProcessedPayment.

        The unique identification number of the payment. For example, P-00000001.  # noqa: E501

        :param number: The number of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501

        The unique ID of the payment method that the customer used to make the payment.  # noqa: E501

        :return: The payment_method_id of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this CollectDebitMemoResponseProcessedPayment.

        The unique ID of the payment method that the customer used to make the payment.  # noqa: E501

        :param payment_method_id: The payment_method_id of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def status(self):
        """Gets the status of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501


        :return: The status of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :rtype: CollectDebitMemoResponseProcessedPaymentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CollectDebitMemoResponseProcessedPayment.


        :param status: The status of this CollectDebitMemoResponseProcessedPayment.  # noqa: E501
        :type: CollectDebitMemoResponseProcessedPaymentStatus
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectDebitMemoResponseProcessedPayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectDebitMemoResponseProcessedPayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
