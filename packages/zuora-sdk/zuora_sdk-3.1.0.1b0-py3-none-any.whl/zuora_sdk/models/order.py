# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Order(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'OrderCategory',
        'created_by': 'str',
        'created_date': 'str',
        'currency': 'str',
        'custom_fields': 'dict(str, object)',
        'description': 'str',
        'existing_account_number': 'str',
        'existing_account_details': 'AllOfOrderExistingAccountDetails',
        'invoice_schedule_id': 'int',
        'order_date': 'date',
        'order_line_items': 'list[OrderLineItem]',
        'order_number': 'str',
        'reason_code': 'str',
        'scheduling_options': 'OrderSchedulingOptions',
        'scheduled_order_activation_response': 'CreateOrderResponse',
        'status': 'OrderStatus',
        'subscriptions': 'list[OrderSubscriptions]',
        'updated_by': 'str',
        'updated_date': 'str'
    }

    attribute_map = {
        'category': 'category',
        'created_by': 'createdBy',
        'created_date': 'createdDate',
        'currency': 'currency',
        'custom_fields': 'customFields',
        'description': 'description',
        'existing_account_number': 'existingAccountNumber',
        'existing_account_details': 'existingAccountDetails',
        'invoice_schedule_id': 'invoiceScheduleId',
        'order_date': 'orderDate',
        'order_line_items': 'orderLineItems',
        'order_number': 'orderNumber',
        'reason_code': 'reasonCode',
        'scheduling_options': 'schedulingOptions',
        'scheduled_order_activation_response': 'scheduledOrderActivationResponse',
        'status': 'status',
        'subscriptions': 'subscriptions',
        'updated_by': 'updatedBy',
        'updated_date': 'updatedDate'
    }

    def __init__(self, category=None, created_by=None, created_date=None, currency=None, custom_fields=None, description=None, existing_account_number=None, existing_account_details=None, invoice_schedule_id=None, order_date=None, order_line_items=None, order_number=None, reason_code=None, scheduling_options=None, scheduled_order_activation_response=None, status=None, subscriptions=None, updated_by=None, updated_date=None):  # noqa: E501
        """Order - a model defined in Swagger"""  # noqa: E501
        self._category = None
        self._created_by = None
        self._created_date = None
        self._currency = None
        self._custom_fields = None
        self._description = None
        self._existing_account_number = None
        self._existing_account_details = None
        self._invoice_schedule_id = None
        self._order_date = None
        self._order_line_items = None
        self._order_number = None
        self._reason_code = None
        self._scheduling_options = None
        self._scheduled_order_activation_response = None
        self._status = None
        self._subscriptions = None
        self._updated_by = None
        self._updated_date = None
        self.discriminator = None
        if category is not None:
            self.category = category
        if created_by is not None:
            self.created_by = created_by
        if created_date is not None:
            self.created_date = created_date
        if currency is not None:
            self.currency = currency
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if description is not None:
            self.description = description
        if existing_account_number is not None:
            self.existing_account_number = existing_account_number
        if existing_account_details is not None:
            self.existing_account_details = existing_account_details
        if invoice_schedule_id is not None:
            self.invoice_schedule_id = invoice_schedule_id
        if order_date is not None:
            self.order_date = order_date
        if order_line_items is not None:
            self.order_line_items = order_line_items
        if order_number is not None:
            self.order_number = order_number
        if reason_code is not None:
            self.reason_code = reason_code
        if scheduling_options is not None:
            self.scheduling_options = scheduling_options
        if scheduled_order_activation_response is not None:
            self.scheduled_order_activation_response = scheduled_order_activation_response
        if status is not None:
            self.status = status
        if subscriptions is not None:
            self.subscriptions = subscriptions
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def category(self):
        """Gets the category of this Order.  # noqa: E501


        :return: The category of this Order.  # noqa: E501
        :rtype: OrderCategory
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Order.


        :param category: The category of this Order.  # noqa: E501
        :type: OrderCategory
        """

        self._category = category

    @property
    def created_by(self):
        """Gets the created_by of this Order.  # noqa: E501

        The ID of the user who created this order.  # noqa: E501

        :return: The created_by of this Order.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Order.

        The ID of the user who created this order.  # noqa: E501

        :param created_by: The created_by of this Order.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_date(self):
        """Gets the created_date of this Order.  # noqa: E501

        The time that the order gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :return: The created_date of this Order.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Order.

        The time that the order gets created in the system, in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :param created_date: The created_date of this Order.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def currency(self):
        """Gets the currency of this Order.  # noqa: E501

        Currency code.  # noqa: E501

        :return: The currency of this Order.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Order.

        Currency code.  # noqa: E501

        :param currency: The currency of this Order.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Order.  # noqa: E501

        Container for custom fields of an Order object.   # noqa: E501

        :return: The custom_fields of this Order.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Order.

        Container for custom fields of an Order object.   # noqa: E501

        :param custom_fields: The custom_fields of this Order.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this Order.  # noqa: E501

        A description of the order.  # noqa: E501

        :return: The description of this Order.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Order.

        A description of the order.  # noqa: E501

        :param description: The description of this Order.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def existing_account_number(self):
        """Gets the existing_account_number of this Order.  # noqa: E501

        The account number that this order has been created under. This is also the invoice owner of the subscriptions included in this order.  # noqa: E501

        :return: The existing_account_number of this Order.  # noqa: E501
        :rtype: str
        """
        return self._existing_account_number

    @existing_account_number.setter
    def existing_account_number(self, existing_account_number):
        """Sets the existing_account_number of this Order.

        The account number that this order has been created under. This is also the invoice owner of the subscriptions included in this order.  # noqa: E501

        :param existing_account_number: The existing_account_number of this Order.  # noqa: E501
        :type: str
        """

        self._existing_account_number = existing_account_number

    @property
    def existing_account_details(self):
        """Gets the existing_account_details of this Order.  # noqa: E501

        The account basic information that this order has been created under. This is also the invoice owner of the subscriptions included in this order.   # noqa: E501

        :return: The existing_account_details of this Order.  # noqa: E501
        :rtype: AllOfOrderExistingAccountDetails
        """
        return self._existing_account_details

    @existing_account_details.setter
    def existing_account_details(self, existing_account_details):
        """Sets the existing_account_details of this Order.

        The account basic information that this order has been created under. This is also the invoice owner of the subscriptions included in this order.   # noqa: E501

        :param existing_account_details: The existing_account_details of this Order.  # noqa: E501
        :type: AllOfOrderExistingAccountDetails
        """

        self._existing_account_details = existing_account_details

    @property
    def invoice_schedule_id(self):
        """Gets the invoice_schedule_id of this Order.  # noqa: E501

        The ID of the invoice schedule associated with the order.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature in the **Early Adopter** phase enabled.   # noqa: E501

        :return: The invoice_schedule_id of this Order.  # noqa: E501
        :rtype: int
        """
        return self._invoice_schedule_id

    @invoice_schedule_id.setter
    def invoice_schedule_id(self, invoice_schedule_id):
        """Sets the invoice_schedule_id of this Order.

        The ID of the invoice schedule associated with the order.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature in the **Early Adopter** phase enabled.   # noqa: E501

        :param invoice_schedule_id: The invoice_schedule_id of this Order.  # noqa: E501
        :type: int
        """

        self._invoice_schedule_id = invoice_schedule_id

    @property
    def order_date(self):
        """Gets the order_date of this Order.  # noqa: E501

        The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if no additinal contractEffectiveDate is provided.  # noqa: E501

        :return: The order_date of this Order.  # noqa: E501
        :rtype: date
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this Order.

        The date when the order is signed. All the order actions under this order will use this order date as the contract effective date if no additinal contractEffectiveDate is provided.  # noqa: E501

        :param order_date: The order_date of this Order.  # noqa: E501
        :type: date
        """

        self._order_date = order_date

    @property
    def order_line_items(self):
        """Gets the order_line_items of this Order.  # noqa: E501

        [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.   With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.   **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.          # noqa: E501

        :return: The order_line_items of this Order.  # noqa: E501
        :rtype: list[OrderLineItem]
        """
        return self._order_line_items

    @order_line_items.setter
    def order_line_items(self, order_line_items):
        """Sets the order_line_items of this Order.

        [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) are non subscription based items created by an Order, representing transactional charges such as one-time fees, physical goods, or professional service charges that are not sold as subscription services.   With the Order Line Items feature enabled, you can now launch non-subscription and unified monetization business models in Zuora, in addition to subscription business models.   **Note:** The [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature is now generally available to all Zuora customers. You need to enable the [Orders](https://knowledgecenter.zuora.com/BC_Subscription_Management/Orders/AA_Overview_of_Orders#Orders) feature to access the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items/AA_Overview_of_Order_Line_Items) feature. As of Zuora Billing Release 313 (November 2021), new customers who onboard on [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) will have the [Order Line Items](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Line_Items) feature enabled by default.          # noqa: E501

        :param order_line_items: The order_line_items of this Order.  # noqa: E501
        :type: list[OrderLineItem]
        """

        self._order_line_items = order_line_items

    @property
    def order_number(self):
        """Gets the order_number of this Order.  # noqa: E501

        The order number of the order.  # noqa: E501

        :return: The order_number of this Order.  # noqa: E501
        :rtype: str
        """
        return self._order_number

    @order_number.setter
    def order_number(self, order_number):
        """Sets the order_number of this Order.

        The order number of the order.  # noqa: E501

        :param order_number: The order_number of this Order.  # noqa: E501
        :type: str
        """

        self._order_number = order_number

    @property
    def reason_code(self):
        """Gets the reason_code of this Order.  # noqa: E501

        Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.   # noqa: E501

        :return: The reason_code of this Order.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this Order.

        Values of reason code configured in **Billing Settings** > **Configure Reason Codes** through Zuora UI. Indicates the reason when a return order line item occurs.   # noqa: E501

        :param reason_code: The reason_code of this Order.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def scheduling_options(self):
        """Gets the scheduling_options of this Order.  # noqa: E501


        :return: The scheduling_options of this Order.  # noqa: E501
        :rtype: OrderSchedulingOptions
        """
        return self._scheduling_options

    @scheduling_options.setter
    def scheduling_options(self, scheduling_options):
        """Sets the scheduling_options of this Order.


        :param scheduling_options: The scheduling_options of this Order.  # noqa: E501
        :type: OrderSchedulingOptions
        """

        self._scheduling_options = scheduling_options

    @property
    def scheduled_order_activation_response(self):
        """Gets the scheduled_order_activation_response of this Order.  # noqa: E501


        :return: The scheduled_order_activation_response of this Order.  # noqa: E501
        :rtype: CreateOrderResponse
        """
        return self._scheduled_order_activation_response

    @scheduled_order_activation_response.setter
    def scheduled_order_activation_response(self, scheduled_order_activation_response):
        """Sets the scheduled_order_activation_response of this Order.


        :param scheduled_order_activation_response: The scheduled_order_activation_response of this Order.  # noqa: E501
        :type: CreateOrderResponse
        """

        self._scheduled_order_activation_response = scheduled_order_activation_response

    @property
    def status(self):
        """Gets the status of this Order.  # noqa: E501


        :return: The status of this Order.  # noqa: E501
        :rtype: OrderStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Order.


        :param status: The status of this Order.  # noqa: E501
        :type: OrderStatus
        """

        self._status = status

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Order.  # noqa: E501

        Represents a processed subscription, including the origin request (order actions) that create this version of subscription and the processing result (order metrics). The reference part in the request will be overridden with the info in the new subscription version.  # noqa: E501

        :return: The subscriptions of this Order.  # noqa: E501
        :rtype: list[OrderSubscriptions]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Order.

        Represents a processed subscription, including the origin request (order actions) that create this version of subscription and the processing result (order metrics). The reference part in the request will be overridden with the info in the new subscription version.  # noqa: E501

        :param subscriptions: The subscriptions of this Order.  # noqa: E501
        :type: list[OrderSubscriptions]
        """

        self._subscriptions = subscriptions

    @property
    def updated_by(self):
        """Gets the updated_by of this Order.  # noqa: E501

        The ID of the user who updated this order.  # noqa: E501

        :return: The updated_by of this Order.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Order.

        The ID of the user who updated this order.  # noqa: E501

        :param updated_by: The updated_by of this Order.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_date(self):
        """Gets the updated_date of this Order.  # noqa: E501

        The time that the order gets updated in the system(for example, an order description update), in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :return: The updated_date of this Order.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Order.

        The time that the order gets updated in the system(for example, an order description update), in the `YYYY-MM-DD HH:MM:SS` format.  # noqa: E501

        :param updated_date: The updated_date of this Order.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Order, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Order):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
