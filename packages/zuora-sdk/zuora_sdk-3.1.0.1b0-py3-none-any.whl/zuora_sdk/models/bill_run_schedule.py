# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BillRunSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'repeat_from': 'date',
        'repeat_to': 'date',
        'repeat_type': 'str',
        'run_time': 'int',
        'weekly_on_day': 'list[str]',
        'monthly_on_end_of_month': 'bool'
    }

    attribute_map = {
        'repeat_from': 'repeatFrom',
        'repeat_to': 'repeatTo',
        'repeat_type': 'repeatType',
        'run_time': 'runTime',
        'weekly_on_day': 'weeklyOnDay',
        'monthly_on_end_of_month': 'monthlyOnEndOfMonth'
    }

    def __init__(self, repeat_from=None, repeat_to=None, repeat_type=None, run_time=None, weekly_on_day=None, monthly_on_end_of_month=None):  # noqa: E501
        """BillRunSchedule - a model defined in Swagger"""  # noqa: E501
        self._repeat_from = None
        self._repeat_to = None
        self._repeat_type = None
        self._run_time = None
        self._weekly_on_day = None
        self._monthly_on_end_of_month = None
        self.discriminator = None
        if repeat_from is not None:
            self.repeat_from = repeat_from
        if repeat_to is not None:
            self.repeat_to = repeat_to
        if repeat_type is not None:
            self.repeat_type = repeat_type
        if run_time is not None:
            self.run_time = run_time
        if weekly_on_day is not None:
            self.weekly_on_day = weekly_on_day
        if monthly_on_end_of_month is not None:
            self.monthly_on_end_of_month = monthly_on_end_of_month

    @property
    def repeat_from(self):
        """Gets the repeat_from of this BillRunSchedule.  # noqa: E501

        The start date of the scheduled bill run.   # noqa: E501

        :return: The repeat_from of this BillRunSchedule.  # noqa: E501
        :rtype: date
        """
        return self._repeat_from

    @repeat_from.setter
    def repeat_from(self, repeat_from):
        """Sets the repeat_from of this BillRunSchedule.

        The start date of the scheduled bill run.   # noqa: E501

        :param repeat_from: The repeat_from of this BillRunSchedule.  # noqa: E501
        :type: date
        """

        self._repeat_from = repeat_from

    @property
    def repeat_to(self):
        """Gets the repeat_to of this BillRunSchedule.  # noqa: E501

        The end date of of the scheduled bill run.   # noqa: E501

        :return: The repeat_to of this BillRunSchedule.  # noqa: E501
        :rtype: date
        """
        return self._repeat_to

    @repeat_to.setter
    def repeat_to(self, repeat_to):
        """Sets the repeat_to of this BillRunSchedule.

        The end date of of the scheduled bill run.   # noqa: E501

        :param repeat_to: The repeat_to of this BillRunSchedule.  # noqa: E501
        :type: date
        """

        self._repeat_to = repeat_to

    @property
    def repeat_type(self):
        """Gets the repeat_type of this BillRunSchedule.  # noqa: E501

        The repeat type of the bill run.   # noqa: E501

        :return: The repeat_type of this BillRunSchedule.  # noqa: E501
        :rtype: str
        """
        return self._repeat_type

    @repeat_type.setter
    def repeat_type(self, repeat_type):
        """Sets the repeat_type of this BillRunSchedule.

        The repeat type of the bill run.   # noqa: E501

        :param repeat_type: The repeat_type of this BillRunSchedule.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Daily", "Weekly", "Monthly"]  # noqa: E501
        if repeat_type not in allowed_values:
            raise ValueError(
                "Invalid value for `repeat_type` ({0}), must be one of {1}"  # noqa: E501
                .format(repeat_type, allowed_values)
            )

        self._repeat_type = repeat_type

    @property
    def run_time(self):
        """Gets the run_time of this BillRunSchedule.  # noqa: E501

        The scheduled run time (hour) of day.  **Values:** 0 - 23   # noqa: E501

        :return: The run_time of this BillRunSchedule.  # noqa: E501
        :rtype: int
        """
        return self._run_time

    @run_time.setter
    def run_time(self, run_time):
        """Sets the run_time of this BillRunSchedule.

        The scheduled run time (hour) of day.  **Values:** 0 - 23   # noqa: E501

        :param run_time: The run_time of this BillRunSchedule.  # noqa: E501
        :type: int
        """

        self._run_time = run_time

    @property
    def weekly_on_day(self):
        """Gets the weekly_on_day of this BillRunSchedule.  # noqa: E501

        The repeat day in a week.   # noqa: E501

        :return: The weekly_on_day of this BillRunSchedule.  # noqa: E501
        :rtype: list[str]
        """
        return self._weekly_on_day

    @weekly_on_day.setter
    def weekly_on_day(self, weekly_on_day):
        """Sets the weekly_on_day of this BillRunSchedule.

        The repeat day in a week.   # noqa: E501

        :param weekly_on_day: The weekly_on_day of this BillRunSchedule.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]  # noqa: E501
        if not set(weekly_on_day).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `weekly_on_day` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(weekly_on_day) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._weekly_on_day = weekly_on_day

    @property
    def monthly_on_end_of_month(self):
        """Gets the monthly_on_end_of_month of this BillRunSchedule.  # noqa: E501

        Whether to schedule monthly bill run on the end of month or the specific day of month. This field is available only when repeatType is set to monthly and repeatFrom is set to the end of month.  For example: - When repeatFrom = '2024-04-30' and monthlyOnEndOfMonth = true, next bill run will be scheduled on 2024-05-31 - When repeatFrom = '2024-04-30' and monthlyOnEndOfMonth = false, next bill run will be scheduled on 2024-05-30   # noqa: E501

        :return: The monthly_on_end_of_month of this BillRunSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._monthly_on_end_of_month

    @monthly_on_end_of_month.setter
    def monthly_on_end_of_month(self, monthly_on_end_of_month):
        """Sets the monthly_on_end_of_month of this BillRunSchedule.

        Whether to schedule monthly bill run on the end of month or the specific day of month. This field is available only when repeatType is set to monthly and repeatFrom is set to the end of month.  For example: - When repeatFrom = '2024-04-30' and monthlyOnEndOfMonth = true, next bill run will be scheduled on 2024-05-31 - When repeatFrom = '2024-04-30' and monthlyOnEndOfMonth = false, next bill run will be scheduled on 2024-05-30   # noqa: E501

        :param monthly_on_end_of_month: The monthly_on_end_of_month of this BillRunSchedule.  # noqa: E501
        :type: bool
        """

        self._monthly_on_end_of_month = monthly_on_end_of_month

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillRunSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillRunSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
