# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateInvoiceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_code': 'str',
        'adjustment_liability_accounting_code': 'str',
        'adjustment_revenue_accounting_code': 'str',
        'amount': 'float',
        'booking_reference': 'str',
        'charge_date': 'str',
        'charge_name': 'str',
        'contract_asset_accounting_code': 'str',
        'contract_liability_accounting_code': 'str',
        'contract_recognized_revenue_accounting_code': 'str',
        'deferred_revenue_accounting_code': 'str',
        'description': 'str',
        'discount_items': 'list[CreateDiscountItem]',
        'exclude_item_billing_from_revenue_accounting': 'bool',
        'item_type': 'str',
        'product_rate_plan_charge_id': 'str',
        'purchase_order_number': 'str',
        'quantity': 'float',
        'recognized_revenue_accounting_code': 'str',
        'rev_rec_code': 'str',
        'rev_rec_trigger_condition': 'RevRecTrigger',
        'revenue_recognition_rule_name': 'str',
        'service_end_date': 'date',
        'service_start_date': 'date',
        'sku': 'str',
        'tax_code': 'str',
        'tax_items': 'list[CreateTaxationItem]',
        'tax_mode': 'TaxMode',
        'unbilled_receivables_accounting_code': 'str',
        'unit_price': 'float',
        'uom': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'accounting_code': 'accountingCode',
        'adjustment_liability_accounting_code': 'adjustmentLiabilityAccountingCode',
        'adjustment_revenue_accounting_code': 'adjustmentRevenueAccountingCode',
        'amount': 'amount',
        'booking_reference': 'bookingReference',
        'charge_date': 'chargeDate',
        'charge_name': 'chargeName',
        'contract_asset_accounting_code': 'contractAssetAccountingCode',
        'contract_liability_accounting_code': 'contractLiabilityAccountingCode',
        'contract_recognized_revenue_accounting_code': 'contractRecognizedRevenueAccountingCode',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'description': 'description',
        'discount_items': 'discountItems',
        'exclude_item_billing_from_revenue_accounting': 'excludeItemBillingFromRevenueAccounting',
        'item_type': 'itemType',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'purchase_order_number': 'purchaseOrderNumber',
        'quantity': 'quantity',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'rev_rec_code': 'revRecCode',
        'rev_rec_trigger_condition': 'revRecTriggerCondition',
        'revenue_recognition_rule_name': 'revenueRecognitionRuleName',
        'service_end_date': 'serviceEndDate',
        'service_start_date': 'serviceStartDate',
        'sku': 'sku',
        'tax_code': 'taxCode',
        'tax_items': 'taxItems',
        'tax_mode': 'taxMode',
        'unbilled_receivables_accounting_code': 'unbilledReceivablesAccountingCode',
        'unit_price': 'unitPrice',
        'uom': 'uom',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, accounting_code=None, adjustment_liability_accounting_code=None, adjustment_revenue_accounting_code=None, amount=None, booking_reference=None, charge_date=None, charge_name=None, contract_asset_accounting_code=None, contract_liability_accounting_code=None, contract_recognized_revenue_accounting_code=None, deferred_revenue_accounting_code=None, description=None, discount_items=None, exclude_item_billing_from_revenue_accounting=None, item_type=None, product_rate_plan_charge_id=None, purchase_order_number=None, quantity=1, recognized_revenue_accounting_code=None, rev_rec_code=None, rev_rec_trigger_condition=None, revenue_recognition_rule_name=None, service_end_date=None, service_start_date=None, sku=None, tax_code=None, tax_items=None, tax_mode=None, unbilled_receivables_accounting_code=None, unit_price=None, uom=None, integration_id__ns=None, integration_status__ns=None, sync_date__ns=None):  # noqa: E501
        """CreateInvoiceItem - a model defined in Swagger"""  # noqa: E501
        self._accounting_code = None
        self._adjustment_liability_accounting_code = None
        self._adjustment_revenue_accounting_code = None
        self._amount = None
        self._booking_reference = None
        self._charge_date = None
        self._charge_name = None
        self._contract_asset_accounting_code = None
        self._contract_liability_accounting_code = None
        self._contract_recognized_revenue_accounting_code = None
        self._deferred_revenue_accounting_code = None
        self._description = None
        self._discount_items = None
        self._exclude_item_billing_from_revenue_accounting = None
        self._item_type = None
        self._product_rate_plan_charge_id = None
        self._purchase_order_number = None
        self._quantity = None
        self._recognized_revenue_accounting_code = None
        self._rev_rec_code = None
        self._rev_rec_trigger_condition = None
        self._revenue_recognition_rule_name = None
        self._service_end_date = None
        self._service_start_date = None
        self._sku = None
        self._tax_code = None
        self._tax_items = None
        self._tax_mode = None
        self._unbilled_receivables_accounting_code = None
        self._unit_price = None
        self._uom = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if adjustment_liability_accounting_code is not None:
            self.adjustment_liability_accounting_code = adjustment_liability_accounting_code
        if adjustment_revenue_accounting_code is not None:
            self.adjustment_revenue_accounting_code = adjustment_revenue_accounting_code
        self.amount = amount
        if booking_reference is not None:
            self.booking_reference = booking_reference
        if charge_date is not None:
            self.charge_date = charge_date
        if charge_name is not None:
            self.charge_name = charge_name
        if contract_asset_accounting_code is not None:
            self.contract_asset_accounting_code = contract_asset_accounting_code
        if contract_liability_accounting_code is not None:
            self.contract_liability_accounting_code = contract_liability_accounting_code
        if contract_recognized_revenue_accounting_code is not None:
            self.contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        if description is not None:
            self.description = description
        if discount_items is not None:
            self.discount_items = discount_items
        if exclude_item_billing_from_revenue_accounting is not None:
            self.exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting
        if item_type is not None:
            self.item_type = item_type
        if product_rate_plan_charge_id is not None:
            self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if quantity is not None:
            self.quantity = quantity
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if rev_rec_code is not None:
            self.rev_rec_code = rev_rec_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if service_end_date is not None:
            self.service_end_date = service_end_date
        self.service_start_date = service_start_date
        if sku is not None:
            self.sku = sku
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_items is not None:
            self.tax_items = tax_items
        if tax_mode is not None:
            self.tax_mode = tax_mode
        if unbilled_receivables_accounting_code is not None:
            self.unbilled_receivables_accounting_code = unbilled_receivables_accounting_code
        if unit_price is not None:
            self.unit_price = unit_price
        if uom is not None:
            self.uom = uom
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def accounting_code(self):
        """Gets the accounting_code of this CreateInvoiceItem.  # noqa: E501

        The accounting code associated with the invoice item.   # noqa: E501

        :return: The accounting_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this CreateInvoiceItem.

        The accounting code associated with the invoice item.   # noqa: E501

        :param accounting_code: The accounting_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def adjustment_liability_accounting_code(self):
        """Gets the adjustment_liability_accounting_code of this CreateInvoiceItem.  # noqa: E501

        The accounting code for adjustment liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The adjustment_liability_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_liability_accounting_code

    @adjustment_liability_accounting_code.setter
    def adjustment_liability_accounting_code(self, adjustment_liability_accounting_code):
        """Sets the adjustment_liability_accounting_code of this CreateInvoiceItem.

        The accounting code for adjustment liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param adjustment_liability_accounting_code: The adjustment_liability_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._adjustment_liability_accounting_code = adjustment_liability_accounting_code

    @property
    def adjustment_revenue_accounting_code(self):
        """Gets the adjustment_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501

        The accounting code for adjustment revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The adjustment_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_revenue_accounting_code

    @adjustment_revenue_accounting_code.setter
    def adjustment_revenue_accounting_code(self, adjustment_revenue_accounting_code):
        """Sets the adjustment_revenue_accounting_code of this CreateInvoiceItem.

        The accounting code for adjustment revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param adjustment_revenue_accounting_code: The adjustment_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._adjustment_revenue_accounting_code = adjustment_revenue_accounting_code

    @property
    def amount(self):
        """Gets the amount of this CreateInvoiceItem.  # noqa: E501

        The amount of the invoice item.   - For tax-inclusive invoice items, the amount indicates the invoice item amount including tax.  - For tax-exclusive invoice items, the amount indicates the invoice item amount excluding tax.   # noqa: E501

        :return: The amount of this CreateInvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateInvoiceItem.

        The amount of the invoice item.   - For tax-inclusive invoice items, the amount indicates the invoice item amount including tax.  - For tax-exclusive invoice items, the amount indicates the invoice item amount excluding tax.   # noqa: E501

        :param amount: The amount of this CreateInvoiceItem.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def booking_reference(self):
        """Gets the booking_reference of this CreateInvoiceItem.  # noqa: E501

        The booking reference of the invoice item.  # noqa: E501

        :return: The booking_reference of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._booking_reference

    @booking_reference.setter
    def booking_reference(self, booking_reference):
        """Sets the booking_reference of this CreateInvoiceItem.

        The booking reference of the invoice item.  # noqa: E501

        :param booking_reference: The booking_reference of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._booking_reference = booking_reference

    @property
    def charge_date(self):
        """Gets the charge_date of this CreateInvoiceItem.  # noqa: E501

        The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The charge_date of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_date

    @charge_date.setter
    def charge_date(self, charge_date):
        """Sets the charge_date of this CreateInvoiceItem.

        The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param charge_date: The charge_date of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_date = charge_date

    @property
    def charge_name(self):
        """Gets the charge_name of this CreateInvoiceItem.  # noqa: E501

        The name of the charge associated with the invoice item.   This field is required if the `productRatePlanChargeId` field is not specified in the request.   # noqa: E501

        :return: The charge_name of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_name

    @charge_name.setter
    def charge_name(self, charge_name):
        """Sets the charge_name of this CreateInvoiceItem.

        The name of the charge associated with the invoice item.   This field is required if the `productRatePlanChargeId` field is not specified in the request.   # noqa: E501

        :param charge_name: The charge_name of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_name = charge_name

    @property
    def contract_asset_accounting_code(self):
        """Gets the contract_asset_accounting_code of this CreateInvoiceItem.  # noqa: E501

        The accounting code for contract asset.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The contract_asset_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_asset_accounting_code

    @contract_asset_accounting_code.setter
    def contract_asset_accounting_code(self, contract_asset_accounting_code):
        """Sets the contract_asset_accounting_code of this CreateInvoiceItem.

        The accounting code for contract asset.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param contract_asset_accounting_code: The contract_asset_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._contract_asset_accounting_code = contract_asset_accounting_code

    @property
    def contract_liability_accounting_code(self):
        """Gets the contract_liability_accounting_code of this CreateInvoiceItem.  # noqa: E501

        The accounting code for contract liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The contract_liability_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_liability_accounting_code

    @contract_liability_accounting_code.setter
    def contract_liability_accounting_code(self, contract_liability_accounting_code):
        """Sets the contract_liability_accounting_code of this CreateInvoiceItem.

        The accounting code for contract liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param contract_liability_accounting_code: The contract_liability_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._contract_liability_accounting_code = contract_liability_accounting_code

    @property
    def contract_recognized_revenue_accounting_code(self):
        """Gets the contract_recognized_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501

        The accounting code for contract recognized revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The contract_recognized_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_recognized_revenue_accounting_code

    @contract_recognized_revenue_accounting_code.setter
    def contract_recognized_revenue_accounting_code(self, contract_recognized_revenue_accounting_code):
        """Sets the contract_recognized_revenue_accounting_code of this CreateInvoiceItem.

        The accounting code for contract recognized revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param contract_recognized_revenue_accounting_code: The contract_recognized_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501

        The accounting code for the deferred revenue, such as Monthly Recurring Liability.  **Note:** This field is only available if you have Zuora Finance enabled.   # noqa: E501

        :return: The deferred_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this CreateInvoiceItem.

        The accounting code for the deferred revenue, such as Monthly Recurring Liability.  **Note:** This field is only available if you have Zuora Finance enabled.   # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def description(self):
        """Gets the description of this CreateInvoiceItem.  # noqa: E501

        The description of the invoice item.   # noqa: E501

        :return: The description of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateInvoiceItem.

        The description of the invoice item.   # noqa: E501

        :param description: The description of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount_items(self):
        """Gets the discount_items of this CreateInvoiceItem.  # noqa: E501

        Container for discount items. The maximum number of discount items is 10.   # noqa: E501

        :return: The discount_items of this CreateInvoiceItem.  # noqa: E501
        :rtype: list[CreateDiscountItem]
        """
        return self._discount_items

    @discount_items.setter
    def discount_items(self, discount_items):
        """Sets the discount_items of this CreateInvoiceItem.

        Container for discount items. The maximum number of discount items is 10.   # noqa: E501

        :param discount_items: The discount_items of this CreateInvoiceItem.  # noqa: E501
        :type: list[CreateDiscountItem]
        """

        self._discount_items = discount_items

    @property
    def exclude_item_billing_from_revenue_accounting(self):
        """Gets the exclude_item_billing_from_revenue_accounting of this CreateInvoiceItem.  # noqa: E501

        The flag to exclude the invoice item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The exclude_item_billing_from_revenue_accounting of this CreateInvoiceItem.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_billing_from_revenue_accounting

    @exclude_item_billing_from_revenue_accounting.setter
    def exclude_item_billing_from_revenue_accounting(self, exclude_item_billing_from_revenue_accounting):
        """Sets the exclude_item_billing_from_revenue_accounting of this CreateInvoiceItem.

        The flag to exclude the invoice item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param exclude_item_billing_from_revenue_accounting: The exclude_item_billing_from_revenue_accounting of this CreateInvoiceItem.  # noqa: E501
        :type: bool
        """

        self._exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting

    @property
    def item_type(self):
        """Gets the item_type of this CreateInvoiceItem.  # noqa: E501

        The type of the invoice item.   # noqa: E501

        :return: The item_type of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this CreateInvoiceItem.

        The type of the invoice item.   # noqa: E501

        :param item_type: The item_type of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._item_type = item_type

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this CreateInvoiceItem.  # noqa: E501

        The ID of the product rate plan charge that the invoice item is created from.  If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding product rate plan charge, regardless of the values specified in the request body: - `chargeName` - `sku` - `uom` - `taxCode` - `taxMode` - `accountingCode` - `deferredRevenueAccountingCode`  - `recognizedRevenueAccountingCode`   # noqa: E501

        :return: The product_rate_plan_charge_id of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this CreateInvoiceItem.

        The ID of the product rate plan charge that the invoice item is created from.  If you specify a value for the `productRatePlanChargeId` field in the request, Zuora directly copies the values of the following fields from the corresponding product rate plan charge, regardless of the values specified in the request body: - `chargeName` - `sku` - `uom` - `taxCode` - `taxMode` - `accountingCode` - `deferredRevenueAccountingCode`  - `recognizedRevenueAccountingCode`   # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this CreateInvoiceItem.  # noqa: E501

        The purchase order number associated with the invoice item.   # noqa: E501

        :return: The purchase_order_number of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this CreateInvoiceItem.

        The purchase order number associated with the invoice item.   # noqa: E501

        :param purchase_order_number: The purchase_order_number of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def quantity(self):
        """Gets the quantity of this CreateInvoiceItem.  # noqa: E501

        The number of units for the invoice item.  # noqa: E501

        :return: The quantity of this CreateInvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CreateInvoiceItem.

        The number of units for the invoice item.  # noqa: E501

        :param quantity: The quantity of this CreateInvoiceItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501

        The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.  **Note:** This field is only available if you have Zuora Finance enabled.   # noqa: E501

        :return: The recognized_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this CreateInvoiceItem.

        The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.  **Note:** This field is only available if you have Zuora Finance enabled.   # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def rev_rec_code(self):
        """Gets the rev_rec_code of this CreateInvoiceItem.  # noqa: E501

        The revenue recognition code.   # noqa: E501

        :return: The rev_rec_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_code

    @rev_rec_code.setter
    def rev_rec_code(self, rev_rec_code):
        """Sets the rev_rec_code of this CreateInvoiceItem.

        The revenue recognition code.   # noqa: E501

        :param rev_rec_code: The rev_rec_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._rev_rec_code = rev_rec_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this CreateInvoiceItem.  # noqa: E501


        :return: The rev_rec_trigger_condition of this CreateInvoiceItem.  # noqa: E501
        :rtype: RevRecTrigger
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this CreateInvoiceItem.


        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this CreateInvoiceItem.  # noqa: E501
        :type: RevRecTrigger
        """

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this CreateInvoiceItem.  # noqa: E501

        The name of the revenue recognition rule governing the revenue schedule.  **Note:** This field is only available if you have Zuora Finance enabled.   # noqa: E501

        :return: The revenue_recognition_rule_name of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this CreateInvoiceItem.

        The name of the revenue recognition rule governing the revenue schedule.  **Note:** This field is only available if you have Zuora Finance enabled.   # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def service_end_date(self):
        """Gets the service_end_date of this CreateInvoiceItem.  # noqa: E501

        The service end date of the invoice item.   # noqa: E501

        :return: The service_end_date of this CreateInvoiceItem.  # noqa: E501
        :rtype: date
        """
        return self._service_end_date

    @service_end_date.setter
    def service_end_date(self, service_end_date):
        """Sets the service_end_date of this CreateInvoiceItem.

        The service end date of the invoice item.   # noqa: E501

        :param service_end_date: The service_end_date of this CreateInvoiceItem.  # noqa: E501
        :type: date
        """

        self._service_end_date = service_end_date

    @property
    def service_start_date(self):
        """Gets the service_start_date of this CreateInvoiceItem.  # noqa: E501

        The service start date of the invoice item.   # noqa: E501

        :return: The service_start_date of this CreateInvoiceItem.  # noqa: E501
        :rtype: date
        """
        return self._service_start_date

    @service_start_date.setter
    def service_start_date(self, service_start_date):
        """Sets the service_start_date of this CreateInvoiceItem.

        The service start date of the invoice item.   # noqa: E501

        :param service_start_date: The service_start_date of this CreateInvoiceItem.  # noqa: E501
        :type: date
        """
        if service_start_date is None:
            raise ValueError("Invalid value for `service_start_date`, must not be `None`")  # noqa: E501

        self._service_start_date = service_start_date

    @property
    def sku(self):
        """Gets the sku of this CreateInvoiceItem.  # noqa: E501

        The SKU of the invoice item. The SKU of the invoice item must be different from the SKU of any existing product.   # noqa: E501

        :return: The sku of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this CreateInvoiceItem.

        The SKU of the invoice item. The SKU of the invoice item must be different from the SKU of any existing product.   # noqa: E501

        :param sku: The sku of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def tax_code(self):
        """Gets the tax_code of this CreateInvoiceItem.  # noqa: E501

        The tax code identifies which tax rules and tax rates to apply to the invoice item.  **Note**: This field is only available only if you have Taxation enabled.   # noqa: E501

        :return: The tax_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this CreateInvoiceItem.

        The tax code identifies which tax rules and tax rates to apply to the invoice item.  **Note**: This field is only available only if you have Taxation enabled.   # noqa: E501

        :param tax_code: The tax_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_items(self):
        """Gets the tax_items of this CreateInvoiceItem.  # noqa: E501

        Container for taxation items. The maximum number of taxation items is 5.  **Note**: This field is only available only if you have Taxation enabled.   # noqa: E501

        :return: The tax_items of this CreateInvoiceItem.  # noqa: E501
        :rtype: list[CreateTaxationItem]
        """
        return self._tax_items

    @tax_items.setter
    def tax_items(self, tax_items):
        """Sets the tax_items of this CreateInvoiceItem.

        Container for taxation items. The maximum number of taxation items is 5.  **Note**: This field is only available only if you have Taxation enabled.   # noqa: E501

        :param tax_items: The tax_items of this CreateInvoiceItem.  # noqa: E501
        :type: list[CreateTaxationItem]
        """

        self._tax_items = tax_items

    @property
    def tax_mode(self):
        """Gets the tax_mode of this CreateInvoiceItem.  # noqa: E501


        :return: The tax_mode of this CreateInvoiceItem.  # noqa: E501
        :rtype: TaxMode
        """
        return self._tax_mode

    @tax_mode.setter
    def tax_mode(self, tax_mode):
        """Sets the tax_mode of this CreateInvoiceItem.


        :param tax_mode: The tax_mode of this CreateInvoiceItem.  # noqa: E501
        :type: TaxMode
        """

        self._tax_mode = tax_mode

    @property
    def unbilled_receivables_accounting_code(self):
        """Gets the unbilled_receivables_accounting_code of this CreateInvoiceItem.  # noqa: E501

        The accounting code for unbilled receivables.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The unbilled_receivables_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._unbilled_receivables_accounting_code

    @unbilled_receivables_accounting_code.setter
    def unbilled_receivables_accounting_code(self, unbilled_receivables_accounting_code):
        """Sets the unbilled_receivables_accounting_code of this CreateInvoiceItem.

        The accounting code for unbilled receivables.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param unbilled_receivables_accounting_code: The unbilled_receivables_accounting_code of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._unbilled_receivables_accounting_code = unbilled_receivables_accounting_code

    @property
    def unit_price(self):
        """Gets the unit_price of this CreateInvoiceItem.  # noqa: E501

        The per-unit price of the invoice item. To pass Level 3 data to the gateway, this field is required and must be greater than zero.   # noqa: E501

        :return: The unit_price of this CreateInvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this CreateInvoiceItem.

        The per-unit price of the invoice item. To pass Level 3 data to the gateway, this field is required and must be greater than zero.   # noqa: E501

        :param unit_price: The unit_price of this CreateInvoiceItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def uom(self):
        """Gets the uom of this CreateInvoiceItem.  # noqa: E501

        The unit of measure.   # noqa: E501

        :return: The uom of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this CreateInvoiceItem.

        The unit of measure.   # noqa: E501

        :param uom: The uom of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._uom = uom

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this CreateInvoiceItem.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this CreateInvoiceItem.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this CreateInvoiceItem.  # noqa: E501

        Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this CreateInvoiceItem.

        Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this CreateInvoiceItem.  # noqa: E501

        Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this CreateInvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this CreateInvoiceItem.

        Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this CreateInvoiceItem.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateInvoiceItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateInvoiceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
