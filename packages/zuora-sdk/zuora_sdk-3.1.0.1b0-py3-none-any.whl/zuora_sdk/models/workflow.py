# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Workflow(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'callout_trigger': 'bool',
        'created_at': 'str',
        'description': 'str',
        'id': 'int',
        'interval': 'str',
        'name': 'str',
        'ondemand_trigger': 'bool',
        'scheduled_trigger': 'bool',
        'timezone': 'str',
        'type': 'WorkflowType',
        'updated_at': 'str',
        'version': 'str'
    }

    attribute_map = {
        'callout_trigger': 'calloutTrigger',
        'created_at': 'createdAt',
        'description': 'description',
        'id': 'id',
        'interval': 'interval',
        'name': 'name',
        'ondemand_trigger': 'ondemandTrigger',
        'scheduled_trigger': 'scheduledTrigger',
        'timezone': 'timezone',
        'type': 'type',
        'updated_at': 'updatedAt',
        'version': 'version'
    }

    def __init__(self, callout_trigger=None, created_at=None, description=None, id=None, interval=None, name=None, ondemand_trigger=None, scheduled_trigger=None, timezone=None, type=None, updated_at=None, version=None):  # noqa: E501
        """Workflow - a model defined in Swagger"""  # noqa: E501
        self._callout_trigger = None
        self._created_at = None
        self._description = None
        self._id = None
        self._interval = None
        self._name = None
        self._ondemand_trigger = None
        self._scheduled_trigger = None
        self._timezone = None
        self._type = None
        self._updated_at = None
        self._version = None
        self.discriminator = None
        if callout_trigger is not None:
            self.callout_trigger = callout_trigger
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if interval is not None:
            self.interval = interval
        if name is not None:
            self.name = name
        if ondemand_trigger is not None:
            self.ondemand_trigger = ondemand_trigger
        if scheduled_trigger is not None:
            self.scheduled_trigger = scheduled_trigger
        if timezone is not None:
            self.timezone = timezone
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if version is not None:
            self.version = version

    @property
    def callout_trigger(self):
        """Gets the callout_trigger of this Workflow.  # noqa: E501

        Indicates whether the callout trigger is enabled for the retrieved workflow.   # noqa: E501

        :return: The callout_trigger of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._callout_trigger

    @callout_trigger.setter
    def callout_trigger(self, callout_trigger):
        """Sets the callout_trigger of this Workflow.

        Indicates whether the callout trigger is enabled for the retrieved workflow.   # noqa: E501

        :param callout_trigger: The callout_trigger of this Workflow.  # noqa: E501
        :type: bool
        """

        self._callout_trigger = callout_trigger

    @property
    def created_at(self):
        """Gets the created_at of this Workflow.  # noqa: E501

        The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :return: The created_at of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Workflow.

        The date and time when the workflow is created, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :param created_at: The created_at of this Workflow.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this Workflow.  # noqa: E501

        The description of the workflow.   # noqa: E501

        :return: The description of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Workflow.

        The description of the workflow.   # noqa: E501

        :param description: The description of this Workflow.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Workflow.  # noqa: E501

        The unique ID of the workflow.   # noqa: E501

        :return: The id of this Workflow.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workflow.

        The unique ID of the workflow.   # noqa: E501

        :param id: The id of this Workflow.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def interval(self):
        """Gets the interval of this Workflow.  # noqa: E501

        The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled.   # noqa: E501

        :return: The interval of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this Workflow.

        The schedule of the workflow, in a CRON expression. Returns null if the schedued trigger is disabled.   # noqa: E501

        :param interval: The interval of this Workflow.  # noqa: E501
        :type: str
        """

        self._interval = interval

    @property
    def name(self):
        """Gets the name of this Workflow.  # noqa: E501

        The name of the workflow.   # noqa: E501

        :return: The name of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Workflow.

        The name of the workflow.   # noqa: E501

        :param name: The name of this Workflow.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ondemand_trigger(self):
        """Gets the ondemand_trigger of this Workflow.  # noqa: E501

        Indicates whether the ondemand trigger is enabled for the workflow.   # noqa: E501

        :return: The ondemand_trigger of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._ondemand_trigger

    @ondemand_trigger.setter
    def ondemand_trigger(self, ondemand_trigger):
        """Sets the ondemand_trigger of this Workflow.

        Indicates whether the ondemand trigger is enabled for the workflow.   # noqa: E501

        :param ondemand_trigger: The ondemand_trigger of this Workflow.  # noqa: E501
        :type: bool
        """

        self._ondemand_trigger = ondemand_trigger

    @property
    def scheduled_trigger(self):
        """Gets the scheduled_trigger of this Workflow.  # noqa: E501

        Indicates whether the scheduled trigger is enabled for the workflow.   # noqa: E501

        :return: The scheduled_trigger of this Workflow.  # noqa: E501
        :rtype: bool
        """
        return self._scheduled_trigger

    @scheduled_trigger.setter
    def scheduled_trigger(self, scheduled_trigger):
        """Sets the scheduled_trigger of this Workflow.

        Indicates whether the scheduled trigger is enabled for the workflow.   # noqa: E501

        :param scheduled_trigger: The scheduled_trigger of this Workflow.  # noqa: E501
        :type: bool
        """

        self._scheduled_trigger = scheduled_trigger

    @property
    def timezone(self):
        """Gets the timezone of this Workflow.  # noqa: E501

        The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled.   # noqa: E501

        :return: The timezone of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this Workflow.

        The timezone that is configured for the scheduler of the workflow. Returns null if the scheduled trigger is disabled.   # noqa: E501

        :param timezone: The timezone of this Workflow.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def type(self):
        """Gets the type of this Workflow.  # noqa: E501


        :return: The type of this Workflow.  # noqa: E501
        :rtype: WorkflowType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Workflow.


        :param type: The type of this Workflow.  # noqa: E501
        :type: WorkflowType
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this Workflow.  # noqa: E501

        The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :return: The updated_at of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Workflow.

        The date and time when the workflow is updated the last time, in the `YYYY-MM-DD HH:MM:SS` format.   # noqa: E501

        :param updated_at: The updated_at of this Workflow.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def version(self):
        """Gets the version of this Workflow.  # noqa: E501

        The version number of the workflow.    # noqa: E501

        :return: The version of this Workflow.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Workflow.

        The version number of the workflow.    # noqa: E501

        :param version: The version of this Workflow.  # noqa: E501
        :type: str
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Workflow, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Workflow):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
