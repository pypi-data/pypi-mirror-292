# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BillRun(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'bill_run_number': 'str',
        'batches': 'list[str]',
        'bill_cycle_day': 'str',
        'bill_run_filters': 'list[BillRunFilter]',
        'charge_type_to_exclude': 'list[ChargeType]',
        'auto_email': 'bool',
        'auto_post': 'bool',
        'auto_renewal': 'bool',
        'no_email_for_zero_amount_invoice': 'bool',
        'schedule': 'BillRunSchedule',
        'scheduled_execution_time': 'str',
        'status': 'BillRunStatus',
        'invoice_date': 'date',
        'invoice_date_offset': 'int',
        'invoice_date_month_offset': 'int',
        'invoice_date_day_of_month': 'int',
        'target_date': 'date',
        'target_date_offset': 'int',
        'target_date_month_offset': 'int',
        'target_date_day_of_month': 'int',
        'created_by_id': 'str',
        'created_date': 'str',
        'updated_by_id': 'str',
        'updated_date': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'bill_run_number': 'billRunNumber',
        'batches': 'batches',
        'bill_cycle_day': 'billCycleDay',
        'bill_run_filters': 'billRunFilters',
        'charge_type_to_exclude': 'chargeTypeToExclude',
        'auto_email': 'autoEmail',
        'auto_post': 'autoPost',
        'auto_renewal': 'autoRenewal',
        'no_email_for_zero_amount_invoice': 'noEmailForZeroAmountInvoice',
        'schedule': 'schedule',
        'scheduled_execution_time': 'scheduledExecutionTime',
        'status': 'status',
        'invoice_date': 'invoiceDate',
        'invoice_date_offset': 'invoiceDateOffset',
        'invoice_date_month_offset': 'invoiceDateMonthOffset',
        'invoice_date_day_of_month': 'invoiceDateDayOfMonth',
        'target_date': 'targetDate',
        'target_date_offset': 'targetDateOffset',
        'target_date_month_offset': 'targetDateMonthOffset',
        'target_date_day_of_month': 'targetDateDayOfMonth',
        'created_by_id': 'createdById',
        'created_date': 'createdDate',
        'updated_by_id': 'updatedById',
        'updated_date': 'updatedDate'
    }

    def __init__(self, id=None, name=None, bill_run_number=None, batches=None, bill_cycle_day=None, bill_run_filters=None, charge_type_to_exclude=None, auto_email=None, auto_post=None, auto_renewal=None, no_email_for_zero_amount_invoice=None, schedule=None, scheduled_execution_time=None, status=None, invoice_date=None, invoice_date_offset=None, invoice_date_month_offset=None, invoice_date_day_of_month=None, target_date=None, target_date_offset=None, target_date_month_offset=None, target_date_day_of_month=None, created_by_id=None, created_date=None, updated_by_id=None, updated_date=None):  # noqa: E501
        """BillRun - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._bill_run_number = None
        self._batches = None
        self._bill_cycle_day = None
        self._bill_run_filters = None
        self._charge_type_to_exclude = None
        self._auto_email = None
        self._auto_post = None
        self._auto_renewal = None
        self._no_email_for_zero_amount_invoice = None
        self._schedule = None
        self._scheduled_execution_time = None
        self._status = None
        self._invoice_date = None
        self._invoice_date_offset = None
        self._invoice_date_month_offset = None
        self._invoice_date_day_of_month = None
        self._target_date = None
        self._target_date_offset = None
        self._target_date_month_offset = None
        self._target_date_day_of_month = None
        self._created_by_id = None
        self._created_date = None
        self._updated_by_id = None
        self._updated_date = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if bill_run_number is not None:
            self.bill_run_number = bill_run_number
        if batches is not None:
            self.batches = batches
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if bill_run_filters is not None:
            self.bill_run_filters = bill_run_filters
        if charge_type_to_exclude is not None:
            self.charge_type_to_exclude = charge_type_to_exclude
        if auto_email is not None:
            self.auto_email = auto_email
        if auto_post is not None:
            self.auto_post = auto_post
        if auto_renewal is not None:
            self.auto_renewal = auto_renewal
        if no_email_for_zero_amount_invoice is not None:
            self.no_email_for_zero_amount_invoice = no_email_for_zero_amount_invoice
        if schedule is not None:
            self.schedule = schedule
        if scheduled_execution_time is not None:
            self.scheduled_execution_time = scheduled_execution_time
        if status is not None:
            self.status = status
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if invoice_date_offset is not None:
            self.invoice_date_offset = invoice_date_offset
        if invoice_date_month_offset is not None:
            self.invoice_date_month_offset = invoice_date_month_offset
        if invoice_date_day_of_month is not None:
            self.invoice_date_day_of_month = invoice_date_day_of_month
        if target_date is not None:
            self.target_date = target_date
        if target_date_offset is not None:
            self.target_date_offset = target_date_offset
        if target_date_month_offset is not None:
            self.target_date_month_offset = target_date_month_offset
        if target_date_day_of_month is not None:
            self.target_date_day_of_month = target_date_day_of_month
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date

    @property
    def id(self):
        """Gets the id of this BillRun.  # noqa: E501

        The unique ID of the bill run.   # noqa: E501

        :return: The id of this BillRun.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BillRun.

        The unique ID of the bill run.   # noqa: E501

        :param id: The id of this BillRun.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this BillRun.  # noqa: E501

        The name of the bill run.   # noqa: E501

        :return: The name of this BillRun.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BillRun.

        The name of the bill run.   # noqa: E501

        :param name: The name of this BillRun.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def bill_run_number(self):
        """Gets the bill_run_number of this BillRun.  # noqa: E501

        The number of the bill run.   # noqa: E501

        :return: The bill_run_number of this BillRun.  # noqa: E501
        :rtype: str
        """
        return self._bill_run_number

    @bill_run_number.setter
    def bill_run_number(self, bill_run_number):
        """Sets the bill_run_number of this BillRun.

        The number of the bill run.   # noqa: E501

        :param bill_run_number: The bill_run_number of this BillRun.  # noqa: E501
        :type: str
        """

        self._bill_run_number = bill_run_number

    @property
    def batches(self):
        """Gets the batches of this BillRun.  # noqa: E501

        The batch of accounts for this bill run, this field can not exist with `billRunFilters` together.  **Values:** `AllBatches` or an array of `Batch`*n* where *n* is a number between 1 and 50, for example, `Batch7`.   # noqa: E501

        :return: The batches of this BillRun.  # noqa: E501
        :rtype: list[str]
        """
        return self._batches

    @batches.setter
    def batches(self, batches):
        """Sets the batches of this BillRun.

        The batch of accounts for this bill run, this field can not exist with `billRunFilters` together.  **Values:** `AllBatches` or an array of `Batch`*n* where *n* is a number between 1 and 50, for example, `Batch7`.   # noqa: E501

        :param batches: The batches of this BillRun.  # noqa: E501
        :type: list[str]
        """

        self._batches = batches

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this BillRun.  # noqa: E501

        The day of the bill cycle, this field is only valid when `batches` is specified.  **Values:**  - `AllBillCycleDays` or one of numbers 1 - 31 for an ad-hoc bill run - `AllBillCycleDays`, one of numbers 1 - 31, or `AsRunDay` for a scheduled bill run   # noqa: E501

        :return: The bill_cycle_day of this BillRun.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this BillRun.

        The day of the bill cycle, this field is only valid when `batches` is specified.  **Values:**  - `AllBillCycleDays` or one of numbers 1 - 31 for an ad-hoc bill run - `AllBillCycleDays`, one of numbers 1 - 31, or `AsRunDay` for a scheduled bill run   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this BillRun.  # noqa: E501
        :type: str
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_run_filters(self):
        """Gets the bill_run_filters of this BillRun.  # noqa: E501

        The target account or subscriptions for this bill run.   # noqa: E501

        :return: The bill_run_filters of this BillRun.  # noqa: E501
        :rtype: list[BillRunFilter]
        """
        return self._bill_run_filters

    @bill_run_filters.setter
    def bill_run_filters(self, bill_run_filters):
        """Sets the bill_run_filters of this BillRun.

        The target account or subscriptions for this bill run.   # noqa: E501

        :param bill_run_filters: The bill_run_filters of this BillRun.  # noqa: E501
        :type: list[BillRunFilter]
        """

        self._bill_run_filters = bill_run_filters

    @property
    def charge_type_to_exclude(self):
        """Gets the charge_type_to_exclude of this BillRun.  # noqa: E501

        The types of the charges to be excluded from the generation of billing documents.   # noqa: E501

        :return: The charge_type_to_exclude of this BillRun.  # noqa: E501
        :rtype: list[ChargeType]
        """
        return self._charge_type_to_exclude

    @charge_type_to_exclude.setter
    def charge_type_to_exclude(self, charge_type_to_exclude):
        """Sets the charge_type_to_exclude of this BillRun.

        The types of the charges to be excluded from the generation of billing documents.   # noqa: E501

        :param charge_type_to_exclude: The charge_type_to_exclude of this BillRun.  # noqa: E501
        :type: list[ChargeType]
        """

        self._charge_type_to_exclude = charge_type_to_exclude

    @property
    def auto_email(self):
        """Gets the auto_email of this BillRun.  # noqa: E501

        Whether to automatically send emails after Auto-Post is complete.   # noqa: E501

        :return: The auto_email of this BillRun.  # noqa: E501
        :rtype: bool
        """
        return self._auto_email

    @auto_email.setter
    def auto_email(self, auto_email):
        """Sets the auto_email of this BillRun.

        Whether to automatically send emails after Auto-Post is complete.   # noqa: E501

        :param auto_email: The auto_email of this BillRun.  # noqa: E501
        :type: bool
        """

        self._auto_email = auto_email

    @property
    def auto_post(self):
        """Gets the auto_post of this BillRun.  # noqa: E501

        Whether to automatically post the bill run after the bill run is created.   # noqa: E501

        :return: The auto_post of this BillRun.  # noqa: E501
        :rtype: bool
        """
        return self._auto_post

    @auto_post.setter
    def auto_post(self, auto_post):
        """Sets the auto_post of this BillRun.

        Whether to automatically post the bill run after the bill run is created.   # noqa: E501

        :param auto_post: The auto_post of this BillRun.  # noqa: E501
        :type: bool
        """

        self._auto_post = auto_post

    @property
    def auto_renewal(self):
        """Gets the auto_renewal of this BillRun.  # noqa: E501

        Whether to automatically renew auto-renew subscriptions that are up for renewal.   # noqa: E501

        :return: The auto_renewal of this BillRun.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renewal

    @auto_renewal.setter
    def auto_renewal(self, auto_renewal):
        """Sets the auto_renewal of this BillRun.

        Whether to automatically renew auto-renew subscriptions that are up for renewal.   # noqa: E501

        :param auto_renewal: The auto_renewal of this BillRun.  # noqa: E501
        :type: bool
        """

        self._auto_renewal = auto_renewal

    @property
    def no_email_for_zero_amount_invoice(self):
        """Gets the no_email_for_zero_amount_invoice of this BillRun.  # noqa: E501

        Whether to suppress emails for invoices with zero total amount generated in this bill run after the bill run is complete.   # noqa: E501

        :return: The no_email_for_zero_amount_invoice of this BillRun.  # noqa: E501
        :rtype: bool
        """
        return self._no_email_for_zero_amount_invoice

    @no_email_for_zero_amount_invoice.setter
    def no_email_for_zero_amount_invoice(self, no_email_for_zero_amount_invoice):
        """Sets the no_email_for_zero_amount_invoice of this BillRun.

        Whether to suppress emails for invoices with zero total amount generated in this bill run after the bill run is complete.   # noqa: E501

        :param no_email_for_zero_amount_invoice: The no_email_for_zero_amount_invoice of this BillRun.  # noqa: E501
        :type: bool
        """

        self._no_email_for_zero_amount_invoice = no_email_for_zero_amount_invoice

    @property
    def schedule(self):
        """Gets the schedule of this BillRun.  # noqa: E501


        :return: The schedule of this BillRun.  # noqa: E501
        :rtype: BillRunSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this BillRun.


        :param schedule: The schedule of this BillRun.  # noqa: E501
        :type: BillRunSchedule
        """

        self._schedule = schedule

    @property
    def scheduled_execution_time(self):
        """Gets the scheduled_execution_time of this BillRun.  # noqa: E501

        The scheduled execution time for a bill run.   # noqa: E501

        :return: The scheduled_execution_time of this BillRun.  # noqa: E501
        :rtype: str
        """
        return self._scheduled_execution_time

    @scheduled_execution_time.setter
    def scheduled_execution_time(self, scheduled_execution_time):
        """Sets the scheduled_execution_time of this BillRun.

        The scheduled execution time for a bill run.   # noqa: E501

        :param scheduled_execution_time: The scheduled_execution_time of this BillRun.  # noqa: E501
        :type: str
        """

        self._scheduled_execution_time = scheduled_execution_time

    @property
    def status(self):
        """Gets the status of this BillRun.  # noqa: E501


        :return: The status of this BillRun.  # noqa: E501
        :rtype: BillRunStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BillRun.


        :param status: The status of this BillRun.  # noqa: E501
        :type: BillRunStatus
        """

        self._status = status

    @property
    def invoice_date(self):
        """Gets the invoice_date of this BillRun.  # noqa: E501

        The invoice date for this bill run, only valid for ad-hoc bill runs.   # noqa: E501

        :return: The invoice_date of this BillRun.  # noqa: E501
        :rtype: date
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this BillRun.

        The invoice date for this bill run, only valid for ad-hoc bill runs.   # noqa: E501

        :param invoice_date: The invoice_date of this BillRun.  # noqa: E501
        :type: date
        """

        self._invoice_date = invoice_date

    @property
    def invoice_date_offset(self):
        """Gets the invoice_date_offset of this BillRun.  # noqa: E501

        The offset compared to bill run execution date, only valid for scheduled bill runs.   # noqa: E501

        :return: The invoice_date_offset of this BillRun.  # noqa: E501
        :rtype: int
        """
        return self._invoice_date_offset

    @invoice_date_offset.setter
    def invoice_date_offset(self, invoice_date_offset):
        """Sets the invoice_date_offset of this BillRun.

        The offset compared to bill run execution date, only valid for scheduled bill runs.   # noqa: E501

        :param invoice_date_offset: The invoice_date_offset of this BillRun.  # noqa: E501
        :type: int
        """

        self._invoice_date_offset = invoice_date_offset

    @property
    def invoice_date_month_offset(self):
        """Gets the invoice_date_month_offset of this BillRun.  # noqa: E501

        The month offset of invoice date for this bill run based on run date, only valid for monthly scheduled bill runs. invoiceDateOffset and invoiceDateMonthOffset/invoiceDateDayOfMonth are mutually exclusive. invoiceDateMonthOffset and invoiceDateDayOfMonth coexist.   # noqa: E501

        :return: The invoice_date_month_offset of this BillRun.  # noqa: E501
        :rtype: int
        """
        return self._invoice_date_month_offset

    @invoice_date_month_offset.setter
    def invoice_date_month_offset(self, invoice_date_month_offset):
        """Sets the invoice_date_month_offset of this BillRun.

        The month offset of invoice date for this bill run based on run date, only valid for monthly scheduled bill runs. invoiceDateOffset and invoiceDateMonthOffset/invoiceDateDayOfMonth are mutually exclusive. invoiceDateMonthOffset and invoiceDateDayOfMonth coexist.   # noqa: E501

        :param invoice_date_month_offset: The invoice_date_month_offset of this BillRun.  # noqa: E501
        :type: int
        """

        self._invoice_date_month_offset = invoice_date_month_offset

    @property
    def invoice_date_day_of_month(self):
        """Gets the invoice_date_day_of_month of this BillRun.  # noqa: E501

        The day of month of invoice date for this bill run, only valid for monthly scheduled bill runs. The value is between 1 and 31, where 31 = end-of-month. invoiceDateOffset and invoiceDateMonthOffset/invoiceDateDayOfMonth are mutually exclusive. invoiceDateMonthOffset and invoiceDateDayOfMonth coexist.   # noqa: E501

        :return: The invoice_date_day_of_month of this BillRun.  # noqa: E501
        :rtype: int
        """
        return self._invoice_date_day_of_month

    @invoice_date_day_of_month.setter
    def invoice_date_day_of_month(self, invoice_date_day_of_month):
        """Sets the invoice_date_day_of_month of this BillRun.

        The day of month of invoice date for this bill run, only valid for monthly scheduled bill runs. The value is between 1 and 31, where 31 = end-of-month. invoiceDateOffset and invoiceDateMonthOffset/invoiceDateDayOfMonth are mutually exclusive. invoiceDateMonthOffset and invoiceDateDayOfMonth coexist.   # noqa: E501

        :param invoice_date_day_of_month: The invoice_date_day_of_month of this BillRun.  # noqa: E501
        :type: int
        """

        self._invoice_date_day_of_month = invoice_date_day_of_month

    @property
    def target_date(self):
        """Gets the target_date of this BillRun.  # noqa: E501

        The target date for this bill run, only valid for ad-hoc bill runs.   # noqa: E501

        :return: The target_date of this BillRun.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this BillRun.

        The target date for this bill run, only valid for ad-hoc bill runs.   # noqa: E501

        :param target_date: The target_date of this BillRun.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def target_date_offset(self):
        """Gets the target_date_offset of this BillRun.  # noqa: E501

        The offset compared to bill run execution date, only valid for scheduled bill runs.   # noqa: E501

        :return: The target_date_offset of this BillRun.  # noqa: E501
        :rtype: int
        """
        return self._target_date_offset

    @target_date_offset.setter
    def target_date_offset(self, target_date_offset):
        """Sets the target_date_offset of this BillRun.

        The offset compared to bill run execution date, only valid for scheduled bill runs.   # noqa: E501

        :param target_date_offset: The target_date_offset of this BillRun.  # noqa: E501
        :type: int
        """

        self._target_date_offset = target_date_offset

    @property
    def target_date_month_offset(self):
        """Gets the target_date_month_offset of this BillRun.  # noqa: E501

        The month offset of target date for this bill run based on run date, only valid for monthly scheduled bill runs. targetDateOffset and targetDateMonthOffset/targetDateDayOfMonth are mutually exclusive. targetDateMonthOffset and targetDateDayOfMonth coexist.   # noqa: E501

        :return: The target_date_month_offset of this BillRun.  # noqa: E501
        :rtype: int
        """
        return self._target_date_month_offset

    @target_date_month_offset.setter
    def target_date_month_offset(self, target_date_month_offset):
        """Sets the target_date_month_offset of this BillRun.

        The month offset of target date for this bill run based on run date, only valid for monthly scheduled bill runs. targetDateOffset and targetDateMonthOffset/targetDateDayOfMonth are mutually exclusive. targetDateMonthOffset and targetDateDayOfMonth coexist.   # noqa: E501

        :param target_date_month_offset: The target_date_month_offset of this BillRun.  # noqa: E501
        :type: int
        """

        self._target_date_month_offset = target_date_month_offset

    @property
    def target_date_day_of_month(self):
        """Gets the target_date_day_of_month of this BillRun.  # noqa: E501

        The day of month of target date for this bill run, only valid for monthly scheduled bill runs. The value is between 1 and 31, where 31 = end-of-month. targetDateOffset and targetDateMonthOffset/targetDateDayOfMonth are mutually exclusive. targetDateMonthOffset and targetDateDayOfMonth coexist.   # noqa: E501

        :return: The target_date_day_of_month of this BillRun.  # noqa: E501
        :rtype: int
        """
        return self._target_date_day_of_month

    @target_date_day_of_month.setter
    def target_date_day_of_month(self, target_date_day_of_month):
        """Sets the target_date_day_of_month of this BillRun.

        The day of month of target date for this bill run, only valid for monthly scheduled bill runs. The value is between 1 and 31, where 31 = end-of-month. targetDateOffset and targetDateMonthOffset/targetDateDayOfMonth are mutually exclusive. targetDateMonthOffset and targetDateDayOfMonth coexist.   # noqa: E501

        :param target_date_day_of_month: The target_date_day_of_month of this BillRun.  # noqa: E501
        :type: int
        """

        self._target_date_day_of_month = target_date_day_of_month

    @property
    def created_by_id(self):
        """Gets the created_by_id of this BillRun.  # noqa: E501

        The ID of the user who created the bill run.   # noqa: E501

        :return: The created_by_id of this BillRun.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this BillRun.

        The ID of the user who created the bill run.   # noqa: E501

        :param created_by_id: The created_by_id of this BillRun.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this BillRun.  # noqa: E501

        The date and time when the bill run was created.   # noqa: E501

        :return: The created_date of this BillRun.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this BillRun.

        The date and time when the bill run was created.   # noqa: E501

        :param created_date: The created_date of this BillRun.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this BillRun.  # noqa: E501

        The ID of the user who last updated the bill run.   # noqa: E501

        :return: The updated_by_id of this BillRun.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this BillRun.

        The ID of the user who last updated the bill run.   # noqa: E501

        :param updated_by_id: The updated_by_id of this BillRun.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this BillRun.  # noqa: E501

        The date and time when the bill run was last updated.   # noqa: E501

        :return: The updated_date of this BillRun.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this BillRun.

        The date and time when the bill run was last updated.   # noqa: E501

        :param updated_date: The updated_date of this BillRun.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillRun, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillRun):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
