# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class StoredCredentialProfileResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'activated_on': 'datetime',
        'agreed_on': 'datetime',
        'brand': 'str',
        'cancelled_on': 'datetime',
        'consent_agreement_ref': 'str',
        'consent_agreement_src': 'StoredCredentialProfileConsentAgreementSrc',
        'expired_on': 'datetime',
        'number': 'int',
        'payment_method_id': 'str',
        'status': 'StoredCredentialProfileStatus',
        'type': 'StoredCredentialProfileType'
    }

    attribute_map = {
        'activated_on': 'activatedOn',
        'agreed_on': 'agreedOn',
        'brand': 'brand',
        'cancelled_on': 'cancelledOn',
        'consent_agreement_ref': 'consentAgreementRef',
        'consent_agreement_src': 'consentAgreementSrc',
        'expired_on': 'expiredOn',
        'number': 'number',
        'payment_method_id': 'paymentMethodId',
        'status': 'status',
        'type': 'type'
    }

    def __init__(self, activated_on=None, agreed_on=None, brand=None, cancelled_on=None, consent_agreement_ref=None, consent_agreement_src=None, expired_on=None, number=None, payment_method_id=None, status=None, type=None):  # noqa: E501
        """StoredCredentialProfileResponse - a model defined in Swagger"""  # noqa: E501
        self._activated_on = None
        self._agreed_on = None
        self._brand = None
        self._cancelled_on = None
        self._consent_agreement_ref = None
        self._consent_agreement_src = None
        self._expired_on = None
        self._number = None
        self._payment_method_id = None
        self._status = None
        self._type = None
        self.discriminator = None
        if activated_on is not None:
            self.activated_on = activated_on
        if agreed_on is not None:
            self.agreed_on = agreed_on
        if brand is not None:
            self.brand = brand
        if cancelled_on is not None:
            self.cancelled_on = cancelled_on
        if consent_agreement_ref is not None:
            self.consent_agreement_ref = consent_agreement_ref
        if consent_agreement_src is not None:
            self.consent_agreement_src = consent_agreement_src
        if expired_on is not None:
            self.expired_on = expired_on
        if number is not None:
            self.number = number
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if status is not None:
            self.status = status
        if type is not None:
            self.type = type

    @property
    def activated_on(self):
        """Gets the activated_on of this StoredCredentialProfileResponse.  # noqa: E501

        The date when the stored credential profile was activated (if applicable).   # noqa: E501

        :return: The activated_on of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._activated_on

    @activated_on.setter
    def activated_on(self, activated_on):
        """Sets the activated_on of this StoredCredentialProfileResponse.

        The date when the stored credential profile was activated (if applicable).   # noqa: E501

        :param activated_on: The activated_on of this StoredCredentialProfileResponse.  # noqa: E501
        :type: datetime
        """

        self._activated_on = activated_on

    @property
    def agreed_on(self):
        """Gets the agreed_on of this StoredCredentialProfileResponse.  # noqa: E501

        The date when the stored credential profile was created.   # noqa: E501

        :return: The agreed_on of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._agreed_on

    @agreed_on.setter
    def agreed_on(self, agreed_on):
        """Sets the agreed_on of this StoredCredentialProfileResponse.

        The date when the stored credential profile was created.   # noqa: E501

        :param agreed_on: The agreed_on of this StoredCredentialProfileResponse.  # noqa: E501
        :type: datetime
        """

        self._agreed_on = agreed_on

    @property
    def brand(self):
        """Gets the brand of this StoredCredentialProfileResponse.  # noqa: E501

        The stored credential transaction framework. For example, Visa.   # noqa: E501

        :return: The brand of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this StoredCredentialProfileResponse.

        The stored credential transaction framework. For example, Visa.   # noqa: E501

        :param brand: The brand of this StoredCredentialProfileResponse.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def cancelled_on(self):
        """Gets the cancelled_on of this StoredCredentialProfileResponse.  # noqa: E501

        The date when the stored credential profile was cancelled (if applicable).   # noqa: E501

        :return: The cancelled_on of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._cancelled_on

    @cancelled_on.setter
    def cancelled_on(self, cancelled_on):
        """Sets the cancelled_on of this StoredCredentialProfileResponse.

        The date when the stored credential profile was cancelled (if applicable).   # noqa: E501

        :param cancelled_on: The cancelled_on of this StoredCredentialProfileResponse.  # noqa: E501
        :type: datetime
        """

        self._cancelled_on = cancelled_on

    @property
    def consent_agreement_ref(self):
        """Gets the consent_agreement_ref of this StoredCredentialProfileResponse.  # noqa: E501

        Your reference for the consent agreement that you have established with the customer.   # noqa: E501

        :return: The consent_agreement_ref of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: str
        """
        return self._consent_agreement_ref

    @consent_agreement_ref.setter
    def consent_agreement_ref(self, consent_agreement_ref):
        """Sets the consent_agreement_ref of this StoredCredentialProfileResponse.

        Your reference for the consent agreement that you have established with the customer.   # noqa: E501

        :param consent_agreement_ref: The consent_agreement_ref of this StoredCredentialProfileResponse.  # noqa: E501
        :type: str
        """

        self._consent_agreement_ref = consent_agreement_ref

    @property
    def consent_agreement_src(self):
        """Gets the consent_agreement_src of this StoredCredentialProfileResponse.  # noqa: E501


        :return: The consent_agreement_src of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: StoredCredentialProfileConsentAgreementSrc
        """
        return self._consent_agreement_src

    @consent_agreement_src.setter
    def consent_agreement_src(self, consent_agreement_src):
        """Sets the consent_agreement_src of this StoredCredentialProfileResponse.


        :param consent_agreement_src: The consent_agreement_src of this StoredCredentialProfileResponse.  # noqa: E501
        :type: StoredCredentialProfileConsentAgreementSrc
        """

        self._consent_agreement_src = consent_agreement_src

    @property
    def expired_on(self):
        """Gets the expired_on of this StoredCredentialProfileResponse.  # noqa: E501

        The date when the stored credential profile was expired (if applicable).   # noqa: E501

        :return: The expired_on of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expired_on

    @expired_on.setter
    def expired_on(self, expired_on):
        """Sets the expired_on of this StoredCredentialProfileResponse.

        The date when the stored credential profile was expired (if applicable).   # noqa: E501

        :param expired_on: The expired_on of this StoredCredentialProfileResponse.  # noqa: E501
        :type: datetime
        """

        self._expired_on = expired_on

    @property
    def number(self):
        """Gets the number of this StoredCredentialProfileResponse.  # noqa: E501

        The number that identifies the stored credential profile within the payment method.   # noqa: E501

        :return: The number of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this StoredCredentialProfileResponse.

        The number that identifies the stored credential profile within the payment method.   # noqa: E501

        :param number: The number of this StoredCredentialProfileResponse.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this StoredCredentialProfileResponse.  # noqa: E501

        ID of the payment method.   # noqa: E501

        :return: The payment_method_id of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this StoredCredentialProfileResponse.

        ID of the payment method.   # noqa: E501

        :param payment_method_id: The payment_method_id of this StoredCredentialProfileResponse.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def status(self):
        """Gets the status of this StoredCredentialProfileResponse.  # noqa: E501


        :return: The status of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: StoredCredentialProfileStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this StoredCredentialProfileResponse.


        :param status: The status of this StoredCredentialProfileResponse.  # noqa: E501
        :type: StoredCredentialProfileStatus
        """

        self._status = status

    @property
    def type(self):
        """Gets the type of this StoredCredentialProfileResponse.  # noqa: E501


        :return: The type of this StoredCredentialProfileResponse.  # noqa: E501
        :rtype: StoredCredentialProfileType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this StoredCredentialProfileResponse.


        :param type: The type of this StoredCredentialProfileResponse.  # noqa: E501
        :type: StoredCredentialProfileType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(StoredCredentialProfileResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, StoredCredentialProfileResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
