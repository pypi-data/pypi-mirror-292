# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TemplateMigrationClientRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comments': 'str',
        'description': 'str',
        'email_ids': 'str',
        'entity_uuid': 'str',
        'meta_data': 'object',
        'name': 'str',
        'request': 'list[MigrationComponentContent]',
        'send_email': 'bool'
    }

    attribute_map = {
        'comments': 'comments',
        'description': 'description',
        'email_ids': 'emailIds',
        'entity_uuid': 'entityUuid',
        'meta_data': 'metaData',
        'name': 'name',
        'request': 'request',
        'send_email': 'sendEmail'
    }

    def __init__(self, comments=None, description=None, email_ids=None, entity_uuid=None, meta_data=None, name=None, request=None, send_email=None):  # noqa: E501
        """TemplateMigrationClientRequest - a model defined in Swagger"""  # noqa: E501
        self._comments = None
        self._description = None
        self._email_ids = None
        self._entity_uuid = None
        self._meta_data = None
        self._name = None
        self._request = None
        self._send_email = None
        self.discriminator = None
        if comments is not None:
            self.comments = comments
        self.description = description
        if email_ids is not None:
            self.email_ids = email_ids
        self.entity_uuid = entity_uuid
        if meta_data is not None:
            self.meta_data = meta_data
        self.name = name
        if request is not None:
            self.request = request
        self.send_email = send_email

    @property
    def comments(self):
        """Gets the comments of this TemplateMigrationClientRequest.  # noqa: E501


        :return: The comments of this TemplateMigrationClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this TemplateMigrationClientRequest.


        :param comments: The comments of this TemplateMigrationClientRequest.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def description(self):
        """Gets the description of this TemplateMigrationClientRequest.  # noqa: E501

        Description of the migration.  # noqa: E501

        :return: The description of this TemplateMigrationClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplateMigrationClientRequest.

        Description of the migration.  # noqa: E501

        :param description: The description of this TemplateMigrationClientRequest.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def email_ids(self):
        """Gets the email_ids of this TemplateMigrationClientRequest.  # noqa: E501

        List of Emails with comma separator.  # noqa: E501

        :return: The email_ids of this TemplateMigrationClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._email_ids

    @email_ids.setter
    def email_ids(self, email_ids):
        """Sets the email_ids of this TemplateMigrationClientRequest.

        List of Emails with comma separator.  # noqa: E501

        :param email_ids: The email_ids of this TemplateMigrationClientRequest.  # noqa: E501
        :type: str
        """

        self._email_ids = email_ids

    @property
    def entity_uuid(self):
        """Gets the entity_uuid of this TemplateMigrationClientRequest.  # noqa: E501

        Entity UUID  # noqa: E501

        :return: The entity_uuid of this TemplateMigrationClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._entity_uuid

    @entity_uuid.setter
    def entity_uuid(self, entity_uuid):
        """Sets the entity_uuid of this TemplateMigrationClientRequest.

        Entity UUID  # noqa: E501

        :param entity_uuid: The entity_uuid of this TemplateMigrationClientRequest.  # noqa: E501
        :type: str
        """
        if entity_uuid is None:
            raise ValueError("Invalid value for `entity_uuid`, must not be `None`")  # noqa: E501

        self._entity_uuid = entity_uuid

    @property
    def meta_data(self):
        """Gets the meta_data of this TemplateMigrationClientRequest.  # noqa: E501

        Json node object contains metadata.  # noqa: E501

        :return: The meta_data of this TemplateMigrationClientRequest.  # noqa: E501
        :rtype: object
        """
        return self._meta_data

    @meta_data.setter
    def meta_data(self, meta_data):
        """Sets the meta_data of this TemplateMigrationClientRequest.

        Json node object contains metadata.  # noqa: E501

        :param meta_data: The meta_data of this TemplateMigrationClientRequest.  # noqa: E501
        :type: object
        """

        self._meta_data = meta_data

    @property
    def name(self):
        """Gets the name of this TemplateMigrationClientRequest.  # noqa: E501

        Name of the migration.  # noqa: E501

        :return: The name of this TemplateMigrationClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateMigrationClientRequest.

        Name of the migration.  # noqa: E501

        :param name: The name of this TemplateMigrationClientRequest.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def request(self):
        """Gets the request of this TemplateMigrationClientRequest.  # noqa: E501

        List of settings need to be migrated.  # noqa: E501

        :return: The request of this TemplateMigrationClientRequest.  # noqa: E501
        :rtype: list[MigrationComponentContent]
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this TemplateMigrationClientRequest.

        List of settings need to be migrated.  # noqa: E501

        :param request: The request of this TemplateMigrationClientRequest.  # noqa: E501
        :type: list[MigrationComponentContent]
        """

        self._request = request

    @property
    def send_email(self):
        """Gets the send_email of this TemplateMigrationClientRequest.  # noqa: E501

        Flag determines whether or not to send an email.  # noqa: E501

        :return: The send_email of this TemplateMigrationClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this TemplateMigrationClientRequest.

        Flag determines whether or not to send an email.  # noqa: E501

        :param send_email: The send_email of this TemplateMigrationClientRequest.  # noqa: E501
        :type: bool
        """
        if send_email is None:
            raise ValueError("Invalid value for `send_email`, must not be `None`")  # noqa: E501

        self._send_email = send_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemplateMigrationClientRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateMigrationClientRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
