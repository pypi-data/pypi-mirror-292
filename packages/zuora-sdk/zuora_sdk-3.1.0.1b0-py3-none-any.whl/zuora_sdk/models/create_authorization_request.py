# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateAuthorizationRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_number': 'str',
        'amount': 'float',
        'gateway_options': 'GatewayOptions',
        'gateway_order_id': 'str',
        'mit_transaction_source': 'MitTransactionSource',
        'payment_gateway_id': 'str',
        'soft_descriptor': 'str',
        'soft_descriptor_phone': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_number': 'accountNumber',
        'amount': 'amount',
        'gateway_options': 'gatewayOptions',
        'gateway_order_id': 'gatewayOrderId',
        'mit_transaction_source': 'mitTransactionSource',
        'payment_gateway_id': 'paymentGatewayId',
        'soft_descriptor': 'softDescriptor',
        'soft_descriptor_phone': 'softDescriptorPhone'
    }

    def __init__(self, account_id=None, account_number=None, amount=None, gateway_options=None, gateway_order_id=None, mit_transaction_source=None, payment_gateway_id=None, soft_descriptor=None, soft_descriptor_phone=None):  # noqa: E501
        """CreateAuthorizationRequest - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_number = None
        self._amount = None
        self._gateway_options = None
        self._gateway_order_id = None
        self._mit_transaction_source = None
        self._payment_gateway_id = None
        self._soft_descriptor = None
        self._soft_descriptor_phone = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_number is not None:
            self.account_number = account_number
        self.amount = amount
        if gateway_options is not None:
            self.gateway_options = gateway_options
        self.gateway_order_id = gateway_order_id
        if mit_transaction_source is not None:
            self.mit_transaction_source = mit_transaction_source
        if payment_gateway_id is not None:
            self.payment_gateway_id = payment_gateway_id
        if soft_descriptor is not None:
            self.soft_descriptor = soft_descriptor
        if soft_descriptor_phone is not None:
            self.soft_descriptor_phone = soft_descriptor_phone

    @property
    def account_id(self):
        """Gets the account_id of this CreateAuthorizationRequest.  # noqa: E501

        The ID of the customer account. Either `accountId` or `accountNumber` is required.  # noqa: E501

        :return: The account_id of this CreateAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreateAuthorizationRequest.

        The ID of the customer account. Either `accountId` or `accountNumber` is required.  # noqa: E501

        :param account_id: The account_id of this CreateAuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this CreateAuthorizationRequest.  # noqa: E501

        The number of the customer account. Either `accountNumber` or `accountId` is required.  # noqa: E501

        :return: The account_number of this CreateAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateAuthorizationRequest.

        The number of the customer account. Either `accountNumber` or `accountId` is required.  # noqa: E501

        :param account_number: The account_number of this CreateAuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this CreateAuthorizationRequest.  # noqa: E501

        The amount of the trasaction.  # noqa: E501

        :return: The amount of this CreateAuthorizationRequest.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateAuthorizationRequest.

        The amount of the trasaction.  # noqa: E501

        :param amount: The amount of this CreateAuthorizationRequest.  # noqa: E501
        :type: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def gateway_options(self):
        """Gets the gateway_options of this CreateAuthorizationRequest.  # noqa: E501


        :return: The gateway_options of this CreateAuthorizationRequest.  # noqa: E501
        :rtype: GatewayOptions
        """
        return self._gateway_options

    @gateway_options.setter
    def gateway_options(self, gateway_options):
        """Sets the gateway_options of this CreateAuthorizationRequest.


        :param gateway_options: The gateway_options of this CreateAuthorizationRequest.  # noqa: E501
        :type: GatewayOptions
        """

        self._gateway_options = gateway_options

    @property
    def gateway_order_id(self):
        """Gets the gateway_order_id of this CreateAuthorizationRequest.  # noqa: E501

        The order ID for the specific gateway.  The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field.   # noqa: E501

        :return: The gateway_order_id of this CreateAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._gateway_order_id

    @gateway_order_id.setter
    def gateway_order_id(self, gateway_order_id):
        """Sets the gateway_order_id of this CreateAuthorizationRequest.

        The order ID for the specific gateway.  The specified order ID will be used in transaction authorization. If you specify an empty value for this field, Zuora will generate an ID and you will have to associate this ID with your order ID by yourself if needed. It is recommended to specify an ID for this field.   # noqa: E501

        :param gateway_order_id: The gateway_order_id of this CreateAuthorizationRequest.  # noqa: E501
        :type: str
        """
        if gateway_order_id is None:
            raise ValueError("Invalid value for `gateway_order_id`, must not be `None`")  # noqa: E501

        self._gateway_order_id = gateway_order_id

    @property
    def mit_transaction_source(self):
        """Gets the mit_transaction_source of this CreateAuthorizationRequest.  # noqa: E501


        :return: The mit_transaction_source of this CreateAuthorizationRequest.  # noqa: E501
        :rtype: MitTransactionSource
        """
        return self._mit_transaction_source

    @mit_transaction_source.setter
    def mit_transaction_source(self, mit_transaction_source):
        """Sets the mit_transaction_source of this CreateAuthorizationRequest.


        :param mit_transaction_source: The mit_transaction_source of this CreateAuthorizationRequest.  # noqa: E501
        :type: MitTransactionSource
        """

        self._mit_transaction_source = mit_transaction_source

    @property
    def payment_gateway_id(self):
        """Gets the payment_gateway_id of this CreateAuthorizationRequest.  # noqa: E501

        The ID of the payment gateway instance.  # noqa: E501

        :return: The payment_gateway_id of this CreateAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_id

    @payment_gateway_id.setter
    def payment_gateway_id(self, payment_gateway_id):
        """Sets the payment_gateway_id of this CreateAuthorizationRequest.

        The ID of the payment gateway instance.  # noqa: E501

        :param payment_gateway_id: The payment_gateway_id of this CreateAuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._payment_gateway_id = payment_gateway_id

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this CreateAuthorizationRequest.  # noqa: E501

        A text, rendered on a cardholder’s statement, describing a particular product or service purchased by the cardholder.  # noqa: E501

        :return: The soft_descriptor of this CreateAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this CreateAuthorizationRequest.

        A text, rendered on a cardholder’s statement, describing a particular product or service purchased by the cardholder.  # noqa: E501

        :param soft_descriptor: The soft_descriptor of this CreateAuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._soft_descriptor = soft_descriptor

    @property
    def soft_descriptor_phone(self):
        """Gets the soft_descriptor_phone of this CreateAuthorizationRequest.  # noqa: E501

        The phone number that relates to the soft descriptor, usually the phone number of customer service.  # noqa: E501

        :return: The soft_descriptor_phone of this CreateAuthorizationRequest.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor_phone

    @soft_descriptor_phone.setter
    def soft_descriptor_phone(self, soft_descriptor_phone):
        """Sets the soft_descriptor_phone of this CreateAuthorizationRequest.

        The phone number that relates to the soft descriptor, usually the phone number of customer service.  # noqa: E501

        :param soft_descriptor_phone: The soft_descriptor_phone of this CreateAuthorizationRequest.  # noqa: E501
        :type: str
        """

        self._soft_descriptor_phone = soft_descriptor_phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAuthorizationRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAuthorizationRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
