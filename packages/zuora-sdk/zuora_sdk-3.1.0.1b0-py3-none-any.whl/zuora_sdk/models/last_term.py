# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LastTerm(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'period': 'int',
        'period_type': 'TermPeriodType',
        'start_date': 'date',
        'end_date': 'date',
        'term_type': 'TermType'
    }

    attribute_map = {
        'period': 'period',
        'period_type': 'periodType',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'term_type': 'termType'
    }

    def __init__(self, period=None, period_type=None, start_date=None, end_date=None, term_type=None):  # noqa: E501
        """LastTerm - a model defined in Swagger"""  # noqa: E501
        self._period = None
        self._period_type = None
        self._start_date = None
        self._end_date = None
        self._term_type = None
        self.discriminator = None
        if period is not None:
            self.period = period
        if period_type is not None:
            self.period_type = period_type
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        self.term_type = term_type

    @property
    def period(self):
        """Gets the period of this LastTerm.  # noqa: E501

        Specify only when the termType is 'TERMED'.  # noqa: E501

        :return: The period of this LastTerm.  # noqa: E501
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this LastTerm.

        Specify only when the termType is 'TERMED'.  # noqa: E501

        :param period: The period of this LastTerm.  # noqa: E501
        :type: int
        """

        self._period = period

    @property
    def period_type(self):
        """Gets the period_type of this LastTerm.  # noqa: E501


        :return: The period_type of this LastTerm.  # noqa: E501
        :rtype: TermPeriodType
        """
        return self._period_type

    @period_type.setter
    def period_type(self, period_type):
        """Sets the period_type of this LastTerm.


        :param period_type: The period_type of this LastTerm.  # noqa: E501
        :type: TermPeriodType
        """

        self._period_type = period_type

    @property
    def start_date(self):
        """Gets the start_date of this LastTerm.  # noqa: E501

        The start date of the current term. You can change the term start date of a renewed subscription through a T&Cs order action. However, when changing it to an earlier date, this date must not be earlier than the term start date of the current term before this T&Cs.   # noqa: E501

        :return: The start_date of this LastTerm.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this LastTerm.

        The start date of the current term. You can change the term start date of a renewed subscription through a T&Cs order action. However, when changing it to an earlier date, this date must not be earlier than the term start date of the current term before this T&Cs.   # noqa: E501

        :param start_date: The start_date of this LastTerm.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this LastTerm.  # noqa: E501

        End date of the current term, in YYYY-MM-DD format.   # noqa: E501

        :return: The end_date of this LastTerm.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this LastTerm.

        End date of the current term, in YYYY-MM-DD format.   # noqa: E501

        :param end_date: The end_date of this LastTerm.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def term_type(self):
        """Gets the term_type of this LastTerm.  # noqa: E501


        :return: The term_type of this LastTerm.  # noqa: E501
        :rtype: TermType
        """
        return self._term_type

    @term_type.setter
    def term_type(self, term_type):
        """Sets the term_type of this LastTerm.


        :param term_type: The term_type of this LastTerm.  # noqa: E501
        :type: TermType
        """
        if term_type is None:
            raise ValueError("Invalid value for `term_type`, must not be `None`")  # noqa: E501

        self._term_type = term_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LastTerm, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LastTerm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
