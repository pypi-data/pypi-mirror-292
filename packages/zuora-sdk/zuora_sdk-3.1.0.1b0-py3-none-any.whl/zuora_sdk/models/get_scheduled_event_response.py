# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetScheduledEventResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'api_field': 'str',
        'api_object': 'str',
        'condition': 'str',
        'cron_expression': 'str',
        'description': 'str',
        'display_name': 'str',
        'id': 'str',
        'name': 'str',
        'namespace': 'str',
        'parameters': 'dict(str, GetScheduledEventResponseParametersValue)'
    }

    attribute_map = {
        'active': 'active',
        'api_field': 'apiField',
        'api_object': 'apiObject',
        'condition': 'condition',
        'cron_expression': 'cronExpression',
        'description': 'description',
        'display_name': 'displayName',
        'id': 'id',
        'name': 'name',
        'namespace': 'namespace',
        'parameters': 'parameters'
    }

    def __init__(self, active=None, api_field=None, api_object=None, condition=None, cron_expression=None, description=None, display_name=None, id=None, name=None, namespace=None, parameters=None):  # noqa: E501
        """GetScheduledEventResponse - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._api_field = None
        self._api_object = None
        self._condition = None
        self._cron_expression = None
        self._description = None
        self._display_name = None
        self._id = None
        self._name = None
        self._namespace = None
        self._parameters = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if api_field is not None:
            self.api_field = api_field
        if api_object is not None:
            self.api_object = api_object
        if condition is not None:
            self.condition = condition
        if cron_expression is not None:
            self.cron_expression = cron_expression
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if parameters is not None:
            self.parameters = parameters

    @property
    def active(self):
        """Gets the active of this GetScheduledEventResponse.  # noqa: E501

        Indicate whether the scheduled event is active or inactive  # noqa: E501

        :return: The active of this GetScheduledEventResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this GetScheduledEventResponse.

        Indicate whether the scheduled event is active or inactive  # noqa: E501

        :param active: The active of this GetScheduledEventResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def api_field(self):
        """Gets the api_field of this GetScheduledEventResponse.  # noqa: E501

        The base field of the base object in the `apiObject` field, should be in date or timestamp format. The scheduled event notifications are triggered based on this date and the event parameters (before or after a specified number of days) from notification definitions. Should be specified in the pattern: ^[A-Z][\\\\w\\\\-]*$  # noqa: E501

        :return: The api_field of this GetScheduledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_field

    @api_field.setter
    def api_field(self, api_field):
        """Sets the api_field of this GetScheduledEventResponse.

        The base field of the base object in the `apiObject` field, should be in date or timestamp format. The scheduled event notifications are triggered based on this date and the event parameters (before or after a specified number of days) from notification definitions. Should be specified in the pattern: ^[A-Z][\\\\w\\\\-]*$  # noqa: E501

        :param api_field: The api_field of this GetScheduledEventResponse.  # noqa: E501
        :type: str
        """

        self._api_field = api_field

    @property
    def api_object(self):
        """Gets the api_object of this GetScheduledEventResponse.  # noqa: E501

        The base object that the scheduled event is defined upon. The base object should contain a date or timestamp format field. Should be specified in the pattern: ^[A-Z][\\\\w\\\\-]*$  # noqa: E501

        :return: The api_object of this GetScheduledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._api_object

    @api_object.setter
    def api_object(self, api_object):
        """Sets the api_object of this GetScheduledEventResponse.

        The base object that the scheduled event is defined upon. The base object should contain a date or timestamp format field. Should be specified in the pattern: ^[A-Z][\\\\w\\\\-]*$  # noqa: E501

        :param api_object: The api_object of this GetScheduledEventResponse.  # noqa: E501
        :type: str
        """

        self._api_object = api_object

    @property
    def condition(self):
        """Gets the condition of this GetScheduledEventResponse.  # noqa: E501

        The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The scheduled event is triggered only if the condition is evaluated as true. The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Scheduled events with invalid merge fields will fail to evaluate, thus will not be triggered. For example, to trigger an invoice due date scheduled event to only invoices with an amount over 1000, you would define the following condition:  ```Invoice.Amount > 1000```  `Invoice.Amount` refers to the `Amount` field of the Zuora object `Invoice`.   # noqa: E501

        :return: The condition of this GetScheduledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this GetScheduledEventResponse.

        The filter rule conditions, written in [JEXL](http://commons.apache.org/proper/commons-jexl/). The scheduled event is triggered only if the condition is evaluated as true. The rule might contain event context merge fields and data source merge fields. Data source merge fields must be from [the base object of the event or from the joined objects of the base object](https://knowledgecenter.zuora.com/DC_Developers/M_Export_ZOQL#Data_Sources_and_Objects). Scheduled events with invalid merge fields will fail to evaluate, thus will not be triggered. For example, to trigger an invoice due date scheduled event to only invoices with an amount over 1000, you would define the following condition:  ```Invoice.Amount > 1000```  `Invoice.Amount` refers to the `Amount` field of the Zuora object `Invoice`.   # noqa: E501

        :param condition: The condition of this GetScheduledEventResponse.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def cron_expression(self):
        """Gets the cron_expression of this GetScheduledEventResponse.  # noqa: E501

        The cron expression defines the time when scheduled event notifications will be sent.  # noqa: E501

        :return: The cron_expression of this GetScheduledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._cron_expression

    @cron_expression.setter
    def cron_expression(self, cron_expression):
        """Sets the cron_expression of this GetScheduledEventResponse.

        The cron expression defines the time when scheduled event notifications will be sent.  # noqa: E501

        :param cron_expression: The cron_expression of this GetScheduledEventResponse.  # noqa: E501
        :type: str
        """

        self._cron_expression = cron_expression

    @property
    def description(self):
        """Gets the description of this GetScheduledEventResponse.  # noqa: E501

        The description of the scheduled event.  # noqa: E501

        :return: The description of this GetScheduledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetScheduledEventResponse.

        The description of the scheduled event.  # noqa: E501

        :param description: The description of this GetScheduledEventResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this GetScheduledEventResponse.  # noqa: E501

        The display name of the scheduled event.  # noqa: E501

        :return: The display_name of this GetScheduledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this GetScheduledEventResponse.

        The display name of the scheduled event.  # noqa: E501

        :param display_name: The display_name of this GetScheduledEventResponse.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this GetScheduledEventResponse.  # noqa: E501

        Scheduled event ID.  # noqa: E501

        :return: The id of this GetScheduledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetScheduledEventResponse.

        Scheduled event ID.  # noqa: E501

        :param id: The id of this GetScheduledEventResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this GetScheduledEventResponse.  # noqa: E501

        The name of the scheduled event.  # noqa: E501

        :return: The name of this GetScheduledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetScheduledEventResponse.

        The name of the scheduled event.  # noqa: E501

        :param name: The name of this GetScheduledEventResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this GetScheduledEventResponse.  # noqa: E501

        The namespace of the scheduled event name in the `name` field.  # noqa: E501

        :return: The namespace of this GetScheduledEventResponse.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this GetScheduledEventResponse.

        The namespace of the scheduled event name in the `name` field.  # noqa: E501

        :param namespace: The namespace of this GetScheduledEventResponse.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def parameters(self):
        """Gets the parameters of this GetScheduledEventResponse.  # noqa: E501

        The parameter definitions of the filter rule. The names of the parameters must match with the filter rule and can't be duplicated. You should specify all the parameters when creating scheduled event notifications.  # noqa: E501

        :return: The parameters of this GetScheduledEventResponse.  # noqa: E501
        :rtype: dict(str, GetScheduledEventResponseParametersValue)
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this GetScheduledEventResponse.

        The parameter definitions of the filter rule. The names of the parameters must match with the filter rule and can't be duplicated. You should specify all the parameters when creating scheduled event notifications.  # noqa: E501

        :param parameters: The parameters of this GetScheduledEventResponse.  # noqa: E501
        :type: dict(str, GetScheduledEventResponseParametersValue)
        """

        self._parameters = parameters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetScheduledEventResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetScheduledEventResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
