# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auth_transaction_id': 'str',
        'authorized_amount': 'float',
        'authorized_currency': 'str'
    }

    attribute_map = {
        'auth_transaction_id': 'authTransactionId',
        'authorized_amount': 'authorizedAmount',
        'authorized_currency': 'authorizedCurrency'
    }

    def __init__(self, auth_transaction_id=None, authorized_amount=None, authorized_currency=None):  # noqa: E501
        """PaymentData - a model defined in Swagger"""  # noqa: E501
        self._auth_transaction_id = None
        self._authorized_amount = None
        self._authorized_currency = None
        self.discriminator = None
        if auth_transaction_id is not None:
            self.auth_transaction_id = auth_transaction_id
        if authorized_amount is not None:
            self.authorized_amount = authorized_amount
        if authorized_currency is not None:
            self.authorized_currency = authorized_currency

    @property
    def auth_transaction_id(self):
        """Gets the auth_transaction_id of this PaymentData.  # noqa: E501

        The authorization transaction ID from the payment gateway.   # noqa: E501

        :return: The auth_transaction_id of this PaymentData.  # noqa: E501
        :rtype: str
        """
        return self._auth_transaction_id

    @auth_transaction_id.setter
    def auth_transaction_id(self, auth_transaction_id):
        """Sets the auth_transaction_id of this PaymentData.

        The authorization transaction ID from the payment gateway.   # noqa: E501

        :param auth_transaction_id: The auth_transaction_id of this PaymentData.  # noqa: E501
        :type: str
        """

        self._auth_transaction_id = auth_transaction_id

    @property
    def authorized_amount(self):
        """Gets the authorized_amount of this PaymentData.  # noqa: E501

        The amount that is authorized before this API call. Only used for the Delay Capture function.   # noqa: E501

        :return: The authorized_amount of this PaymentData.  # noqa: E501
        :rtype: float
        """
        return self._authorized_amount

    @authorized_amount.setter
    def authorized_amount(self, authorized_amount):
        """Sets the authorized_amount of this PaymentData.

        The amount that is authorized before this API call. Only used for the Delay Capture function.   # noqa: E501

        :param authorized_amount: The authorized_amount of this PaymentData.  # noqa: E501
        :type: float
        """

        self._authorized_amount = authorized_amount

    @property
    def authorized_currency(self):
        """Gets the authorized_currency of this PaymentData.  # noqa: E501

        The authorization of currency code that occurs before this API call. We will verify whether it is same as the account's currency.  # noqa: E501

        :return: The authorized_currency of this PaymentData.  # noqa: E501
        :rtype: str
        """
        return self._authorized_currency

    @authorized_currency.setter
    def authorized_currency(self, authorized_currency):
        """Sets the authorized_currency of this PaymentData.

        The authorization of currency code that occurs before this API call. We will verify whether it is same as the account's currency.  # noqa: E501

        :param authorized_currency: The authorized_currency of this PaymentData.  # noqa: E501
        :type: str
        """

        self._authorized_currency = authorized_currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
