# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePaymentMethodRequestCreditCardInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'expiration_month': 'int',
        'expiration_year': 'int',
        'security_code': 'str'
    }

    attribute_map = {
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'security_code': 'securityCode'
    }

    def __init__(self, expiration_month=None, expiration_year=None, security_code=None):  # noqa: E501
        """UpdatePaymentMethodRequestCreditCardInfo - a model defined in Swagger"""  # noqa: E501
        self._expiration_month = None
        self._expiration_year = None
        self._security_code = None
        self.discriminator = None
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        if security_code is not None:
            self.security_code = security_code

    @property
    def expiration_month(self):
        """Gets the expiration_month of this UpdatePaymentMethodRequestCreditCardInfo.  # noqa: E501

        One or two digits expiration month (1-12).            # noqa: E501

        :return: The expiration_month of this UpdatePaymentMethodRequestCreditCardInfo.  # noqa: E501
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this UpdatePaymentMethodRequestCreditCardInfo.

        One or two digits expiration month (1-12).            # noqa: E501

        :param expiration_month: The expiration_month of this UpdatePaymentMethodRequestCreditCardInfo.  # noqa: E501
        :type: int
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this UpdatePaymentMethodRequestCreditCardInfo.  # noqa: E501

        Four-digit expiration year.   # noqa: E501

        :return: The expiration_year of this UpdatePaymentMethodRequestCreditCardInfo.  # noqa: E501
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this UpdatePaymentMethodRequestCreditCardInfo.

        Four-digit expiration year.   # noqa: E501

        :param expiration_year: The expiration_year of this UpdatePaymentMethodRequestCreditCardInfo.  # noqa: E501
        :type: int
        """

        self._expiration_year = expiration_year

    @property
    def security_code(self):
        """Gets the security_code of this UpdatePaymentMethodRequestCreditCardInfo.  # noqa: E501

        Optional. It is the CVV or CVV2 security code specific for the credit card or debit card. To ensure PCI compliance, this value is not stored and cannot be queried.   If securityCode code is not passed in the request payload, this operation only updates related fields in the payload. It does not validate the payment method through the gateway.  If securityCode is passed in the request payload, this operation retrieves the credit card information from payload and validates them through the gateway.   # noqa: E501

        :return: The security_code of this UpdatePaymentMethodRequestCreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this UpdatePaymentMethodRequestCreditCardInfo.

        Optional. It is the CVV or CVV2 security code specific for the credit card or debit card. To ensure PCI compliance, this value is not stored and cannot be queried.   If securityCode code is not passed in the request payload, this operation only updates related fields in the payload. It does not validate the payment method through the gateway.  If securityCode is passed in the request payload, this operation retrieves the credit card information from payload and validates them through the gateway.   # noqa: E501

        :param security_code: The security_code of this UpdatePaymentMethodRequestCreditCardInfo.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePaymentMethodRequestCreditCardInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePaymentMethodRequestCreditCardInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
