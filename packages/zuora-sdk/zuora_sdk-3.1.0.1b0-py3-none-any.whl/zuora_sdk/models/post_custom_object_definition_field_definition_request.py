# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PostCustomObjectDefinitionFieldDefinitionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'display_name': 'bool',
        'format': 'str',
        'label': 'str',
        'max_length': 'int',
        'multiselect': 'bool',
        'type': 'str'
    }

    attribute_map = {
        'display_name': 'displayName',
        'format': 'format',
        'label': 'label',
        'max_length': 'maxLength',
        'multiselect': 'multiselect',
        'type': 'type'
    }

    def __init__(self, display_name=None, format=None, label=None, max_length=None, multiselect=None, type=None):  # noqa: E501
        """PostCustomObjectDefinitionFieldDefinitionRequest - a model defined in Swagger"""  # noqa: E501
        self._display_name = None
        self._format = None
        self._label = None
        self._max_length = None
        self._multiselect = None
        self._type = None
        self.discriminator = None
        if display_name is not None:
            self.display_name = display_name
        if format is not None:
            self.format = format
        self.label = label
        if max_length is not None:
            self.max_length = max_length
        if multiselect is not None:
            self.multiselect = multiselect
        self.type = type

    @property
    def display_name(self):
        """Gets the display_name of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501

        Indicates whether to use this field as the display name of the custom object when being linked to another custom object.  This field applies only to the Text custom field type:  - The `type` field is `string`. - The `enum` field is not specified.   # noqa: E501

        :return: The display_name of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PostCustomObjectDefinitionFieldDefinitionRequest.

        Indicates whether to use this field as the display name of the custom object when being linked to another custom object.  This field applies only to the Text custom field type:  - The `type` field is `string`. - The `enum` field is not specified.   # noqa: E501

        :param display_name: The display_name of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._display_name = display_name

    @property
    def format(self):
        """Gets the format of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501

        The data format of the custom field  # noqa: E501

        :return: The format of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this PostCustomObjectDefinitionFieldDefinitionRequest.

        The data format of the custom field  # noqa: E501

        :param format: The format of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def label(self):
        """Gets the label of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501

        The UI label of the custom field  # noqa: E501

        :return: The label of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PostCustomObjectDefinitionFieldDefinitionRequest.

        The UI label of the custom field  # noqa: E501

        :param label: The label of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def max_length(self):
        """Gets the max_length of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501

        The maximum length of string that can be stored in the custom field.  This field applies only to the following custom field types:  - Text:   - The `type` field is `string`.   - The `format` field is not specified or is `url`.   - The `enum` field is not specified. - Picklist:   - The `type` field is `string`.   - The `enum` field is specified.   - The `multiselect` field is not specified or is `false`. - Multiselect:   - The `type` field is `string`.   - The `enum` field is specified.   - The `multiselect` field is `true`.  If the custom field is filterable, the value of `maxLength` must be 512 or less.   # noqa: E501

        :return: The max_length of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this PostCustomObjectDefinitionFieldDefinitionRequest.

        The maximum length of string that can be stored in the custom field.  This field applies only to the following custom field types:  - Text:   - The `type` field is `string`.   - The `format` field is not specified or is `url`.   - The `enum` field is not specified. - Picklist:   - The `type` field is `string`.   - The `enum` field is specified.   - The `multiselect` field is not specified or is `false`. - Multiselect:   - The `type` field is `string`.   - The `enum` field is specified.   - The `multiselect` field is `true`.  If the custom field is filterable, the value of `maxLength` must be 512 or less.   # noqa: E501

        :param max_length: The max_length of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def multiselect(self):
        """Gets the multiselect of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501

        Indicates whether this is a multiselect custom field.  This field applies only to the Picklist or Multiselect custom field types:  - The `type` field is `string`. - The `maxLength` field is specified. - The `enum` field is specified.   # noqa: E501

        :return: The multiselect of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._multiselect

    @multiselect.setter
    def multiselect(self, multiselect):
        """Sets the multiselect of this PostCustomObjectDefinitionFieldDefinitionRequest.

        Indicates whether this is a multiselect custom field.  This field applies only to the Picklist or Multiselect custom field types:  - The `type` field is `string`. - The `maxLength` field is specified. - The `enum` field is specified.   # noqa: E501

        :param multiselect: The multiselect of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :type: bool
        """

        self._multiselect = multiselect

    @property
    def type(self):
        """Gets the type of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501

        The data type of the custom field  # noqa: E501

        :return: The type of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PostCustomObjectDefinitionFieldDefinitionRequest.

        The data type of the custom field  # noqa: E501

        :param type: The type of this PostCustomObjectDefinitionFieldDefinitionRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PostCustomObjectDefinitionFieldDefinitionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PostCustomObjectDefinitionFieldDefinitionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
