# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PricingUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_model_data': 'AllOfPricingUpdateChargeModelData',
        'discount': 'AllOfPricingUpdateDiscount',
        'recurring_delivery': 'AllOfPricingUpdateRecurringDelivery',
        'recurring_flat_fee': 'AllOfPricingUpdateRecurringFlatFee',
        'recurring_per_unit': 'AllOfPricingUpdateRecurringPerUnit',
        'recurring_tiered': 'AllOfPricingUpdateRecurringTiered',
        'recurring_volume': 'AllOfPricingUpdateRecurringVolume',
        'usage_flat_fee': 'AllOfPricingUpdateUsageFlatFee',
        'usage_overage': 'AllOfPricingUpdateUsageOverage',
        'usage_per_unit': 'AllOfPricingUpdateUsagePerUnit',
        'usage_tiered': 'AllOfPricingUpdateUsageTiered',
        'usage_tiered_with_overage': 'AllOfPricingUpdateUsageTieredWithOverage',
        'usage_volume': 'AllOfPricingUpdateUsageVolume'
    }

    attribute_map = {
        'charge_model_data': 'chargeModelData',
        'discount': 'discount',
        'recurring_delivery': 'recurringDelivery',
        'recurring_flat_fee': 'recurringFlatFee',
        'recurring_per_unit': 'recurringPerUnit',
        'recurring_tiered': 'recurringTiered',
        'recurring_volume': 'recurringVolume',
        'usage_flat_fee': 'usageFlatFee',
        'usage_overage': 'usageOverage',
        'usage_per_unit': 'usagePerUnit',
        'usage_tiered': 'usageTiered',
        'usage_tiered_with_overage': 'usageTieredWithOverage',
        'usage_volume': 'usageVolume'
    }

    def __init__(self, charge_model_data=None, discount=None, recurring_delivery=None, recurring_flat_fee=None, recurring_per_unit=None, recurring_tiered=None, recurring_volume=None, usage_flat_fee=None, usage_overage=None, usage_per_unit=None, usage_tiered=None, usage_tiered_with_overage=None, usage_volume=None):  # noqa: E501
        """PricingUpdate - a model defined in Swagger"""  # noqa: E501
        self._charge_model_data = None
        self._discount = None
        self._recurring_delivery = None
        self._recurring_flat_fee = None
        self._recurring_per_unit = None
        self._recurring_tiered = None
        self._recurring_volume = None
        self._usage_flat_fee = None
        self._usage_overage = None
        self._usage_per_unit = None
        self._usage_tiered = None
        self._usage_tiered_with_overage = None
        self._usage_volume = None
        self.discriminator = None
        if charge_model_data is not None:
            self.charge_model_data = charge_model_data
        if discount is not None:
            self.discount = discount
        if recurring_delivery is not None:
            self.recurring_delivery = recurring_delivery
        if recurring_flat_fee is not None:
            self.recurring_flat_fee = recurring_flat_fee
        if recurring_per_unit is not None:
            self.recurring_per_unit = recurring_per_unit
        if recurring_tiered is not None:
            self.recurring_tiered = recurring_tiered
        if recurring_volume is not None:
            self.recurring_volume = recurring_volume
        if usage_flat_fee is not None:
            self.usage_flat_fee = usage_flat_fee
        if usage_overage is not None:
            self.usage_overage = usage_overage
        if usage_per_unit is not None:
            self.usage_per_unit = usage_per_unit
        if usage_tiered is not None:
            self.usage_tiered = usage_tiered
        if usage_tiered_with_overage is not None:
            self.usage_tiered_with_overage = usage_tiered_with_overage
        if usage_volume is not None:
            self.usage_volume = usage_volume

    @property
    def charge_model_data(self):
        """Gets the charge_model_data of this PricingUpdate.  # noqa: E501

        Container for charge model configuration data.  **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The High Water Mark and Pre-Rated Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.   # noqa: E501

        :return: The charge_model_data of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateChargeModelData
        """
        return self._charge_model_data

    @charge_model_data.setter
    def charge_model_data(self, charge_model_data):
        """Sets the charge_model_data of this PricingUpdate.

        Container for charge model configuration data.  **Note**: This field is only available if you have the High Water Mark, Pre-Rated Pricing, or Multi-Attribute Pricing charge models enabled. The High Water Mark and Pre-Rated Pricing charge models are available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information.   # noqa: E501

        :param charge_model_data: The charge_model_data of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateChargeModelData
        """

        self._charge_model_data = charge_model_data

    @property
    def discount(self):
        """Gets the discount of this PricingUpdate.  # noqa: E501

        Pricing information about a discount charge.   # noqa: E501

        :return: The discount of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateDiscount
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this PricingUpdate.

        Pricing information about a discount charge.   # noqa: E501

        :param discount: The discount of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateDiscount
        """

        self._discount = discount

    @property
    def recurring_delivery(self):
        """Gets the recurring_delivery of this PricingUpdate.  # noqa: E501

        Pricing information about a recurring charge that uses the \"delivery\" charge model. This field is only available if you have the Delivery Pricing charge model enabled.  **Note**: The Delivery Pricing charge model is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at <a href=\"http://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>.   # noqa: E501

        :return: The recurring_delivery of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateRecurringDelivery
        """
        return self._recurring_delivery

    @recurring_delivery.setter
    def recurring_delivery(self, recurring_delivery):
        """Sets the recurring_delivery of this PricingUpdate.

        Pricing information about a recurring charge that uses the \"delivery\" charge model. This field is only available if you have the Delivery Pricing charge model enabled.  **Note**: The Delivery Pricing charge model is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at <a href=\"http://support.zuora.com/\" target=\"_blank\">Zuora Global Support</a>.   # noqa: E501

        :param recurring_delivery: The recurring_delivery of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateRecurringDelivery
        """

        self._recurring_delivery = recurring_delivery

    @property
    def recurring_flat_fee(self):
        """Gets the recurring_flat_fee of this PricingUpdate.  # noqa: E501

        Pricing information about a recurring charge that uses the \"flat fee\" charge model. In this charge model, the charge has a fixed price.   # noqa: E501

        :return: The recurring_flat_fee of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateRecurringFlatFee
        """
        return self._recurring_flat_fee

    @recurring_flat_fee.setter
    def recurring_flat_fee(self, recurring_flat_fee):
        """Sets the recurring_flat_fee of this PricingUpdate.

        Pricing information about a recurring charge that uses the \"flat fee\" charge model. In this charge model, the charge has a fixed price.   # noqa: E501

        :param recurring_flat_fee: The recurring_flat_fee of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateRecurringFlatFee
        """

        self._recurring_flat_fee = recurring_flat_fee

    @property
    def recurring_per_unit(self):
        """Gets the recurring_per_unit of this PricingUpdate.  # noqa: E501

        Pricing information about a recurring charge that uses the \"per unit\" charge model. In this charge model, the charge has a fixed price per unit purchased.   # noqa: E501

        :return: The recurring_per_unit of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateRecurringPerUnit
        """
        return self._recurring_per_unit

    @recurring_per_unit.setter
    def recurring_per_unit(self, recurring_per_unit):
        """Sets the recurring_per_unit of this PricingUpdate.

        Pricing information about a recurring charge that uses the \"per unit\" charge model. In this charge model, the charge has a fixed price per unit purchased.   # noqa: E501

        :param recurring_per_unit: The recurring_per_unit of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateRecurringPerUnit
        """

        self._recurring_per_unit = recurring_per_unit

    @property
    def recurring_tiered(self):
        """Gets the recurring_tiered of this PricingUpdate.  # noqa: E501

        Pricing information about a recurring charge that uses the \"tiered pricing\" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.   # noqa: E501

        :return: The recurring_tiered of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateRecurringTiered
        """
        return self._recurring_tiered

    @recurring_tiered.setter
    def recurring_tiered(self, recurring_tiered):
        """Sets the recurring_tiered of this PricingUpdate.

        Pricing information about a recurring charge that uses the \"tiered pricing\" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are purchased.   # noqa: E501

        :param recurring_tiered: The recurring_tiered of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateRecurringTiered
        """

        self._recurring_tiered = recurring_tiered

    @property
    def recurring_volume(self):
        """Gets the recurring_volume of this PricingUpdate.  # noqa: E501

        Pricing information about a recurring charge that uses the \"volume pricing\" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.   # noqa: E501

        :return: The recurring_volume of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateRecurringVolume
        """
        return self._recurring_volume

    @recurring_volume.setter
    def recurring_volume(self, recurring_volume):
        """Sets the recurring_volume of this PricingUpdate.

        Pricing information about a recurring charge that uses the \"volume pricing\" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are purchased.   # noqa: E501

        :param recurring_volume: The recurring_volume of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateRecurringVolume
        """

        self._recurring_volume = recurring_volume

    @property
    def usage_flat_fee(self):
        """Gets the usage_flat_fee of this PricingUpdate.  # noqa: E501

        Pricing information about a usage charge that uses the \"flat fee\" charge model. In this charge model, the charge has a fixed price.   # noqa: E501

        :return: The usage_flat_fee of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateUsageFlatFee
        """
        return self._usage_flat_fee

    @usage_flat_fee.setter
    def usage_flat_fee(self, usage_flat_fee):
        """Sets the usage_flat_fee of this PricingUpdate.

        Pricing information about a usage charge that uses the \"flat fee\" charge model. In this charge model, the charge has a fixed price.   # noqa: E501

        :param usage_flat_fee: The usage_flat_fee of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateUsageFlatFee
        """

        self._usage_flat_fee = usage_flat_fee

    @property
    def usage_overage(self):
        """Gets the usage_overage of this PricingUpdate.  # noqa: E501

        Pricing information about a usage charge that uses the \"overage\" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.   # noqa: E501

        :return: The usage_overage of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateUsageOverage
        """
        return self._usage_overage

    @usage_overage.setter
    def usage_overage(self, usage_overage):
        """Sets the usage_overage of this PricingUpdate.

        Pricing information about a usage charge that uses the \"overage\" charge model. In this charge model, the charge has an allowance of free units and a fixed price per additional unit consumed.   # noqa: E501

        :param usage_overage: The usage_overage of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateUsageOverage
        """

        self._usage_overage = usage_overage

    @property
    def usage_per_unit(self):
        """Gets the usage_per_unit of this PricingUpdate.  # noqa: E501

        Pricing information about a usage charge that uses the \"per unit\" charge model. In this charge model, the charge has a fixed price per unit consumed.   # noqa: E501

        :return: The usage_per_unit of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateUsagePerUnit
        """
        return self._usage_per_unit

    @usage_per_unit.setter
    def usage_per_unit(self, usage_per_unit):
        """Sets the usage_per_unit of this PricingUpdate.

        Pricing information about a usage charge that uses the \"per unit\" charge model. In this charge model, the charge has a fixed price per unit consumed.   # noqa: E501

        :param usage_per_unit: The usage_per_unit of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateUsagePerUnit
        """

        self._usage_per_unit = usage_per_unit

    @property
    def usage_tiered(self):
        """Gets the usage_tiered of this PricingUpdate.  # noqa: E501

        Pricing information about a usage charge that uses the \"tiered pricing\" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.   # noqa: E501

        :return: The usage_tiered of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateUsageTiered
        """
        return self._usage_tiered

    @usage_tiered.setter
    def usage_tiered(self, usage_tiered):
        """Sets the usage_tiered of this PricingUpdate.

        Pricing information about a usage charge that uses the \"tiered pricing\" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed.   # noqa: E501

        :param usage_tiered: The usage_tiered of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateUsageTiered
        """

        self._usage_tiered = usage_tiered

    @property
    def usage_tiered_with_overage(self):
        """Gets the usage_tiered_with_overage of this PricingUpdate.  # noqa: E501

        Pricing information about a usage charge that uses the \"tiered with overage\" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.   # noqa: E501

        :return: The usage_tiered_with_overage of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateUsageTieredWithOverage
        """
        return self._usage_tiered_with_overage

    @usage_tiered_with_overage.setter
    def usage_tiered_with_overage(self, usage_tiered_with_overage):
        """Sets the usage_tiered_with_overage of this PricingUpdate.

        Pricing information about a usage charge that uses the \"tiered with overage\" charge model. In this charge model, the charge has cumulative pricing tiers that become effective as units are consumed. The charge also has a fixed price per unit consumed beyond the limit of the final tier.   # noqa: E501

        :param usage_tiered_with_overage: The usage_tiered_with_overage of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateUsageTieredWithOverage
        """

        self._usage_tiered_with_overage = usage_tiered_with_overage

    @property
    def usage_volume(self):
        """Gets the usage_volume of this PricingUpdate.  # noqa: E501

        Pricing information about a usage charge that uses the \"volume pricing\" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.   # noqa: E501

        :return: The usage_volume of this PricingUpdate.  # noqa: E501
        :rtype: AllOfPricingUpdateUsageVolume
        """
        return self._usage_volume

    @usage_volume.setter
    def usage_volume(self, usage_volume):
        """Sets the usage_volume of this PricingUpdate.

        Pricing information about a usage charge that uses the \"volume pricing\" charge model. In this charge model, the charge has a variable price per unit, depending on how many units are consumed.   # noqa: E501

        :param usage_volume: The usage_volume of this PricingUpdate.  # noqa: E501
        :type: AllOfPricingUpdateUsageVolume
        """

        self._usage_volume = usage_volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PricingUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PricingUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
