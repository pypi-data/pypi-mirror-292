# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetSubscriptionRatePlanChargesWithAllSegments(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_day': 'str',
        'billing_period': 'BillingPeriod',
        'billing_period_alignment': 'BillingPeriodAlignment',
        'billing_timing': 'BillingTiming',
        'charge_segments': 'list[RatePlanChargeSegment]',
        'exclude_item_billing_from_revenue_accounting': 'bool',
        'exclude_item_booking_from_revenue_accounting': 'bool',
        'invoice_schedule_id': 'str',
        'is_allocation_eligible': 'bool',
        'is_unbilled': 'bool',
        'list_price_base': 'ChargeListPriceBase',
        'model': 'ChargeModel',
        'name': 'str',
        'number': 'str',
        'number_of_periods': 'int',
        'original_charge_id': 'str',
        'overage_calculation_option': 'OverageCalculationOption',
        'overage_unused_units_credit_option': 'OverageUnusedUnitsCreditOption',
        'product_category': 'ProductCategory',
        'product_class': 'str',
        'product_family': 'str',
        'product_line': 'str',
        'product_rate_plan_charge_id': 'str',
        'product_rate_plan_charge_number': 'str',
        'rating_group': 'RatingGroup',
        'smoothing_model': 'SmoothingModel',
        'specific_billing_period': 'int',
        'specific_list_price_base': 'int',
        'type': 'ChargeType',
        'unused_units_credit_rates': 'float',
        'uom': 'Uom',
        'usage_record_rating_option': 'UsageRecordRatingOption',
        'version': 'int',
        'amended_by_order_on': 'date',
        'apply_discount_to': 'ApplyDiscountTo',
        'charge_function': 'ChargeFunction',
        'charge_model_configuration': 'ChargeModelConfigurationForSubscription',
        'charged_through_date': 'date',
        'commitment_type': 'CommitmentType',
        'prepaid_committed_amount': 'str',
        'product_charge_definition_id': 'str',
        'is_stacked_discount': 'bool',
        'reflect_discount_in_net_amount': 'bool',
        'centralized_price': 'bool',
        'number_of_deliveries': 'float',
        'credit_option': 'str',
        'currency': 'Currency',
        'delivery_schedule': 'DeliverySchedule',
        'description': 'str',
        'discount_amount': 'float',
        'discount_apply_details': 'list[DiscountApplyDetail]',
        'discount_class': 'str',
        'discount_level': 'DiscountLevel',
        'discount_percentage': 'float',
        'apply_to_billing_period_partially': 'bool',
        'dmrc': 'str',
        'done': 'bool',
        'drawdown_rate': 'str',
        'drawdown_uom': 'Uom',
        'dtcv': 'str',
        'effective_end_date': 'date',
        'effective_start_date': 'date',
        'end_date_condition': 'EndDateCondition',
        'id': 'str',
        'included_units': 'float',
        'overage_price': 'float',
        'input_argument_id': 'str',
        'is_committed': 'bool',
        'is_prepaid': 'bool',
        'is_rollover': 'bool',
        'mrr': 'str',
        'original_order_date': 'date',
        'prepaid_operation_type': 'str',
        'prepaid_quantity': 'str',
        'prepaid_total_quantity': 'str',
        'prepaid_uom': 'Uom',
        'quantity': 'float',
        'price': 'float',
        'price_change_option': 'PriceChangeOption',
        'price_increase_percentage': 'float',
        'pricing_summary': 'str',
        'processed_through_date': 'date',
        'rollover_apply': 'str',
        'rollover_period_length': 'int',
        'rollover_periods': 'int',
        'proration_option': 'str',
        'segment': 'int',
        'specific_end_date': 'date',
        'subscription_charge_interval_pricing': 'list[IntervalPricing]',
        'tcv': 'str',
        'tiers': 'list[RatePlanChargeTier]',
        'trigger_date': 'date',
        'trigger_event': 'TriggerEvent',
        'upsell_origin_charge_number': 'str',
        'up_to_periods': 'int',
        'up_to_periods_type': 'UpToPeriodsType',
        'validity_period_type': 'ValidityPeriodType',
        'price_upsell_quantity_stacked': 'bool',
        'pob_policy': 'str',
        'sales_price': 'float'
    }

    attribute_map = {
        'billing_day': 'billingDay',
        'billing_period': 'billingPeriod',
        'billing_period_alignment': 'billingPeriodAlignment',
        'billing_timing': 'billingTiming',
        'charge_segments': 'chargeSegments',
        'exclude_item_billing_from_revenue_accounting': 'excludeItemBillingFromRevenueAccounting',
        'exclude_item_booking_from_revenue_accounting': 'excludeItemBookingFromRevenueAccounting',
        'invoice_schedule_id': 'invoiceScheduleId',
        'is_allocation_eligible': 'isAllocationEligible',
        'is_unbilled': 'isUnbilled',
        'list_price_base': 'listPriceBase',
        'model': 'model',
        'name': 'name',
        'number': 'number',
        'number_of_periods': 'numberOfPeriods',
        'original_charge_id': 'originalChargeId',
        'overage_calculation_option': 'overageCalculationOption',
        'overage_unused_units_credit_option': 'overageUnusedUnitsCreditOption',
        'product_category': 'productCategory',
        'product_class': 'productClass',
        'product_family': 'productFamily',
        'product_line': 'productLine',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'product_rate_plan_charge_number': 'productRatePlanChargeNumber',
        'rating_group': 'ratingGroup',
        'smoothing_model': 'smoothingModel',
        'specific_billing_period': 'specificBillingPeriod',
        'specific_list_price_base': 'specificListPriceBase',
        'type': 'type',
        'unused_units_credit_rates': 'unusedUnitsCreditRates',
        'uom': 'uom',
        'usage_record_rating_option': 'usageRecordRatingOption',
        'version': 'version',
        'amended_by_order_on': 'amendedByOrderOn',
        'apply_discount_to': 'applyDiscountTo',
        'charge_function': 'chargeFunction',
        'charge_model_configuration': 'chargeModelConfiguration',
        'charged_through_date': 'chargedThroughDate',
        'commitment_type': 'commitmentType',
        'prepaid_committed_amount': 'prepaidCommittedAmount',
        'product_charge_definition_id': 'productChargeDefinitionId',
        'is_stacked_discount': 'isStackedDiscount',
        'reflect_discount_in_net_amount': 'reflectDiscountInNetAmount',
        'centralized_price': 'centralizedPrice',
        'number_of_deliveries': 'numberOfDeliveries',
        'credit_option': 'creditOption',
        'currency': 'currency',
        'delivery_schedule': 'deliverySchedule',
        'description': 'description',
        'discount_amount': 'discountAmount',
        'discount_apply_details': 'discountApplyDetails',
        'discount_class': 'discountClass',
        'discount_level': 'discountLevel',
        'discount_percentage': 'discountPercentage',
        'apply_to_billing_period_partially': 'applyToBillingPeriodPartially',
        'dmrc': 'dmrc',
        'done': 'done',
        'drawdown_rate': 'drawdownRate',
        'drawdown_uom': 'drawdownUom',
        'dtcv': 'dtcv',
        'effective_end_date': 'effectiveEndDate',
        'effective_start_date': 'effectiveStartDate',
        'end_date_condition': 'endDateCondition',
        'id': 'id',
        'included_units': 'includedUnits',
        'overage_price': 'overagePrice',
        'input_argument_id': 'inputArgumentId',
        'is_committed': 'isCommitted',
        'is_prepaid': 'isPrepaid',
        'is_rollover': 'isRollover',
        'mrr': 'mrr',
        'original_order_date': 'originalOrderDate',
        'prepaid_operation_type': 'prepaidOperationType',
        'prepaid_quantity': 'prepaidQuantity',
        'prepaid_total_quantity': 'prepaidTotalQuantity',
        'prepaid_uom': 'prepaidUOM',
        'quantity': 'quantity',
        'price': 'price',
        'price_change_option': 'priceChangeOption',
        'price_increase_percentage': 'priceIncreasePercentage',
        'pricing_summary': 'pricingSummary',
        'processed_through_date': 'processedThroughDate',
        'rollover_apply': 'rolloverApply',
        'rollover_period_length': 'rolloverPeriodLength',
        'rollover_periods': 'rolloverPeriods',
        'proration_option': 'prorationOption',
        'segment': 'segment',
        'specific_end_date': 'specificEndDate',
        'subscription_charge_interval_pricing': 'subscriptionChargeIntervalPricing',
        'tcv': 'tcv',
        'tiers': 'tiers',
        'trigger_date': 'triggerDate',
        'trigger_event': 'triggerEvent',
        'upsell_origin_charge_number': 'upsellOriginChargeNumber',
        'up_to_periods': 'upToPeriods',
        'up_to_periods_type': 'upToPeriodsType',
        'validity_period_type': 'validityPeriodType',
        'price_upsell_quantity_stacked': 'priceUpsellQuantityStacked',
        'pob_policy': 'pobPolicy',
        'sales_price': 'salesPrice'
    }

    def __init__(self, billing_day=None, billing_period=None, billing_period_alignment=None, billing_timing=None, charge_segments=None, exclude_item_billing_from_revenue_accounting=None, exclude_item_booking_from_revenue_accounting=None, invoice_schedule_id=None, is_allocation_eligible=None, is_unbilled=None, list_price_base=None, model=None, name=None, number=None, number_of_periods=None, original_charge_id=None, overage_calculation_option=None, overage_unused_units_credit_option=None, product_category=None, product_class=None, product_family=None, product_line=None, product_rate_plan_charge_id=None, product_rate_plan_charge_number=None, rating_group=None, smoothing_model=None, specific_billing_period=None, specific_list_price_base=None, type=None, unused_units_credit_rates=None, uom=None, usage_record_rating_option=None, version=None, amended_by_order_on=None, apply_discount_to=None, charge_function=None, charge_model_configuration=None, charged_through_date=None, commitment_type=None, prepaid_committed_amount=None, product_charge_definition_id=None, is_stacked_discount=None, reflect_discount_in_net_amount=None, centralized_price=None, number_of_deliveries=None, credit_option=None, currency=None, delivery_schedule=None, description=None, discount_amount=None, discount_apply_details=None, discount_class=None, discount_level=None, discount_percentage=None, apply_to_billing_period_partially=None, dmrc=None, done=None, drawdown_rate=None, drawdown_uom=None, dtcv=None, effective_end_date=None, effective_start_date=None, end_date_condition=None, id=None, included_units=None, overage_price=None, input_argument_id=None, is_committed=None, is_prepaid=None, is_rollover=None, mrr=None, original_order_date=None, prepaid_operation_type=None, prepaid_quantity=None, prepaid_total_quantity=None, prepaid_uom=None, quantity=None, price=None, price_change_option=None, price_increase_percentage=None, pricing_summary=None, processed_through_date=None, rollover_apply=None, rollover_period_length=None, rollover_periods=None, proration_option=None, segment=None, specific_end_date=None, subscription_charge_interval_pricing=None, tcv=None, tiers=None, trigger_date=None, trigger_event=None, upsell_origin_charge_number=None, up_to_periods=None, up_to_periods_type=None, validity_period_type=None, price_upsell_quantity_stacked=None, pob_policy=None, sales_price=None):  # noqa: E501
        """GetSubscriptionRatePlanChargesWithAllSegments - a model defined in Swagger"""  # noqa: E501
        self._billing_day = None
        self._billing_period = None
        self._billing_period_alignment = None
        self._billing_timing = None
        self._charge_segments = None
        self._exclude_item_billing_from_revenue_accounting = None
        self._exclude_item_booking_from_revenue_accounting = None
        self._invoice_schedule_id = None
        self._is_allocation_eligible = None
        self._is_unbilled = None
        self._list_price_base = None
        self._model = None
        self._name = None
        self._number = None
        self._number_of_periods = None
        self._original_charge_id = None
        self._overage_calculation_option = None
        self._overage_unused_units_credit_option = None
        self._product_category = None
        self._product_class = None
        self._product_family = None
        self._product_line = None
        self._product_rate_plan_charge_id = None
        self._product_rate_plan_charge_number = None
        self._rating_group = None
        self._smoothing_model = None
        self._specific_billing_period = None
        self._specific_list_price_base = None
        self._type = None
        self._unused_units_credit_rates = None
        self._uom = None
        self._usage_record_rating_option = None
        self._version = None
        self._amended_by_order_on = None
        self._apply_discount_to = None
        self._charge_function = None
        self._charge_model_configuration = None
        self._charged_through_date = None
        self._commitment_type = None
        self._prepaid_committed_amount = None
        self._product_charge_definition_id = None
        self._is_stacked_discount = None
        self._reflect_discount_in_net_amount = None
        self._centralized_price = None
        self._number_of_deliveries = None
        self._credit_option = None
        self._currency = None
        self._delivery_schedule = None
        self._description = None
        self._discount_amount = None
        self._discount_apply_details = None
        self._discount_class = None
        self._discount_level = None
        self._discount_percentage = None
        self._apply_to_billing_period_partially = None
        self._dmrc = None
        self._done = None
        self._drawdown_rate = None
        self._drawdown_uom = None
        self._dtcv = None
        self._effective_end_date = None
        self._effective_start_date = None
        self._end_date_condition = None
        self._id = None
        self._included_units = None
        self._overage_price = None
        self._input_argument_id = None
        self._is_committed = None
        self._is_prepaid = None
        self._is_rollover = None
        self._mrr = None
        self._original_order_date = None
        self._prepaid_operation_type = None
        self._prepaid_quantity = None
        self._prepaid_total_quantity = None
        self._prepaid_uom = None
        self._quantity = None
        self._price = None
        self._price_change_option = None
        self._price_increase_percentage = None
        self._pricing_summary = None
        self._processed_through_date = None
        self._rollover_apply = None
        self._rollover_period_length = None
        self._rollover_periods = None
        self._proration_option = None
        self._segment = None
        self._specific_end_date = None
        self._subscription_charge_interval_pricing = None
        self._tcv = None
        self._tiers = None
        self._trigger_date = None
        self._trigger_event = None
        self._upsell_origin_charge_number = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self._validity_period_type = None
        self._price_upsell_quantity_stacked = None
        self._pob_policy = None
        self._sales_price = None
        self.discriminator = None
        if billing_day is not None:
            self.billing_day = billing_day
        if billing_period is not None:
            self.billing_period = billing_period
        if billing_period_alignment is not None:
            self.billing_period_alignment = billing_period_alignment
        if billing_timing is not None:
            self.billing_timing = billing_timing
        if charge_segments is not None:
            self.charge_segments = charge_segments
        if exclude_item_billing_from_revenue_accounting is not None:
            self.exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting
        if exclude_item_booking_from_revenue_accounting is not None:
            self.exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting
        if invoice_schedule_id is not None:
            self.invoice_schedule_id = invoice_schedule_id
        if is_allocation_eligible is not None:
            self.is_allocation_eligible = is_allocation_eligible
        if is_unbilled is not None:
            self.is_unbilled = is_unbilled
        if list_price_base is not None:
            self.list_price_base = list_price_base
        if model is not None:
            self.model = model
        if name is not None:
            self.name = name
        if number is not None:
            self.number = number
        if number_of_periods is not None:
            self.number_of_periods = number_of_periods
        if original_charge_id is not None:
            self.original_charge_id = original_charge_id
        if overage_calculation_option is not None:
            self.overage_calculation_option = overage_calculation_option
        if overage_unused_units_credit_option is not None:
            self.overage_unused_units_credit_option = overage_unused_units_credit_option
        if product_category is not None:
            self.product_category = product_category
        if product_class is not None:
            self.product_class = product_class
        if product_family is not None:
            self.product_family = product_family
        if product_line is not None:
            self.product_line = product_line
        if product_rate_plan_charge_id is not None:
            self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if product_rate_plan_charge_number is not None:
            self.product_rate_plan_charge_number = product_rate_plan_charge_number
        if rating_group is not None:
            self.rating_group = rating_group
        if smoothing_model is not None:
            self.smoothing_model = smoothing_model
        if specific_billing_period is not None:
            self.specific_billing_period = specific_billing_period
        if specific_list_price_base is not None:
            self.specific_list_price_base = specific_list_price_base
        if type is not None:
            self.type = type
        if unused_units_credit_rates is not None:
            self.unused_units_credit_rates = unused_units_credit_rates
        if uom is not None:
            self.uom = uom
        if usage_record_rating_option is not None:
            self.usage_record_rating_option = usage_record_rating_option
        if version is not None:
            self.version = version
        if amended_by_order_on is not None:
            self.amended_by_order_on = amended_by_order_on
        if apply_discount_to is not None:
            self.apply_discount_to = apply_discount_to
        if charge_function is not None:
            self.charge_function = charge_function
        if charge_model_configuration is not None:
            self.charge_model_configuration = charge_model_configuration
        if charged_through_date is not None:
            self.charged_through_date = charged_through_date
        if commitment_type is not None:
            self.commitment_type = commitment_type
        if prepaid_committed_amount is not None:
            self.prepaid_committed_amount = prepaid_committed_amount
        if product_charge_definition_id is not None:
            self.product_charge_definition_id = product_charge_definition_id
        if is_stacked_discount is not None:
            self.is_stacked_discount = is_stacked_discount
        if reflect_discount_in_net_amount is not None:
            self.reflect_discount_in_net_amount = reflect_discount_in_net_amount
        if centralized_price is not None:
            self.centralized_price = centralized_price
        if number_of_deliveries is not None:
            self.number_of_deliveries = number_of_deliveries
        if credit_option is not None:
            self.credit_option = credit_option
        if currency is not None:
            self.currency = currency
        if delivery_schedule is not None:
            self.delivery_schedule = delivery_schedule
        if description is not None:
            self.description = description
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_apply_details is not None:
            self.discount_apply_details = discount_apply_details
        if discount_class is not None:
            self.discount_class = discount_class
        if discount_level is not None:
            self.discount_level = discount_level
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if apply_to_billing_period_partially is not None:
            self.apply_to_billing_period_partially = apply_to_billing_period_partially
        if dmrc is not None:
            self.dmrc = dmrc
        if done is not None:
            self.done = done
        if drawdown_rate is not None:
            self.drawdown_rate = drawdown_rate
        if drawdown_uom is not None:
            self.drawdown_uom = drawdown_uom
        if dtcv is not None:
            self.dtcv = dtcv
        if effective_end_date is not None:
            self.effective_end_date = effective_end_date
        if effective_start_date is not None:
            self.effective_start_date = effective_start_date
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if id is not None:
            self.id = id
        if included_units is not None:
            self.included_units = included_units
        if overage_price is not None:
            self.overage_price = overage_price
        if input_argument_id is not None:
            self.input_argument_id = input_argument_id
        if is_committed is not None:
            self.is_committed = is_committed
        if is_prepaid is not None:
            self.is_prepaid = is_prepaid
        if is_rollover is not None:
            self.is_rollover = is_rollover
        if mrr is not None:
            self.mrr = mrr
        if original_order_date is not None:
            self.original_order_date = original_order_date
        if prepaid_operation_type is not None:
            self.prepaid_operation_type = prepaid_operation_type
        if prepaid_quantity is not None:
            self.prepaid_quantity = prepaid_quantity
        if prepaid_total_quantity is not None:
            self.prepaid_total_quantity = prepaid_total_quantity
        if prepaid_uom is not None:
            self.prepaid_uom = prepaid_uom
        if quantity is not None:
            self.quantity = quantity
        if price is not None:
            self.price = price
        if price_change_option is not None:
            self.price_change_option = price_change_option
        if price_increase_percentage is not None:
            self.price_increase_percentage = price_increase_percentage
        if pricing_summary is not None:
            self.pricing_summary = pricing_summary
        if processed_through_date is not None:
            self.processed_through_date = processed_through_date
        if rollover_apply is not None:
            self.rollover_apply = rollover_apply
        if rollover_period_length is not None:
            self.rollover_period_length = rollover_period_length
        if rollover_periods is not None:
            self.rollover_periods = rollover_periods
        if proration_option is not None:
            self.proration_option = proration_option
        if segment is not None:
            self.segment = segment
        if specific_end_date is not None:
            self.specific_end_date = specific_end_date
        if subscription_charge_interval_pricing is not None:
            self.subscription_charge_interval_pricing = subscription_charge_interval_pricing
        if tcv is not None:
            self.tcv = tcv
        if tiers is not None:
            self.tiers = tiers
        if trigger_date is not None:
            self.trigger_date = trigger_date
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if upsell_origin_charge_number is not None:
            self.upsell_origin_charge_number = upsell_origin_charge_number
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type
        if validity_period_type is not None:
            self.validity_period_type = validity_period_type
        if price_upsell_quantity_stacked is not None:
            self.price_upsell_quantity_stacked = price_upsell_quantity_stacked
        if pob_policy is not None:
            self.pob_policy = pob_policy
        if sales_price is not None:
            self.sales_price = sales_price

    @property
    def billing_day(self):
        """Gets the billing_day of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The billing_day of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._billing_day

    @billing_day.setter
    def billing_day(self, billing_day):
        """Sets the billing_day of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param billing_day: The billing_day of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._billing_day = billing_day

    @property
    def billing_period(self):
        """Gets the billing_period of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The billing_period of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: BillingPeriod
        """
        return self._billing_period

    @billing_period.setter
    def billing_period(self, billing_period):
        """Sets the billing_period of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param billing_period: The billing_period of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: BillingPeriod
        """

        self._billing_period = billing_period

    @property
    def billing_period_alignment(self):
        """Gets the billing_period_alignment of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The billing_period_alignment of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: BillingPeriodAlignment
        """
        return self._billing_period_alignment

    @billing_period_alignment.setter
    def billing_period_alignment(self, billing_period_alignment):
        """Sets the billing_period_alignment of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param billing_period_alignment: The billing_period_alignment of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: BillingPeriodAlignment
        """

        self._billing_period_alignment = billing_period_alignment

    @property
    def billing_timing(self):
        """Gets the billing_timing of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The billing_timing of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: BillingTiming
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param billing_timing: The billing_timing of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: BillingTiming
        """

        self._billing_timing = billing_timing

    @property
    def charge_segments(self):
        """Gets the charge_segments of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        Billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.    Values:  * `DefaultFromCustomer` * `SpecificDayofMonth(# of the month)` * `SubscriptionStartDay` * `ChargeTriggerDay` * `SpecificDayofWeek/dayofweek`: in which dayofweek is the day in the week you define your billing periods to start.  In the response data, a day-of-the-month ordinal value (`first`-`31st`) appears in place of the hash sign above (\"#\"). If this value exceeds the number of days in a particular month, the last day of the month is used as the BCD.   # noqa: E501

        :return: The charge_segments of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: list[RatePlanChargeSegment]
        """
        return self._charge_segments

    @charge_segments.setter
    def charge_segments(self, charge_segments):
        """Sets the charge_segments of this GetSubscriptionRatePlanChargesWithAllSegments.

        Billing cycle day (BCD), which is when bill runs generate invoices for charges associated with the product rate plan charge or the account.    Values:  * `DefaultFromCustomer` * `SpecificDayofMonth(# of the month)` * `SubscriptionStartDay` * `ChargeTriggerDay` * `SpecificDayofWeek/dayofweek`: in which dayofweek is the day in the week you define your billing periods to start.  In the response data, a day-of-the-month ordinal value (`first`-`31st`) appears in place of the hash sign above (\"#\"). If this value exceeds the number of days in a particular month, the last day of the month is used as the BCD.   # noqa: E501

        :param charge_segments: The charge_segments of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: list[RatePlanChargeSegment]
        """

        self._charge_segments = charge_segments

    @property
    def exclude_item_billing_from_revenue_accounting(self):
        """Gets the exclude_item_billing_from_revenue_accounting of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The exclude_item_billing_from_revenue_accounting of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_billing_from_revenue_accounting

    @exclude_item_billing_from_revenue_accounting.setter
    def exclude_item_billing_from_revenue_accounting(self, exclude_item_billing_from_revenue_accounting):
        """Sets the exclude_item_billing_from_revenue_accounting of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param exclude_item_billing_from_revenue_accounting: The exclude_item_billing_from_revenue_accounting of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting

    @property
    def exclude_item_booking_from_revenue_accounting(self):
        """Gets the exclude_item_booking_from_revenue_accounting of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The exclude_item_booking_from_revenue_accounting of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_booking_from_revenue_accounting

    @exclude_item_booking_from_revenue_accounting.setter
    def exclude_item_booking_from_revenue_accounting(self, exclude_item_booking_from_revenue_accounting):
        """Sets the exclude_item_booking_from_revenue_accounting of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param exclude_item_booking_from_revenue_accounting: The exclude_item_booking_from_revenue_accounting of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._exclude_item_booking_from_revenue_accounting = exclude_item_booking_from_revenue_accounting

    @property
    def invoice_schedule_id(self):
        """Gets the invoice_schedule_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The invoice_schedule_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._invoice_schedule_id

    @invoice_schedule_id.setter
    def invoice_schedule_id(self, invoice_schedule_id):
        """Sets the invoice_schedule_id of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param invoice_schedule_id: The invoice_schedule_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._invoice_schedule_id = invoice_schedule_id

    @property
    def is_allocation_eligible(self):
        """Gets the is_allocation_eligible of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The is_allocation_eligible of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._is_allocation_eligible

    @is_allocation_eligible.setter
    def is_allocation_eligible(self, is_allocation_eligible):
        """Sets the is_allocation_eligible of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param is_allocation_eligible: The is_allocation_eligible of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._is_allocation_eligible = is_allocation_eligible

    @property
    def is_unbilled(self):
        """Gets the is_unbilled of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The is_unbilled of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._is_unbilled

    @is_unbilled.setter
    def is_unbilled(self, is_unbilled):
        """Sets the is_unbilled of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param is_unbilled: The is_unbilled of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._is_unbilled = is_unbilled

    @property
    def list_price_base(self):
        """Gets the list_price_base of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The list_price_base of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: ChargeListPriceBase
        """
        return self._list_price_base

    @list_price_base.setter
    def list_price_base(self, list_price_base):
        """Sets the list_price_base of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param list_price_base: The list_price_base of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: ChargeListPriceBase
        """

        self._list_price_base = list_price_base

    @property
    def model(self):
        """Gets the model of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The model of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: ChargeModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param model: The model of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: ChargeModel
        """

        self._model = model

    @property
    def name(self):
        """Gets the name of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The name of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param name: The name of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The number of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param number: The number of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def number_of_periods(self):
        """Gets the number_of_periods of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The number_of_periods of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: int
        """
        return self._number_of_periods

    @number_of_periods.setter
    def number_of_periods(self, number_of_periods):
        """Sets the number_of_periods of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param number_of_periods: The number_of_periods of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: int
        """

        self._number_of_periods = number_of_periods

    @property
    def original_charge_id(self):
        """Gets the original_charge_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The original_charge_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._original_charge_id

    @original_charge_id.setter
    def original_charge_id(self, original_charge_id):
        """Sets the original_charge_id of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param original_charge_id: The original_charge_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._original_charge_id = original_charge_id

    @property
    def overage_calculation_option(self):
        """Gets the overage_calculation_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The overage_calculation_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: OverageCalculationOption
        """
        return self._overage_calculation_option

    @overage_calculation_option.setter
    def overage_calculation_option(self, overage_calculation_option):
        """Sets the overage_calculation_option of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param overage_calculation_option: The overage_calculation_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: OverageCalculationOption
        """

        self._overage_calculation_option = overage_calculation_option

    @property
    def overage_unused_units_credit_option(self):
        """Gets the overage_unused_units_credit_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The overage_unused_units_credit_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: OverageUnusedUnitsCreditOption
        """
        return self._overage_unused_units_credit_option

    @overage_unused_units_credit_option.setter
    def overage_unused_units_credit_option(self, overage_unused_units_credit_option):
        """Sets the overage_unused_units_credit_option of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param overage_unused_units_credit_option: The overage_unused_units_credit_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: OverageUnusedUnitsCreditOption
        """

        self._overage_unused_units_credit_option = overage_unused_units_credit_option

    @property
    def product_category(self):
        """Gets the product_category of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The product_category of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: ProductCategory
        """
        return self._product_category

    @product_category.setter
    def product_category(self, product_category):
        """Sets the product_category of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param product_category: The product_category of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: ProductCategory
        """

        self._product_category = product_category

    @property
    def product_class(self):
        """Gets the product_class of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The product_class of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._product_class

    @product_class.setter
    def product_class(self, product_class):
        """Sets the product_class of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param product_class: The product_class of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._product_class = product_class

    @property
    def product_family(self):
        """Gets the product_family of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The product_family of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._product_family

    @product_family.setter
    def product_family(self, product_family):
        """Sets the product_family of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param product_family: The product_family of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._product_family = product_family

    @property
    def product_line(self):
        """Gets the product_line of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The product_line of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._product_line

    @product_line.setter
    def product_line(self, product_line):
        """Sets the product_line of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param product_line: The product_line of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._product_line = product_line

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The product_rate_plan_charge_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def product_rate_plan_charge_number(self):
        """Gets the product_rate_plan_charge_number of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The product_rate_plan_charge_number of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_number

    @product_rate_plan_charge_number.setter
    def product_rate_plan_charge_number(self, product_rate_plan_charge_number):
        """Sets the product_rate_plan_charge_number of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param product_rate_plan_charge_number: The product_rate_plan_charge_number of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_number = product_rate_plan_charge_number

    @property
    def rating_group(self):
        """Gets the rating_group of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The rating_group of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: RatingGroup
        """
        return self._rating_group

    @rating_group.setter
    def rating_group(self, rating_group):
        """Sets the rating_group of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param rating_group: The rating_group of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: RatingGroup
        """

        self._rating_group = rating_group

    @property
    def smoothing_model(self):
        """Gets the smoothing_model of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The smoothing_model of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: SmoothingModel
        """
        return self._smoothing_model

    @smoothing_model.setter
    def smoothing_model(self, smoothing_model):
        """Sets the smoothing_model of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param smoothing_model: The smoothing_model of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: SmoothingModel
        """

        self._smoothing_model = smoothing_model

    @property
    def specific_billing_period(self):
        """Gets the specific_billing_period of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The specific_billing_period of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: int
        """
        return self._specific_billing_period

    @specific_billing_period.setter
    def specific_billing_period(self, specific_billing_period):
        """Sets the specific_billing_period of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param specific_billing_period: The specific_billing_period of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: int
        """

        self._specific_billing_period = specific_billing_period

    @property
    def specific_list_price_base(self):
        """Gets the specific_list_price_base of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The specific_list_price_base of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: int
        """
        return self._specific_list_price_base

    @specific_list_price_base.setter
    def specific_list_price_base(self, specific_list_price_base):
        """Sets the specific_list_price_base of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param specific_list_price_base: The specific_list_price_base of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: int
        """

        self._specific_list_price_base = specific_list_price_base

    @property
    def type(self):
        """Gets the type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: ChargeType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param type: The type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: ChargeType
        """

        self._type = type

    @property
    def unused_units_credit_rates(self):
        """Gets the unused_units_credit_rates of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The unused_units_credit_rates of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._unused_units_credit_rates

    @unused_units_credit_rates.setter
    def unused_units_credit_rates(self, unused_units_credit_rates):
        """Sets the unused_units_credit_rates of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param unused_units_credit_rates: The unused_units_credit_rates of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._unused_units_credit_rates = unused_units_credit_rates

    @property
    def uom(self):
        """Gets the uom of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The uom of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: Uom
        """
        return self._uom

    @uom.setter
    def uom(self, uom):
        """Sets the uom of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param uom: The uom of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: Uom
        """

        self._uom = uom

    @property
    def usage_record_rating_option(self):
        """Gets the usage_record_rating_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The usage_record_rating_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: UsageRecordRatingOption
        """
        return self._usage_record_rating_option

    @usage_record_rating_option.setter
    def usage_record_rating_option(self, usage_record_rating_option):
        """Sets the usage_record_rating_option of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param usage_record_rating_option: The usage_record_rating_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: UsageRecordRatingOption
        """

        self._usage_record_rating_option = usage_record_rating_option

    @property
    def version(self):
        """Gets the version of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The version of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param version: The version of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: int
        """

        self._version = version

    @property
    def amended_by_order_on(self):
        """Gets the amended_by_order_on of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :return: The amended_by_order_on of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: date
        """
        return self._amended_by_order_on

    @amended_by_order_on.setter
    def amended_by_order_on(self, amended_by_order_on):
        """Sets the amended_by_order_on of this GetSubscriptionRatePlanChargesWithAllSegments.

        The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :param amended_by_order_on: The amended_by_order_on of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: date
        """

        self._amended_by_order_on = amended_by_order_on

    @property
    def apply_discount_to(self):
        """Gets the apply_discount_to of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The apply_discount_to of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: ApplyDiscountTo
        """
        return self._apply_discount_to

    @apply_discount_to.setter
    def apply_discount_to(self, apply_discount_to):
        """Sets the apply_discount_to of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param apply_discount_to: The apply_discount_to of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: ApplyDiscountTo
        """

        self._apply_discount_to = apply_discount_to

    @property
    def charge_function(self):
        """Gets the charge_function of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The charge_function of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: ChargeFunction
        """
        return self._charge_function

    @charge_function.setter
    def charge_function(self, charge_function):
        """Sets the charge_function of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param charge_function: The charge_function of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: ChargeFunction
        """

        self._charge_function = charge_function

    @property
    def charge_model_configuration(self):
        """Gets the charge_model_configuration of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The charge_model_configuration of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: ChargeModelConfigurationForSubscription
        """
        return self._charge_model_configuration

    @charge_model_configuration.setter
    def charge_model_configuration(self, charge_model_configuration):
        """Sets the charge_model_configuration of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param charge_model_configuration: The charge_model_configuration of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: ChargeModelConfigurationForSubscription
        """

        self._charge_model_configuration = charge_model_configuration

    @property
    def charged_through_date(self):
        """Gets the charged_through_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        The date through which a customer has been billed for the charge.   # noqa: E501

        :return: The charged_through_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: date
        """
        return self._charged_through_date

    @charged_through_date.setter
    def charged_through_date(self, charged_through_date):
        """Sets the charged_through_date of this GetSubscriptionRatePlanChargesWithAllSegments.

        The date through which a customer has been billed for the charge.   # noqa: E501

        :param charged_through_date: The charged_through_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: date
        """

        self._charged_through_date = charged_through_date

    @property
    def commitment_type(self):
        """Gets the commitment_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The commitment_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: CommitmentType
        """
        return self._commitment_type

    @commitment_type.setter
    def commitment_type(self, commitment_type):
        """Sets the commitment_type of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param commitment_type: The commitment_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: CommitmentType
        """

        self._commitment_type = commitment_type

    @property
    def prepaid_committed_amount(self):
        """Gets the prepaid_committed_amount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The prepaid_committed_amount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._prepaid_committed_amount

    @prepaid_committed_amount.setter
    def prepaid_committed_amount(self, prepaid_committed_amount):
        """Sets the prepaid_committed_amount of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param prepaid_committed_amount: The prepaid_committed_amount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._prepaid_committed_amount = prepaid_committed_amount

    @property
    def product_charge_definition_id(self):
        """Gets the product_charge_definition_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The product_charge_definition_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._product_charge_definition_id

    @product_charge_definition_id.setter
    def product_charge_definition_id(self, product_charge_definition_id):
        """Sets the product_charge_definition_id of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param product_charge_definition_id: The product_charge_definition_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._product_charge_definition_id = product_charge_definition_id

    @property
    def is_stacked_discount(self):
        """Gets the is_stacked_discount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The is_stacked_discount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._is_stacked_discount

    @is_stacked_discount.setter
    def is_stacked_discount(self, is_stacked_discount):
        """Sets the is_stacked_discount of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param is_stacked_discount: The is_stacked_discount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._is_stacked_discount = is_stacked_discount

    @property
    def reflect_discount_in_net_amount(self):
        """Gets the reflect_discount_in_net_amount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The reflect_discount_in_net_amount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._reflect_discount_in_net_amount

    @reflect_discount_in_net_amount.setter
    def reflect_discount_in_net_amount(self, reflect_discount_in_net_amount):
        """Sets the reflect_discount_in_net_amount of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param reflect_discount_in_net_amount: The reflect_discount_in_net_amount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._reflect_discount_in_net_amount = reflect_discount_in_net_amount

    @property
    def centralized_price(self):
        """Gets the centralized_price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The centralized_price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._centralized_price

    @centralized_price.setter
    def centralized_price(self, centralized_price):
        """Sets the centralized_price of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param centralized_price: The centralized_price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._centralized_price = centralized_price

    @property
    def number_of_deliveries(self):
        """Gets the number_of_deliveries of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The number_of_deliveries of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._number_of_deliveries

    @number_of_deliveries.setter
    def number_of_deliveries(self, number_of_deliveries):
        """Sets the number_of_deliveries of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param number_of_deliveries: The number_of_deliveries of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._number_of_deliveries = number_of_deliveries

    @property
    def credit_option(self):
        """Gets the credit_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information.   # noqa: E501

        :return: The credit_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._credit_option

    @credit_option.setter
    def credit_option(self, credit_option):
        """Sets the credit_option of this GetSubscriptionRatePlanChargesWithAllSegments.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information.   # noqa: E501

        :param credit_option: The credit_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """
        allowed_values = ["TimeBased", "ConsumptionBased", "FullCreditBack"]  # noqa: E501
        if credit_option not in allowed_values:
            raise ValueError(
                "Invalid value for `credit_option` ({0}), must be one of {1}"  # noqa: E501
                .format(credit_option, allowed_values)
            )

        self._credit_option = credit_option

    @property
    def currency(self):
        """Gets the currency of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The currency of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param currency: The currency of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def delivery_schedule(self):
        """Gets the delivery_schedule of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The delivery_schedule of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: DeliverySchedule
        """
        return self._delivery_schedule

    @delivery_schedule.setter
    def delivery_schedule(self, delivery_schedule):
        """Sets the delivery_schedule of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param delivery_schedule: The delivery_schedule of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: DeliverySchedule
        """

        self._delivery_schedule = delivery_schedule

    @property
    def description(self):
        """Gets the description of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        Description of the rate plan charge.  # noqa: E501

        :return: The description of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GetSubscriptionRatePlanChargesWithAllSegments.

        Description of the rate plan charge.  # noqa: E501

        :param description: The description of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        The amount of the discount.  # noqa: E501

        :return: The discount_amount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this GetSubscriptionRatePlanChargesWithAllSegments.

        The amount of the discount.  # noqa: E501

        :param discount_amount: The discount_amount of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_apply_details(self):
        """Gets the discount_apply_details of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        Container for the application details about a discount rate plan charge.   Only discount rate plan charges have values in this field.   # noqa: E501

        :return: The discount_apply_details of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: list[DiscountApplyDetail]
        """
        return self._discount_apply_details

    @discount_apply_details.setter
    def discount_apply_details(self, discount_apply_details):
        """Sets the discount_apply_details of this GetSubscriptionRatePlanChargesWithAllSegments.

        Container for the application details about a discount rate plan charge.   Only discount rate plan charges have values in this field.   # noqa: E501

        :param discount_apply_details: The discount_apply_details of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: list[DiscountApplyDetail]
        """

        self._discount_apply_details = discount_apply_details

    @property
    def discount_class(self):
        """Gets the discount_class of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).   # noqa: E501

        :return: The discount_class of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._discount_class

    @discount_class.setter
    def discount_class(self, discount_class):
        """Sets the discount_class of this GetSubscriptionRatePlanChargesWithAllSegments.

        The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).   # noqa: E501

        :param discount_class: The discount_class of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._discount_class = discount_class

    @property
    def discount_level(self):
        """Gets the discount_level of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The discount_level of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: DiscountLevel
        """
        return self._discount_level

    @discount_level.setter
    def discount_level(self, discount_level):
        """Sets the discount_level of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param discount_level: The discount_level of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: DiscountLevel
        """

        self._discount_level = discount_level

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        The amount of the discount as a percentage.   # noqa: E501

        :return: The discount_percentage of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this GetSubscriptionRatePlanChargesWithAllSegments.

        The amount of the discount as a percentage.   # noqa: E501

        :param discount_percentage: The discount_percentage of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def apply_to_billing_period_partially(self):
        """Gets the apply_to_billing_period_partially of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        Allow the discount duration to be aligned with the billing period partially. **Note**: This field is only available if you have the Enhanced Discounts feature enabled.   # noqa: E501

        :return: The apply_to_billing_period_partially of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._apply_to_billing_period_partially

    @apply_to_billing_period_partially.setter
    def apply_to_billing_period_partially(self, apply_to_billing_period_partially):
        """Sets the apply_to_billing_period_partially of this GetSubscriptionRatePlanChargesWithAllSegments.

        Allow the discount duration to be aligned with the billing period partially. **Note**: This field is only available if you have the Enhanced Discounts feature enabled.   # noqa: E501

        :param apply_to_billing_period_partially: The apply_to_billing_period_partially of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._apply_to_billing_period_partially = apply_to_billing_period_partially

    @property
    def dmrc(self):
        """Gets the dmrc of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription.   # noqa: E501

        :return: The dmrc of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._dmrc

    @dmrc.setter
    def dmrc(self, dmrc):
        """Sets the dmrc of this GetSubscriptionRatePlanChargesWithAllSegments.

        The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription.   # noqa: E501

        :param dmrc: The dmrc of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._dmrc = dmrc

    @property
    def done(self):
        """Gets the done of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not been completed for the charge segment.   # noqa: E501

        :return: The done of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this GetSubscriptionRatePlanChargesWithAllSegments.

        A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not been completed for the charge segment.   # noqa: E501

        :param done: The done of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._done = done

    @property
    def drawdown_rate(self):
        """Gets the drawdown_rate of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The drawdown_rate of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._drawdown_rate

    @drawdown_rate.setter
    def drawdown_rate(self, drawdown_rate):
        """Sets the drawdown_rate of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param drawdown_rate: The drawdown_rate of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._drawdown_rate = drawdown_rate

    @property
    def drawdown_uom(self):
        """Gets the drawdown_uom of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The drawdown_uom of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: Uom
        """
        return self._drawdown_uom

    @drawdown_uom.setter
    def drawdown_uom(self, drawdown_uom):
        """Sets the drawdown_uom of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param drawdown_uom: The drawdown_uom of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: Uom
        """

        self._drawdown_uom = drawdown_uom

    @property
    def dtcv(self):
        """Gets the dtcv of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types.   # noqa: E501

        :return: The dtcv of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._dtcv

    @dtcv.setter
    def dtcv(self, dtcv):
        """Sets the dtcv of this GetSubscriptionRatePlanChargesWithAllSegments.

        After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types.   # noqa: E501

        :param dtcv: The dtcv of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._dtcv = dtcv

    @property
    def effective_end_date(self):
        """Gets the effective_end_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The effective_end_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: date
        """
        return self._effective_end_date

    @effective_end_date.setter
    def effective_end_date(self, effective_end_date):
        """Sets the effective_end_date of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param effective_end_date: The effective_end_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: date
        """

        self._effective_end_date = effective_end_date

    @property
    def effective_start_date(self):
        """Gets the effective_start_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The effective_start_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: date
        """
        return self._effective_start_date

    @effective_start_date.setter
    def effective_start_date(self, effective_start_date):
        """Sets the effective_start_date of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param effective_start_date: The effective_start_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: date
        """

        self._effective_start_date = effective_start_date

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The end_date_condition of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: EndDateCondition
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param end_date_condition: The end_date_condition of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: EndDateCondition
        """

        self._end_date_condition = end_date_condition

    @property
    def id(self):
        """Gets the id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param id: The id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def included_units(self):
        """Gets the included_units of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The included_units of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._included_units

    @included_units.setter
    def included_units(self, included_units):
        """Sets the included_units of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param included_units: The included_units of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._included_units = included_units

    @property
    def overage_price(self):
        """Gets the overage_price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The overage_price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._overage_price

    @overage_price.setter
    def overage_price(self, overage_price):
        """Sets the overage_price of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param overage_price: The overage_price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._overage_price = overage_price

    @property
    def input_argument_id(self):
        """Gets the input_argument_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The input_argument_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._input_argument_id

    @input_argument_id.setter
    def input_argument_id(self, input_argument_id):
        """Sets the input_argument_id of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param input_argument_id: The input_argument_id of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._input_argument_id = input_argument_id

    @property
    def is_committed(self):
        """Gets the is_committed of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The is_committed of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._is_committed

    @is_committed.setter
    def is_committed(self, is_committed):
        """Sets the is_committed of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param is_committed: The is_committed of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._is_committed = is_committed

    @property
    def is_prepaid(self):
        """Gets the is_prepaid of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The is_prepaid of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._is_prepaid

    @is_prepaid.setter
    def is_prepaid(self, is_prepaid):
        """Sets the is_prepaid of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param is_prepaid: The is_prepaid of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._is_prepaid = is_prepaid

    @property
    def is_rollover(self):
        """Gets the is_rollover of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The is_rollover of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._is_rollover

    @is_rollover.setter
    def is_rollover(self, is_rollover):
        """Sets the is_rollover of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param is_rollover: The is_rollover of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._is_rollover = is_rollover

    @property
    def mrr(self):
        """Gets the mrr of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The mrr of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._mrr

    @mrr.setter
    def mrr(self, mrr):
        """Sets the mrr of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param mrr: The mrr of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._mrr = mrr

    @property
    def original_order_date(self):
        """Gets the original_order_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The original_order_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: date
        """
        return self._original_order_date

    @original_order_date.setter
    def original_order_date(self, original_order_date):
        """Sets the original_order_date of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param original_order_date: The original_order_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: date
        """

        self._original_order_date = original_order_date

    @property
    def prepaid_operation_type(self):
        """Gets the prepaid_operation_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The prepaid_operation_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._prepaid_operation_type

    @prepaid_operation_type.setter
    def prepaid_operation_type(self, prepaid_operation_type):
        """Sets the prepaid_operation_type of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param prepaid_operation_type: The prepaid_operation_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """
        allowed_values = ["topup", "drawdown"]  # noqa: E501
        if prepaid_operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `prepaid_operation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(prepaid_operation_type, allowed_values)
            )

        self._prepaid_operation_type = prepaid_operation_type

    @property
    def prepaid_quantity(self):
        """Gets the prepaid_quantity of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The prepaid_quantity of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._prepaid_quantity

    @prepaid_quantity.setter
    def prepaid_quantity(self, prepaid_quantity):
        """Sets the prepaid_quantity of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param prepaid_quantity: The prepaid_quantity of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._prepaid_quantity = prepaid_quantity

    @property
    def prepaid_total_quantity(self):
        """Gets the prepaid_total_quantity of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The prepaid_total_quantity of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._prepaid_total_quantity

    @prepaid_total_quantity.setter
    def prepaid_total_quantity(self, prepaid_total_quantity):
        """Sets the prepaid_total_quantity of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param prepaid_total_quantity: The prepaid_total_quantity of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._prepaid_total_quantity = prepaid_total_quantity

    @property
    def prepaid_uom(self):
        """Gets the prepaid_uom of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The prepaid_uom of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: Uom
        """
        return self._prepaid_uom

    @prepaid_uom.setter
    def prepaid_uom(self, prepaid_uom):
        """Sets the prepaid_uom of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param prepaid_uom: The prepaid_uom of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: Uom
        """

        self._prepaid_uom = prepaid_uom

    @property
    def quantity(self):
        """Gets the quantity of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The quantity of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param quantity: The quantity of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param price: The price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_change_option(self):
        """Gets the price_change_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The price_change_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: PriceChangeOption
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param price_change_option: The price_change_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: PriceChangeOption
        """

        self._price_change_option = price_change_option

    @property
    def price_increase_percentage(self):
        """Gets the price_increase_percentage of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The price_increase_percentage of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._price_increase_percentage

    @price_increase_percentage.setter
    def price_increase_percentage(self, price_increase_percentage):
        """Sets the price_increase_percentage of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param price_increase_percentage: The price_increase_percentage of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._price_increase_percentage = price_increase_percentage

    @property
    def pricing_summary(self):
        """Gets the pricing_summary of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The pricing_summary of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._pricing_summary

    @pricing_summary.setter
    def pricing_summary(self, pricing_summary):
        """Sets the pricing_summary of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param pricing_summary: The pricing_summary of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._pricing_summary = pricing_summary

    @property
    def processed_through_date(self):
        """Gets the processed_through_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The processed_through_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: date
        """
        return self._processed_through_date

    @processed_through_date.setter
    def processed_through_date(self, processed_through_date):
        """Sets the processed_through_date of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param processed_through_date: The processed_through_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: date
        """

        self._processed_through_date = processed_through_date

    @property
    def rollover_apply(self):
        """Gets the rollover_apply of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The rollover_apply of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._rollover_apply

    @rollover_apply.setter
    def rollover_apply(self, rollover_apply):
        """Sets the rollover_apply of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param rollover_apply: The rollover_apply of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """
        allowed_values = ["ApplyFirst", "ApplyLast"]  # noqa: E501
        if rollover_apply not in allowed_values:
            raise ValueError(
                "Invalid value for `rollover_apply` ({0}), must be one of {1}"  # noqa: E501
                .format(rollover_apply, allowed_values)
            )

        self._rollover_apply = rollover_apply

    @property
    def rollover_period_length(self):
        """Gets the rollover_period_length of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The rollover_period_length of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: int
        """
        return self._rollover_period_length

    @rollover_period_length.setter
    def rollover_period_length(self, rollover_period_length):
        """Sets the rollover_period_length of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param rollover_period_length: The rollover_period_length of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: int
        """

        self._rollover_period_length = rollover_period_length

    @property
    def rollover_periods(self):
        """Gets the rollover_periods of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The rollover_periods of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: int
        """
        return self._rollover_periods

    @rollover_periods.setter
    def rollover_periods(self, rollover_periods):
        """Sets the rollover_periods of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param rollover_periods: The rollover_periods of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: int
        """

        self._rollover_periods = rollover_periods

    @property
    def proration_option(self):
        """Gets the proration_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The proration_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._proration_option

    @proration_option.setter
    def proration_option(self, proration_option):
        """Sets the proration_option of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param proration_option: The proration_option of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._proration_option = proration_option

    @property
    def segment(self):
        """Gets the segment of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The segment of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: int
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param segment: The segment of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: int
        """

        self._segment = segment

    @property
    def specific_end_date(self):
        """Gets the specific_end_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The specific_end_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: date
        """
        return self._specific_end_date

    @specific_end_date.setter
    def specific_end_date(self, specific_end_date):
        """Sets the specific_end_date of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param specific_end_date: The specific_end_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: date
        """

        self._specific_end_date = specific_end_date

    @property
    def subscription_charge_interval_pricing(self):
        """Gets the subscription_charge_interval_pricing of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The subscription_charge_interval_pricing of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: list[IntervalPricing]
        """
        return self._subscription_charge_interval_pricing

    @subscription_charge_interval_pricing.setter
    def subscription_charge_interval_pricing(self, subscription_charge_interval_pricing):
        """Sets the subscription_charge_interval_pricing of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param subscription_charge_interval_pricing: The subscription_charge_interval_pricing of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: list[IntervalPricing]
        """

        self._subscription_charge_interval_pricing = subscription_charge_interval_pricing

    @property
    def tcv(self):
        """Gets the tcv of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The tcv of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._tcv

    @tcv.setter
    def tcv(self, tcv):
        """Sets the tcv of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param tcv: The tcv of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._tcv = tcv

    @property
    def tiers(self):
        """Gets the tiers of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The tiers of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: list[RatePlanChargeTier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param tiers: The tiers of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: list[RatePlanChargeTier]
        """

        self._tiers = tiers

    @property
    def trigger_date(self):
        """Gets the trigger_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The trigger_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: date
        """
        return self._trigger_date

    @trigger_date.setter
    def trigger_date(self, trigger_date):
        """Sets the trigger_date of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param trigger_date: The trigger_date of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: date
        """

        self._trigger_date = trigger_date

    @property
    def trigger_event(self):
        """Gets the trigger_event of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The trigger_event of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: TriggerEvent
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param trigger_event: The trigger_event of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: TriggerEvent
        """

        self._trigger_event = trigger_event

    @property
    def upsell_origin_charge_number(self):
        """Gets the upsell_origin_charge_number of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        **Note**: The Quantity Upsell feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).  The identifier of the original upselling charge associated with the current charge.   # noqa: E501

        :return: The upsell_origin_charge_number of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._upsell_origin_charge_number

    @upsell_origin_charge_number.setter
    def upsell_origin_charge_number(self, upsell_origin_charge_number):
        """Sets the upsell_origin_charge_number of this GetSubscriptionRatePlanChargesWithAllSegments.

        **Note**: The Quantity Upsell feature is in Limited Availability. If you wish to have access to the feature, submit a request at [Zuora Global Support](https://support.zuora.com).  The identifier of the original upselling charge associated with the current charge.   # noqa: E501

        :param upsell_origin_charge_number: The upsell_origin_charge_number of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """

        self._upsell_origin_charge_number = upsell_origin_charge_number

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The up_to_periods of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: int
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param up_to_periods: The up_to_periods of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: int
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The up_to_periods_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: UpToPeriodsType
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param up_to_periods_type: The up_to_periods_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: UpToPeriodsType
        """

        self._up_to_periods_type = up_to_periods_type

    @property
    def validity_period_type(self):
        """Gets the validity_period_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The validity_period_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: ValidityPeriodType
        """
        return self._validity_period_type

    @validity_period_type.setter
    def validity_period_type(self, validity_period_type):
        """Sets the validity_period_type of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param validity_period_type: The validity_period_type of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: ValidityPeriodType
        """

        self._validity_period_type = validity_period_type

    @property
    def price_upsell_quantity_stacked(self):
        """Gets the price_upsell_quantity_stacked of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        This field is availabe when PriceUpsellQuantityStacked permission enabled  # noqa: E501

        :return: The price_upsell_quantity_stacked of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: bool
        """
        return self._price_upsell_quantity_stacked

    @price_upsell_quantity_stacked.setter
    def price_upsell_quantity_stacked(self, price_upsell_quantity_stacked):
        """Sets the price_upsell_quantity_stacked of this GetSubscriptionRatePlanChargesWithAllSegments.

        This field is availabe when PriceUpsellQuantityStacked permission enabled  # noqa: E501

        :param price_upsell_quantity_stacked: The price_upsell_quantity_stacked of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: bool
        """

        self._price_upsell_quantity_stacked = price_upsell_quantity_stacked

    @property
    def pob_policy(self):
        """Gets the pob_policy of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501

        The POB policy type, it is available when permission EnableAdditionalRevenueFields is on   # noqa: E501

        :return: The pob_policy of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: str
        """
        return self._pob_policy

    @pob_policy.setter
    def pob_policy(self, pob_policy):
        """Sets the pob_policy of this GetSubscriptionRatePlanChargesWithAllSegments.

        The POB policy type, it is available when permission EnableAdditionalRevenueFields is on   # noqa: E501

        :param pob_policy: The pob_policy of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: str
        """
        allowed_values = ["Placeholder"]  # noqa: E501
        if pob_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `pob_policy` ({0}), must be one of {1}"  # noqa: E501
                .format(pob_policy, allowed_values)
            )

        self._pob_policy = pob_policy

    @property
    def sales_price(self):
        """Gets the sales_price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501


        :return: The sales_price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :rtype: float
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price):
        """Sets the sales_price of this GetSubscriptionRatePlanChargesWithAllSegments.


        :param sales_price: The sales_price of this GetSubscriptionRatePlanChargesWithAllSegments.  # noqa: E501
        :type: float
        """

        self._sales_price = sales_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetSubscriptionRatePlanChargesWithAllSegments, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetSubscriptionRatePlanChargesWithAllSegments):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
