# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PreviewOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'preview_number_of_periods': 'int',
        'preview_thru_type': 'PreviewOptionsPreviewThruType',
        'preview_types': 'list[str]',
        'specific_preview_thru_date': 'date'
    }

    attribute_map = {
        'preview_number_of_periods': 'previewNumberOfPeriods',
        'preview_thru_type': 'previewThruType',
        'preview_types': 'previewTypes',
        'specific_preview_thru_date': 'specificPreviewThruDate'
    }

    def __init__(self, preview_number_of_periods=None, preview_thru_type=None, preview_types=None, specific_preview_thru_date=None):  # noqa: E501
        """PreviewOptions - a model defined in Swagger"""  # noqa: E501
        self._preview_number_of_periods = None
        self._preview_thru_type = None
        self._preview_types = None
        self._specific_preview_thru_date = None
        self.discriminator = None
        if preview_number_of_periods is not None:
            self.preview_number_of_periods = preview_number_of_periods
        if preview_thru_type is not None:
            self.preview_thru_type = preview_thru_type
        if preview_types is not None:
            self.preview_types = preview_types
        if specific_preview_thru_date is not None:
            self.specific_preview_thru_date = specific_preview_thru_date

    @property
    def preview_number_of_periods(self):
        """Gets the preview_number_of_periods of this PreviewOptions.  # noqa: E501

        The number of periods to preview when the value of the `previewThroughType` field is set to `NumberOfPeriods`.   # noqa: E501

        :return: The preview_number_of_periods of this PreviewOptions.  # noqa: E501
        :rtype: int
        """
        return self._preview_number_of_periods

    @preview_number_of_periods.setter
    def preview_number_of_periods(self, preview_number_of_periods):
        """Sets the preview_number_of_periods of this PreviewOptions.

        The number of periods to preview when the value of the `previewThroughType` field is set to `NumberOfPeriods`.   # noqa: E501

        :param preview_number_of_periods: The preview_number_of_periods of this PreviewOptions.  # noqa: E501
        :type: int
        """

        self._preview_number_of_periods = preview_number_of_periods

    @property
    def preview_thru_type(self):
        """Gets the preview_thru_type of this PreviewOptions.  # noqa: E501


        :return: The preview_thru_type of this PreviewOptions.  # noqa: E501
        :rtype: PreviewOptionsPreviewThruType
        """
        return self._preview_thru_type

    @preview_thru_type.setter
    def preview_thru_type(self, preview_thru_type):
        """Sets the preview_thru_type of this PreviewOptions.


        :param preview_thru_type: The preview_thru_type of this PreviewOptions.  # noqa: E501
        :type: PreviewOptionsPreviewThruType
        """

        self._preview_thru_type = preview_thru_type

    @property
    def preview_types(self):
        """Gets the preview_types of this PreviewOptions.  # noqa: E501

        One or more types of the preview. It can include:  * ChargeMetrics: charge level metrics will be returned in the response, including: `cmrr`, `tcv`, `tcb`, and `tax`. * BillingDocs: `invoices` and `creditMemos` will be returned in the response. Note `creditMemos` is only available if the Invoice Settlement feature is enabled. * OrderDeltaMetrics: order delta metrics will be returned in the response, including: `orderDeltaMrr`, `orderDeltaTcb` and  `orderDeltaTcv`. * OrderMetrics: order metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv`, and `elp`. **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the OrderDeltaMetrics. It is recommended that all customers use the [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/). Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported. * RampMetrics: ramp metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv` metrics for each charge and each ramp interval. * RampDeltaMetrics: ramp metrics changes will be returned in the response, including: `deltaQuantity`, `deltaMrr`, `deltaTcb`, `deltaTcv` metrics for each charge and each ramp interval.   # noqa: E501

        :return: The preview_types of this PreviewOptions.  # noqa: E501
        :rtype: list[str]
        """
        return self._preview_types

    @preview_types.setter
    def preview_types(self, preview_types):
        """Sets the preview_types of this PreviewOptions.

        One or more types of the preview. It can include:  * ChargeMetrics: charge level metrics will be returned in the response, including: `cmrr`, `tcv`, `tcb`, and `tax`. * BillingDocs: `invoices` and `creditMemos` will be returned in the response. Note `creditMemos` is only available if the Invoice Settlement feature is enabled. * OrderDeltaMetrics: order delta metrics will be returned in the response, including: `orderDeltaMrr`, `orderDeltaTcb` and  `orderDeltaTcv`. * OrderMetrics: order metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv`, and `elp`. **Note:** As of Zuora Billing Release 306, Zuora has upgraded the methodologies for calculating metrics in [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders). The new methodologies are reflected in the OrderDeltaMetrics. It is recommended that all customers use the [Order Delta Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Order_Delta_Metrics/AA_Overview_of_Order_Delta_Metrics). If you are an existing [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders) customer and want to migrate to Order Delta Metrics, submit a request at [Zuora Global Support](https://support.zuora.com/). Whereas new customers, and existing customers not currently on [Order Metrics](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders/Key_Metrics_for_Orders), will no longer have access to Order Metrics, existing customers currently using Order Metrics will continue to be supported. * RampMetrics: ramp metrics will be returned in the response, including: `quantity`, `mrr`, `tcb`, `tcv` metrics for each charge and each ramp interval. * RampDeltaMetrics: ramp metrics changes will be returned in the response, including: `deltaQuantity`, `deltaMrr`, `deltaTcb`, `deltaTcv` metrics for each charge and each ramp interval.   # noqa: E501

        :param preview_types: The preview_types of this PreviewOptions.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["ChargeMetrics", "BillingDocs", "OrderDeltaMetrics", "OrderMetrics", "RampMetrics", "RampDeltaMetrics"]  # noqa: E501
        if not set(preview_types).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `preview_types` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(preview_types) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._preview_types = preview_types

    @property
    def specific_preview_thru_date(self):
        """Gets the specific_preview_thru_date of this PreviewOptions.  # noqa: E501

        The end date of the order preview. You can preview the invoice charges through the preview through date. (Invoice preview only)   **Note:** This field is only applicable if the 'previewThruType' field is set to 'SpecificDate'.   # noqa: E501

        :return: The specific_preview_thru_date of this PreviewOptions.  # noqa: E501
        :rtype: date
        """
        return self._specific_preview_thru_date

    @specific_preview_thru_date.setter
    def specific_preview_thru_date(self, specific_preview_thru_date):
        """Sets the specific_preview_thru_date of this PreviewOptions.

        The end date of the order preview. You can preview the invoice charges through the preview through date. (Invoice preview only)   **Note:** This field is only applicable if the 'previewThruType' field is set to 'SpecificDate'.   # noqa: E501

        :param specific_preview_thru_date: The specific_preview_thru_date of this PreviewOptions.  # noqa: E501
        :type: date
        """

        self._specific_preview_thru_date = specific_preview_thru_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PreviewOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PreviewOptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
