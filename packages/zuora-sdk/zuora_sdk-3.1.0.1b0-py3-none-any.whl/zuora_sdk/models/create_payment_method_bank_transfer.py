# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePaymentMethodBankTransfer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'iban': 'str',
        'account_holder_info': 'CreatePaymentMethodBankTransferAccountHolderInfo',
        'account_number': 'str',
        'bank_code': 'str',
        'branch_code': 'str',
        'business_identification_code': 'str',
        'currency_code': 'str',
        'identity_number': 'str'
    }

    attribute_map = {
        'iban': 'IBAN',
        'account_holder_info': 'accountHolderInfo',
        'account_number': 'accountNumber',
        'bank_code': 'bankCode',
        'branch_code': 'branchCode',
        'business_identification_code': 'businessIdentificationCode',
        'currency_code': 'currencyCode',
        'identity_number': 'identityNumber'
    }

    def __init__(self, iban=None, account_holder_info=None, account_number=None, bank_code=None, branch_code=None, business_identification_code=None, currency_code=None, identity_number=None):  # noqa: E501
        """CreatePaymentMethodBankTransfer - a model defined in Swagger"""  # noqa: E501
        self._iban = None
        self._account_holder_info = None
        self._account_number = None
        self._bank_code = None
        self._branch_code = None
        self._business_identification_code = None
        self._currency_code = None
        self._identity_number = None
        self.discriminator = None
        if iban is not None:
            self.iban = iban
        if account_holder_info is not None:
            self.account_holder_info = account_holder_info
        if account_number is not None:
            self.account_number = account_number
        if bank_code is not None:
            self.bank_code = bank_code
        if branch_code is not None:
            self.branch_code = branch_code
        if business_identification_code is not None:
            self.business_identification_code = business_identification_code
        if currency_code is not None:
            self.currency_code = currency_code
        if identity_number is not None:
            self.identity_number = identity_number

    @property
    def iban(self):
        """Gets the iban of this CreatePaymentMethodBankTransfer.  # noqa: E501

        The International Bank Account Number. This field is required if the `type` field is set to `SEPA`.   # noqa: E501

        :return: The iban of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this CreatePaymentMethodBankTransfer.

        The International Bank Account Number. This field is required if the `type` field is set to `SEPA`.   # noqa: E501

        :param iban: The iban of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def account_holder_info(self):
        """Gets the account_holder_info of this CreatePaymentMethodBankTransfer.  # noqa: E501


        :return: The account_holder_info of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :rtype: CreatePaymentMethodBankTransferAccountHolderInfo
        """
        return self._account_holder_info

    @account_holder_info.setter
    def account_holder_info(self, account_holder_info):
        """Sets the account_holder_info of this CreatePaymentMethodBankTransfer.


        :param account_holder_info: The account_holder_info of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :type: CreatePaymentMethodBankTransferAccountHolderInfo
        """

        self._account_holder_info = account_holder_info

    @property
    def account_number(self):
        """Gets the account_number of this CreatePaymentMethodBankTransfer.  # noqa: E501

        The number of the customer's bank account. This field is required for the following bank transfer payment methods:   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :return: The account_number of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreatePaymentMethodBankTransfer.

        The number of the customer's bank account. This field is required for the following bank transfer payment methods:   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :param account_number: The account_number of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def bank_code(self):
        """Gets the bank_code of this CreatePaymentMethodBankTransfer.  # noqa: E501

        The sort code or number that identifies the bank. This is also known as the sort code. This field is required for the following bank transfer payment methods:   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :return: The bank_code of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this CreatePaymentMethodBankTransfer.

        The sort code or number that identifies the bank. This is also known as the sort code. This field is required for the following bank transfer payment methods:   - Direct Debit UK (`Bacs`)   - Denmark Direct Debit (`Betalingsservice`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :param bank_code: The bank_code of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def branch_code(self):
        """Gets the branch_code of this CreatePaymentMethodBankTransfer.  # noqa: E501

        The branch code of the bank used for direct debit. This field is required for the following bank transfer payment methods:   - Sweden Direct Debit (`Autogiro`)   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :return: The branch_code of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :rtype: str
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code):
        """Sets the branch_code of this CreatePaymentMethodBankTransfer.

        The branch code of the bank used for direct debit. This field is required for the following bank transfer payment methods:   - Sweden Direct Debit (`Autogiro`)   - Direct Entry AU (`Becs`)   - Direct Debit NZ (`Becsnz`)   - Canadian Pre-Authorized Debit (`PAD`)   # noqa: E501

        :param branch_code: The branch_code of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :type: str
        """

        self._branch_code = branch_code

    @property
    def business_identification_code(self):
        """Gets the business_identification_code of this CreatePaymentMethodBankTransfer.  # noqa: E501

        The BIC code used for SEPA.   # noqa: E501

        :return: The business_identification_code of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :rtype: str
        """
        return self._business_identification_code

    @business_identification_code.setter
    def business_identification_code(self, business_identification_code):
        """Sets the business_identification_code of this CreatePaymentMethodBankTransfer.

        The BIC code used for SEPA.   # noqa: E501

        :param business_identification_code: The business_identification_code of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :type: str
        """

        self._business_identification_code = business_identification_code

    @property
    def currency_code(self):
        """Gets the currency_code of this CreatePaymentMethodBankTransfer.  # noqa: E501

        The currency used for payment method authorization.  If this field is not specified, `currency` specified for the account is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :return: The currency_code of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this CreatePaymentMethodBankTransfer.

        The currency used for payment method authorization.  If this field is not specified, `currency` specified for the account is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :param currency_code: The currency_code of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :type: str
        """

        self._currency_code = currency_code

    @property
    def identity_number(self):
        """Gets the identity_number of this CreatePaymentMethodBankTransfer.  # noqa: E501

        The identity number of the customer. This field is required for the following bank transfer payment methods:   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`)   # noqa: E501

        :return: The identity_number of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :rtype: str
        """
        return self._identity_number

    @identity_number.setter
    def identity_number(self, identity_number):
        """Sets the identity_number of this CreatePaymentMethodBankTransfer.

        The identity number of the customer. This field is required for the following bank transfer payment methods:   - Denmark Direct Debit (`Betalingsservice`)   - Sweden Direct Debit (`Autogiro`)   # noqa: E501

        :param identity_number: The identity_number of this CreatePaymentMethodBankTransfer.  # noqa: E501
        :type: str
        """

        self._identity_number = identity_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePaymentMethodBankTransfer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePaymentMethodBankTransfer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
