# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'auto_pay': 'bool',
        'batch': 'str',
        'bill_cycle_day': 'int',
        'bill_to_contact': 'ContactInfo',
        'communication_profile_id': 'str',
        'credit_memo_template_id': 'str',
        'crm_id': 'str',
        'currency': 'str',
        'custom_fields': 'dict(str, object)',
        'debit_memo_template_id': 'str',
        'invoice_template_id': 'str',
        'name': 'str',
        'notes': 'str',
        'payment_method': 'SignUpPaymentMethod',
        'payment_term': 'str',
        'purchase_order_number': 'str',
        'sequence_set_id': 'str',
        'sold_to_contact': 'ContactInfo',
        'tax_info': 'SignUpTaxInfo'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'auto_pay': 'autoPay',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'bill_to_contact': 'billToContact',
        'communication_profile_id': 'communicationProfileId',
        'credit_memo_template_id': 'creditMemoTemplateId',
        'crm_id': 'crmId',
        'currency': 'currency',
        'custom_fields': 'customFields',
        'debit_memo_template_id': 'debitMemoTemplateId',
        'invoice_template_id': 'invoiceTemplateId',
        'name': 'name',
        'notes': 'notes',
        'payment_method': 'paymentMethod',
        'payment_term': 'paymentTerm',
        'purchase_order_number': 'purchaseOrderNumber',
        'sequence_set_id': 'sequenceSetId',
        'sold_to_contact': 'soldToContact',
        'tax_info': 'taxInfo'
    }

    def __init__(self, account_number=None, auto_pay=None, batch=None, bill_cycle_day=None, bill_to_contact=None, communication_profile_id=None, credit_memo_template_id=None, crm_id=None, currency=None, custom_fields=None, debit_memo_template_id=None, invoice_template_id=None, name=None, notes=None, payment_method=None, payment_term=None, purchase_order_number=None, sequence_set_id=None, sold_to_contact=None, tax_info=None):  # noqa: E501
        """AccountData - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._auto_pay = None
        self._batch = None
        self._bill_cycle_day = None
        self._bill_to_contact = None
        self._communication_profile_id = None
        self._credit_memo_template_id = None
        self._crm_id = None
        self._currency = None
        self._custom_fields = None
        self._debit_memo_template_id = None
        self._invoice_template_id = None
        self._name = None
        self._notes = None
        self._payment_method = None
        self._payment_term = None
        self._purchase_order_number = None
        self._sequence_set_id = None
        self._sold_to_contact = None
        self._tax_info = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if batch is not None:
            self.batch = batch
        self.bill_cycle_day = bill_cycle_day
        self.bill_to_contact = bill_to_contact
        if communication_profile_id is not None:
            self.communication_profile_id = communication_profile_id
        if credit_memo_template_id is not None:
            self.credit_memo_template_id = credit_memo_template_id
        if crm_id is not None:
            self.crm_id = crm_id
        self.currency = currency
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if debit_memo_template_id is not None:
            self.debit_memo_template_id = debit_memo_template_id
        if invoice_template_id is not None:
            self.invoice_template_id = invoice_template_id
        self.name = name
        if notes is not None:
            self.notes = notes
        if payment_method is not None:
            self.payment_method = payment_method
        if payment_term is not None:
            self.payment_term = payment_term
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if sequence_set_id is not None:
            self.sequence_set_id = sequence_set_id
        if sold_to_contact is not None:
            self.sold_to_contact = sold_to_contact
        if tax_info is not None:
            self.tax_info = tax_info

    @property
    def account_number(self):
        """Gets the account_number of this AccountData.  # noqa: E501


        :return: The account_number of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AccountData.


        :param account_number: The account_number of this AccountData.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def auto_pay(self):
        """Gets the auto_pay of this AccountData.  # noqa: E501

        Specifies whether future payments are to be automatically billed when they are due. Possible values are `true`, `false`.  # noqa: E501

        :return: The auto_pay of this AccountData.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this AccountData.

        Specifies whether future payments are to be automatically billed when they are due. Possible values are `true`, `false`.  # noqa: E501

        :param auto_pay: The auto_pay of this AccountData.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def batch(self):
        """Gets the batch of this AccountData.  # noqa: E501


        :return: The batch of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this AccountData.


        :param batch: The batch of this AccountData.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this AccountData.  # noqa: E501

        Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".  # noqa: E501

        :return: The bill_cycle_day of this AccountData.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this AccountData.

        Day of the month that the account prefers billing periods to begin on. If set to 0, the bill cycle day will be set as \"AutoSet\".  # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this AccountData.  # noqa: E501
        :type: int
        """
        if bill_cycle_day is None:
            raise ValueError("Invalid value for `bill_cycle_day`, must not be `None`")  # noqa: E501

        self._bill_cycle_day = bill_cycle_day

    @property
    def bill_to_contact(self):
        """Gets the bill_to_contact of this AccountData.  # noqa: E501


        :return: The bill_to_contact of this AccountData.  # noqa: E501
        :rtype: ContactInfo
        """
        return self._bill_to_contact

    @bill_to_contact.setter
    def bill_to_contact(self, bill_to_contact):
        """Sets the bill_to_contact of this AccountData.


        :param bill_to_contact: The bill_to_contact of this AccountData.  # noqa: E501
        :type: ContactInfo
        """
        if bill_to_contact is None:
            raise ValueError("Invalid value for `bill_to_contact`, must not be `None`")  # noqa: E501

        self._bill_to_contact = bill_to_contact

    @property
    def communication_profile_id(self):
        """Gets the communication_profile_id of this AccountData.  # noqa: E501


        :return: The communication_profile_id of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._communication_profile_id

    @communication_profile_id.setter
    def communication_profile_id(self, communication_profile_id):
        """Sets the communication_profile_id of this AccountData.


        :param communication_profile_id: The communication_profile_id of this AccountData.  # noqa: E501
        :type: str
        """

        self._communication_profile_id = communication_profile_id

    @property
    def credit_memo_template_id(self):
        """Gets the credit_memo_template_id of this AccountData.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :return: The credit_memo_template_id of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_template_id

    @credit_memo_template_id.setter
    def credit_memo_template_id(self, credit_memo_template_id):
        """Sets the credit_memo_template_id of this AccountData.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the credit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08a6246fdf101626b1b3fe0144b.   # noqa: E501

        :param credit_memo_template_id: The credit_memo_template_id of this AccountData.  # noqa: E501
        :type: str
        """

        self._credit_memo_template_id = credit_memo_template_id

    @property
    def crm_id(self):
        """Gets the crm_id of this AccountData.  # noqa: E501


        :return: The crm_id of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._crm_id

    @crm_id.setter
    def crm_id(self, crm_id):
        """Sets the crm_id of this AccountData.


        :param crm_id: The crm_id of this AccountData.  # noqa: E501
        :type: str
        """

        self._crm_id = crm_id

    @property
    def currency(self):
        """Gets the currency of this AccountData.  # noqa: E501

        3 uppercase character currency code.  For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :return: The currency of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountData.

        3 uppercase character currency code.  For payment method authorization, if the `paymentMethod` > `currencyCode` field is specified, `currencyCode` is used. Otherwise, this `currency` field is used for payment method authorization. If no currency is specified for the account, the default currency of the account is then used.   # noqa: E501

        :param currency: The currency of this AccountData.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this AccountData.  # noqa: E501

        Container for custom fields.   # noqa: E501

        :return: The custom_fields of this AccountData.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this AccountData.

        Container for custom fields.   # noqa: E501

        :param custom_fields: The custom_fields of this AccountData.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def debit_memo_template_id(self):
        """Gets the debit_memo_template_id of this AccountData.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :return: The debit_memo_template_id of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._debit_memo_template_id

    @debit_memo_template_id.setter
    def debit_memo_template_id(self, debit_memo_template_id):
        """Sets the debit_memo_template_id of this AccountData.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  The unique ID of the debit memo template, configured in **Billing Settings** > **Manage Billing Document Configuration** through the Zuora UI. For example, 2c92c08d62470a8501626b19d24f19e2.   # noqa: E501

        :param debit_memo_template_id: The debit_memo_template_id of this AccountData.  # noqa: E501
        :type: str
        """

        self._debit_memo_template_id = debit_memo_template_id

    @property
    def invoice_template_id(self):
        """Gets the invoice_template_id of this AccountData.  # noqa: E501


        :return: The invoice_template_id of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._invoice_template_id

    @invoice_template_id.setter
    def invoice_template_id(self, invoice_template_id):
        """Sets the invoice_template_id of this AccountData.


        :param invoice_template_id: The invoice_template_id of this AccountData.  # noqa: E501
        :type: str
        """

        self._invoice_template_id = invoice_template_id

    @property
    def name(self):
        """Gets the name of this AccountData.  # noqa: E501


        :return: The name of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountData.


        :param name: The name of this AccountData.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this AccountData.  # noqa: E501


        :return: The notes of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this AccountData.


        :param notes: The notes of this AccountData.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def payment_method(self):
        """Gets the payment_method of this AccountData.  # noqa: E501


        :return: The payment_method of this AccountData.  # noqa: E501
        :rtype: SignUpPaymentMethod
        """
        return self._payment_method

    @payment_method.setter
    def payment_method(self, payment_method):
        """Sets the payment_method of this AccountData.


        :param payment_method: The payment_method of this AccountData.  # noqa: E501
        :type: SignUpPaymentMethod
        """

        self._payment_method = payment_method

    @property
    def payment_term(self):
        """Gets the payment_term of this AccountData.  # noqa: E501


        :return: The payment_term of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this AccountData.


        :param payment_term: The payment_term of this AccountData.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this AccountData.  # noqa: E501

        The number of the purchase order associated with this account. Purchase order information generally comes from customers.   # noqa: E501

        :return: The purchase_order_number of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this AccountData.

        The number of the purchase order associated with this account. Purchase order information generally comes from customers.   # noqa: E501

        :param purchase_order_number: The purchase_order_number of this AccountData.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def sequence_set_id(self):
        """Gets the sequence_set_id of this AccountData.  # noqa: E501

        The ID of the billing document sequence set to assign to the customer account.   The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.   # noqa: E501

        :return: The sequence_set_id of this AccountData.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_id

    @sequence_set_id.setter
    def sequence_set_id(self, sequence_set_id):
        """Sets the sequence_set_id of this AccountData.

        The ID of the billing document sequence set to assign to the customer account.   The billing documents to generate for this account will adopt the prefix and starting document number configured in the sequence set.   # noqa: E501

        :param sequence_set_id: The sequence_set_id of this AccountData.  # noqa: E501
        :type: str
        """

        self._sequence_set_id = sequence_set_id

    @property
    def sold_to_contact(self):
        """Gets the sold_to_contact of this AccountData.  # noqa: E501


        :return: The sold_to_contact of this AccountData.  # noqa: E501
        :rtype: ContactInfo
        """
        return self._sold_to_contact

    @sold_to_contact.setter
    def sold_to_contact(self, sold_to_contact):
        """Sets the sold_to_contact of this AccountData.


        :param sold_to_contact: The sold_to_contact of this AccountData.  # noqa: E501
        :type: ContactInfo
        """

        self._sold_to_contact = sold_to_contact

    @property
    def tax_info(self):
        """Gets the tax_info of this AccountData.  # noqa: E501


        :return: The tax_info of this AccountData.  # noqa: E501
        :rtype: SignUpTaxInfo
        """
        return self._tax_info

    @tax_info.setter
    def tax_info(self, tax_info):
        """Sets the tax_info of this AccountData.


        :param tax_info: The tax_info of this AccountData.  # noqa: E501
        :type: SignUpTaxInfo
        """

        self._tax_info = tax_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
