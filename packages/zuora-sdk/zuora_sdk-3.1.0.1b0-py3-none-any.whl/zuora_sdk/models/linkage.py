# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Linkage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'linkage_type': 'LinkageLinkageType',
        'source_task_id': 'int',
        'source_workflow_id': 'int',
        'target_task_id': 'int'
    }

    attribute_map = {
        'linkage_type': 'linkage_type',
        'source_task_id': 'source_task_id',
        'source_workflow_id': 'source_workflow_id',
        'target_task_id': 'target_task_id'
    }

    def __init__(self, linkage_type=None, source_task_id=None, source_workflow_id=None, target_task_id=None):  # noqa: E501
        """Linkage - a model defined in Swagger"""  # noqa: E501
        self._linkage_type = None
        self._source_task_id = None
        self._source_workflow_id = None
        self._target_task_id = None
        self.discriminator = None
        if linkage_type is not None:
            self.linkage_type = linkage_type
        if source_task_id is not None:
            self.source_task_id = source_task_id
        if source_workflow_id is not None:
            self.source_workflow_id = source_workflow_id
        if target_task_id is not None:
            self.target_task_id = target_task_id

    @property
    def linkage_type(self):
        """Gets the linkage_type of this Linkage.  # noqa: E501


        :return: The linkage_type of this Linkage.  # noqa: E501
        :rtype: LinkageLinkageType
        """
        return self._linkage_type

    @linkage_type.setter
    def linkage_type(self, linkage_type):
        """Sets the linkage_type of this Linkage.


        :param linkage_type: The linkage_type of this Linkage.  # noqa: E501
        :type: LinkageLinkageType
        """

        self._linkage_type = linkage_type

    @property
    def source_task_id(self):
        """Gets the source_task_id of this Linkage.  # noqa: E501

        the task that spawned the target task  # noqa: E501

        :return: The source_task_id of this Linkage.  # noqa: E501
        :rtype: int
        """
        return self._source_task_id

    @source_task_id.setter
    def source_task_id(self, source_task_id):
        """Sets the source_task_id of this Linkage.

        the task that spawned the target task  # noqa: E501

        :param source_task_id: The source_task_id of this Linkage.  # noqa: E501
        :type: int
        """

        self._source_task_id = source_task_id

    @property
    def source_workflow_id(self):
        """Gets the source_workflow_id of this Linkage.  # noqa: E501

        the workflow the target task is associated with  # noqa: E501

        :return: The source_workflow_id of this Linkage.  # noqa: E501
        :rtype: int
        """
        return self._source_workflow_id

    @source_workflow_id.setter
    def source_workflow_id(self, source_workflow_id):
        """Sets the source_workflow_id of this Linkage.

        the workflow the target task is associated with  # noqa: E501

        :param source_workflow_id: The source_workflow_id of this Linkage.  # noqa: E501
        :type: int
        """

        self._source_workflow_id = source_workflow_id

    @property
    def target_task_id(self):
        """Gets the target_task_id of this Linkage.  # noqa: E501

        the task that the source task is linked to.  # noqa: E501

        :return: The target_task_id of this Linkage.  # noqa: E501
        :rtype: int
        """
        return self._target_task_id

    @target_task_id.setter
    def target_task_id(self, target_task_id):
        """Sets the target_task_id of this Linkage.

        the task that the source task is linked to.  # noqa: E501

        :param target_task_id: The target_task_id of this Linkage.  # noqa: E501
        :type: int
        """

        self._target_task_id = target_task_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Linkage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Linkage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
