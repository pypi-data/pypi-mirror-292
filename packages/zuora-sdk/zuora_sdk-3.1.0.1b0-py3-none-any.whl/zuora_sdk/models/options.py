# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Options(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'billing_target_date': 'date',
        'collect_payment': 'bool',
        'max_subscriptions_per_account': 'float',
        'run_billing': 'bool'
    }

    attribute_map = {
        'billing_target_date': 'billingTargetDate',
        'collect_payment': 'collectPayment',
        'max_subscriptions_per_account': 'maxSubscriptionsPerAccount',
        'run_billing': 'runBilling'
    }

    def __init__(self, billing_target_date=None, collect_payment=None, max_subscriptions_per_account=None, run_billing=None):  # noqa: E501
        """Options - a model defined in Swagger"""  # noqa: E501
        self._billing_target_date = None
        self._collect_payment = None
        self._max_subscriptions_per_account = None
        self._run_billing = None
        self.discriminator = None
        if billing_target_date is not None:
            self.billing_target_date = billing_target_date
        if collect_payment is not None:
            self.collect_payment = collect_payment
        if max_subscriptions_per_account is not None:
            self.max_subscriptions_per_account = max_subscriptions_per_account
        if run_billing is not None:
            self.run_billing = run_billing

    @property
    def billing_target_date(self):
        """Gets the billing_target_date of this Options.  # noqa: E501

        Date through which to calculate charges if an invoice is generated. See [What is a Target Date?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs#What_is_a_Target_Date.3F).  # noqa: E501

        :return: The billing_target_date of this Options.  # noqa: E501
        :rtype: date
        """
        return self._billing_target_date

    @billing_target_date.setter
    def billing_target_date(self, billing_target_date):
        """Sets the billing_target_date of this Options.

        Date through which to calculate charges if an invoice is generated. See [What is a Target Date?](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/G_Bill_Runs/Creating_Bill_Runs#What_is_a_Target_Date.3F).  # noqa: E501

        :param billing_target_date: The billing_target_date of this Options.  # noqa: E501
        :type: date
        """

        self._billing_target_date = billing_target_date

    @property
    def collect_payment(self):
        """Gets the collect_payment of this Options.  # noqa: E501

        Indicates if the current request needs to collect payments. This value can not be 'true' when 'runBilling' flag is 'false'.  # noqa: E501

        :return: The collect_payment of this Options.  # noqa: E501
        :rtype: bool
        """
        return self._collect_payment

    @collect_payment.setter
    def collect_payment(self, collect_payment):
        """Sets the collect_payment of this Options.

        Indicates if the current request needs to collect payments. This value can not be 'true' when 'runBilling' flag is 'false'.  # noqa: E501

        :param collect_payment: The collect_payment of this Options.  # noqa: E501
        :type: bool
        """

        self._collect_payment = collect_payment

    @property
    def max_subscriptions_per_account(self):
        """Gets the max_subscriptions_per_account of this Options.  # noqa: E501


        :return: The max_subscriptions_per_account of this Options.  # noqa: E501
        :rtype: float
        """
        return self._max_subscriptions_per_account

    @max_subscriptions_per_account.setter
    def max_subscriptions_per_account(self, max_subscriptions_per_account):
        """Sets the max_subscriptions_per_account of this Options.


        :param max_subscriptions_per_account: The max_subscriptions_per_account of this Options.  # noqa: E501
        :type: float
        """

        self._max_subscriptions_per_account = max_subscriptions_per_account

    @property
    def run_billing(self):
        """Gets the run_billing of this Options.  # noqa: E501

        Indicates if the current request needs to generate an invoice. The invoice will be generated against all subscriptions included in this order.  # noqa: E501

        :return: The run_billing of this Options.  # noqa: E501
        :rtype: bool
        """
        return self._run_billing

    @run_billing.setter
    def run_billing(self, run_billing):
        """Sets the run_billing of this Options.

        Indicates if the current request needs to generate an invoice. The invoice will be generated against all subscriptions included in this order.  # noqa: E501

        :param run_billing: The run_billing of this Options.  # noqa: E501
        :type: bool
        """

        self._run_billing = run_billing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Options, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Options):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
