# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RefundCreditMemoResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'amount': 'float',
        'cancelled_on': 'str',
        'comment': 'str',
        'created_by_id': 'str',
        'created_date': 'str',
        'credit_memo_id': 'str',
        'finance_information': 'GetRefundCreditMemoFinanceInformation',
        'gateway_id': 'str',
        'gateway_response': 'str',
        'gateway_response_code': 'str',
        'gateway_state': 'GatewayState',
        'id': 'str',
        'marked_for_submission_on': 'str',
        'method_type': 'PaymentMethodType',
        'number': 'str',
        'payment_id': 'str',
        'payment_method_id': 'str',
        'payment_method_snapshot_id': 'str',
        'reason_code': 'str',
        'reference_id': 'str',
        'refund_date': 'str',
        'refund_transaction_time': 'str',
        'second_refund_reference_id': 'str',
        'settled_on': 'datetime',
        'soft_descriptor': 'str',
        'soft_descriptor_phone': 'str',
        'status': 'str',
        'submitted_on': 'str',
        'success': 'bool',
        'type': 'str',
        'updated_by_id': 'str',
        'updated_date': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'origin__ns': 'str',
        'sync_date__ns': 'str',
        'syncto_net_suite__ns': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'amount': 'amount',
        'cancelled_on': 'cancelledOn',
        'comment': 'comment',
        'created_by_id': 'createdById',
        'created_date': 'createdDate',
        'credit_memo_id': 'creditMemoId',
        'finance_information': 'financeInformation',
        'gateway_id': 'gatewayId',
        'gateway_response': 'gatewayResponse',
        'gateway_response_code': 'gatewayResponseCode',
        'gateway_state': 'gatewayState',
        'id': 'id',
        'marked_for_submission_on': 'markedForSubmissionOn',
        'method_type': 'methodType',
        'number': 'number',
        'payment_id': 'paymentId',
        'payment_method_id': 'paymentMethodId',
        'payment_method_snapshot_id': 'paymentMethodSnapshotId',
        'reason_code': 'reasonCode',
        'reference_id': 'referenceId',
        'refund_date': 'refundDate',
        'refund_transaction_time': 'refundTransactionTime',
        'second_refund_reference_id': 'secondRefundReferenceId',
        'settled_on': 'settledOn',
        'soft_descriptor': 'softDescriptor',
        'soft_descriptor_phone': 'softDescriptorPhone',
        'status': 'status',
        'submitted_on': 'submittedOn',
        'success': 'success',
        'type': 'type',
        'updated_by_id': 'updatedById',
        'updated_date': 'updatedDate',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'origin__ns': 'Origin__NS',
        'sync_date__ns': 'SyncDate__NS',
        'syncto_net_suite__ns': 'SynctoNetSuite__NS'
    }

    def __init__(self, account_id=None, amount=None, cancelled_on=None, comment=None, created_by_id=None, created_date=None, credit_memo_id=None, finance_information=None, gateway_id=None, gateway_response=None, gateway_response_code=None, gateway_state=None, id=None, marked_for_submission_on=None, method_type=None, number=None, payment_id=None, payment_method_id=None, payment_method_snapshot_id=None, reason_code=None, reference_id=None, refund_date=None, refund_transaction_time=None, second_refund_reference_id=None, settled_on=None, soft_descriptor=None, soft_descriptor_phone=None, status=None, submitted_on=None, success=None, type=None, updated_by_id=None, updated_date=None, integration_id__ns=None, integration_status__ns=None, origin__ns=None, sync_date__ns=None, syncto_net_suite__ns=None):  # noqa: E501
        """RefundCreditMemoResponse - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._amount = None
        self._cancelled_on = None
        self._comment = None
        self._created_by_id = None
        self._created_date = None
        self._credit_memo_id = None
        self._finance_information = None
        self._gateway_id = None
        self._gateway_response = None
        self._gateway_response_code = None
        self._gateway_state = None
        self._id = None
        self._marked_for_submission_on = None
        self._method_type = None
        self._number = None
        self._payment_id = None
        self._payment_method_id = None
        self._payment_method_snapshot_id = None
        self._reason_code = None
        self._reference_id = None
        self._refund_date = None
        self._refund_transaction_time = None
        self._second_refund_reference_id = None
        self._settled_on = None
        self._soft_descriptor = None
        self._soft_descriptor_phone = None
        self._status = None
        self._submitted_on = None
        self._success = None
        self._type = None
        self._updated_by_id = None
        self._updated_date = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._origin__ns = None
        self._sync_date__ns = None
        self._syncto_net_suite__ns = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if amount is not None:
            self.amount = amount
        if cancelled_on is not None:
            self.cancelled_on = cancelled_on
        if comment is not None:
            self.comment = comment
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if credit_memo_id is not None:
            self.credit_memo_id = credit_memo_id
        if finance_information is not None:
            self.finance_information = finance_information
        if gateway_id is not None:
            self.gateway_id = gateway_id
        if gateway_response is not None:
            self.gateway_response = gateway_response
        if gateway_response_code is not None:
            self.gateway_response_code = gateway_response_code
        if gateway_state is not None:
            self.gateway_state = gateway_state
        if id is not None:
            self.id = id
        if marked_for_submission_on is not None:
            self.marked_for_submission_on = marked_for_submission_on
        if method_type is not None:
            self.method_type = method_type
        if number is not None:
            self.number = number
        if payment_id is not None:
            self.payment_id = payment_id
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if payment_method_snapshot_id is not None:
            self.payment_method_snapshot_id = payment_method_snapshot_id
        if reason_code is not None:
            self.reason_code = reason_code
        if reference_id is not None:
            self.reference_id = reference_id
        if refund_date is not None:
            self.refund_date = refund_date
        if refund_transaction_time is not None:
            self.refund_transaction_time = refund_transaction_time
        if second_refund_reference_id is not None:
            self.second_refund_reference_id = second_refund_reference_id
        if settled_on is not None:
            self.settled_on = settled_on
        if soft_descriptor is not None:
            self.soft_descriptor = soft_descriptor
        if soft_descriptor_phone is not None:
            self.soft_descriptor_phone = soft_descriptor_phone
        if status is not None:
            self.status = status
        if submitted_on is not None:
            self.submitted_on = submitted_on
        if success is not None:
            self.success = success
        if type is not None:
            self.type = type
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if origin__ns is not None:
            self.origin__ns = origin__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if syncto_net_suite__ns is not None:
            self.syncto_net_suite__ns = syncto_net_suite__ns

    @property
    def account_id(self):
        """Gets the account_id of this RefundCreditMemoResponse.  # noqa: E501

        The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.  # noqa: E501

        :return: The account_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this RefundCreditMemoResponse.

        The ID of the account associated with this refund. Zuora associates the refund automatically with the account from the associated payment.  # noqa: E501

        :param account_id: The account_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def amount(self):
        """Gets the amount of this RefundCreditMemoResponse.  # noqa: E501

        The total amount of the refund.  # noqa: E501

        :return: The amount of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RefundCreditMemoResponse.

        The total amount of the refund.  # noqa: E501

        :param amount: The amount of this RefundCreditMemoResponse.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def cancelled_on(self):
        """Gets the cancelled_on of this RefundCreditMemoResponse.  # noqa: E501

        The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The cancelled_on of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_on

    @cancelled_on.setter
    def cancelled_on(self, cancelled_on):
        """Sets the cancelled_on of this RefundCreditMemoResponse.

        The date and time when the refund was cancelled, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param cancelled_on: The cancelled_on of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._cancelled_on = cancelled_on

    @property
    def comment(self):
        """Gets the comment of this RefundCreditMemoResponse.  # noqa: E501

        Comments about the refund.  # noqa: E501

        :return: The comment of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this RefundCreditMemoResponse.

        Comments about the refund.  # noqa: E501

        :param comment: The comment of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by_id(self):
        """Gets the created_by_id of this RefundCreditMemoResponse.  # noqa: E501

        The ID of the Zuora user who created the refund.  # noqa: E501

        :return: The created_by_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this RefundCreditMemoResponse.

        The ID of the Zuora user who created the refund.  # noqa: E501

        :param created_by_id: The created_by_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this RefundCreditMemoResponse.  # noqa: E501

        The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-06 15:31:10.  # noqa: E501

        :return: The created_date of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this RefundCreditMemoResponse.

        The date and time when the refund was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-06 15:31:10.  # noqa: E501

        :param created_date: The created_date of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def credit_memo_id(self):
        """Gets the credit_memo_id of this RefundCreditMemoResponse.  # noqa: E501

        The ID of the credit memo that is refunded.  # noqa: E501

        :return: The credit_memo_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_id

    @credit_memo_id.setter
    def credit_memo_id(self, credit_memo_id):
        """Sets the credit_memo_id of this RefundCreditMemoResponse.

        The ID of the credit memo that is refunded.  # noqa: E501

        :param credit_memo_id: The credit_memo_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._credit_memo_id = credit_memo_id

    @property
    def finance_information(self):
        """Gets the finance_information of this RefundCreditMemoResponse.  # noqa: E501


        :return: The finance_information of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: GetRefundCreditMemoFinanceInformation
        """
        return self._finance_information

    @finance_information.setter
    def finance_information(self, finance_information):
        """Sets the finance_information of this RefundCreditMemoResponse.


        :param finance_information: The finance_information of this RefundCreditMemoResponse.  # noqa: E501
        :type: GetRefundCreditMemoFinanceInformation
        """

        self._finance_information = finance_information

    @property
    def gateway_id(self):
        """Gets the gateway_id of this RefundCreditMemoResponse.  # noqa: E501

        The ID of the gateway instance that processes the refund.  # noqa: E501

        :return: The gateway_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._gateway_id

    @gateway_id.setter
    def gateway_id(self, gateway_id):
        """Sets the gateway_id of this RefundCreditMemoResponse.

        The ID of the gateway instance that processes the refund.  # noqa: E501

        :param gateway_id: The gateway_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._gateway_id = gateway_id

    @property
    def gateway_response(self):
        """Gets the gateway_response of this RefundCreditMemoResponse.  # noqa: E501

        The message returned from the payment gateway for the refund. This message is gateway-dependent.  # noqa: E501

        :return: The gateway_response of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response

    @gateway_response.setter
    def gateway_response(self, gateway_response):
        """Sets the gateway_response of this RefundCreditMemoResponse.

        The message returned from the payment gateway for the refund. This message is gateway-dependent.  # noqa: E501

        :param gateway_response: The gateway_response of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._gateway_response = gateway_response

    @property
    def gateway_response_code(self):
        """Gets the gateway_response_code of this RefundCreditMemoResponse.  # noqa: E501

        The response code returned from the payment gateway for the refund. This code is gateway-dependent.  # noqa: E501

        :return: The gateway_response_code of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response_code

    @gateway_response_code.setter
    def gateway_response_code(self, gateway_response_code):
        """Sets the gateway_response_code of this RefundCreditMemoResponse.

        The response code returned from the payment gateway for the refund. This code is gateway-dependent.  # noqa: E501

        :param gateway_response_code: The gateway_response_code of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._gateway_response_code = gateway_response_code

    @property
    def gateway_state(self):
        """Gets the gateway_state of this RefundCreditMemoResponse.  # noqa: E501


        :return: The gateway_state of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: GatewayState
        """
        return self._gateway_state

    @gateway_state.setter
    def gateway_state(self, gateway_state):
        """Sets the gateway_state of this RefundCreditMemoResponse.


        :param gateway_state: The gateway_state of this RefundCreditMemoResponse.  # noqa: E501
        :type: GatewayState
        """

        self._gateway_state = gateway_state

    @property
    def id(self):
        """Gets the id of this RefundCreditMemoResponse.  # noqa: E501

        The ID of the created refund.  # noqa: E501

        :return: The id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RefundCreditMemoResponse.

        The ID of the created refund.  # noqa: E501

        :param id: The id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def marked_for_submission_on(self):
        """Gets the marked_for_submission_on of this RefundCreditMemoResponse.  # noqa: E501

        The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The marked_for_submission_on of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._marked_for_submission_on

    @marked_for_submission_on.setter
    def marked_for_submission_on(self, marked_for_submission_on):
        """Sets the marked_for_submission_on of this RefundCreditMemoResponse.

        The date and time when a refund was marked and waiting for batch submission to the payment process, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param marked_for_submission_on: The marked_for_submission_on of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._marked_for_submission_on = marked_for_submission_on

    @property
    def method_type(self):
        """Gets the method_type of this RefundCreditMemoResponse.  # noqa: E501


        :return: The method_type of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: PaymentMethodType
        """
        return self._method_type

    @method_type.setter
    def method_type(self, method_type):
        """Sets the method_type of this RefundCreditMemoResponse.


        :param method_type: The method_type of this RefundCreditMemoResponse.  # noqa: E501
        :type: PaymentMethodType
        """

        self._method_type = method_type

    @property
    def number(self):
        """Gets the number of this RefundCreditMemoResponse.  # noqa: E501

        The unique identification number of the refund.  # noqa: E501

        :return: The number of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this RefundCreditMemoResponse.

        The unique identification number of the refund.  # noqa: E501

        :param number: The number of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def payment_id(self):
        """Gets the payment_id of this RefundCreditMemoResponse.  # noqa: E501

        The ID of the payment associated with the refund.  # noqa: E501

        :return: The payment_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this RefundCreditMemoResponse.

        The ID of the payment associated with the refund.  # noqa: E501

        :param payment_id: The payment_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._payment_id = payment_id

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this RefundCreditMemoResponse.  # noqa: E501

        The unique ID of the payment method that the customer used to make the refund.  # noqa: E501

        :return: The payment_method_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this RefundCreditMemoResponse.

        The unique ID of the payment method that the customer used to make the refund.  # noqa: E501

        :param payment_method_id: The payment_method_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def payment_method_snapshot_id(self):
        """Gets the payment_method_snapshot_id of this RefundCreditMemoResponse.  # noqa: E501

        The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.  # noqa: E501

        :return: The payment_method_snapshot_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_snapshot_id

    @payment_method_snapshot_id.setter
    def payment_method_snapshot_id(self, payment_method_snapshot_id):
        """Sets the payment_method_snapshot_id of this RefundCreditMemoResponse.

        The unique ID of the payment method snapshot, which is a copy of the particular payment method used in a transaction.  # noqa: E501

        :param payment_method_snapshot_id: The payment_method_snapshot_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._payment_method_snapshot_id = payment_method_snapshot_id

    @property
    def reason_code(self):
        """Gets the reason_code of this RefundCreditMemoResponse.  # noqa: E501

        A code identifying the reason for the transaction.  # noqa: E501

        :return: The reason_code of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this RefundCreditMemoResponse.

        A code identifying the reason for the transaction.  # noqa: E501

        :param reason_code: The reason_code of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def reference_id(self):
        """Gets the reference_id of this RefundCreditMemoResponse.  # noqa: E501

        The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.  # noqa: E501

        :return: The reference_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this RefundCreditMemoResponse.

        The transaction ID returned by the payment gateway for an electronic refund. Use this field to reconcile refunds between your gateway and Zuora Payments.  # noqa: E501

        :param reference_id: The reference_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def refund_date(self):
        """Gets the refund_date of this RefundCreditMemoResponse.  # noqa: E501

        The date when the refund takes effect, in yyyy-mm-dd format.  # noqa: E501

        :return: The refund_date of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._refund_date

    @refund_date.setter
    def refund_date(self, refund_date):
        """Sets the refund_date of this RefundCreditMemoResponse.

        The date when the refund takes effect, in yyyy-mm-dd format.  # noqa: E501

        :param refund_date: The refund_date of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._refund_date = refund_date

    @property
    def refund_transaction_time(self):
        """Gets the refund_transaction_time of this RefundCreditMemoResponse.  # noqa: E501

        The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The refund_transaction_time of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._refund_transaction_time

    @refund_transaction_time.setter
    def refund_transaction_time(self, refund_transaction_time):
        """Sets the refund_transaction_time of this RefundCreditMemoResponse.

        The date and time when the refund was issued, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param refund_transaction_time: The refund_transaction_time of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._refund_transaction_time = refund_transaction_time

    @property
    def second_refund_reference_id(self):
        """Gets the second_refund_reference_id of this RefundCreditMemoResponse.  # noqa: E501

        The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.  # noqa: E501

        :return: The second_refund_reference_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._second_refund_reference_id

    @second_refund_reference_id.setter
    def second_refund_reference_id(self, second_refund_reference_id):
        """Sets the second_refund_reference_id of this RefundCreditMemoResponse.

        The transaction ID returned by the payment gateway if there is an additional transaction for the refund. Use this field to reconcile payments between your gateway and Zuora Payments.  # noqa: E501

        :param second_refund_reference_id: The second_refund_reference_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._second_refund_reference_id = second_refund_reference_id

    @property
    def settled_on(self):
        """Gets the settled_on of this RefundCreditMemoResponse.  # noqa: E501

        The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.  # noqa: E501

        :return: The settled_on of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._settled_on

    @settled_on.setter
    def settled_on(self, settled_on):
        """Sets the settled_on of this RefundCreditMemoResponse.

        The date and time when the refund was settled in the payment processor, in `yyyy-mm-dd hh:mm:ss` format. This field is used by the Spectrum gateway only and not applicable to other gateways.  # noqa: E501

        :param settled_on: The settled_on of this RefundCreditMemoResponse.  # noqa: E501
        :type: datetime
        """

        self._settled_on = settled_on

    @property
    def soft_descriptor(self):
        """Gets the soft_descriptor of this RefundCreditMemoResponse.  # noqa: E501

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.  # noqa: E501

        :return: The soft_descriptor of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor

    @soft_descriptor.setter
    def soft_descriptor(self, soft_descriptor):
        """Sets the soft_descriptor of this RefundCreditMemoResponse.

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.  # noqa: E501

        :param soft_descriptor: The soft_descriptor of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._soft_descriptor = soft_descriptor

    @property
    def soft_descriptor_phone(self):
        """Gets the soft_descriptor_phone of this RefundCreditMemoResponse.  # noqa: E501

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.  # noqa: E501

        :return: The soft_descriptor_phone of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._soft_descriptor_phone

    @soft_descriptor_phone.setter
    def soft_descriptor_phone(self, soft_descriptor_phone):
        """Sets the soft_descriptor_phone of this RefundCreditMemoResponse.

        A payment gateway-specific field that maps to Zuora for the gateways, Orbital, Vantiv and Verifi.  # noqa: E501

        :param soft_descriptor_phone: The soft_descriptor_phone of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._soft_descriptor_phone = soft_descriptor_phone

    @property
    def status(self):
        """Gets the status of this RefundCreditMemoResponse.  # noqa: E501

        The status of the refund.  # noqa: E501

        :return: The status of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this RefundCreditMemoResponse.

        The status of the refund.  # noqa: E501

        :param status: The status of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Processed", "Canceled", "Error", "Processing"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submitted_on(self):
        """Gets the submitted_on of this RefundCreditMemoResponse.  # noqa: E501

        The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The submitted_on of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._submitted_on

    @submitted_on.setter
    def submitted_on(self, submitted_on):
        """Sets the submitted_on of this RefundCreditMemoResponse.

        The date and time when the refund was submitted, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param submitted_on: The submitted_on of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._submitted_on = submitted_on

    @property
    def success(self):
        """Gets the success of this RefundCreditMemoResponse.  # noqa: E501

        Returns `true` if the request was processed successfully.  # noqa: E501

        :return: The success of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this RefundCreditMemoResponse.

        Returns `true` if the request was processed successfully.  # noqa: E501

        :param success: The success of this RefundCreditMemoResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def type(self):
        """Gets the type of this RefundCreditMemoResponse.  # noqa: E501

        The type of the refund.  # noqa: E501

        :return: The type of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RefundCreditMemoResponse.

        The type of the refund.  # noqa: E501

        :param type: The type of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["External", "Electronic"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this RefundCreditMemoResponse.  # noqa: E501

        The ID of the Zuora user who last updated the refund.  # noqa: E501

        :return: The updated_by_id of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this RefundCreditMemoResponse.

        The ID of the Zuora user who last updated the refund.  # noqa: E501

        :param updated_by_id: The updated_by_id of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this RefundCreditMemoResponse.  # noqa: E501

        The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-07 15:36:10.  # noqa: E501

        :return: The updated_date of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this RefundCreditMemoResponse.

        The date and time when the refund was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-07 15:36:10.  # noqa: E501

        :param updated_date: The updated_date of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this RefundCreditMemoResponse.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this RefundCreditMemoResponse.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this RefundCreditMemoResponse.  # noqa: E501

        Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this RefundCreditMemoResponse.

        Status of the refund's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def origin__ns(self):
        """Gets the origin__ns of this RefundCreditMemoResponse.  # noqa: E501

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The origin__ns of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._origin__ns

    @origin__ns.setter
    def origin__ns(self, origin__ns):
        """Sets the origin__ns of this RefundCreditMemoResponse.

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param origin__ns: The origin__ns of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._origin__ns = origin__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this RefundCreditMemoResponse.  # noqa: E501

        Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this RefundCreditMemoResponse.

        Date when the refund was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    @property
    def syncto_net_suite__ns(self):
        """Gets the syncto_net_suite__ns of this RefundCreditMemoResponse.  # noqa: E501

        Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The syncto_net_suite__ns of this RefundCreditMemoResponse.  # noqa: E501
        :rtype: str
        """
        return self._syncto_net_suite__ns

    @syncto_net_suite__ns.setter
    def syncto_net_suite__ns(self, syncto_net_suite__ns):
        """Sets the syncto_net_suite__ns of this RefundCreditMemoResponse.

        Specifies whether the refund should be synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param syncto_net_suite__ns: The syncto_net_suite__ns of this RefundCreditMemoResponse.  # noqa: E501
        :type: str
        """

        self._syncto_net_suite__ns = syncto_net_suite__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RefundCreditMemoResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RefundCreditMemoResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
