# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PaymentMethodUpdaterInstanceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'days_to_update_before_bcd': 'int',
        'id': 'str',
        'is_active': 'bool',
        'is_default': 'bool',
        'is_test': 'str',
        'process_associated_gw_only': 'bool',
        'process_autopay_default_pm_only': 'bool',
        'process_mastercard': 'bool',
        'process_visa': 'bool',
        'updater_gateway_type': 'str',
        'updater_name': 'str'
    }

    attribute_map = {
        'days_to_update_before_bcd': 'daysToUpdateBeforeBcd',
        'id': 'id',
        'is_active': 'isActive',
        'is_default': 'isDefault',
        'is_test': 'isTest',
        'process_associated_gw_only': 'processAssociatedGwOnly',
        'process_autopay_default_pm_only': 'processAutopayDefaultPmOnly',
        'process_mastercard': 'processMastercard',
        'process_visa': 'processVisa',
        'updater_gateway_type': 'updaterGatewayType',
        'updater_name': 'updaterName'
    }

    def __init__(self, days_to_update_before_bcd=None, id=None, is_active=None, is_default=None, is_test=None, process_associated_gw_only=None, process_autopay_default_pm_only=None, process_mastercard=None, process_visa=None, updater_gateway_type=None, updater_name=None):  # noqa: E501
        """PaymentMethodUpdaterInstanceResponse - a model defined in Swagger"""  # noqa: E501
        self._days_to_update_before_bcd = None
        self._id = None
        self._is_active = None
        self._is_default = None
        self._is_test = None
        self._process_associated_gw_only = None
        self._process_autopay_default_pm_only = None
        self._process_mastercard = None
        self._process_visa = None
        self._updater_gateway_type = None
        self._updater_name = None
        self.discriminator = None
        if days_to_update_before_bcd is not None:
            self.days_to_update_before_bcd = days_to_update_before_bcd
        if id is not None:
            self.id = id
        if is_active is not None:
            self.is_active = is_active
        if is_default is not None:
            self.is_default = is_default
        if is_test is not None:
            self.is_test = is_test
        if process_associated_gw_only is not None:
            self.process_associated_gw_only = process_associated_gw_only
        if process_autopay_default_pm_only is not None:
            self.process_autopay_default_pm_only = process_autopay_default_pm_only
        if process_mastercard is not None:
            self.process_mastercard = process_mastercard
        if process_visa is not None:
            self.process_visa = process_visa
        if updater_gateway_type is not None:
            self.updater_gateway_type = updater_gateway_type
        if updater_name is not None:
            self.updater_name = updater_name

    @property
    def days_to_update_before_bcd(self):
        """Gets the days_to_update_before_bcd of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        The days prior to the Bill Cycle Day to start PMU service.   # noqa: E501

        :return: The days_to_update_before_bcd of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: int
        """
        return self._days_to_update_before_bcd

    @days_to_update_before_bcd.setter
    def days_to_update_before_bcd(self, days_to_update_before_bcd):
        """Sets the days_to_update_before_bcd of this PaymentMethodUpdaterInstanceResponse.

        The days prior to the Bill Cycle Day to start PMU service.   # noqa: E501

        :param days_to_update_before_bcd: The days_to_update_before_bcd of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: int
        """

        self._days_to_update_before_bcd = days_to_update_before_bcd

    @property
    def id(self):
        """Gets the id of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        The ID of the PMU instance.   # noqa: E501

        :return: The id of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentMethodUpdaterInstanceResponse.

        The ID of the PMU instance.   # noqa: E501

        :param id: The id of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_active(self):
        """Gets the is_active of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        `true` indicates that this PMU instance is active.   # noqa: E501

        :return: The is_active of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active):
        """Sets the is_active of this PaymentMethodUpdaterInstanceResponse.

        `true` indicates that this PMU instance is active.   # noqa: E501

        :param is_active: The is_active of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: bool
        """

        self._is_active = is_active

    @property
    def is_default(self):
        """Gets the is_default of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        `true` indicates that it is the default PMU instance.   # noqa: E501

        :return: The is_default of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this PaymentMethodUpdaterInstanceResponse.

        `true` indicates that it is the default PMU instance.   # noqa: E501

        :param is_default: The is_default of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def is_test(self):
        """Gets the is_test of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        `true` indicates that this PMU instance is for testing.   # noqa: E501

        :return: The is_test of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this PaymentMethodUpdaterInstanceResponse.

        `true` indicates that this PMU instance is for testing.   # noqa: E501

        :param is_test: The is_test of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: str
        """

        self._is_test = is_test

    @property
    def process_associated_gw_only(self):
        """Gets the process_associated_gw_only of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        `true` indicates that only the payment methods for customer accounts that meet either of the following conditions are included in the updates:   - The default payment gateway of the customer account is set to an instance of the same type as `updaterGatewayType`.   - The default payment gateway of the customer account is not configured, but the default payment gateway of the tenant is set to an instance of the same type as `updaterGatewayType`.  `false` indicates that information of all payment methods is submitted.   # noqa: E501

        :return: The process_associated_gw_only of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._process_associated_gw_only

    @process_associated_gw_only.setter
    def process_associated_gw_only(self, process_associated_gw_only):
        """Sets the process_associated_gw_only of this PaymentMethodUpdaterInstanceResponse.

        `true` indicates that only the payment methods for customer accounts that meet either of the following conditions are included in the updates:   - The default payment gateway of the customer account is set to an instance of the same type as `updaterGatewayType`.   - The default payment gateway of the customer account is not configured, but the default payment gateway of the tenant is set to an instance of the same type as `updaterGatewayType`.  `false` indicates that information of all payment methods is submitted.   # noqa: E501

        :param process_associated_gw_only: The process_associated_gw_only of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: bool
        """

        self._process_associated_gw_only = process_associated_gw_only

    @property
    def process_autopay_default_pm_only(self):
        """Gets the process_autopay_default_pm_only of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        `true` indicates that only the default payment methods for customer accounts with the AutoPay setting enabled are included in the updates.   `false` indicates that data of all payment methods for all customer accounts is submitted, regardless of whether AutoPay is enabled for the customer account or not.   # noqa: E501

        :return: The process_autopay_default_pm_only of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._process_autopay_default_pm_only

    @process_autopay_default_pm_only.setter
    def process_autopay_default_pm_only(self, process_autopay_default_pm_only):
        """Sets the process_autopay_default_pm_only of this PaymentMethodUpdaterInstanceResponse.

        `true` indicates that only the default payment methods for customer accounts with the AutoPay setting enabled are included in the updates.   `false` indicates that data of all payment methods for all customer accounts is submitted, regardless of whether AutoPay is enabled for the customer account or not.   # noqa: E501

        :param process_autopay_default_pm_only: The process_autopay_default_pm_only of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: bool
        """

        self._process_autopay_default_pm_only = process_autopay_default_pm_only

    @property
    def process_mastercard(self):
        """Gets the process_mastercard of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        `true` indicates that Mastercard data processing is supported.   # noqa: E501

        :return: The process_mastercard of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._process_mastercard

    @process_mastercard.setter
    def process_mastercard(self, process_mastercard):
        """Sets the process_mastercard of this PaymentMethodUpdaterInstanceResponse.

        `true` indicates that Mastercard data processing is supported.   # noqa: E501

        :param process_mastercard: The process_mastercard of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: bool
        """

        self._process_mastercard = process_mastercard

    @property
    def process_visa(self):
        """Gets the process_visa of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        `true` indicates that Visa data processing is supported.   # noqa: E501

        :return: The process_visa of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: bool
        """
        return self._process_visa

    @process_visa.setter
    def process_visa(self, process_visa):
        """Sets the process_visa of this PaymentMethodUpdaterInstanceResponse.

        `true` indicates that Visa data processing is supported.   # noqa: E501

        :param process_visa: The process_visa of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: bool
        """

        self._process_visa = process_visa

    @property
    def updater_gateway_type(self):
        """Gets the updater_gateway_type of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        The payment gateway type of the PMU instance.   # noqa: E501

        :return: The updater_gateway_type of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._updater_gateway_type

    @updater_gateway_type.setter
    def updater_gateway_type(self, updater_gateway_type):
        """Sets the updater_gateway_type of this PaymentMethodUpdaterInstanceResponse.

        The payment gateway type of the PMU instance.   # noqa: E501

        :param updater_gateway_type: The updater_gateway_type of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: str
        """

        self._updater_gateway_type = updater_gateway_type

    @property
    def updater_name(self):
        """Gets the updater_name of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501

        The name of the PMU instance.   # noqa: E501

        :return: The updater_name of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :rtype: str
        """
        return self._updater_name

    @updater_name.setter
    def updater_name(self, updater_name):
        """Sets the updater_name of this PaymentMethodUpdaterInstanceResponse.

        The name of the PMU instance.   # noqa: E501

        :param updater_name: The updater_name of this PaymentMethodUpdaterInstanceResponse.  # noqa: E501
        :type: str
        """

        self._updater_name = updater_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaymentMethodUpdaterInstanceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentMethodUpdaterInstanceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
