# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date': 'date',
        'id': 'str',
        'order_action_id': 'str',
        'quantity': 'float',
        'sc_id': 'str',
        'start_date': 'date'
    }

    attribute_map = {
        'end_date': 'endDate',
        'id': 'id',
        'order_action_id': 'orderActionId',
        'quantity': 'quantity',
        'sc_id': 'scId',
        'start_date': 'startDate'
    }

    def __init__(self, end_date=None, id=None, order_action_id=None, quantity=None, sc_id=None, start_date=None):  # noqa: E501
        """OrderItem - a model defined in Swagger"""  # noqa: E501
        self._end_date = None
        self._id = None
        self._order_action_id = None
        self._quantity = None
        self._sc_id = None
        self._start_date = None
        self.discriminator = None
        if end_date is not None:
            self.end_date = end_date
        if id is not None:
            self.id = id
        if order_action_id is not None:
            self.order_action_id = order_action_id
        if quantity is not None:
            self.quantity = quantity
        if sc_id is not None:
            self.sc_id = sc_id
        if start_date is not None:
            self.start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this OrderItem.  # noqa: E501

        The order item's effective end date, aligned with the end date of an increased quantity order metrics.  # noqa: E501

        :return: The end_date of this OrderItem.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this OrderItem.

        The order item's effective end date, aligned with the end date of an increased quantity order metrics.  # noqa: E501

        :param end_date: The end_date of this OrderItem.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def id(self):
        """Gets the id of this OrderItem.  # noqa: E501

        The ID of the order item.  # noqa: E501

        :return: The id of this OrderItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrderItem.

        The ID of the order item.  # noqa: E501

        :param id: The id of this OrderItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def order_action_id(self):
        """Gets the order_action_id of this OrderItem.  # noqa: E501

        Specify the order action that creates this order item.  # noqa: E501

        :return: The order_action_id of this OrderItem.  # noqa: E501
        :rtype: str
        """
        return self._order_action_id

    @order_action_id.setter
    def order_action_id(self, order_action_id):
        """Sets the order_action_id of this OrderItem.

        Specify the order action that creates this order item.  # noqa: E501

        :param order_action_id: The order_action_id of this OrderItem.  # noqa: E501
        :type: str
        """

        self._order_action_id = order_action_id

    @property
    def quantity(self):
        """Gets the quantity of this OrderItem.  # noqa: E501

        The order item quantity. For the usage charge type, the value of this field is always zero. Also, the Owner Transfer order action always creates an order item whose Quantity field is zero.  # noqa: E501

        :return: The quantity of this OrderItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this OrderItem.

        The order item quantity. For the usage charge type, the value of this field is always zero. Also, the Owner Transfer order action always creates an order item whose Quantity field is zero.  # noqa: E501

        :param quantity: The quantity of this OrderItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def sc_id(self):
        """Gets the sc_id of this OrderItem.  # noqa: E501

        The ID of the charge segment that gets newly generated when the order item is created.  # noqa: E501

        :return: The sc_id of this OrderItem.  # noqa: E501
        :rtype: str
        """
        return self._sc_id

    @sc_id.setter
    def sc_id(self, sc_id):
        """Sets the sc_id of this OrderItem.

        The ID of the charge segment that gets newly generated when the order item is created.  # noqa: E501

        :param sc_id: The sc_id of this OrderItem.  # noqa: E501
        :type: str
        """

        self._sc_id = sc_id

    @property
    def start_date(self):
        """Gets the start_date of this OrderItem.  # noqa: E501

        The order item's effective start date, aligned with the start date of an increased quantity order metrics.  # noqa: E501

        :return: The start_date of this OrderItem.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this OrderItem.

        The order item's effective start date, aligned with the start date of an increased quantity order metrics.  # noqa: E501

        :param start_date: The start_date of this OrderItem.  # noqa: E501
        :type: date
        """

        self._start_date = start_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
