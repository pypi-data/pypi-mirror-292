# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EndConditions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'end_date_condition': 'EndDateCondition',
        'end_date_policy': 'EndDatePolicy',
        'specific_end_date': 'date',
        'up_to_periods': 'int',
        'up_to_periods_type': 'UpToPeriodsType'
    }

    attribute_map = {
        'end_date_condition': 'endDateCondition',
        'end_date_policy': 'endDatePolicy',
        'specific_end_date': 'specificEndDate',
        'up_to_periods': 'upToPeriods',
        'up_to_periods_type': 'upToPeriodsType'
    }

    def __init__(self, end_date_condition=None, end_date_policy=None, specific_end_date=None, up_to_periods=None, up_to_periods_type=None):  # noqa: E501
        """EndConditions - a model defined in Swagger"""  # noqa: E501
        self._end_date_condition = None
        self._end_date_policy = None
        self._specific_end_date = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self.discriminator = None
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if end_date_policy is not None:
            self.end_date_policy = end_date_policy
        if specific_end_date is not None:
            self.specific_end_date = specific_end_date
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this EndConditions.  # noqa: E501


        :return: The end_date_condition of this EndConditions.  # noqa: E501
        :rtype: EndDateCondition
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this EndConditions.


        :param end_date_condition: The end_date_condition of this EndConditions.  # noqa: E501
        :type: EndDateCondition
        """

        self._end_date_condition = end_date_condition

    @property
    def end_date_policy(self):
        """Gets the end_date_policy of this EndConditions.  # noqa: E501


        :return: The end_date_policy of this EndConditions.  # noqa: E501
        :rtype: EndDatePolicy
        """
        return self._end_date_policy

    @end_date_policy.setter
    def end_date_policy(self, end_date_policy):
        """Sets the end_date_policy of this EndConditions.


        :param end_date_policy: The end_date_policy of this EndConditions.  # noqa: E501
        :type: EndDatePolicy
        """

        self._end_date_policy = end_date_policy

    @property
    def specific_end_date(self):
        """Gets the specific_end_date of this EndConditions.  # noqa: E501

        Date in YYYY-MM-DD format. Only applicable if the value of the `endDateCondition` field is `Specific_End_Date`.   # noqa: E501

        :return: The specific_end_date of this EndConditions.  # noqa: E501
        :rtype: date
        """
        return self._specific_end_date

    @specific_end_date.setter
    def specific_end_date(self, specific_end_date):
        """Sets the specific_end_date of this EndConditions.

        Date in YYYY-MM-DD format. Only applicable if the value of the `endDateCondition` field is `Specific_End_Date`.   # noqa: E501

        :param specific_end_date: The specific_end_date of this EndConditions.  # noqa: E501
        :type: date
        """

        self._specific_end_date = specific_end_date

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this EndConditions.  # noqa: E501

        Duration of the charge in billing periods, days, weeks, months, or years, depending on the value of the `upToPeriodsType` field. Only applicable if the value of the `endDateCondition` field is `Fixed_Period`.   # noqa: E501

        :return: The up_to_periods of this EndConditions.  # noqa: E501
        :rtype: int
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this EndConditions.

        Duration of the charge in billing periods, days, weeks, months, or years, depending on the value of the `upToPeriodsType` field. Only applicable if the value of the `endDateCondition` field is `Fixed_Period`.   # noqa: E501

        :param up_to_periods: The up_to_periods of this EndConditions.  # noqa: E501
        :type: int
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this EndConditions.  # noqa: E501


        :return: The up_to_periods_type of this EndConditions.  # noqa: E501
        :rtype: UpToPeriodsType
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this EndConditions.


        :param up_to_periods_type: The up_to_periods_type of this EndConditions.  # noqa: E501
        :type: UpToPeriodsType
        """

        self._up_to_periods_type = up_to_periods_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndConditions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndConditions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
