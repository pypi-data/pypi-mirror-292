# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddSubscriptionRatePlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'booking_date': 'date',
        'charge_overrides': 'list[AddSubscriptionComponent]',
        'contract_effective_date': 'date',
        'customer_acceptance_date': 'date',
        'external_catalog_plan_id': 'str',
        'external_id_source_system': 'str',
        'externally_managed_plan_id': 'str',
        'product_rate_plan_id': 'str',
        'product_rate_plan_number': 'str',
        'service_activation_date': 'date'
    }

    attribute_map = {
        'booking_date': 'bookingDate',
        'charge_overrides': 'chargeOverrides',
        'contract_effective_date': 'contractEffectiveDate',
        'customer_acceptance_date': 'customerAcceptanceDate',
        'external_catalog_plan_id': 'externalCatalogPlanId',
        'external_id_source_system': 'externalIdSourceSystem',
        'externally_managed_plan_id': 'externallyManagedPlanId',
        'product_rate_plan_id': 'productRatePlanId',
        'product_rate_plan_number': 'productRatePlanNumber',
        'service_activation_date': 'serviceActivationDate'
    }

    def __init__(self, booking_date=None, charge_overrides=None, contract_effective_date=None, customer_acceptance_date=None, external_catalog_plan_id=None, external_id_source_system=None, externally_managed_plan_id=None, product_rate_plan_id=None, product_rate_plan_number=None, service_activation_date=None):  # noqa: E501
        """AddSubscriptionRatePlan - a model defined in Swagger"""  # noqa: E501
        self._booking_date = None
        self._charge_overrides = None
        self._contract_effective_date = None
        self._customer_acceptance_date = None
        self._external_catalog_plan_id = None
        self._external_id_source_system = None
        self._externally_managed_plan_id = None
        self._product_rate_plan_id = None
        self._product_rate_plan_number = None
        self._service_activation_date = None
        self.discriminator = None
        if booking_date is not None:
            self.booking_date = booking_date
        if charge_overrides is not None:
            self.charge_overrides = charge_overrides
        self.contract_effective_date = contract_effective_date
        if customer_acceptance_date is not None:
            self.customer_acceptance_date = customer_acceptance_date
        if external_catalog_plan_id is not None:
            self.external_catalog_plan_id = external_catalog_plan_id
        if external_id_source_system is not None:
            self.external_id_source_system = external_id_source_system
        if externally_managed_plan_id is not None:
            self.externally_managed_plan_id = externally_managed_plan_id
        if product_rate_plan_id is not None:
            self.product_rate_plan_id = product_rate_plan_id
        if product_rate_plan_number is not None:
            self.product_rate_plan_number = product_rate_plan_number
        if service_activation_date is not None:
            self.service_activation_date = service_activation_date

    @property
    def booking_date(self):
        """Gets the booking_date of this AddSubscriptionRatePlan.  # noqa: E501

        The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call.               # noqa: E501

        :return: The booking_date of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: date
        """
        return self._booking_date

    @booking_date.setter
    def booking_date(self, booking_date):
        """Sets the booking_date of this AddSubscriptionRatePlan.

        The booking date that you want to set for the amendment contract. The booking date of an amendment is the equivalent of the order date of an order. This field must be in the `yyyy-mm-dd` format. The default value is the current date when you make the API call.               # noqa: E501

        :param booking_date: The booking_date of this AddSubscriptionRatePlan.  # noqa: E501
        :type: date
        """

        self._booking_date = booking_date

    @property
    def charge_overrides(self):
        """Gets the charge_overrides of this AddSubscriptionRatePlan.  # noqa: E501

        This optional container is used to override the quantity of one or more product rate plan charges for this subscription.   # noqa: E501

        :return: The charge_overrides of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: list[AddSubscriptionComponent]
        """
        return self._charge_overrides

    @charge_overrides.setter
    def charge_overrides(self, charge_overrides):
        """Sets the charge_overrides of this AddSubscriptionRatePlan.

        This optional container is used to override the quantity of one or more product rate plan charges for this subscription.   # noqa: E501

        :param charge_overrides: The charge_overrides of this AddSubscriptionRatePlan.  # noqa: E501
        :type: list[AddSubscriptionComponent]
        """

        self._charge_overrides = charge_overrides

    @property
    def contract_effective_date(self):
        """Gets the contract_effective_date of this AddSubscriptionRatePlan.  # noqa: E501

        The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.  If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.   # noqa: E501

        :return: The contract_effective_date of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: date
        """
        return self._contract_effective_date

    @contract_effective_date.setter
    def contract_effective_date(self, contract_effective_date):
        """Sets the contract_effective_date of this AddSubscriptionRatePlan.

        The date when the amendment changes take effect. The format of the date is yyyy-mm-dd.  If there is already a future-dated Update Product amendment on the subscription, the `specificUpdateDate` field will be used instead of this field to specify when the Update Product amendment takes effect.   # noqa: E501

        :param contract_effective_date: The contract_effective_date of this AddSubscriptionRatePlan.  # noqa: E501
        :type: date
        """
        if contract_effective_date is None:
            raise ValueError("Invalid value for `contract_effective_date`, must not be `None`")  # noqa: E501

        self._contract_effective_date = contract_effective_date

    @property
    def customer_acceptance_date(self):
        """Gets the customer_acceptance_date of this AddSubscriptionRatePlan.  # noqa: E501

        The date when the customer accepts the contract in yyyy-mm-dd format.  If this field is not set:  * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date. * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :return: The customer_acceptance_date of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: date
        """
        return self._customer_acceptance_date

    @customer_acceptance_date.setter
    def customer_acceptance_date(self, customer_acceptance_date):
        """Sets the customer_acceptance_date of this AddSubscriptionRatePlan.

        The date when the customer accepts the contract in yyyy-mm-dd format.  If this field is not set:  * If the `serviceActivationDate` field is not set, the value of this field is set to be the contract effective date. * If the `serviceActivationDate` field is set, the value of this field is set to be the service activation date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :param customer_acceptance_date: The customer_acceptance_date of this AddSubscriptionRatePlan.  # noqa: E501
        :type: date
        """

        self._customer_acceptance_date = customer_acceptance_date

    @property
    def external_catalog_plan_id(self):
        """Gets the external_catalog_plan_id of this AddSubscriptionRatePlan.  # noqa: E501

        An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.  **Note:** If both `externalCatalogPlanId` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :return: The external_catalog_plan_id of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._external_catalog_plan_id

    @external_catalog_plan_id.setter
    def external_catalog_plan_id(self, external_catalog_plan_id):
        """Sets the external_catalog_plan_id of this AddSubscriptionRatePlan.

        An external ID of the product rate plan to be added. You can use this field to specify a product rate plan that is imported from an external system. The value of the `externalCatalogPlanId` field must match one of the values that are predefined in the `externallyManagedPlanIds` field on a product rate plan.  **Note:** If both `externalCatalogPlanId` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :param external_catalog_plan_id: The external_catalog_plan_id of this AddSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._external_catalog_plan_id = external_catalog_plan_id

    @property
    def external_id_source_system(self):
        """Gets the external_id_source_system of this AddSubscriptionRatePlan.  # noqa: E501

        The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :return: The external_id_source_system of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._external_id_source_system

    @external_id_source_system.setter
    def external_id_source_system(self, external_id_source_system):
        """Sets the external_id_source_system of this AddSubscriptionRatePlan.

        The ID of the external source system. You can use this field and `externalCatalogPlanId` to specify a product rate plan that is imported from an external system.  **Note:** If both `externalCatalogPlanId`, `externalIdSourceSystem` and `productRatePlanId` are provided. They must point to the same product rate plan. Otherwise, the request would fail.   # noqa: E501

        :param external_id_source_system: The external_id_source_system of this AddSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._external_id_source_system = external_id_source_system

    @property
    def externally_managed_plan_id(self):
        """Gets the externally_managed_plan_id of this AddSubscriptionRatePlan.  # noqa: E501

        Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.   # noqa: E501

        :return: The externally_managed_plan_id of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._externally_managed_plan_id

    @externally_managed_plan_id.setter
    def externally_managed_plan_id(self, externally_managed_plan_id):
        """Sets the externally_managed_plan_id of this AddSubscriptionRatePlan.

        Indicates the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.   # noqa: E501

        :param externally_managed_plan_id: The externally_managed_plan_id of this AddSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._externally_managed_plan_id = externally_managed_plan_id

    @property
    def product_rate_plan_id(self):
        """Gets the product_rate_plan_id of this AddSubscriptionRatePlan.  # noqa: E501

        ID of a product rate plan for this subscription   # noqa: E501

        :return: The product_rate_plan_id of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_id

    @product_rate_plan_id.setter
    def product_rate_plan_id(self, product_rate_plan_id):
        """Sets the product_rate_plan_id of this AddSubscriptionRatePlan.

        ID of a product rate plan for this subscription   # noqa: E501

        :param product_rate_plan_id: The product_rate_plan_id of this AddSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_id = product_rate_plan_id

    @property
    def product_rate_plan_number(self):
        """Gets the product_rate_plan_number of this AddSubscriptionRatePlan.  # noqa: E501

        Number of a product rate plan for this subscription   # noqa: E501

        :return: The product_rate_plan_number of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_number

    @product_rate_plan_number.setter
    def product_rate_plan_number(self, product_rate_plan_number):
        """Sets the product_rate_plan_number of this AddSubscriptionRatePlan.

        Number of a product rate plan for this subscription   # noqa: E501

        :param product_rate_plan_number: The product_rate_plan_number of this AddSubscriptionRatePlan.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_number = product_rate_plan_number

    @property
    def service_activation_date(self):
        """Gets the service_activation_date of this AddSubscriptionRatePlan.  # noqa: E501

        The date when the new product in the subscription is activated in yyyy-mm-dd format.  You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :return: The service_activation_date of this AddSubscriptionRatePlan.  # noqa: E501
        :rtype: date
        """
        return self._service_activation_date

    @service_activation_date.setter
    def service_activation_date(self, service_activation_date):
        """Sets the service_activation_date of this AddSubscriptionRatePlan.

        The date when the new product in the subscription is activated in yyyy-mm-dd format.  You must specify a Service Activation date if the Customer Acceptance date is set. If the Customer Acceptance date is not set, the value of the `serviceActivationDate` field defaults to be the Contract Effective Date.  The billing trigger dates must follow this rule:  contractEffectiveDate <= serviceActivationDate <= contractAcceptanceDate   # noqa: E501

        :param service_activation_date: The service_activation_date of this AddSubscriptionRatePlan.  # noqa: E501
        :type: date
        """

        self._service_activation_date = service_activation_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddSubscriptionRatePlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddSubscriptionRatePlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
