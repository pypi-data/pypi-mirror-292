# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SettingSourceComponentResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_fields': 'list[SettingComponentKeyValue]',
        'custom_objects': 'list[SettingComponentKeyValue]',
        'data_access_control': 'list[SettingComponentKeyValue]',
        'notifications': 'list[SettingComponentKeyValue]',
        'product_catalog': 'list[SettingComponentKeyValue]',
        'settings': 'list[SettingComponentKeyValue]',
        'workflows': 'list[SettingComponentKeyValue]'
    }

    attribute_map = {
        'custom_fields': 'customFields',
        'custom_objects': 'customObjects',
        'data_access_control': 'dataAccessControl',
        'notifications': 'notifications',
        'product_catalog': 'productCatalog',
        'settings': 'settings',
        'workflows': 'workflows'
    }

    def __init__(self, custom_fields=None, custom_objects=None, data_access_control=None, notifications=None, product_catalog=None, settings=None, workflows=None):  # noqa: E501
        """SettingSourceComponentResponse - a model defined in Swagger"""  # noqa: E501
        self._custom_fields = None
        self._custom_objects = None
        self._data_access_control = None
        self._notifications = None
        self._product_catalog = None
        self._settings = None
        self._workflows = None
        self.discriminator = None
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if custom_objects is not None:
            self.custom_objects = custom_objects
        if data_access_control is not None:
            self.data_access_control = data_access_control
        if notifications is not None:
            self.notifications = notifications
        if product_catalog is not None:
            self.product_catalog = product_catalog
        if settings is not None:
            self.settings = settings
        if workflows is not None:
            self.workflows = workflows

    @property
    def custom_fields(self):
        """Gets the custom_fields of this SettingSourceComponentResponse.  # noqa: E501


        :return: The custom_fields of this SettingSourceComponentResponse.  # noqa: E501
        :rtype: list[SettingComponentKeyValue]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this SettingSourceComponentResponse.


        :param custom_fields: The custom_fields of this SettingSourceComponentResponse.  # noqa: E501
        :type: list[SettingComponentKeyValue]
        """

        self._custom_fields = custom_fields

    @property
    def custom_objects(self):
        """Gets the custom_objects of this SettingSourceComponentResponse.  # noqa: E501


        :return: The custom_objects of this SettingSourceComponentResponse.  # noqa: E501
        :rtype: list[SettingComponentKeyValue]
        """
        return self._custom_objects

    @custom_objects.setter
    def custom_objects(self, custom_objects):
        """Sets the custom_objects of this SettingSourceComponentResponse.


        :param custom_objects: The custom_objects of this SettingSourceComponentResponse.  # noqa: E501
        :type: list[SettingComponentKeyValue]
        """

        self._custom_objects = custom_objects

    @property
    def data_access_control(self):
        """Gets the data_access_control of this SettingSourceComponentResponse.  # noqa: E501


        :return: The data_access_control of this SettingSourceComponentResponse.  # noqa: E501
        :rtype: list[SettingComponentKeyValue]
        """
        return self._data_access_control

    @data_access_control.setter
    def data_access_control(self, data_access_control):
        """Sets the data_access_control of this SettingSourceComponentResponse.


        :param data_access_control: The data_access_control of this SettingSourceComponentResponse.  # noqa: E501
        :type: list[SettingComponentKeyValue]
        """

        self._data_access_control = data_access_control

    @property
    def notifications(self):
        """Gets the notifications of this SettingSourceComponentResponse.  # noqa: E501


        :return: The notifications of this SettingSourceComponentResponse.  # noqa: E501
        :rtype: list[SettingComponentKeyValue]
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this SettingSourceComponentResponse.


        :param notifications: The notifications of this SettingSourceComponentResponse.  # noqa: E501
        :type: list[SettingComponentKeyValue]
        """

        self._notifications = notifications

    @property
    def product_catalog(self):
        """Gets the product_catalog of this SettingSourceComponentResponse.  # noqa: E501


        :return: The product_catalog of this SettingSourceComponentResponse.  # noqa: E501
        :rtype: list[SettingComponentKeyValue]
        """
        return self._product_catalog

    @product_catalog.setter
    def product_catalog(self, product_catalog):
        """Sets the product_catalog of this SettingSourceComponentResponse.


        :param product_catalog: The product_catalog of this SettingSourceComponentResponse.  # noqa: E501
        :type: list[SettingComponentKeyValue]
        """

        self._product_catalog = product_catalog

    @property
    def settings(self):
        """Gets the settings of this SettingSourceComponentResponse.  # noqa: E501


        :return: The settings of this SettingSourceComponentResponse.  # noqa: E501
        :rtype: list[SettingComponentKeyValue]
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this SettingSourceComponentResponse.


        :param settings: The settings of this SettingSourceComponentResponse.  # noqa: E501
        :type: list[SettingComponentKeyValue]
        """

        self._settings = settings

    @property
    def workflows(self):
        """Gets the workflows of this SettingSourceComponentResponse.  # noqa: E501


        :return: The workflows of this SettingSourceComponentResponse.  # noqa: E501
        :rtype: list[SettingComponentKeyValue]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """Sets the workflows of this SettingSourceComponentResponse.


        :param workflows: The workflows of this SettingSourceComponentResponse.  # noqa: E501
        :type: list[SettingComponentKeyValue]
        """

        self._workflows = workflows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SettingSourceComponentResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SettingSourceComponentResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
