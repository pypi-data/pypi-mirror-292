# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CustomObjectDefinitionUpdateActionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'enable_create_record_auditing': 'bool',
        'enable_delete_record_auditing': 'bool',
        'field': 'UpdateCustomObjectCusotmField',
        'label': 'str',
        'namespace': 'str',
        'object': 'str',
        'relationship': 'object',
        'type': 'CustomObjectDefinitionUpdateActionRequestType'
    }

    attribute_map = {
        'description': 'description',
        'enable_create_record_auditing': 'enableCreateRecordAuditing',
        'enable_delete_record_auditing': 'enableDeleteRecordAuditing',
        'field': 'field',
        'label': 'label',
        'namespace': 'namespace',
        'object': 'object',
        'relationship': 'relationship',
        'type': 'type'
    }

    def __init__(self, description=None, enable_create_record_auditing=None, enable_delete_record_auditing=None, field=None, label=None, namespace=None, object=None, relationship=None, type=None):  # noqa: E501
        """CustomObjectDefinitionUpdateActionRequest - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._enable_create_record_auditing = None
        self._enable_delete_record_auditing = None
        self._field = None
        self._label = None
        self._namespace = None
        self._object = None
        self._relationship = None
        self._type = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if enable_create_record_auditing is not None:
            self.enable_create_record_auditing = enable_create_record_auditing
        if enable_delete_record_auditing is not None:
            self.enable_delete_record_auditing = enable_delete_record_auditing
        if field is not None:
            self.field = field
        if label is not None:
            self.label = label
        self.namespace = namespace
        self.object = object
        if relationship is not None:
            self.relationship = relationship
        self.type = type

    @property
    def description(self):
        """Gets the description of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501

        Optional property for `updateObject` action  # noqa: E501

        :return: The description of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomObjectDefinitionUpdateActionRequest.

        Optional property for `updateObject` action  # noqa: E501

        :param description: The description of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def enable_create_record_auditing(self):
        """Gets the enable_create_record_auditing of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501

        Optional property for `updateObject` action.  Indicates whether to audit the creation of custom object records of this custom object definition.  Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record creation. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.   # noqa: E501

        :return: The enable_create_record_auditing of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_create_record_auditing

    @enable_create_record_auditing.setter
    def enable_create_record_auditing(self, enable_create_record_auditing):
        """Sets the enable_create_record_auditing of this CustomObjectDefinitionUpdateActionRequest.

        Optional property for `updateObject` action.  Indicates whether to audit the creation of custom object records of this custom object definition.  Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record creation. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.   # noqa: E501

        :param enable_create_record_auditing: The enable_create_record_auditing of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :type: bool
        """

        self._enable_create_record_auditing = enable_create_record_auditing

    @property
    def enable_delete_record_auditing(self):
        """Gets the enable_delete_record_auditing of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501

        Optional property for `updateObject` action.  Indicates whether to audit the deletion of custom object records of this custom object definition.  Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record deletion. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.   # noqa: E501

        :return: The enable_delete_record_auditing of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :rtype: bool
        """
        return self._enable_delete_record_auditing

    @enable_delete_record_auditing.setter
    def enable_delete_record_auditing(self, enable_delete_record_auditing):
        """Sets the enable_delete_record_auditing of this CustomObjectDefinitionUpdateActionRequest.

        Optional property for `updateObject` action.  Indicates whether to audit the deletion of custom object records of this custom object definition.  Note that you must enable the **Custom Object Definition** audit trail setting in your Zuora tenant before auditing custom object record deletion. For more information, see <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/Tenant_Management/A_Administrator_Settings/Manage_Audit_Trail_Settings\" target=\"_blank\">Manage audit trail settings</a>.   # noqa: E501

        :param enable_delete_record_auditing: The enable_delete_record_auditing of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :type: bool
        """

        self._enable_delete_record_auditing = enable_delete_record_auditing

    @property
    def field(self):
        """Gets the field of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501


        :return: The field of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :rtype: UpdateCustomObjectCusotmField
        """
        return self._field

    @field.setter
    def field(self, field):
        """Sets the field of this CustomObjectDefinitionUpdateActionRequest.


        :param field: The field of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :type: UpdateCustomObjectCusotmField
        """

        self._field = field

    @property
    def label(self):
        """Gets the label of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501

        Optional property for `updateObject` action  # noqa: E501

        :return: The label of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this CustomObjectDefinitionUpdateActionRequest.

        Optional property for `updateObject` action  # noqa: E501

        :param label: The label of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def namespace(self):
        """Gets the namespace of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501

        The namespace of the custom object definition to be updated  # noqa: E501

        :return: The namespace of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this CustomObjectDefinitionUpdateActionRequest.

        The namespace of the custom object definition to be updated  # noqa: E501

        :param namespace: The namespace of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :type: str
        """
        if namespace is None:
            raise ValueError("Invalid value for `namespace`, must not be `None`")  # noqa: E501

        self._namespace = namespace

    @property
    def object(self):
        """Gets the object of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501

        The API name of the custom object definition to be updated  # noqa: E501

        :return: The object of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this CustomObjectDefinitionUpdateActionRequest.

        The API name of the custom object definition to be updated  # noqa: E501

        :param object: The object of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :type: str
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def relationship(self):
        """Gets the relationship of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501


        :return: The relationship of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :rtype: object
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship):
        """Sets the relationship of this CustomObjectDefinitionUpdateActionRequest.


        :param relationship: The relationship of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :type: object
        """

        self._relationship = relationship

    @property
    def type(self):
        """Gets the type of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501


        :return: The type of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :rtype: CustomObjectDefinitionUpdateActionRequestType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomObjectDefinitionUpdateActionRequest.


        :param type: The type of this CustomObjectDefinitionUpdateActionRequest.  # noqa: E501
        :type: CustomObjectDefinitionUpdateActionRequestType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CustomObjectDefinitionUpdateActionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomObjectDefinitionUpdateActionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
