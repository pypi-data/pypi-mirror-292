# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BillingAdjustment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'adjustment_id': 'str',
        'adjustment_number': 'str',
        'amount': 'float',
        'billing_date': 'date',
        'charge_number': 'str',
        'credit_memo_number': 'str',
        'deferred_revenue_accounting_code': 'str',
        'delivery_date': 'date',
        'delivery_day': 'str',
        'eligible': 'bool',
        'reason': 'str',
        'recognized_revenue_accounting_code': 'str',
        'revenue_recognition_rule_name': 'str',
        'status': 'str',
        'subscription_number': 'str'
    }

    attribute_map = {
        'adjustment_id': 'adjustmentId',
        'adjustment_number': 'adjustmentNumber',
        'amount': 'amount',
        'billing_date': 'billingDate',
        'charge_number': 'chargeNumber',
        'credit_memo_number': 'creditMemoNumber',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'delivery_date': 'deliveryDate',
        'delivery_day': 'deliveryDay',
        'eligible': 'eligible',
        'reason': 'reason',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'revenue_recognition_rule_name': 'revenueRecognitionRuleName',
        'status': 'status',
        'subscription_number': 'subscriptionNumber'
    }

    def __init__(self, adjustment_id=None, adjustment_number=None, amount=None, billing_date=None, charge_number=None, credit_memo_number=None, deferred_revenue_accounting_code=None, delivery_date=None, delivery_day=None, eligible=None, reason=None, recognized_revenue_accounting_code=None, revenue_recognition_rule_name=None, status=None, subscription_number=None):  # noqa: E501
        """BillingAdjustment - a model defined in Swagger"""  # noqa: E501
        self._adjustment_id = None
        self._adjustment_number = None
        self._amount = None
        self._billing_date = None
        self._charge_number = None
        self._credit_memo_number = None
        self._deferred_revenue_accounting_code = None
        self._delivery_date = None
        self._delivery_day = None
        self._eligible = None
        self._reason = None
        self._recognized_revenue_accounting_code = None
        self._revenue_recognition_rule_name = None
        self._status = None
        self._subscription_number = None
        self.discriminator = None
        if adjustment_id is not None:
            self.adjustment_id = adjustment_id
        if adjustment_number is not None:
            self.adjustment_number = adjustment_number
        if amount is not None:
            self.amount = amount
        if billing_date is not None:
            self.billing_date = billing_date
        if charge_number is not None:
            self.charge_number = charge_number
        if credit_memo_number is not None:
            self.credit_memo_number = credit_memo_number
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        if delivery_date is not None:
            self.delivery_date = delivery_date
        if delivery_day is not None:
            self.delivery_day = delivery_day
        if eligible is not None:
            self.eligible = eligible
        if reason is not None:
            self.reason = reason
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if status is not None:
            self.status = status
        if subscription_number is not None:
            self.subscription_number = subscription_number

    @property
    def adjustment_id(self):
        """Gets the adjustment_id of this BillingAdjustment.  # noqa: E501

        The system generated Adjustment Id.   # noqa: E501

        :return: The adjustment_id of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_id

    @adjustment_id.setter
    def adjustment_id(self, adjustment_id):
        """Sets the adjustment_id of this BillingAdjustment.

        The system generated Adjustment Id.   # noqa: E501

        :param adjustment_id: The adjustment_id of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._adjustment_id = adjustment_id

    @property
    def adjustment_number(self):
        """Gets the adjustment_number of this BillingAdjustment.  # noqa: E501

        The system generated Adjustment Number.   # noqa: E501

        :return: The adjustment_number of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_number

    @adjustment_number.setter
    def adjustment_number(self, adjustment_number):
        """Sets the adjustment_number of this BillingAdjustment.

        The system generated Adjustment Number.   # noqa: E501

        :param adjustment_number: The adjustment_number of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._adjustment_number = adjustment_number

    @property
    def amount(self):
        """Gets the amount of this BillingAdjustment.  # noqa: E501

        The amount of the adjustment.   # noqa: E501

        :return: The amount of this BillingAdjustment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this BillingAdjustment.

        The amount of the adjustment.   # noqa: E501

        :param amount: The amount of this BillingAdjustment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def billing_date(self):
        """Gets the billing_date of this BillingAdjustment.  # noqa: E501

        The billing date is same as the delivery date of the adjustment, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The billing_date of this BillingAdjustment.  # noqa: E501
        :rtype: date
        """
        return self._billing_date

    @billing_date.setter
    def billing_date(self, billing_date):
        """Sets the billing_date of this BillingAdjustment.

        The billing date is same as the delivery date of the adjustment, in `yyyy-mm-dd` format.   # noqa: E501

        :param billing_date: The billing_date of this BillingAdjustment.  # noqa: E501
        :type: date
        """

        self._billing_date = billing_date

    @property
    def charge_number(self):
        """Gets the charge_number of this BillingAdjustment.  # noqa: E501

        The charge number in the subscription for which the adjustment is created.   # noqa: E501

        :return: The charge_number of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._charge_number

    @charge_number.setter
    def charge_number(self, charge_number):
        """Sets the charge_number of this BillingAdjustment.

        The charge number in the subscription for which the adjustment is created.   # noqa: E501

        :param charge_number: The charge_number of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._charge_number = charge_number

    @property
    def credit_memo_number(self):
        """Gets the credit_memo_number of this BillingAdjustment.  # noqa: E501

        The Credit Memo generated for the adjustment.   # noqa: E501

        :return: The credit_memo_number of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_number

    @credit_memo_number.setter
    def credit_memo_number(self, credit_memo_number):
        """Sets the credit_memo_number of this BillingAdjustment.

        The Credit Memo generated for the adjustment.   # noqa: E501

        :param credit_memo_number: The credit_memo_number of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._credit_memo_number = credit_memo_number

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this BillingAdjustment.  # noqa: E501

        The accounting code for the deferred revenue, such as Monthly Recurring Liability.   # noqa: E501

        :return: The deferred_revenue_accounting_code of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this BillingAdjustment.

        The accounting code for the deferred revenue, such as Monthly Recurring Liability.   # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def delivery_date(self):
        """Gets the delivery_date of this BillingAdjustment.  # noqa: E501

        The adjustment date, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The delivery_date of this BillingAdjustment.  # noqa: E501
        :rtype: date
        """
        return self._delivery_date

    @delivery_date.setter
    def delivery_date(self, delivery_date):
        """Sets the delivery_date of this BillingAdjustment.

        The adjustment date, in `yyyy-mm-dd` format.   # noqa: E501

        :param delivery_date: The delivery_date of this BillingAdjustment.  # noqa: E501
        :type: date
        """

        self._delivery_date = delivery_date

    @property
    def delivery_day(self):
        """Gets the delivery_day of this BillingAdjustment.  # noqa: E501

        The adjustment day of the week.   # noqa: E501

        :return: The delivery_day of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._delivery_day

    @delivery_day.setter
    def delivery_day(self, delivery_day):
        """Sets the delivery_day of this BillingAdjustment.

        The adjustment day of the week.   # noqa: E501

        :param delivery_day: The delivery_day of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._delivery_day = delivery_day

    @property
    def eligible(self):
        """Gets the eligible of this BillingAdjustment.  # noqa: E501

        The eligible flag is set as true for a successfully created adjustment.   # noqa: E501

        :return: The eligible of this BillingAdjustment.  # noqa: E501
        :rtype: bool
        """
        return self._eligible

    @eligible.setter
    def eligible(self, eligible):
        """Sets the eligible of this BillingAdjustment.

        The eligible flag is set as true for a successfully created adjustment.   # noqa: E501

        :param eligible: The eligible of this BillingAdjustment.  # noqa: E501
        :type: bool
        """

        self._eligible = eligible

    @property
    def reason(self):
        """Gets the reason of this BillingAdjustment.  # noqa: E501

        The reason for the adjustment.   # noqa: E501

        :return: The reason of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this BillingAdjustment.

        The reason for the adjustment.   # noqa: E501

        :param reason: The reason of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this BillingAdjustment.  # noqa: E501

        The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.   # noqa: E501

        :return: The recognized_revenue_accounting_code of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this BillingAdjustment.

        The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.   # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this BillingAdjustment.  # noqa: E501

        The name of the revenue recognition rule governing the revenue schedule.   # noqa: E501

        :return: The revenue_recognition_rule_name of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this BillingAdjustment.

        The name of the revenue recognition rule governing the revenue schedule.   # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def status(self):
        """Gets the status of this BillingAdjustment.  # noqa: E501

        The status of the adjustment will be `Billed` or `Cancelled`.   # noqa: E501

        :return: The status of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BillingAdjustment.

        The status of the adjustment will be `Billed` or `Cancelled`.   # noqa: E501

        :param status: The status of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def subscription_number(self):
        """Gets the subscription_number of this BillingAdjustment.  # noqa: E501

        The subscription number for which the adjustment is created.   # noqa: E501

        :return: The subscription_number of this BillingAdjustment.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this BillingAdjustment.

        The subscription number for which the adjustment is created.   # noqa: E501

        :param subscription_number: The subscription_number of this BillingAdjustment.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BillingAdjustment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BillingAdjustment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
