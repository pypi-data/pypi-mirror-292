# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SignUpCreatePaymentMethodCommon(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_key': 'str',
        'auth_gateway': 'str',
        'ip_address': 'str',
        'make_default': 'bool'
    }

    attribute_map = {
        'account_key': 'accountKey',
        'auth_gateway': 'authGateway',
        'ip_address': 'ipAddress',
        'make_default': 'makeDefault'
    }

    def __init__(self, account_key=None, auth_gateway=None, ip_address=None, make_default=False):  # noqa: E501
        """SignUpCreatePaymentMethodCommon - a model defined in Swagger"""  # noqa: E501
        self._account_key = None
        self._auth_gateway = None
        self._ip_address = None
        self._make_default = None
        self.discriminator = None
        if account_key is not None:
            self.account_key = account_key
        if auth_gateway is not None:
            self.auth_gateway = auth_gateway
        if ip_address is not None:
            self.ip_address = ip_address
        if make_default is not None:
            self.make_default = make_default

    @property
    def account_key(self):
        """Gets the account_key of this SignUpCreatePaymentMethodCommon.  # noqa: E501

        Internal ID of the customer account that will own the payment method.   # noqa: E501

        :return: The account_key of this SignUpCreatePaymentMethodCommon.  # noqa: E501
        :rtype: str
        """
        return self._account_key

    @account_key.setter
    def account_key(self, account_key):
        """Sets the account_key of this SignUpCreatePaymentMethodCommon.

        Internal ID of the customer account that will own the payment method.   # noqa: E501

        :param account_key: The account_key of this SignUpCreatePaymentMethodCommon.  # noqa: E501
        :type: str
        """

        self._account_key = account_key

    @property
    def auth_gateway(self):
        """Gets the auth_gateway of this SignUpCreatePaymentMethodCommon.  # noqa: E501

        Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.   # noqa: E501

        :return: The auth_gateway of this SignUpCreatePaymentMethodCommon.  # noqa: E501
        :rtype: str
        """
        return self._auth_gateway

    @auth_gateway.setter
    def auth_gateway(self, auth_gateway):
        """Sets the auth_gateway of this SignUpCreatePaymentMethodCommon.

        Internal ID of the payment gateway that Zuora will use to authorize the payments that are made with the payment method.  If you do not set this field, Zuora will use one of the following payment gateways instead:  * The default payment gateway of the customer account that owns the payment method, if the `accountKey` field is set. * The default payment gateway of your Zuora tenant, if the `accountKey` field is not set.   # noqa: E501

        :param auth_gateway: The auth_gateway of this SignUpCreatePaymentMethodCommon.  # noqa: E501
        :type: str
        """

        self._auth_gateway = auth_gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this SignUpCreatePaymentMethodCommon.  # noqa: E501

        The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways.   If the IP address length is beyond 45 characters, a validation error occurs.   # noqa: E501

        :return: The ip_address of this SignUpCreatePaymentMethodCommon.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this SignUpCreatePaymentMethodCommon.

        The IPv4 or IPv6 information of the user when the payment method is created or updated. Some gateways use this field for fraud prevention. If this field is passed to Zuora, Zuora directly passes it to gateways.   If the IP address length is beyond 45 characters, a validation error occurs.   # noqa: E501

        :param ip_address: The ip_address of this SignUpCreatePaymentMethodCommon.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def make_default(self):
        """Gets the make_default of this SignUpCreatePaymentMethodCommon.  # noqa: E501

        Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.   # noqa: E501

        :return: The make_default of this SignUpCreatePaymentMethodCommon.  # noqa: E501
        :rtype: bool
        """
        return self._make_default

    @make_default.setter
    def make_default(self, make_default):
        """Sets the make_default of this SignUpCreatePaymentMethodCommon.

        Specifies whether the payment method will be the default payment method of the customer account that owns the payment method. Only applicable if the `accountKey` field is set.   # noqa: E501

        :param make_default: The make_default of this SignUpCreatePaymentMethodCommon.  # noqa: E501
        :type: bool
        """

        self._make_default = make_default

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SignUpCreatePaymentMethodCommon, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SignUpCreatePaymentMethodCommon):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
