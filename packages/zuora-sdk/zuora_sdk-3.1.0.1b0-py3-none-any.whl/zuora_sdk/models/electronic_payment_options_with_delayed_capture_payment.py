# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ElectronicPaymentOptionsWithDelayedCapturePayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_gateway_id': 'str',
        'payment_method_id': 'str',
        'auth_transaction_id': 'str',
        'gateway_order_id': 'str'
    }

    attribute_map = {
        'payment_gateway_id': 'paymentGatewayId',
        'payment_method_id': 'paymentMethodId',
        'auth_transaction_id': 'authTransactionId',
        'gateway_order_id': 'gatewayOrderId'
    }

    def __init__(self, payment_gateway_id=None, payment_method_id=None, auth_transaction_id=None, gateway_order_id=None):  # noqa: E501
        """ElectronicPaymentOptionsWithDelayedCapturePayment - a model defined in Swagger"""  # noqa: E501
        self._payment_gateway_id = None
        self._payment_method_id = None
        self._auth_transaction_id = None
        self._gateway_order_id = None
        self.discriminator = None
        if payment_gateway_id is not None:
            self.payment_gateway_id = payment_gateway_id
        if payment_method_id is not None:
            self.payment_method_id = payment_method_id
        if auth_transaction_id is not None:
            self.auth_transaction_id = auth_transaction_id
        if gateway_order_id is not None:
            self.gateway_order_id = gateway_order_id

    @property
    def payment_gateway_id(self):
        """Gets the payment_gateway_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501

        Specifies the ID of a payment gateway to override the default gateway. If this field is not specified, the default payment gateway will be used to process the payment.   # noqa: E501

        :return: The payment_gateway_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_id

    @payment_gateway_id.setter
    def payment_gateway_id(self, payment_gateway_id):
        """Sets the payment_gateway_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.

        Specifies the ID of a payment gateway to override the default gateway. If this field is not specified, the default payment gateway will be used to process the payment.   # noqa: E501

        :param payment_gateway_id: The payment_gateway_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501
        :type: str
        """

        self._payment_gateway_id = payment_gateway_id

    @property
    def payment_method_id(self):
        """Gets the payment_method_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501

        Specifies an electronic payment method. It can be one that has already been associated with an invoice owner, or an orphan payment method, which is not associated with any invoice owner. For an orphan payment method, this operation will then associate it with the account that this order will be created under.   # noqa: E501

        :return: The payment_method_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501
        :rtype: str
        """
        return self._payment_method_id

    @payment_method_id.setter
    def payment_method_id(self, payment_method_id):
        """Sets the payment_method_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.

        Specifies an electronic payment method. It can be one that has already been associated with an invoice owner, or an orphan payment method, which is not associated with any invoice owner. For an orphan payment method, this operation will then associate it with the account that this order will be created under.   # noqa: E501

        :param payment_method_id: The payment_method_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501
        :type: str
        """

        self._payment_method_id = payment_method_id

    @property
    def auth_transaction_id(self):
        """Gets the auth_transaction_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501

        The authorization transaction ID from the payment gateway. When you create a payment to capture the funds that have been authorized  through [Create Authorization](https://developer.zuora.com/api-references/api/operation/POST_CreateAuthorization/), pass in the `authTransactionId` field.  It is highly recommended to also pass in `gatewayOrderId` that you used  when authorizing the funds.  `authTransactionId` is required, while `gatewayOrderId` is optional.   # noqa: E501

        :return: The auth_transaction_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501
        :rtype: str
        """
        return self._auth_transaction_id

    @auth_transaction_id.setter
    def auth_transaction_id(self, auth_transaction_id):
        """Sets the auth_transaction_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.

        The authorization transaction ID from the payment gateway. When you create a payment to capture the funds that have been authorized  through [Create Authorization](https://developer.zuora.com/api-references/api/operation/POST_CreateAuthorization/), pass in the `authTransactionId` field.  It is highly recommended to also pass in `gatewayOrderId` that you used  when authorizing the funds.  `authTransactionId` is required, while `gatewayOrderId` is optional.   # noqa: E501

        :param auth_transaction_id: The auth_transaction_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501
        :type: str
        """

        self._auth_transaction_id = auth_transaction_id

    @property
    def gateway_order_id(self):
        """Gets the gateway_order_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501

        A merchant-specified natural key value that can be passed to the electronic payment gateway when  a payment is created. If not specified, the payment number will be passed in instead. Gateways check duplicates on the gateway order ID to ensure that the same transaction  is not entered twice accidentally.  This ID can also be used to do reconciliation and tie the payment to a natural key in external systems.  The source of this ID varies by merchant. Some merchants use shopping cart order IDs, and others use something  different. Merchants use this ID to track transactions in their eCommerce systems.  When you create a payment to capture the funds that have been authorized through [Create Authorizattion](https://developer.zuora.com/api-references/api/operation/POST_CreateAuthorization/),  pass in the `authTransactionId` field. It is highly recommended to also pass in `gatewayOrderId` that you used  when authorizing the funds. `authTransactionId` is required, while `gatewayOrderId` is optional.   # noqa: E501

        :return: The gateway_order_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501
        :rtype: str
        """
        return self._gateway_order_id

    @gateway_order_id.setter
    def gateway_order_id(self, gateway_order_id):
        """Sets the gateway_order_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.

        A merchant-specified natural key value that can be passed to the electronic payment gateway when  a payment is created. If not specified, the payment number will be passed in instead. Gateways check duplicates on the gateway order ID to ensure that the same transaction  is not entered twice accidentally.  This ID can also be used to do reconciliation and tie the payment to a natural key in external systems.  The source of this ID varies by merchant. Some merchants use shopping cart order IDs, and others use something  different. Merchants use this ID to track transactions in their eCommerce systems.  When you create a payment to capture the funds that have been authorized through [Create Authorizattion](https://developer.zuora.com/api-references/api/operation/POST_CreateAuthorization/),  pass in the `authTransactionId` field. It is highly recommended to also pass in `gatewayOrderId` that you used  when authorizing the funds. `authTransactionId` is required, while `gatewayOrderId` is optional.   # noqa: E501

        :param gateway_order_id: The gateway_order_id of this ElectronicPaymentOptionsWithDelayedCapturePayment.  # noqa: E501
        :type: str
        """

        self._gateway_order_id = gateway_order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ElectronicPaymentOptionsWithDelayedCapturePayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElectronicPaymentOptionsWithDelayedCapturePayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
