# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetPaymentMethodForAccountResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_holder_info': 'GetAccountPMAccountHolderInfo',
        'bank_identification_number': 'str',
        'created_by': 'str',
        'created_on': 'datetime',
        'credit_card_mask_number': 'str',
        'credit_card_type': 'str',
        'device_session_id': 'str',
        'existing_mandate': 'str',
        'id': 'str',
        'ip_address': 'str',
        'is_default': 'bool',
        'last_failed_sale_transaction_date': 'datetime',
        'last_transaction': 'str',
        'last_transaction_time': 'datetime',
        'mandate_info': 'AccountPMMandateInfo',
        'max_consecutive_payment_failures': 'int',
        'num_consecutive_failures': 'int',
        'payment_retry_window': 'int',
        'second_token_id': 'str',
        'status': 'str',
        'token_id': 'str',
        'total_number_of_error_payments': 'int',
        'total_number_of_processed_payments': 'int',
        'type': 'str',
        'updated_by': 'str',
        'updated_on': 'datetime',
        'use_default_retry_rule': 'bool',
        'iban': 'str',
        'account_number': 'str',
        'bank_code': 'str',
        'bank_transfer_type': 'str',
        'branch_code': 'str',
        'business_identification_code': 'str',
        'identity_number': 'str',
        'bank_aba_code': 'str',
        'bank_account_name': 'str',
        'card_number': 'str',
        'expiration_month': 'int',
        'expiration_year': 'int',
        'security_code': 'str',
        'baid': 'str',
        'email': 'str',
        'preapproval_key': 'str',
        'google_bin': 'str',
        'google_card_number': 'str',
        'google_card_type': 'str',
        'google_expiry_date': 'str',
        'google_gateway_token': 'str',
        'apple_bin': 'str',
        'apple_card_number': 'str',
        'apple_card_type': 'str',
        'apple_expiry_date': 'str',
        'apple_gateway_token': 'str'
    }

    attribute_map = {
        'account_holder_info': 'accountHolderInfo',
        'bank_identification_number': 'bankIdentificationNumber',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'credit_card_mask_number': 'creditCardMaskNumber',
        'credit_card_type': 'creditCardType',
        'device_session_id': 'deviceSessionId',
        'existing_mandate': 'existingMandate',
        'id': 'id',
        'ip_address': 'ipAddress',
        'is_default': 'isDefault',
        'last_failed_sale_transaction_date': 'lastFailedSaleTransactionDate',
        'last_transaction': 'lastTransaction',
        'last_transaction_time': 'lastTransactionTime',
        'mandate_info': 'mandateInfo',
        'max_consecutive_payment_failures': 'maxConsecutivePaymentFailures',
        'num_consecutive_failures': 'numConsecutiveFailures',
        'payment_retry_window': 'paymentRetryWindow',
        'second_token_id': 'secondTokenId',
        'status': 'status',
        'token_id': 'tokenId',
        'total_number_of_error_payments': 'totalNumberOfErrorPayments',
        'total_number_of_processed_payments': 'totalNumberOfProcessedPayments',
        'type': 'type',
        'updated_by': 'updatedBy',
        'updated_on': 'updatedOn',
        'use_default_retry_rule': 'useDefaultRetryRule',
        'iban': 'IBAN',
        'account_number': 'accountNumber',
        'bank_code': 'bankCode',
        'bank_transfer_type': 'bankTransferType',
        'branch_code': 'branchCode',
        'business_identification_code': 'businessIdentificationCode',
        'identity_number': 'identityNumber',
        'bank_aba_code': 'bankABACode',
        'bank_account_name': 'bankAccountName',
        'card_number': 'cardNumber',
        'expiration_month': 'expirationMonth',
        'expiration_year': 'expirationYear',
        'security_code': 'securityCode',
        'baid': 'BAID',
        'email': 'email',
        'preapproval_key': 'preapprovalKey',
        'google_bin': 'googleBIN',
        'google_card_number': 'googleCardNumber',
        'google_card_type': 'googleCardType',
        'google_expiry_date': 'googleExpiryDate',
        'google_gateway_token': 'googleGatewayToken',
        'apple_bin': 'appleBIN',
        'apple_card_number': 'appleCardNumber',
        'apple_card_type': 'appleCardType',
        'apple_expiry_date': 'appleExpiryDate',
        'apple_gateway_token': 'appleGatewayToken'
    }

    def __init__(self, account_holder_info=None, bank_identification_number=None, created_by=None, created_on=None, credit_card_mask_number=None, credit_card_type=None, device_session_id=None, existing_mandate=None, id=None, ip_address=None, is_default=None, last_failed_sale_transaction_date=None, last_transaction=None, last_transaction_time=None, mandate_info=None, max_consecutive_payment_failures=None, num_consecutive_failures=None, payment_retry_window=None, second_token_id=None, status=None, token_id=None, total_number_of_error_payments=None, total_number_of_processed_payments=None, type=None, updated_by=None, updated_on=None, use_default_retry_rule=None, iban=None, account_number=None, bank_code=None, bank_transfer_type=None, branch_code=None, business_identification_code=None, identity_number=None, bank_aba_code=None, bank_account_name=None, card_number=None, expiration_month=None, expiration_year=None, security_code=None, baid=None, email=None, preapproval_key=None, google_bin=None, google_card_number=None, google_card_type=None, google_expiry_date=None, google_gateway_token=None, apple_bin=None, apple_card_number=None, apple_card_type=None, apple_expiry_date=None, apple_gateway_token=None):  # noqa: E501
        """GetPaymentMethodForAccountResponse - a model defined in Swagger"""  # noqa: E501
        self._account_holder_info = None
        self._bank_identification_number = None
        self._created_by = None
        self._created_on = None
        self._credit_card_mask_number = None
        self._credit_card_type = None
        self._device_session_id = None
        self._existing_mandate = None
        self._id = None
        self._ip_address = None
        self._is_default = None
        self._last_failed_sale_transaction_date = None
        self._last_transaction = None
        self._last_transaction_time = None
        self._mandate_info = None
        self._max_consecutive_payment_failures = None
        self._num_consecutive_failures = None
        self._payment_retry_window = None
        self._second_token_id = None
        self._status = None
        self._token_id = None
        self._total_number_of_error_payments = None
        self._total_number_of_processed_payments = None
        self._type = None
        self._updated_by = None
        self._updated_on = None
        self._use_default_retry_rule = None
        self._iban = None
        self._account_number = None
        self._bank_code = None
        self._bank_transfer_type = None
        self._branch_code = None
        self._business_identification_code = None
        self._identity_number = None
        self._bank_aba_code = None
        self._bank_account_name = None
        self._card_number = None
        self._expiration_month = None
        self._expiration_year = None
        self._security_code = None
        self._baid = None
        self._email = None
        self._preapproval_key = None
        self._google_bin = None
        self._google_card_number = None
        self._google_card_type = None
        self._google_expiry_date = None
        self._google_gateway_token = None
        self._apple_bin = None
        self._apple_card_number = None
        self._apple_card_type = None
        self._apple_expiry_date = None
        self._apple_gateway_token = None
        self.discriminator = None
        if account_holder_info is not None:
            self.account_holder_info = account_holder_info
        if bank_identification_number is not None:
            self.bank_identification_number = bank_identification_number
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if credit_card_mask_number is not None:
            self.credit_card_mask_number = credit_card_mask_number
        if credit_card_type is not None:
            self.credit_card_type = credit_card_type
        if device_session_id is not None:
            self.device_session_id = device_session_id
        if existing_mandate is not None:
            self.existing_mandate = existing_mandate
        if id is not None:
            self.id = id
        if ip_address is not None:
            self.ip_address = ip_address
        if is_default is not None:
            self.is_default = is_default
        if last_failed_sale_transaction_date is not None:
            self.last_failed_sale_transaction_date = last_failed_sale_transaction_date
        if last_transaction is not None:
            self.last_transaction = last_transaction
        if last_transaction_time is not None:
            self.last_transaction_time = last_transaction_time
        if mandate_info is not None:
            self.mandate_info = mandate_info
        if max_consecutive_payment_failures is not None:
            self.max_consecutive_payment_failures = max_consecutive_payment_failures
        if num_consecutive_failures is not None:
            self.num_consecutive_failures = num_consecutive_failures
        if payment_retry_window is not None:
            self.payment_retry_window = payment_retry_window
        if second_token_id is not None:
            self.second_token_id = second_token_id
        if status is not None:
            self.status = status
        if token_id is not None:
            self.token_id = token_id
        if total_number_of_error_payments is not None:
            self.total_number_of_error_payments = total_number_of_error_payments
        if total_number_of_processed_payments is not None:
            self.total_number_of_processed_payments = total_number_of_processed_payments
        if type is not None:
            self.type = type
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on
        if use_default_retry_rule is not None:
            self.use_default_retry_rule = use_default_retry_rule
        if iban is not None:
            self.iban = iban
        if account_number is not None:
            self.account_number = account_number
        if bank_code is not None:
            self.bank_code = bank_code
        if bank_transfer_type is not None:
            self.bank_transfer_type = bank_transfer_type
        if branch_code is not None:
            self.branch_code = branch_code
        if business_identification_code is not None:
            self.business_identification_code = business_identification_code
        if identity_number is not None:
            self.identity_number = identity_number
        if bank_aba_code is not None:
            self.bank_aba_code = bank_aba_code
        if bank_account_name is not None:
            self.bank_account_name = bank_account_name
        if card_number is not None:
            self.card_number = card_number
        if expiration_month is not None:
            self.expiration_month = expiration_month
        if expiration_year is not None:
            self.expiration_year = expiration_year
        if security_code is not None:
            self.security_code = security_code
        if baid is not None:
            self.baid = baid
        if email is not None:
            self.email = email
        if preapproval_key is not None:
            self.preapproval_key = preapproval_key
        if google_bin is not None:
            self.google_bin = google_bin
        if google_card_number is not None:
            self.google_card_number = google_card_number
        if google_card_type is not None:
            self.google_card_type = google_card_type
        if google_expiry_date is not None:
            self.google_expiry_date = google_expiry_date
        if google_gateway_token is not None:
            self.google_gateway_token = google_gateway_token
        if apple_bin is not None:
            self.apple_bin = apple_bin
        if apple_card_number is not None:
            self.apple_card_number = apple_card_number
        if apple_card_type is not None:
            self.apple_card_type = apple_card_type
        if apple_expiry_date is not None:
            self.apple_expiry_date = apple_expiry_date
        if apple_gateway_token is not None:
            self.apple_gateway_token = apple_gateway_token

    @property
    def account_holder_info(self):
        """Gets the account_holder_info of this GetPaymentMethodForAccountResponse.  # noqa: E501


        :return: The account_holder_info of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: GetAccountPMAccountHolderInfo
        """
        return self._account_holder_info

    @account_holder_info.setter
    def account_holder_info(self, account_holder_info):
        """Sets the account_holder_info of this GetPaymentMethodForAccountResponse.


        :param account_holder_info: The account_holder_info of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: GetAccountPMAccountHolderInfo
        """

        self._account_holder_info = account_holder_info

    @property
    def bank_identification_number(self):
        """Gets the bank_identification_number of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.   # noqa: E501

        :return: The bank_identification_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_identification_number

    @bank_identification_number.setter
    def bank_identification_number(self, bank_identification_number):
        """Sets the bank_identification_number of this GetPaymentMethodForAccountResponse.

        The first six or eight digits of the payment method's number, such as the credit card number or account number. Banks use this number to identify a payment method.   # noqa: E501

        :param bank_identification_number: The bank_identification_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._bank_identification_number = bank_identification_number

    @property
    def created_by(self):
        """Gets the created_by of this GetPaymentMethodForAccountResponse.  # noqa: E501

        ID of the user who created this payment method.  # noqa: E501

        :return: The created_by of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this GetPaymentMethodForAccountResponse.

        ID of the user who created this payment method.  # noqa: E501

        :param created_by: The created_by of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The date and time when the payment method was created, in `yyyy-mm-dd hh:mm:ss` format.   # noqa: E501

        :return: The created_on of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this GetPaymentMethodForAccountResponse.

        The date and time when the payment method was created, in `yyyy-mm-dd hh:mm:ss` format.   # noqa: E501

        :param created_on: The created_on of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: datetime
        """

        self._created_on = created_on

    @property
    def credit_card_mask_number(self):
        """Gets the credit_card_mask_number of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The masked credit card number, such as: ``` *********1112 ``` **Note:** This field is only returned for Credit Card Reference Transaction payment type.   # noqa: E501

        :return: The credit_card_mask_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_mask_number

    @credit_card_mask_number.setter
    def credit_card_mask_number(self, credit_card_mask_number):
        """Sets the credit_card_mask_number of this GetPaymentMethodForAccountResponse.

        The masked credit card number, such as: ``` *********1112 ``` **Note:** This field is only returned for Credit Card Reference Transaction payment type.   # noqa: E501

        :param credit_card_mask_number: The credit_card_mask_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_mask_number = credit_card_mask_number

    @property
    def credit_card_type(self):
        """Gets the credit_card_type of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The type of the credit card or debit card.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).  **Note:** This field is only returned for the Credit Card and Debit Card payment types.   # noqa: E501

        :return: The credit_card_type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_type

    @credit_card_type.setter
    def credit_card_type(self, credit_card_type):
        """Sets the credit_card_type of this GetPaymentMethodForAccountResponse.

        The type of the credit card or debit card.  Possible values include `Visa`, `MasterCard`, `AmericanExpress`, `Discover`, `JCB`, and `Diners`. For more information about credit card types supported by different payment gateways, see [Supported Payment Gateways](https://knowledgecenter.zuora.com/CB_Billing/M_Payment_Gateways/Supported_Payment_Gateways).  **Note:** This field is only returned for the Credit Card and Debit Card payment types.   # noqa: E501

        :param credit_card_type: The credit_card_type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._credit_card_type = credit_card_type

    @property
    def device_session_id(self):
        """Gets the device_session_id of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The session ID of the user when the `PaymentMethod` was created or updated.   # noqa: E501

        :return: The device_session_id of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._device_session_id

    @device_session_id.setter
    def device_session_id(self, device_session_id):
        """Sets the device_session_id of this GetPaymentMethodForAccountResponse.

        The session ID of the user when the `PaymentMethod` was created or updated.   # noqa: E501

        :param device_session_id: The device_session_id of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._device_session_id = device_session_id

    @property
    def existing_mandate(self):
        """Gets the existing_mandate of this GetPaymentMethodForAccountResponse.  # noqa: E501

        Indicates whether the mandate is an existing mandate.   # noqa: E501

        :return: The existing_mandate of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._existing_mandate

    @existing_mandate.setter
    def existing_mandate(self, existing_mandate):
        """Sets the existing_mandate of this GetPaymentMethodForAccountResponse.

        Indicates whether the mandate is an existing mandate.   # noqa: E501

        :param existing_mandate: The existing_mandate of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Yes", "No"]  # noqa: E501
        if existing_mandate not in allowed_values:
            raise ValueError(
                "Invalid value for `existing_mandate` ({0}), must be one of {1}"  # noqa: E501
                .format(existing_mandate, allowed_values)
            )

        self._existing_mandate = existing_mandate

    @property
    def id(self):
        """Gets the id of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The payment method ID.   # noqa: E501

        :return: The id of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GetPaymentMethodForAccountResponse.

        The payment method ID.   # noqa: E501

        :param id: The id of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def ip_address(self):
        """Gets the ip_address of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The IP address of the user when the payment method was created or updated.   # noqa: E501

        :return: The ip_address of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this GetPaymentMethodForAccountResponse.

        The IP address of the user when the payment method was created or updated.   # noqa: E501

        :param ip_address: The ip_address of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._ip_address = ip_address

    @property
    def is_default(self):
        """Gets the is_default of this GetPaymentMethodForAccountResponse.  # noqa: E501

        Indicates whether this payment method is the default payment method for the account.   # noqa: E501

        :return: The is_default of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this GetPaymentMethodForAccountResponse.

        Indicates whether this payment method is the default payment method for the account.   # noqa: E501

        :param is_default: The is_default of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: bool
        """

        self._is_default = is_default

    @property
    def last_failed_sale_transaction_date(self):
        """Gets the last_failed_sale_transaction_date of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The date of the last failed attempt to collect payment with this payment method.   # noqa: E501

        :return: The last_failed_sale_transaction_date of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_failed_sale_transaction_date

    @last_failed_sale_transaction_date.setter
    def last_failed_sale_transaction_date(self, last_failed_sale_transaction_date):
        """Sets the last_failed_sale_transaction_date of this GetPaymentMethodForAccountResponse.

        The date of the last failed attempt to collect payment with this payment method.   # noqa: E501

        :param last_failed_sale_transaction_date: The last_failed_sale_transaction_date of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: datetime
        """

        self._last_failed_sale_transaction_date = last_failed_sale_transaction_date

    @property
    def last_transaction(self):
        """Gets the last_transaction of this GetPaymentMethodForAccountResponse.  # noqa: E501

        ID of the last transaction of this payment method.  # noqa: E501

        :return: The last_transaction of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_transaction

    @last_transaction.setter
    def last_transaction(self, last_transaction):
        """Sets the last_transaction of this GetPaymentMethodForAccountResponse.

        ID of the last transaction of this payment method.  # noqa: E501

        :param last_transaction: The last_transaction of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._last_transaction = last_transaction

    @property
    def last_transaction_time(self):
        """Gets the last_transaction_time of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The time when the last transaction of this payment method happened.  # noqa: E501

        :return: The last_transaction_time of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._last_transaction_time

    @last_transaction_time.setter
    def last_transaction_time(self, last_transaction_time):
        """Sets the last_transaction_time of this GetPaymentMethodForAccountResponse.

        The time when the last transaction of this payment method happened.  # noqa: E501

        :param last_transaction_time: The last_transaction_time of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: datetime
        """

        self._last_transaction_time = last_transaction_time

    @property
    def mandate_info(self):
        """Gets the mandate_info of this GetPaymentMethodForAccountResponse.  # noqa: E501


        :return: The mandate_info of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: AccountPMMandateInfo
        """
        return self._mandate_info

    @mandate_info.setter
    def mandate_info(self, mandate_info):
        """Sets the mandate_info of this GetPaymentMethodForAccountResponse.


        :param mandate_info: The mandate_info of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: AccountPMMandateInfo
        """

        self._mandate_info = mandate_info

    @property
    def max_consecutive_payment_failures(self):
        """Gets the max_consecutive_payment_failures of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The number of allowable consecutive failures Zuora attempts with the payment method before stopping.   # noqa: E501

        :return: The max_consecutive_payment_failures of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._max_consecutive_payment_failures

    @max_consecutive_payment_failures.setter
    def max_consecutive_payment_failures(self, max_consecutive_payment_failures):
        """Sets the max_consecutive_payment_failures of this GetPaymentMethodForAccountResponse.

        The number of allowable consecutive failures Zuora attempts with the payment method before stopping.   # noqa: E501

        :param max_consecutive_payment_failures: The max_consecutive_payment_failures of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: int
        """

        self._max_consecutive_payment_failures = max_consecutive_payment_failures

    @property
    def num_consecutive_failures(self):
        """Gets the num_consecutive_failures of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment.    # noqa: E501

        :return: The num_consecutive_failures of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._num_consecutive_failures

    @num_consecutive_failures.setter
    def num_consecutive_failures(self, num_consecutive_failures):
        """Sets the num_consecutive_failures of this GetPaymentMethodForAccountResponse.

        The number of consecutive failed payments for this payment method. It is reset to `0` upon successful payment.    # noqa: E501

        :param num_consecutive_failures: The num_consecutive_failures of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: int
        """

        self._num_consecutive_failures = num_consecutive_failures

    @property
    def payment_retry_window(self):
        """Gets the payment_retry_window of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.   # noqa: E501

        :return: The payment_retry_window of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._payment_retry_window

    @payment_retry_window.setter
    def payment_retry_window(self, payment_retry_window):
        """Sets the payment_retry_window of this GetPaymentMethodForAccountResponse.

        The retry interval setting, which prevents making a payment attempt if the last failed attempt was within the last specified number of hours.   # noqa: E501

        :param payment_retry_window: The payment_retry_window of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: int
        """

        self._payment_retry_window = payment_retry_window

    @property
    def second_token_id(self):
        """Gets the second_token_id of this GetPaymentMethodForAccountResponse.  # noqa: E501

        A gateway unique identifier that replaces sensitive payment method data.  **Note:** This field is only returned for the Credit Card Reference Transaction payment type.   # noqa: E501

        :return: The second_token_id of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._second_token_id

    @second_token_id.setter
    def second_token_id(self, second_token_id):
        """Sets the second_token_id of this GetPaymentMethodForAccountResponse.

        A gateway unique identifier that replaces sensitive payment method data.  **Note:** This field is only returned for the Credit Card Reference Transaction payment type.   # noqa: E501

        :param second_token_id: The second_token_id of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._second_token_id = second_token_id

    @property
    def status(self):
        """Gets the status of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The status of the payment method.   # noqa: E501

        :return: The status of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GetPaymentMethodForAccountResponse.

        The status of the payment method.   # noqa: E501

        :param status: The status of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Active", "Closed", "Scrubbed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def token_id(self):
        """Gets the token_id of this GetPaymentMethodForAccountResponse.  # noqa: E501

        A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile.  **Note:** This field is only returned for the Credit Card Reference Transaction payment type.   # noqa: E501

        :return: The token_id of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this GetPaymentMethodForAccountResponse.

        A gateway unique identifier that replaces sensitive payment method data or represents a gateway's unique customer profile.  **Note:** This field is only returned for the Credit Card Reference Transaction payment type.   # noqa: E501

        :param token_id: The token_id of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._token_id = token_id

    @property
    def total_number_of_error_payments(self):
        """Gets the total_number_of_error_payments of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The number of error payments that used this payment method.   # noqa: E501

        :return: The total_number_of_error_payments of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_number_of_error_payments

    @total_number_of_error_payments.setter
    def total_number_of_error_payments(self, total_number_of_error_payments):
        """Sets the total_number_of_error_payments of this GetPaymentMethodForAccountResponse.

        The number of error payments that used this payment method.   # noqa: E501

        :param total_number_of_error_payments: The total_number_of_error_payments of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: int
        """

        self._total_number_of_error_payments = total_number_of_error_payments

    @property
    def total_number_of_processed_payments(self):
        """Gets the total_number_of_processed_payments of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The number of successful payments that used this payment method.   # noqa: E501

        :return: The total_number_of_processed_payments of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_number_of_processed_payments

    @total_number_of_processed_payments.setter
    def total_number_of_processed_payments(self, total_number_of_processed_payments):
        """Sets the total_number_of_processed_payments of this GetPaymentMethodForAccountResponse.

        The number of successful payments that used this payment method.   # noqa: E501

        :param total_number_of_processed_payments: The total_number_of_processed_payments of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: int
        """

        self._total_number_of_processed_payments = total_number_of_processed_payments

    @property
    def type(self):
        """Gets the type of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The type of the payment method. For example, `CreditCard`.   # noqa: E501

        :return: The type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GetPaymentMethodForAccountResponse.

        The type of the payment method. For example, `CreditCard`.   # noqa: E501

        :param type: The type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def updated_by(self):
        """Gets the updated_by of this GetPaymentMethodForAccountResponse.  # noqa: E501

        ID of the user who made the last update to this payment method.  # noqa: E501

        :return: The updated_by of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this GetPaymentMethodForAccountResponse.

        ID of the user who made the last update to this payment method.  # noqa: E501

        :param updated_by: The updated_by of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The last date and time when the payment method was updated, in `yyyy-mm-dd hh:mm:ss` format.   # noqa: E501

        :return: The updated_on of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this GetPaymentMethodForAccountResponse.

        The last date and time when the payment method was updated, in `yyyy-mm-dd hh:mm:ss` format.   # noqa: E501

        :param updated_on: The updated_on of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    @property
    def use_default_retry_rule(self):
        """Gets the use_default_retry_rule of this GetPaymentMethodForAccountResponse.  # noqa: E501

        Indicates whether this payment method uses the default retry rules configured in the Zuora Payments settings.   # noqa: E501

        :return: The use_default_retry_rule of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: bool
        """
        return self._use_default_retry_rule

    @use_default_retry_rule.setter
    def use_default_retry_rule(self, use_default_retry_rule):
        """Sets the use_default_retry_rule of this GetPaymentMethodForAccountResponse.

        Indicates whether this payment method uses the default retry rules configured in the Zuora Payments settings.   # noqa: E501

        :param use_default_retry_rule: The use_default_retry_rule of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: bool
        """

        self._use_default_retry_rule = use_default_retry_rule

    @property
    def iban(self):
        """Gets the iban of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The International Bank Account Number used to create the SEPA payment method. The value is masked.   # noqa: E501

        :return: The iban of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._iban

    @iban.setter
    def iban(self, iban):
        """Sets the iban of this GetPaymentMethodForAccountResponse.

        The International Bank Account Number used to create the SEPA payment method. The value is masked.   # noqa: E501

        :param iban: The iban of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._iban = iban

    @property
    def account_number(self):
        """Gets the account_number of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The number of the customer's bank account and it is masked.   # noqa: E501

        :return: The account_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this GetPaymentMethodForAccountResponse.

        The number of the customer's bank account and it is masked.   # noqa: E501

        :param account_number: The account_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def bank_code(self):
        """Gets the bank_code of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The sort code or number that identifies the bank. This is also known as the sort code.            # noqa: E501

        :return: The bank_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_code

    @bank_code.setter
    def bank_code(self, bank_code):
        """Sets the bank_code of this GetPaymentMethodForAccountResponse.

        The sort code or number that identifies the bank. This is also known as the sort code.            # noqa: E501

        :param bank_code: The bank_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._bank_code = bank_code

    @property
    def bank_transfer_type(self):
        """Gets the bank_transfer_type of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The type of the Bank Transfer payment method. For example, `SEPA`.   # noqa: E501

        :return: The bank_transfer_type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_transfer_type

    @bank_transfer_type.setter
    def bank_transfer_type(self, bank_transfer_type):
        """Sets the bank_transfer_type of this GetPaymentMethodForAccountResponse.

        The type of the Bank Transfer payment method. For example, `SEPA`.   # noqa: E501

        :param bank_transfer_type: The bank_transfer_type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._bank_transfer_type = bank_transfer_type

    @property
    def branch_code(self):
        """Gets the branch_code of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The branch code of the bank used for Direct Debit.   # noqa: E501

        :return: The branch_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._branch_code

    @branch_code.setter
    def branch_code(self, branch_code):
        """Sets the branch_code of this GetPaymentMethodForAccountResponse.

        The branch code of the bank used for Direct Debit.   # noqa: E501

        :param branch_code: The branch_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._branch_code = branch_code

    @property
    def business_identification_code(self):
        """Gets the business_identification_code of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The BIC code used for SEPA. The value is masked.          # noqa: E501

        :return: The business_identification_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._business_identification_code

    @business_identification_code.setter
    def business_identification_code(self, business_identification_code):
        """Sets the business_identification_code of this GetPaymentMethodForAccountResponse.

        The BIC code used for SEPA. The value is masked.          # noqa: E501

        :param business_identification_code: The business_identification_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._business_identification_code = business_identification_code

    @property
    def identity_number(self):
        """Gets the identity_number of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The identity number used for Bank Transfer.           # noqa: E501

        :return: The identity_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._identity_number

    @identity_number.setter
    def identity_number(self, identity_number):
        """Sets the identity_number of this GetPaymentMethodForAccountResponse.

        The identity number used for Bank Transfer.           # noqa: E501

        :param identity_number: The identity_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._identity_number = identity_number

    @property
    def bank_aba_code(self):
        """Gets the bank_aba_code of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :return: The bank_aba_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_aba_code

    @bank_aba_code.setter
    def bank_aba_code(self, bank_aba_code):
        """Sets the bank_aba_code of this GetPaymentMethodForAccountResponse.

        The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :param bank_aba_code: The bank_aba_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._bank_aba_code = bank_aba_code

    @property
    def bank_account_name(self):
        """Gets the bank_account_name of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :return: The bank_account_name of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_name

    @bank_account_name.setter
    def bank_account_name(self, bank_account_name):
        """Sets the bank_account_name of this GetPaymentMethodForAccountResponse.

        The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :param bank_account_name: The bank_account_name of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._bank_account_name = bank_account_name

    @property
    def card_number(self):
        """Gets the card_number of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The masked credit card number.  When `cardNumber` is `null`, the following fields will not be returned:   - `expirationMonth`   - `expirationYear`   - `accountHolderInfo`   # noqa: E501

        :return: The card_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this GetPaymentMethodForAccountResponse.

        The masked credit card number.  When `cardNumber` is `null`, the following fields will not be returned:   - `expirationMonth`   - `expirationYear`   - `accountHolderInfo`   # noqa: E501

        :param card_number: The card_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def expiration_month(self):
        """Gets the expiration_month of this GetPaymentMethodForAccountResponse.  # noqa: E501

        One or two digits expiration month (1-12).   # noqa: E501

        :return: The expiration_month of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._expiration_month

    @expiration_month.setter
    def expiration_month(self, expiration_month):
        """Sets the expiration_month of this GetPaymentMethodForAccountResponse.

        One or two digits expiration month (1-12).   # noqa: E501

        :param expiration_month: The expiration_month of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: int
        """

        self._expiration_month = expiration_month

    @property
    def expiration_year(self):
        """Gets the expiration_year of this GetPaymentMethodForAccountResponse.  # noqa: E501

        Four-digit expiration year.   # noqa: E501

        :return: The expiration_year of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: int
        """
        return self._expiration_year

    @expiration_year.setter
    def expiration_year(self, expiration_year):
        """Sets the expiration_year of this GetPaymentMethodForAccountResponse.

        Four-digit expiration year.   # noqa: E501

        :param expiration_year: The expiration_year of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: int
        """

        self._expiration_year = expiration_year

    @property
    def security_code(self):
        """Gets the security_code of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The CVV or CVV2 security code for the credit card or debit card.             Only required if changing expirationMonth, expirationYear, or cardHolderName.             To ensure PCI compliance, this value isn''t stored and can''t be queried.    # noqa: E501

        :return: The security_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._security_code

    @security_code.setter
    def security_code(self, security_code):
        """Sets the security_code of this GetPaymentMethodForAccountResponse.

        The CVV or CVV2 security code for the credit card or debit card.             Only required if changing expirationMonth, expirationYear, or cardHolderName.             To ensure PCI compliance, this value isn''t stored and can''t be queried.    # noqa: E501

        :param security_code: The security_code of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._security_code = security_code

    @property
    def baid(self):
        """Gets the baid of this GetPaymentMethodForAccountResponse.  # noqa: E501

        ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.   # noqa: E501

        :return: The baid of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._baid

    @baid.setter
    def baid(self, baid):
        """Sets the baid of this GetPaymentMethodForAccountResponse.

        ID of a PayPal billing agreement. For example, I-1TJ3GAGG82Y9.   # noqa: E501

        :param baid: The baid of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._baid = baid

    @property
    def email(self):
        """Gets the email of this GetPaymentMethodForAccountResponse.  # noqa: E501

        Email address associated with the PayPal payment method.    # noqa: E501

        :return: The email of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GetPaymentMethodForAccountResponse.

        Email address associated with the PayPal payment method.    # noqa: E501

        :param email: The email of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def preapproval_key(self):
        """Gets the preapproval_key of this GetPaymentMethodForAccountResponse.  # noqa: E501

        The PayPal preapproval key.                   # noqa: E501

        :return: The preapproval_key of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._preapproval_key

    @preapproval_key.setter
    def preapproval_key(self, preapproval_key):
        """Sets the preapproval_key of this GetPaymentMethodForAccountResponse.

        The PayPal preapproval key.                   # noqa: E501

        :param preapproval_key: The preapproval_key of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._preapproval_key = preapproval_key

    @property
    def google_bin(self):
        """Gets the google_bin of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Google Pay payment methods.   # noqa: E501

        :return: The google_bin of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._google_bin

    @google_bin.setter
    def google_bin(self, google_bin):
        """Sets the google_bin of this GetPaymentMethodForAccountResponse.

        This field is only available for Google Pay payment methods.   # noqa: E501

        :param google_bin: The google_bin of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._google_bin = google_bin

    @property
    def google_card_number(self):
        """Gets the google_card_number of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Google Pay payment methods.   # noqa: E501

        :return: The google_card_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._google_card_number

    @google_card_number.setter
    def google_card_number(self, google_card_number):
        """Sets the google_card_number of this GetPaymentMethodForAccountResponse.

        This field is only available for Google Pay payment methods.   # noqa: E501

        :param google_card_number: The google_card_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._google_card_number = google_card_number

    @property
    def google_card_type(self):
        """Gets the google_card_type of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Google Pay payment methods.  For Google Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.   # noqa: E501

        :return: The google_card_type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._google_card_type

    @google_card_type.setter
    def google_card_type(self, google_card_type):
        """Sets the google_card_type of this GetPaymentMethodForAccountResponse.

        This field is only available for Google Pay payment methods.  For Google Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.   # noqa: E501

        :param google_card_type: The google_card_type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._google_card_type = google_card_type

    @property
    def google_expiry_date(self):
        """Gets the google_expiry_date of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Google Pay payment methods.   # noqa: E501

        :return: The google_expiry_date of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._google_expiry_date

    @google_expiry_date.setter
    def google_expiry_date(self, google_expiry_date):
        """Sets the google_expiry_date of this GetPaymentMethodForAccountResponse.

        This field is only available for Google Pay payment methods.   # noqa: E501

        :param google_expiry_date: The google_expiry_date of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._google_expiry_date = google_expiry_date

    @property
    def google_gateway_token(self):
        """Gets the google_gateway_token of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Google Pay payment methods.   # noqa: E501

        :return: The google_gateway_token of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._google_gateway_token

    @google_gateway_token.setter
    def google_gateway_token(self, google_gateway_token):
        """Sets the google_gateway_token of this GetPaymentMethodForAccountResponse.

        This field is only available for Google Pay payment methods.   # noqa: E501

        :param google_gateway_token: The google_gateway_token of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._google_gateway_token = google_gateway_token

    @property
    def apple_bin(self):
        """Gets the apple_bin of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Apple Pay payment methods.   # noqa: E501

        :return: The apple_bin of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._apple_bin

    @apple_bin.setter
    def apple_bin(self, apple_bin):
        """Sets the apple_bin of this GetPaymentMethodForAccountResponse.

        This field is only available for Apple Pay payment methods.   # noqa: E501

        :param apple_bin: The apple_bin of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._apple_bin = apple_bin

    @property
    def apple_card_number(self):
        """Gets the apple_card_number of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Apple Pay payment methods.   # noqa: E501

        :return: The apple_card_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._apple_card_number

    @apple_card_number.setter
    def apple_card_number(self, apple_card_number):
        """Sets the apple_card_number of this GetPaymentMethodForAccountResponse.

        This field is only available for Apple Pay payment methods.   # noqa: E501

        :param apple_card_number: The apple_card_number of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._apple_card_number = apple_card_number

    @property
    def apple_card_type(self):
        """Gets the apple_card_type of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Apple Pay payment methods.  For Apple Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.   # noqa: E501

        :return: The apple_card_type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._apple_card_type

    @apple_card_type.setter
    def apple_card_type(self, apple_card_type):
        """Sets the apple_card_type of this GetPaymentMethodForAccountResponse.

        This field is only available for Apple Pay payment methods.  For Apple Pay payment methods on Adyen, the first 100 characters of [paymentMethodVariant](https://docs.adyen.com/development-resources/paymentmethodvariant) returned from Adyen are stored in this field.   # noqa: E501

        :param apple_card_type: The apple_card_type of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._apple_card_type = apple_card_type

    @property
    def apple_expiry_date(self):
        """Gets the apple_expiry_date of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Apple Pay payment methods.   # noqa: E501

        :return: The apple_expiry_date of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._apple_expiry_date

    @apple_expiry_date.setter
    def apple_expiry_date(self, apple_expiry_date):
        """Sets the apple_expiry_date of this GetPaymentMethodForAccountResponse.

        This field is only available for Apple Pay payment methods.   # noqa: E501

        :param apple_expiry_date: The apple_expiry_date of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._apple_expiry_date = apple_expiry_date

    @property
    def apple_gateway_token(self):
        """Gets the apple_gateway_token of this GetPaymentMethodForAccountResponse.  # noqa: E501

        This field is only available for Apple Pay payment methods.   # noqa: E501

        :return: The apple_gateway_token of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :rtype: str
        """
        return self._apple_gateway_token

    @apple_gateway_token.setter
    def apple_gateway_token(self, apple_gateway_token):
        """Sets the apple_gateway_token of this GetPaymentMethodForAccountResponse.

        This field is only available for Apple Pay payment methods.   # noqa: E501

        :param apple_gateway_token: The apple_gateway_token of this GetPaymentMethodForAccountResponse.  # noqa: E501
        :type: str
        """

        self._apple_gateway_token = apple_gateway_token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPaymentMethodForAccountResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPaymentMethodForAccountResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
