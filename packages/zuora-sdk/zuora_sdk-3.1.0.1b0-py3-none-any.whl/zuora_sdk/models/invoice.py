# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Invoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'adjustment_amount': 'float',
        'amount': 'float',
        'amount_without_tax': 'float',
        'auto_pay': 'bool',
        'balance': 'float',
        'bill_run_id': 'str',
        'bill_to_contact_id': 'str',
        'bill_to_contact_snapshot_id': 'str',
        'comments': 'str',
        'created_by_id': 'str',
        'created_date': 'str',
        'credit_balance_adjustment_amount': 'float',
        'credit_memo_amount': 'float',
        'currency': 'str',
        'discount': 'float',
        'due_date': 'date',
        'e_invoice_status': 'EInvoiceStatus',
        'e_invoice_error_code': 'str',
        'e_invoice_error_message': 'str',
        'e_invoice_file_id': 'str',
        'id': 'str',
        'includes_one_time': 'bool',
        'includes_recurring': 'bool',
        'includes_usage': 'bool',
        'invoice_date': 'date',
        'invoice_group_number': 'str',
        'invoice_number': 'str',
        'last_email_sent_date': 'str',
        'payment_amount': 'float',
        'payment_term': 'str',
        'posted_by': 'str',
        'posted_date': 'date',
        'refund_amount': 'float',
        'sequence_set_id': 'str',
        'sold_to_contact_id': 'str',
        'sold_to_contact_snapshot_id': 'str',
        'source': 'str',
        'source_id': 'str',
        'source_type': 'str',
        'status': 'BillingDocumentStatus',
        'target_date': 'date',
        'tax_amount': 'float',
        'tax_exempt_amount': 'float',
        'tax_message': 'str',
        'tax_status': 'TaxStatus',
        'template_id': 'str',
        'transferred_to_accounting': 'TransferredToAccountingStatus',
        'updated_by_id': 'str',
        'updated_date': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'adjustment_amount': 'adjustmentAmount',
        'amount': 'amount',
        'amount_without_tax': 'amountWithoutTax',
        'auto_pay': 'autoPay',
        'balance': 'balance',
        'bill_run_id': 'billRunId',
        'bill_to_contact_id': 'billToContactId',
        'bill_to_contact_snapshot_id': 'billToContactSnapshotId',
        'comments': 'comments',
        'created_by_id': 'createdById',
        'created_date': 'createdDate',
        'credit_balance_adjustment_amount': 'creditBalanceAdjustmentAmount',
        'credit_memo_amount': 'creditMemoAmount',
        'currency': 'currency',
        'discount': 'discount',
        'due_date': 'dueDate',
        'e_invoice_status': 'eInvoiceStatus',
        'e_invoice_error_code': 'eInvoiceErrorCode',
        'e_invoice_error_message': 'eInvoiceErrorMessage',
        'e_invoice_file_id': 'eInvoiceFileId',
        'id': 'id',
        'includes_one_time': 'includesOneTime',
        'includes_recurring': 'includesRecurring',
        'includes_usage': 'includesUsage',
        'invoice_date': 'invoiceDate',
        'invoice_group_number': 'invoiceGroupNumber',
        'invoice_number': 'invoiceNumber',
        'last_email_sent_date': 'lastEmailSentDate',
        'payment_amount': 'paymentAmount',
        'payment_term': 'paymentTerm',
        'posted_by': 'postedBy',
        'posted_date': 'postedDate',
        'refund_amount': 'refundAmount',
        'sequence_set_id': 'sequenceSetId',
        'sold_to_contact_id': 'soldToContactId',
        'sold_to_contact_snapshot_id': 'soldToContactSnapshotId',
        'source': 'source',
        'source_id': 'sourceId',
        'source_type': 'sourceType',
        'status': 'status',
        'target_date': 'targetDate',
        'tax_amount': 'taxAmount',
        'tax_exempt_amount': 'taxExemptAmount',
        'tax_message': 'taxMessage',
        'tax_status': 'taxStatus',
        'template_id': 'templateId',
        'transferred_to_accounting': 'transferredToAccounting',
        'updated_by_id': 'updatedById',
        'updated_date': 'updatedDate',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, account_id=None, adjustment_amount=None, amount=None, amount_without_tax=None, auto_pay=None, balance=None, bill_run_id=None, bill_to_contact_id=None, bill_to_contact_snapshot_id=None, comments=None, created_by_id=None, created_date=None, credit_balance_adjustment_amount=None, credit_memo_amount=None, currency=None, discount=None, due_date=None, e_invoice_status=None, e_invoice_error_code=None, e_invoice_error_message=None, e_invoice_file_id=None, id=None, includes_one_time=None, includes_recurring=None, includes_usage=None, invoice_date=None, invoice_group_number=None, invoice_number=None, last_email_sent_date=None, payment_amount=None, payment_term=None, posted_by=None, posted_date=None, refund_amount=None, sequence_set_id=None, sold_to_contact_id=None, sold_to_contact_snapshot_id=None, source=None, source_id=None, source_type=None, status=None, target_date=None, tax_amount=None, tax_exempt_amount=None, tax_message=None, tax_status=None, template_id=None, transferred_to_accounting=None, updated_by_id=None, updated_date=None, integration_id__ns=None, integration_status__ns=None, sync_date__ns=None):  # noqa: E501
        """Invoice - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._adjustment_amount = None
        self._amount = None
        self._amount_without_tax = None
        self._auto_pay = None
        self._balance = None
        self._bill_run_id = None
        self._bill_to_contact_id = None
        self._bill_to_contact_snapshot_id = None
        self._comments = None
        self._created_by_id = None
        self._created_date = None
        self._credit_balance_adjustment_amount = None
        self._credit_memo_amount = None
        self._currency = None
        self._discount = None
        self._due_date = None
        self._e_invoice_status = None
        self._e_invoice_error_code = None
        self._e_invoice_error_message = None
        self._e_invoice_file_id = None
        self._id = None
        self._includes_one_time = None
        self._includes_recurring = None
        self._includes_usage = None
        self._invoice_date = None
        self._invoice_group_number = None
        self._invoice_number = None
        self._last_email_sent_date = None
        self._payment_amount = None
        self._payment_term = None
        self._posted_by = None
        self._posted_date = None
        self._refund_amount = None
        self._sequence_set_id = None
        self._sold_to_contact_id = None
        self._sold_to_contact_snapshot_id = None
        self._source = None
        self._source_id = None
        self._source_type = None
        self._status = None
        self._target_date = None
        self._tax_amount = None
        self._tax_exempt_amount = None
        self._tax_message = None
        self._tax_status = None
        self._template_id = None
        self._transferred_to_accounting = None
        self._updated_by_id = None
        self._updated_date = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if adjustment_amount is not None:
            self.adjustment_amount = adjustment_amount
        if amount is not None:
            self.amount = amount
        if amount_without_tax is not None:
            self.amount_without_tax = amount_without_tax
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if balance is not None:
            self.balance = balance
        if bill_run_id is not None:
            self.bill_run_id = bill_run_id
        if bill_to_contact_id is not None:
            self.bill_to_contact_id = bill_to_contact_id
        if bill_to_contact_snapshot_id is not None:
            self.bill_to_contact_snapshot_id = bill_to_contact_snapshot_id
        if comments is not None:
            self.comments = comments
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if credit_balance_adjustment_amount is not None:
            self.credit_balance_adjustment_amount = credit_balance_adjustment_amount
        if credit_memo_amount is not None:
            self.credit_memo_amount = credit_memo_amount
        if currency is not None:
            self.currency = currency
        if discount is not None:
            self.discount = discount
        if due_date is not None:
            self.due_date = due_date
        if e_invoice_status is not None:
            self.e_invoice_status = e_invoice_status
        if e_invoice_error_code is not None:
            self.e_invoice_error_code = e_invoice_error_code
        if e_invoice_error_message is not None:
            self.e_invoice_error_message = e_invoice_error_message
        if e_invoice_file_id is not None:
            self.e_invoice_file_id = e_invoice_file_id
        if id is not None:
            self.id = id
        if includes_one_time is not None:
            self.includes_one_time = includes_one_time
        if includes_recurring is not None:
            self.includes_recurring = includes_recurring
        if includes_usage is not None:
            self.includes_usage = includes_usage
        if invoice_date is not None:
            self.invoice_date = invoice_date
        if invoice_group_number is not None:
            self.invoice_group_number = invoice_group_number
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if last_email_sent_date is not None:
            self.last_email_sent_date = last_email_sent_date
        if payment_amount is not None:
            self.payment_amount = payment_amount
        if payment_term is not None:
            self.payment_term = payment_term
        if posted_by is not None:
            self.posted_by = posted_by
        if posted_date is not None:
            self.posted_date = posted_date
        if refund_amount is not None:
            self.refund_amount = refund_amount
        if sequence_set_id is not None:
            self.sequence_set_id = sequence_set_id
        if sold_to_contact_id is not None:
            self.sold_to_contact_id = sold_to_contact_id
        if sold_to_contact_snapshot_id is not None:
            self.sold_to_contact_snapshot_id = sold_to_contact_snapshot_id
        if source is not None:
            self.source = source
        if source_id is not None:
            self.source_id = source_id
        if source_type is not None:
            self.source_type = source_type
        if status is not None:
            self.status = status
        if target_date is not None:
            self.target_date = target_date
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_exempt_amount is not None:
            self.tax_exempt_amount = tax_exempt_amount
        if tax_message is not None:
            self.tax_message = tax_message
        if tax_status is not None:
            self.tax_status = tax_status
        if template_id is not None:
            self.template_id = template_id
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def account_id(self):
        """Gets the account_id of this Invoice.  # noqa: E501

        The ID of the customer account associated with the invoice.  # noqa: E501

        :return: The account_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this Invoice.

        The ID of the customer account associated with the invoice.  # noqa: E501

        :param account_id: The account_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def adjustment_amount(self):
        """Gets the adjustment_amount of this Invoice.  # noqa: E501

        The amount of the invoice adjustments associated with the invoice.  # noqa: E501

        :return: The adjustment_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._adjustment_amount

    @adjustment_amount.setter
    def adjustment_amount(self, adjustment_amount):
        """Sets the adjustment_amount of this Invoice.

        The amount of the invoice adjustments associated with the invoice.  # noqa: E501

        :param adjustment_amount: The adjustment_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._adjustment_amount = adjustment_amount

    @property
    def amount(self):
        """Gets the amount of this Invoice.  # noqa: E501

        The total amount of the invoice.  # noqa: E501

        :return: The amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Invoice.

        The total amount of the invoice.  # noqa: E501

        :param amount: The amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_without_tax(self):
        """Gets the amount_without_tax of this Invoice.  # noqa: E501

        The invoice amount excluding tax.  # noqa: E501

        :return: The amount_without_tax of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._amount_without_tax

    @amount_without_tax.setter
    def amount_without_tax(self, amount_without_tax):
        """Sets the amount_without_tax of this Invoice.

        The invoice amount excluding tax.  # noqa: E501

        :param amount_without_tax: The amount_without_tax of this Invoice.  # noqa: E501
        :type: float
        """

        self._amount_without_tax = amount_without_tax

    @property
    def auto_pay(self):
        """Gets the auto_pay of this Invoice.  # noqa: E501

        Whether invoices are automatically picked up for processing in the corresponding payment run.  # noqa: E501

        :return: The auto_pay of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this Invoice.

        Whether invoices are automatically picked up for processing in the corresponding payment run.  # noqa: E501

        :param auto_pay: The auto_pay of this Invoice.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def balance(self):
        """Gets the balance of this Invoice.  # noqa: E501

        The remaining balance of the invoice after all payments, adjustments and refunds are applied.  # noqa: E501

        :return: The balance of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this Invoice.

        The remaining balance of the invoice after all payments, adjustments and refunds are applied.  # noqa: E501

        :param balance: The balance of this Invoice.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def bill_run_id(self):
        """Gets the bill_run_id of this Invoice.  # noqa: E501

        The id of bill run if the invoice is generated by a bill run.  # noqa: E501

        :return: The bill_run_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._bill_run_id

    @bill_run_id.setter
    def bill_run_id(self, bill_run_id):
        """Sets the bill_run_id of this Invoice.

        The id of bill run if the invoice is generated by a bill run.  # noqa: E501

        :param bill_run_id: The bill_run_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._bill_run_id = bill_run_id

    @property
    def bill_to_contact_id(self):
        """Gets the bill_to_contact_id of this Invoice.  # noqa: E501

        The ID of the bill-to contact associated with the invoice.  # noqa: E501

        :return: The bill_to_contact_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_contact_id

    @bill_to_contact_id.setter
    def bill_to_contact_id(self, bill_to_contact_id):
        """Sets the bill_to_contact_id of this Invoice.

        The ID of the bill-to contact associated with the invoice.  # noqa: E501

        :param bill_to_contact_id: The bill_to_contact_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._bill_to_contact_id = bill_to_contact_id

    @property
    def bill_to_contact_snapshot_id(self):
        """Gets the bill_to_contact_snapshot_id of this Invoice.  # noqa: E501

        The ID of the bill-to contact snapshot associated with the invoice.  # noqa: E501

        :return: The bill_to_contact_snapshot_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_contact_snapshot_id

    @bill_to_contact_snapshot_id.setter
    def bill_to_contact_snapshot_id(self, bill_to_contact_snapshot_id):
        """Sets the bill_to_contact_snapshot_id of this Invoice.

        The ID of the bill-to contact snapshot associated with the invoice.  # noqa: E501

        :param bill_to_contact_snapshot_id: The bill_to_contact_snapshot_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._bill_to_contact_snapshot_id = bill_to_contact_snapshot_id

    @property
    def comments(self):
        """Gets the comments of this Invoice.  # noqa: E501

        Comments about the invoice.  # noqa: E501

        :return: The comments of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Invoice.

        Comments about the invoice.  # noqa: E501

        :param comments: The comments of this Invoice.  # noqa: E501
        :type: str
        """

        self._comments = comments

    @property
    def created_by_id(self):
        """Gets the created_by_id of this Invoice.  # noqa: E501

        The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.  # noqa: E501

        :return: The created_by_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this Invoice.

        The user ID of the person who created the invoice. If a bill run generated the invoice, then the value is the user ID of person who created the bill run.  # noqa: E501

        :param created_by_id: The created_by_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this Invoice.  # noqa: E501

        The date and time when the invoice was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.  # noqa: E501

        :return: The created_date of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this Invoice.

        The date and time when the invoice was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.  # noqa: E501

        :param created_date: The created_date of this Invoice.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def credit_balance_adjustment_amount(self):
        """Gets the credit_balance_adjustment_amount of this Invoice.  # noqa: E501

        The currency amount of the adjustment applied to the customer's credit balance.   **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.   # noqa: E501

        :return: The credit_balance_adjustment_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._credit_balance_adjustment_amount

    @credit_balance_adjustment_amount.setter
    def credit_balance_adjustment_amount(self, credit_balance_adjustment_amount):
        """Sets the credit_balance_adjustment_amount of this Invoice.

        The currency amount of the adjustment applied to the customer's credit balance.   **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.   # noqa: E501

        :param credit_balance_adjustment_amount: The credit_balance_adjustment_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._credit_balance_adjustment_amount = credit_balance_adjustment_amount

    @property
    def credit_memo_amount(self):
        """Gets the credit_memo_amount of this Invoice.  # noqa: E501

        The currency amount of all credit memos applied to this invoice. **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  # noqa: E501

        :return: The credit_memo_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._credit_memo_amount

    @credit_memo_amount.setter
    def credit_memo_amount(self, credit_memo_amount):
        """Sets the credit_memo_amount of this Invoice.

        The currency amount of all credit memos applied to this invoice. **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  # noqa: E501

        :param credit_memo_amount: The credit_memo_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._credit_memo_amount = credit_memo_amount

    @property
    def currency(self):
        """Gets the currency of this Invoice.  # noqa: E501

        A currency defined in the web-based UI administrative settings.  # noqa: E501

        :return: The currency of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Invoice.

        A currency defined in the web-based UI administrative settings.  # noqa: E501

        :param currency: The currency of this Invoice.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def discount(self):
        """Gets the discount of this Invoice.  # noqa: E501

        the invoice discount amount.  # noqa: E501

        :return: The discount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this Invoice.

        the invoice discount amount.  # noqa: E501

        :param discount: The discount of this Invoice.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def due_date(self):
        """Gets the due_date of this Invoice.  # noqa: E501

        The date by which the payment for this invoice is due, in `yyyy-mm-dd` format.  # noqa: E501

        :return: The due_date of this Invoice.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this Invoice.

        The date by which the payment for this invoice is due, in `yyyy-mm-dd` format.  # noqa: E501

        :param due_date: The due_date of this Invoice.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def e_invoice_status(self):
        """Gets the e_invoice_status of this Invoice.  # noqa: E501


        :return: The e_invoice_status of this Invoice.  # noqa: E501
        :rtype: EInvoiceStatus
        """
        return self._e_invoice_status

    @e_invoice_status.setter
    def e_invoice_status(self, e_invoice_status):
        """Sets the e_invoice_status of this Invoice.


        :param e_invoice_status: The e_invoice_status of this Invoice.  # noqa: E501
        :type: EInvoiceStatus
        """

        self._e_invoice_status = e_invoice_status

    @property
    def e_invoice_error_code(self):
        """Gets the e_invoice_error_code of this Invoice.  # noqa: E501


        :return: The e_invoice_error_code of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._e_invoice_error_code

    @e_invoice_error_code.setter
    def e_invoice_error_code(self, e_invoice_error_code):
        """Sets the e_invoice_error_code of this Invoice.


        :param e_invoice_error_code: The e_invoice_error_code of this Invoice.  # noqa: E501
        :type: str
        """

        self._e_invoice_error_code = e_invoice_error_code

    @property
    def e_invoice_error_message(self):
        """Gets the e_invoice_error_message of this Invoice.  # noqa: E501


        :return: The e_invoice_error_message of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._e_invoice_error_message

    @e_invoice_error_message.setter
    def e_invoice_error_message(self, e_invoice_error_message):
        """Sets the e_invoice_error_message of this Invoice.


        :param e_invoice_error_message: The e_invoice_error_message of this Invoice.  # noqa: E501
        :type: str
        """

        self._e_invoice_error_message = e_invoice_error_message

    @property
    def e_invoice_file_id(self):
        """Gets the e_invoice_file_id of this Invoice.  # noqa: E501


        :return: The e_invoice_file_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._e_invoice_file_id

    @e_invoice_file_id.setter
    def e_invoice_file_id(self, e_invoice_file_id):
        """Sets the e_invoice_file_id of this Invoice.


        :param e_invoice_file_id: The e_invoice_file_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._e_invoice_file_id = e_invoice_file_id

    @property
    def id(self):
        """Gets the id of this Invoice.  # noqa: E501

        The unique ID of the invoice.  # noqa: E501

        :return: The id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.

        The unique ID of the invoice.  # noqa: E501

        :param id: The id of this Invoice.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def includes_one_time(self):
        """Gets the includes_one_time of this Invoice.  # noqa: E501

        Specifies whether the invoice includes one-time charges.  # noqa: E501

        :return: The includes_one_time of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._includes_one_time

    @includes_one_time.setter
    def includes_one_time(self, includes_one_time):
        """Sets the includes_one_time of this Invoice.

        Specifies whether the invoice includes one-time charges.  # noqa: E501

        :param includes_one_time: The includes_one_time of this Invoice.  # noqa: E501
        :type: bool
        """

        self._includes_one_time = includes_one_time

    @property
    def includes_recurring(self):
        """Gets the includes_recurring of this Invoice.  # noqa: E501

        Specifies whether the invoice includes recurring charges.  # noqa: E501

        :return: The includes_recurring of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._includes_recurring

    @includes_recurring.setter
    def includes_recurring(self, includes_recurring):
        """Sets the includes_recurring of this Invoice.

        Specifies whether the invoice includes recurring charges.  # noqa: E501

        :param includes_recurring: The includes_recurring of this Invoice.  # noqa: E501
        :type: bool
        """

        self._includes_recurring = includes_recurring

    @property
    def includes_usage(self):
        """Gets the includes_usage of this Invoice.  # noqa: E501

        Specifies whether the invoice includes usage charges.  # noqa: E501

        :return: The includes_usage of this Invoice.  # noqa: E501
        :rtype: bool
        """
        return self._includes_usage

    @includes_usage.setter
    def includes_usage(self, includes_usage):
        """Sets the includes_usage of this Invoice.

        Specifies whether the invoice includes usage charges.  # noqa: E501

        :param includes_usage: The includes_usage of this Invoice.  # noqa: E501
        :type: bool
        """

        self._includes_usage = includes_usage

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Invoice.  # noqa: E501

        The date that appears on the invoice being created.  # noqa: E501

        :return: The invoice_date of this Invoice.  # noqa: E501
        :rtype: date
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Invoice.

        The date that appears on the invoice being created.  # noqa: E501

        :param invoice_date: The invoice_date of this Invoice.  # noqa: E501
        :type: date
        """

        self._invoice_date = invoice_date

    @property
    def invoice_group_number(self):
        """Gets the invoice_group_number of this Invoice.  # noqa: E501

        The number of invoice group associated with the invoice.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled.   # noqa: E501

        :return: The invoice_group_number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_group_number

    @invoice_group_number.setter
    def invoice_group_number(self, invoice_group_number):
        """Sets the invoice_group_number of this Invoice.

        The number of invoice group associated with the invoice.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled.   # noqa: E501

        :param invoice_group_number: The invoice_group_number of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_group_number = invoice_group_number

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Invoice.  # noqa: E501

        The unique identification number of the invoice.  # noqa: E501

        :return: The invoice_number of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Invoice.

        The unique identification number of the invoice.  # noqa: E501

        :param invoice_number: The invoice_number of this Invoice.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def last_email_sent_date(self):
        """Gets the last_email_sent_date of this Invoice.  # noqa: E501

        The date when the invoice was last emailed.  # noqa: E501

        :return: The last_email_sent_date of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._last_email_sent_date

    @last_email_sent_date.setter
    def last_email_sent_date(self, last_email_sent_date):
        """Sets the last_email_sent_date of this Invoice.

        The date when the invoice was last emailed.  # noqa: E501

        :param last_email_sent_date: The last_email_sent_date of this Invoice.  # noqa: E501
        :type: str
        """

        self._last_email_sent_date = last_email_sent_date

    @property
    def payment_amount(self):
        """Gets the payment_amount of this Invoice.  # noqa: E501

        The amount of payments applied to the invoice.  # noqa: E501

        :return: The payment_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._payment_amount

    @payment_amount.setter
    def payment_amount(self, payment_amount):
        """Sets the payment_amount of this Invoice.

        The amount of payments applied to the invoice.  # noqa: E501

        :param payment_amount: The payment_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._payment_amount = payment_amount

    @property
    def payment_term(self):
        """Gets the payment_term of this Invoice.  # noqa: E501

        The name of payment term associated with the invoice.  # noqa: E501

        :return: The payment_term of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this Invoice.

        The name of payment term associated with the invoice.  # noqa: E501

        :param payment_term: The payment_term of this Invoice.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def posted_by(self):
        """Gets the posted_by of this Invoice.  # noqa: E501

        The user ID of the person who moved the invoice to Posted status.  # noqa: E501

        :return: The posted_by of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._posted_by

    @posted_by.setter
    def posted_by(self, posted_by):
        """Sets the posted_by of this Invoice.

        The user ID of the person who moved the invoice to Posted status.  # noqa: E501

        :param posted_by: The posted_by of this Invoice.  # noqa: E501
        :type: str
        """

        self._posted_by = posted_by

    @property
    def posted_date(self):
        """Gets the posted_date of this Invoice.  # noqa: E501

        The date when the invoice was posted.  # noqa: E501

        :return: The posted_date of this Invoice.  # noqa: E501
        :rtype: date
        """
        return self._posted_date

    @posted_date.setter
    def posted_date(self, posted_date):
        """Sets the posted_date of this Invoice.

        The date when the invoice was posted.  # noqa: E501

        :param posted_date: The posted_date of this Invoice.  # noqa: E501
        :type: date
        """

        self._posted_date = posted_date

    @property
    def refund_amount(self):
        """Gets the refund_amount of this Invoice.  # noqa: E501

        Specifies the amount of a refund that was applied against an earlier payment on the invoice.  # noqa: E501

        :return: The refund_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this Invoice.

        Specifies the amount of a refund that was applied against an earlier payment on the invoice.  # noqa: E501

        :param refund_amount: The refund_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._refund_amount = refund_amount

    @property
    def sequence_set_id(self):
        """Gets the sequence_set_id of this Invoice.  # noqa: E501

        The ID of the sequence set associated with the invoice.  # noqa: E501

        :return: The sequence_set_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_id

    @sequence_set_id.setter
    def sequence_set_id(self, sequence_set_id):
        """Sets the sequence_set_id of this Invoice.

        The ID of the sequence set associated with the invoice.  # noqa: E501

        :param sequence_set_id: The sequence_set_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._sequence_set_id = sequence_set_id

    @property
    def sold_to_contact_id(self):
        """Gets the sold_to_contact_id of this Invoice.  # noqa: E501

        The ID of the sold-to contact associated with the invoice.  # noqa: E501

        :return: The sold_to_contact_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._sold_to_contact_id

    @sold_to_contact_id.setter
    def sold_to_contact_id(self, sold_to_contact_id):
        """Sets the sold_to_contact_id of this Invoice.

        The ID of the sold-to contact associated with the invoice.  # noqa: E501

        :param sold_to_contact_id: The sold_to_contact_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._sold_to_contact_id = sold_to_contact_id

    @property
    def sold_to_contact_snapshot_id(self):
        """Gets the sold_to_contact_snapshot_id of this Invoice.  # noqa: E501

        The ID of the sold-to contact snapshot associated with the invoice.  # noqa: E501

        :return: The sold_to_contact_snapshot_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._sold_to_contact_snapshot_id

    @sold_to_contact_snapshot_id.setter
    def sold_to_contact_snapshot_id(self, sold_to_contact_snapshot_id):
        """Sets the sold_to_contact_snapshot_id of this Invoice.

        The ID of the sold-to contact snapshot associated with the invoice.  # noqa: E501

        :param sold_to_contact_snapshot_id: The sold_to_contact_snapshot_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._sold_to_contact_snapshot_id = sold_to_contact_snapshot_id

    @property
    def source(self):
        """Gets the source of this Invoice.  # noqa: E501

        The source of the invoice.  # noqa: E501

        :return: The source of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Invoice.

        The source of the invoice.  # noqa: E501

        :param source: The source of this Invoice.  # noqa: E501
        :type: str
        """
        allowed_values = ["BillRun", "API", "ApiSubscribe", "ApiAmend"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this Invoice.  # noqa: E501

        The ID of the invoice source. If an invoice is generated from a bill run, the value is the number of the corresponding bill run.Otherwise, the value is `null`.  # noqa: E501

        :return: The source_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this Invoice.

        The ID of the invoice source. If an invoice is generated from a bill run, the value is the number of the corresponding bill run.Otherwise, the value is `null`.  # noqa: E501

        :param source_id: The source_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this Invoice.  # noqa: E501

        The type of the invoice source.  # noqa: E501

        :return: The source_type of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this Invoice.

        The type of the invoice source.  # noqa: E501

        :param source_type: The source_type of this Invoice.  # noqa: E501
        :type: str
        """
        allowed_values = ["Subscription", "Standalone", "Order", "Consolidation"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"  # noqa: E501
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this Invoice.  # noqa: E501


        :return: The status of this Invoice.  # noqa: E501
        :rtype: BillingDocumentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Invoice.


        :param status: The status of this Invoice.  # noqa: E501
        :type: BillingDocumentStatus
        """

        self._status = status

    @property
    def target_date(self):
        """Gets the target_date of this Invoice.  # noqa: E501

        This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.  # noqa: E501

        :return: The target_date of this Invoice.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this Invoice.

        This date is used to determine which charges are to be billed. All charges that are to be billed on this date or prior will be included in this bill run.  # noqa: E501

        :param target_date: The target_date of this Invoice.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def tax_amount(self):
        """Gets the tax_amount of this Invoice.  # noqa: E501

        The amount of taxation.  # noqa: E501

        :return: The tax_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this Invoice.

        The amount of taxation.  # noqa: E501

        :param tax_amount: The tax_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_exempt_amount(self):
        """Gets the tax_exempt_amount of this Invoice.  # noqa: E501

        The calculated tax amount excluded due to the exemption.  # noqa: E501

        :return: The tax_exempt_amount of this Invoice.  # noqa: E501
        :rtype: float
        """
        return self._tax_exempt_amount

    @tax_exempt_amount.setter
    def tax_exempt_amount(self, tax_exempt_amount):
        """Sets the tax_exempt_amount of this Invoice.

        The calculated tax amount excluded due to the exemption.  # noqa: E501

        :param tax_exempt_amount: The tax_exempt_amount of this Invoice.  # noqa: E501
        :type: float
        """

        self._tax_exempt_amount = tax_exempt_amount

    @property
    def tax_message(self):
        """Gets the tax_message of this Invoice.  # noqa: E501

        The message that the tax engine return if it calculates the taxes of this invoice fails.  # noqa: E501

        :return: The tax_message of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._tax_message

    @tax_message.setter
    def tax_message(self, tax_message):
        """Sets the tax_message of this Invoice.

        The message that the tax engine return if it calculates the taxes of this invoice fails.  # noqa: E501

        :param tax_message: The tax_message of this Invoice.  # noqa: E501
        :type: str
        """

        self._tax_message = tax_message

    @property
    def tax_status(self):
        """Gets the tax_status of this Invoice.  # noqa: E501


        :return: The tax_status of this Invoice.  # noqa: E501
        :rtype: TaxStatus
        """
        return self._tax_status

    @tax_status.setter
    def tax_status(self, tax_status):
        """Sets the tax_status of this Invoice.


        :param tax_status: The tax_status of this Invoice.  # noqa: E501
        :type: TaxStatus
        """

        self._tax_status = tax_status

    @property
    def template_id(self):
        """Gets the template_id of this Invoice.  # noqa: E501

        The ID of the invoice template.  - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled, the value of this field depends on the configuration of the invoice template.    - If you specify an invoice template at the subscription level, the value of this field is automatically populated from the corresponding subscription.   - If you do not specify any invoice template at the subscription level, the value of this field is automatically populated from the corresponding account. - If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.   # noqa: E501

        :return: The template_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this Invoice.

        The ID of the invoice template.  - If you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Subscriptions/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled, the value of this field depends on the configuration of the invoice template.    - If you specify an invoice template at the subscription level, the value of this field is automatically populated from the corresponding subscription.   - If you do not specify any invoice template at the subscription level, the value of this field is automatically populated from the corresponding account. - If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.   # noqa: E501

        :param template_id: The template_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this Invoice.  # noqa: E501


        :return: The transferred_to_accounting of this Invoice.  # noqa: E501
        :rtype: TransferredToAccountingStatus
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this Invoice.


        :param transferred_to_accounting: The transferred_to_accounting of this Invoice.  # noqa: E501
        :type: TransferredToAccountingStatus
        """

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this Invoice.  # noqa: E501

        The ID of the Zuora user who last updated the invoice.  # noqa: E501

        :return: The updated_by_id of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this Invoice.

        The ID of the Zuora user who last updated the invoice.  # noqa: E501

        :param updated_by_id: The updated_by_id of this Invoice.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this Invoice.  # noqa: E501

        The date when the invoice was last updated.  # noqa: E501

        :return: The updated_date of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this Invoice.

        The date when the invoice was last updated.  # noqa: E501

        :param updated_date: The updated_date of this Invoice.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this Invoice.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this Invoice.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this Invoice.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this Invoice.  # noqa: E501

        Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this Invoice.

        Status of the invoice's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this Invoice.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this Invoice.  # noqa: E501

        Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this Invoice.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this Invoice.

        Date when the invoice was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this Invoice.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Invoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Invoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
