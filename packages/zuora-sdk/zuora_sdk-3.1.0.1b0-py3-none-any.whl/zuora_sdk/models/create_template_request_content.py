# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateTemplateRequestContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'SettingSourceComponentResponse',
        'custom_fields': 'bool',
        'custom_objects': 'bool',
        'description': 'str',
        'name': 'str',
        'notifications': 'bool',
        'selected_components': 'list[ConfigurationTemplateContent]',
        'settings': 'bool',
        'template_tenant': 'str',
        'workflows': 'bool'
    }

    attribute_map = {
        'content': 'content',
        'custom_fields': 'customFields',
        'custom_objects': 'customObjects',
        'description': 'description',
        'name': 'name',
        'notifications': 'notifications',
        'selected_components': 'selectedComponents',
        'settings': 'settings',
        'template_tenant': 'templateTenant',
        'workflows': 'workflows'
    }

    def __init__(self, content=None, custom_fields=None, custom_objects=None, description=None, name=None, notifications=None, selected_components=None, settings=None, template_tenant=None, workflows=None):  # noqa: E501
        """CreateTemplateRequestContent - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._custom_fields = None
        self._custom_objects = None
        self._description = None
        self._name = None
        self._notifications = None
        self._selected_components = None
        self._settings = None
        self._template_tenant = None
        self._workflows = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if custom_objects is not None:
            self.custom_objects = custom_objects
        self.description = description
        self.name = name
        if notifications is not None:
            self.notifications = notifications
        if selected_components is not None:
            self.selected_components = selected_components
        if settings is not None:
            self.settings = settings
        self.template_tenant = template_tenant
        if workflows is not None:
            self.workflows = workflows

    @property
    def content(self):
        """Gets the content of this CreateTemplateRequestContent.  # noqa: E501


        :return: The content of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: SettingSourceComponentResponse
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this CreateTemplateRequestContent.


        :param content: The content of this CreateTemplateRequestContent.  # noqa: E501
        :type: SettingSourceComponentResponse
        """

        self._content = content

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CreateTemplateRequestContent.  # noqa: E501

        Selected custom fields component or not.  # noqa: E501

        :return: The custom_fields of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: bool
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CreateTemplateRequestContent.

        Selected custom fields component or not.  # noqa: E501

        :param custom_fields: The custom_fields of this CreateTemplateRequestContent.  # noqa: E501
        :type: bool
        """

        self._custom_fields = custom_fields

    @property
    def custom_objects(self):
        """Gets the custom_objects of this CreateTemplateRequestContent.  # noqa: E501

        Selected custom objects component or not.  # noqa: E501

        :return: The custom_objects of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: bool
        """
        return self._custom_objects

    @custom_objects.setter
    def custom_objects(self, custom_objects):
        """Sets the custom_objects of this CreateTemplateRequestContent.

        Selected custom objects component or not.  # noqa: E501

        :param custom_objects: The custom_objects of this CreateTemplateRequestContent.  # noqa: E501
        :type: bool
        """

        self._custom_objects = custom_objects

    @property
    def description(self):
        """Gets the description of this CreateTemplateRequestContent.  # noqa: E501

        Creates template description.  # noqa: E501

        :return: The description of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateTemplateRequestContent.

        Creates template description.  # noqa: E501

        :param description: The description of this CreateTemplateRequestContent.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateTemplateRequestContent.  # noqa: E501

        Name of the Template.  # noqa: E501

        :return: The name of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateTemplateRequestContent.

        Name of the Template.  # noqa: E501

        :param name: The name of this CreateTemplateRequestContent.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def notifications(self):
        """Gets the notifications of this CreateTemplateRequestContent.  # noqa: E501

        Selected Notification component or not.  # noqa: E501

        :return: The notifications of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: bool
        """
        return self._notifications

    @notifications.setter
    def notifications(self, notifications):
        """Sets the notifications of this CreateTemplateRequestContent.

        Selected Notification component or not.  # noqa: E501

        :param notifications: The notifications of this CreateTemplateRequestContent.  # noqa: E501
        :type: bool
        """

        self._notifications = notifications

    @property
    def selected_components(self):
        """Gets the selected_components of this CreateTemplateRequestContent.  # noqa: E501

        ConfigurationTemplateContent object contains the selected meta data information.  # noqa: E501

        :return: The selected_components of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: list[ConfigurationTemplateContent]
        """
        return self._selected_components

    @selected_components.setter
    def selected_components(self, selected_components):
        """Sets the selected_components of this CreateTemplateRequestContent.

        ConfigurationTemplateContent object contains the selected meta data information.  # noqa: E501

        :param selected_components: The selected_components of this CreateTemplateRequestContent.  # noqa: E501
        :type: list[ConfigurationTemplateContent]
        """

        self._selected_components = selected_components

    @property
    def settings(self):
        """Gets the settings of this CreateTemplateRequestContent.  # noqa: E501

        Selected Settings component or not.  # noqa: E501

        :return: The settings of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: bool
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this CreateTemplateRequestContent.

        Selected Settings component or not.  # noqa: E501

        :param settings: The settings of this CreateTemplateRequestContent.  # noqa: E501
        :type: bool
        """

        self._settings = settings

    @property
    def template_tenant(self):
        """Gets the template_tenant of this CreateTemplateRequestContent.  # noqa: E501

        ID of the template tenant.  # noqa: E501

        :return: The template_tenant of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: str
        """
        return self._template_tenant

    @template_tenant.setter
    def template_tenant(self, template_tenant):
        """Sets the template_tenant of this CreateTemplateRequestContent.

        ID of the template tenant.  # noqa: E501

        :param template_tenant: The template_tenant of this CreateTemplateRequestContent.  # noqa: E501
        :type: str
        """
        if template_tenant is None:
            raise ValueError("Invalid value for `template_tenant`, must not be `None`")  # noqa: E501

        self._template_tenant = template_tenant

    @property
    def workflows(self):
        """Gets the workflows of this CreateTemplateRequestContent.  # noqa: E501

        Selected Workflow component or not.  # noqa: E501

        :return: The workflows of this CreateTemplateRequestContent.  # noqa: E501
        :rtype: bool
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows):
        """Sets the workflows of this CreateTemplateRequestContent.

        Selected Workflow component or not.  # noqa: E501

        :param workflows: The workflows of this CreateTemplateRequestContent.  # noqa: E501
        :type: bool
        """

        self._workflows = workflows

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateTemplateRequestContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateTemplateRequestContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
