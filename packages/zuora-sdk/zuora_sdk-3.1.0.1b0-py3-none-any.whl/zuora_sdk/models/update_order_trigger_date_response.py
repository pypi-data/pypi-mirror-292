# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateOrderTriggerDateResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'UpdateOrderTriggerDatesSubscriptionsStatus',
        'subscription_number': 'str'
    }

    attribute_map = {
        'status': 'status',
        'subscription_number': 'subscriptionNumber'
    }

    def __init__(self, status=None, subscription_number=None):  # noqa: E501
        """UpdateOrderTriggerDateResponse - a model defined in Swagger"""  # noqa: E501
        self._status = None
        self._subscription_number = None
        self.discriminator = None
        if status is not None:
            self.status = status
        if subscription_number is not None:
            self.subscription_number = subscription_number

    @property
    def status(self):
        """Gets the status of this UpdateOrderTriggerDateResponse.  # noqa: E501


        :return: The status of this UpdateOrderTriggerDateResponse.  # noqa: E501
        :rtype: UpdateOrderTriggerDatesSubscriptionsStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this UpdateOrderTriggerDateResponse.


        :param status: The status of this UpdateOrderTriggerDateResponse.  # noqa: E501
        :type: UpdateOrderTriggerDatesSubscriptionsStatus
        """

        self._status = status

    @property
    def subscription_number(self):
        """Gets the subscription_number of this UpdateOrderTriggerDateResponse.  # noqa: E501

        Subscription number of the subscription updated.  # noqa: E501

        :return: The subscription_number of this UpdateOrderTriggerDateResponse.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this UpdateOrderTriggerDateResponse.

        Subscription number of the subscription updated.  # noqa: E501

        :param subscription_number: The subscription_number of this UpdateOrderTriggerDateResponse.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateOrderTriggerDateResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOrderTriggerDateResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
