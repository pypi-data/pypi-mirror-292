# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCatalogGroupRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'product_rate_plans': 'list[CreateOrUpdateCatalogGroupProductRatePlan]',
        'type': 'CatalogGroupType'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'product_rate_plans': 'productRatePlans',
        'type': 'type'
    }

    def __init__(self, description=None, name=None, product_rate_plans=None, type=None):  # noqa: E501
        """CreateCatalogGroupRequest - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._name = None
        self._product_rate_plans = None
        self._type = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if product_rate_plans is not None:
            self.product_rate_plans = product_rate_plans
        if type is not None:
            self.type = type

    @property
    def description(self):
        """Gets the description of this CreateCatalogGroupRequest.  # noqa: E501

        The description of the catalog group.   # noqa: E501

        :return: The description of this CreateCatalogGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateCatalogGroupRequest.

        The description of the catalog group.   # noqa: E501

        :param description: The description of this CreateCatalogGroupRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CreateCatalogGroupRequest.  # noqa: E501

        The unique name of the catalog group.   # noqa: E501

        :return: The name of this CreateCatalogGroupRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCatalogGroupRequest.

        The unique name of the catalog group.   # noqa: E501

        :param name: The name of this CreateCatalogGroupRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_rate_plans(self):
        """Gets the product_rate_plans of this CreateCatalogGroupRequest.  # noqa: E501

        The list of product rate plans to be added to the catalog group.   # noqa: E501

        :return: The product_rate_plans of this CreateCatalogGroupRequest.  # noqa: E501
        :rtype: list[CreateOrUpdateCatalogGroupProductRatePlan]
        """
        return self._product_rate_plans

    @product_rate_plans.setter
    def product_rate_plans(self, product_rate_plans):
        """Sets the product_rate_plans of this CreateCatalogGroupRequest.

        The list of product rate plans to be added to the catalog group.   # noqa: E501

        :param product_rate_plans: The product_rate_plans of this CreateCatalogGroupRequest.  # noqa: E501
        :type: list[CreateOrUpdateCatalogGroupProductRatePlan]
        """

        self._product_rate_plans = product_rate_plans

    @property
    def type(self):
        """Gets the type of this CreateCatalogGroupRequest.  # noqa: E501


        :return: The type of this CreateCatalogGroupRequest.  # noqa: E501
        :rtype: CatalogGroupType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateCatalogGroupRequest.


        :param type: The type of this CreateCatalogGroupRequest.  # noqa: E501
        :type: CatalogGroupType
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCatalogGroupRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCatalogGroupRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
