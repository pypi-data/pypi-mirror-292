# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GetPaymentRunSummaryResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_of_credit_balance_adjustments': 'int',
        'number_of_credit_memos': 'int',
        'number_of_debit_memos': 'int',
        'number_of_error_input_data': 'int',
        'number_of_errors': 'int',
        'number_of_input_data': 'int',
        'number_of_invoices': 'int',
        'number_of_payments': 'int',
        'number_of_processed_input_data': 'int',
        'number_of_receivables': 'int',
        'number_of_unapplied_payments': 'int',
        'number_of_unprocessed_debit_memos': 'int',
        'number_of_unprocessed_invoices': 'int',
        'number_of_unprocessed_receivables': 'int',
        'success': 'bool',
        'total_values': 'list[GetPaymentRunSummaryTotalValuesResponse]'
    }

    attribute_map = {
        'number_of_credit_balance_adjustments': 'numberOfCreditBalanceAdjustments',
        'number_of_credit_memos': 'numberOfCreditMemos',
        'number_of_debit_memos': 'numberOfDebitMemos',
        'number_of_error_input_data': 'numberOfErrorInputData',
        'number_of_errors': 'numberOfErrors',
        'number_of_input_data': 'numberOfInputData',
        'number_of_invoices': 'numberOfInvoices',
        'number_of_payments': 'numberOfPayments',
        'number_of_processed_input_data': 'numberOfProcessedInputData',
        'number_of_receivables': 'numberOfReceivables',
        'number_of_unapplied_payments': 'numberOfUnappliedPayments',
        'number_of_unprocessed_debit_memos': 'numberOfUnprocessedDebitMemos',
        'number_of_unprocessed_invoices': 'numberOfUnprocessedInvoices',
        'number_of_unprocessed_receivables': 'numberOfUnprocessedReceivables',
        'success': 'success',
        'total_values': 'totalValues'
    }

    def __init__(self, number_of_credit_balance_adjustments=None, number_of_credit_memos=None, number_of_debit_memos=None, number_of_error_input_data=None, number_of_errors=None, number_of_input_data=None, number_of_invoices=None, number_of_payments=None, number_of_processed_input_data=None, number_of_receivables=None, number_of_unapplied_payments=None, number_of_unprocessed_debit_memos=None, number_of_unprocessed_invoices=None, number_of_unprocessed_receivables=None, success=None, total_values=None):  # noqa: E501
        """GetPaymentRunSummaryResponse - a model defined in Swagger"""  # noqa: E501
        self._number_of_credit_balance_adjustments = None
        self._number_of_credit_memos = None
        self._number_of_debit_memos = None
        self._number_of_error_input_data = None
        self._number_of_errors = None
        self._number_of_input_data = None
        self._number_of_invoices = None
        self._number_of_payments = None
        self._number_of_processed_input_data = None
        self._number_of_receivables = None
        self._number_of_unapplied_payments = None
        self._number_of_unprocessed_debit_memos = None
        self._number_of_unprocessed_invoices = None
        self._number_of_unprocessed_receivables = None
        self._success = None
        self._total_values = None
        self.discriminator = None
        if number_of_credit_balance_adjustments is not None:
            self.number_of_credit_balance_adjustments = number_of_credit_balance_adjustments
        if number_of_credit_memos is not None:
            self.number_of_credit_memos = number_of_credit_memos
        if number_of_debit_memos is not None:
            self.number_of_debit_memos = number_of_debit_memos
        if number_of_error_input_data is not None:
            self.number_of_error_input_data = number_of_error_input_data
        if number_of_errors is not None:
            self.number_of_errors = number_of_errors
        if number_of_input_data is not None:
            self.number_of_input_data = number_of_input_data
        if number_of_invoices is not None:
            self.number_of_invoices = number_of_invoices
        if number_of_payments is not None:
            self.number_of_payments = number_of_payments
        if number_of_processed_input_data is not None:
            self.number_of_processed_input_data = number_of_processed_input_data
        if number_of_receivables is not None:
            self.number_of_receivables = number_of_receivables
        if number_of_unapplied_payments is not None:
            self.number_of_unapplied_payments = number_of_unapplied_payments
        if number_of_unprocessed_debit_memos is not None:
            self.number_of_unprocessed_debit_memos = number_of_unprocessed_debit_memos
        if number_of_unprocessed_invoices is not None:
            self.number_of_unprocessed_invoices = number_of_unprocessed_invoices
        if number_of_unprocessed_receivables is not None:
            self.number_of_unprocessed_receivables = number_of_unprocessed_receivables
        if success is not None:
            self.success = success
        if total_values is not None:
            self.total_values = total_values

    @property
    def number_of_credit_balance_adjustments(self):
        """Gets the number_of_credit_balance_adjustments of this GetPaymentRunSummaryResponse.  # noqa: E501

        **Note:** This field is only available if you have the Credit Balance feature enabled.  The number of credit balance adjustments that are successfully processed in the payment run.   # noqa: E501

        :return: The number_of_credit_balance_adjustments of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_credit_balance_adjustments

    @number_of_credit_balance_adjustments.setter
    def number_of_credit_balance_adjustments(self, number_of_credit_balance_adjustments):
        """Sets the number_of_credit_balance_adjustments of this GetPaymentRunSummaryResponse.

        **Note:** This field is only available if you have the Credit Balance feature enabled.  The number of credit balance adjustments that are successfully processed in the payment run.   # noqa: E501

        :param number_of_credit_balance_adjustments: The number_of_credit_balance_adjustments of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_credit_balance_adjustments = number_of_credit_balance_adjustments

    @property
    def number_of_credit_memos(self):
        """Gets the number_of_credit_memos of this GetPaymentRunSummaryResponse.  # noqa: E501

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total number of credit memos that are successfully processed in the payment run.   # noqa: E501

        :return: The number_of_credit_memos of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_credit_memos

    @number_of_credit_memos.setter
    def number_of_credit_memos(self, number_of_credit_memos):
        """Sets the number_of_credit_memos of this GetPaymentRunSummaryResponse.

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total number of credit memos that are successfully processed in the payment run.   # noqa: E501

        :param number_of_credit_memos: The number_of_credit_memos of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_credit_memos = number_of_credit_memos

    @property
    def number_of_debit_memos(self):
        """Gets the number_of_debit_memos of this GetPaymentRunSummaryResponse.  # noqa: E501

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total number of debit memos that are picked up for processing in the payment run.   # noqa: E501

        :return: The number_of_debit_memos of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_debit_memos

    @number_of_debit_memos.setter
    def number_of_debit_memos(self, number_of_debit_memos):
        """Sets the number_of_debit_memos of this GetPaymentRunSummaryResponse.

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total number of debit memos that are picked up for processing in the payment run.   # noqa: E501

        :param number_of_debit_memos: The number_of_debit_memos of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_debit_memos = number_of_debit_memos

    @property
    def number_of_error_input_data(self):
        """Gets the number_of_error_input_data of this GetPaymentRunSummaryResponse.  # noqa: E501

        The number of input data that are processed with errors.   # noqa: E501

        :return: The number_of_error_input_data of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_error_input_data

    @number_of_error_input_data.setter
    def number_of_error_input_data(self, number_of_error_input_data):
        """Sets the number_of_error_input_data of this GetPaymentRunSummaryResponse.

        The number of input data that are processed with errors.   # noqa: E501

        :param number_of_error_input_data: The number_of_error_input_data of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_error_input_data = number_of_error_input_data

    @property
    def number_of_errors(self):
        """Gets the number_of_errors of this GetPaymentRunSummaryResponse.  # noqa: E501

        The number of payments with the status of `Error` and `Processing`.   # noqa: E501

        :return: The number_of_errors of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_errors

    @number_of_errors.setter
    def number_of_errors(self, number_of_errors):
        """Sets the number_of_errors of this GetPaymentRunSummaryResponse.

        The number of payments with the status of `Error` and `Processing`.   # noqa: E501

        :param number_of_errors: The number_of_errors of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_errors = number_of_errors

    @property
    def number_of_input_data(self):
        """Gets the number_of_input_data of this GetPaymentRunSummaryResponse.  # noqa: E501

        The total number of input data.   # noqa: E501

        :return: The number_of_input_data of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_input_data

    @number_of_input_data.setter
    def number_of_input_data(self, number_of_input_data):
        """Sets the number_of_input_data of this GetPaymentRunSummaryResponse.

        The total number of input data.   # noqa: E501

        :param number_of_input_data: The number_of_input_data of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_input_data = number_of_input_data

    @property
    def number_of_invoices(self):
        """Gets the number_of_invoices of this GetPaymentRunSummaryResponse.  # noqa: E501

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total number of invoices that are picked up for processing in the payment run.   # noqa: E501

        :return: The number_of_invoices of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_invoices

    @number_of_invoices.setter
    def number_of_invoices(self, number_of_invoices):
        """Sets the number_of_invoices of this GetPaymentRunSummaryResponse.

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The total number of invoices that are picked up for processing in the payment run.   # noqa: E501

        :param number_of_invoices: The number_of_invoices of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_invoices = number_of_invoices

    @property
    def number_of_payments(self):
        """Gets the number_of_payments of this GetPaymentRunSummaryResponse.  # noqa: E501

        The number of payments that are successfully processed in the payment run.   # noqa: E501

        :return: The number_of_payments of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_payments

    @number_of_payments.setter
    def number_of_payments(self, number_of_payments):
        """Sets the number_of_payments of this GetPaymentRunSummaryResponse.

        The number of payments that are successfully processed in the payment run.   # noqa: E501

        :param number_of_payments: The number_of_payments of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_payments = number_of_payments

    @property
    def number_of_processed_input_data(self):
        """Gets the number_of_processed_input_data of this GetPaymentRunSummaryResponse.  # noqa: E501

        The number of input data that are successfully processed.   # noqa: E501

        :return: The number_of_processed_input_data of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_processed_input_data

    @number_of_processed_input_data.setter
    def number_of_processed_input_data(self, number_of_processed_input_data):
        """Sets the number_of_processed_input_data of this GetPaymentRunSummaryResponse.

        The number of input data that are successfully processed.   # noqa: E501

        :param number_of_processed_input_data: The number_of_processed_input_data of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_processed_input_data = number_of_processed_input_data

    @property
    def number_of_receivables(self):
        """Gets the number_of_receivables of this GetPaymentRunSummaryResponse.  # noqa: E501

        The total number of receivables that are picked up for processing in the payment run.  The value of this field is the sum of the value of the `numberOfInvoices` field and that of the `numberOfDebitMemos` field.   # noqa: E501

        :return: The number_of_receivables of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_receivables

    @number_of_receivables.setter
    def number_of_receivables(self, number_of_receivables):
        """Sets the number_of_receivables of this GetPaymentRunSummaryResponse.

        The total number of receivables that are picked up for processing in the payment run.  The value of this field is the sum of the value of the `numberOfInvoices` field and that of the `numberOfDebitMemos` field.   # noqa: E501

        :param number_of_receivables: The number_of_receivables of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_receivables = number_of_receivables

    @property
    def number_of_unapplied_payments(self):
        """Gets the number_of_unapplied_payments of this GetPaymentRunSummaryResponse.  # noqa: E501

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The number of unapplied payments that are successfully processed in the payment run.   # noqa: E501

        :return: The number_of_unapplied_payments of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_unapplied_payments

    @number_of_unapplied_payments.setter
    def number_of_unapplied_payments(self, number_of_unapplied_payments):
        """Sets the number_of_unapplied_payments of this GetPaymentRunSummaryResponse.

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The number of unapplied payments that are successfully processed in the payment run.   # noqa: E501

        :param number_of_unapplied_payments: The number_of_unapplied_payments of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_unapplied_payments = number_of_unapplied_payments

    @property
    def number_of_unprocessed_debit_memos(self):
        """Gets the number_of_unprocessed_debit_memos of this GetPaymentRunSummaryResponse.  # noqa: E501

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The number of debit memos with remaining positive balances after the payment run is completed.   # noqa: E501

        :return: The number_of_unprocessed_debit_memos of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_unprocessed_debit_memos

    @number_of_unprocessed_debit_memos.setter
    def number_of_unprocessed_debit_memos(self, number_of_unprocessed_debit_memos):
        """Sets the number_of_unprocessed_debit_memos of this GetPaymentRunSummaryResponse.

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The number of debit memos with remaining positive balances after the payment run is completed.   # noqa: E501

        :param number_of_unprocessed_debit_memos: The number_of_unprocessed_debit_memos of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_unprocessed_debit_memos = number_of_unprocessed_debit_memos

    @property
    def number_of_unprocessed_invoices(self):
        """Gets the number_of_unprocessed_invoices of this GetPaymentRunSummaryResponse.  # noqa: E501

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The number of invoices with remaining positive balances after the payment run is completed.   # noqa: E501

        :return: The number_of_unprocessed_invoices of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_unprocessed_invoices

    @number_of_unprocessed_invoices.setter
    def number_of_unprocessed_invoices(self, number_of_unprocessed_invoices):
        """Sets the number_of_unprocessed_invoices of this GetPaymentRunSummaryResponse.

        **Note:** This field is only available if you have the Invoice Settlement feature enabled.  The number of invoices with remaining positive balances after the payment run is completed.   # noqa: E501

        :param number_of_unprocessed_invoices: The number_of_unprocessed_invoices of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_unprocessed_invoices = number_of_unprocessed_invoices

    @property
    def number_of_unprocessed_receivables(self):
        """Gets the number_of_unprocessed_receivables of this GetPaymentRunSummaryResponse.  # noqa: E501

        The number of receivables with remaining positive balances after the payment run is completed.   # noqa: E501

        :return: The number_of_unprocessed_receivables of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: int
        """
        return self._number_of_unprocessed_receivables

    @number_of_unprocessed_receivables.setter
    def number_of_unprocessed_receivables(self, number_of_unprocessed_receivables):
        """Sets the number_of_unprocessed_receivables of this GetPaymentRunSummaryResponse.

        The number of receivables with remaining positive balances after the payment run is completed.   # noqa: E501

        :param number_of_unprocessed_receivables: The number_of_unprocessed_receivables of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: int
        """

        self._number_of_unprocessed_receivables = number_of_unprocessed_receivables

    @property
    def success(self):
        """Gets the success of this GetPaymentRunSummaryResponse.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this GetPaymentRunSummaryResponse.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def total_values(self):
        """Gets the total_values of this GetPaymentRunSummaryResponse.  # noqa: E501

        Container for total values.   # noqa: E501

        :return: The total_values of this GetPaymentRunSummaryResponse.  # noqa: E501
        :rtype: list[GetPaymentRunSummaryTotalValuesResponse]
        """
        return self._total_values

    @total_values.setter
    def total_values(self, total_values):
        """Sets the total_values of this GetPaymentRunSummaryResponse.

        Container for total values.   # noqa: E501

        :param total_values: The total_values of this GetPaymentRunSummaryResponse.  # noqa: E501
        :type: list[GetPaymentRunSummaryTotalValuesResponse]
        """

        self._total_values = total_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetPaymentRunSummaryResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetPaymentRunSummaryResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
