# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class WriteOffInvoiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'comment': 'str',
        'items': 'list[CreditMemoItemFromWriteOffInvoice]',
        'memo_date': 'date',
        'reason_code': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'origin__ns': 'str',
        'sync_date__ns': 'str',
        'transaction__ns': 'str'
    }

    attribute_map = {
        'comment': 'comment',
        'items': 'items',
        'memo_date': 'memoDate',
        'reason_code': 'reasonCode',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'origin__ns': 'Origin__NS',
        'sync_date__ns': 'SyncDate__NS',
        'transaction__ns': 'Transaction__NS'
    }

    def __init__(self, comment=None, items=None, memo_date=None, reason_code=None, integration_id__ns=None, integration_status__ns=None, origin__ns=None, sync_date__ns=None, transaction__ns=None):  # noqa: E501
        """WriteOffInvoiceRequest - a model defined in Swagger"""  # noqa: E501
        self._comment = None
        self._items = None
        self._memo_date = None
        self._reason_code = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._origin__ns = None
        self._sync_date__ns = None
        self._transaction__ns = None
        self.discriminator = None
        if comment is not None:
            self.comment = comment
        if items is not None:
            self.items = items
        if memo_date is not None:
            self.memo_date = memo_date
        if reason_code is not None:
            self.reason_code = reason_code
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if origin__ns is not None:
            self.origin__ns = origin__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if transaction__ns is not None:
            self.transaction__ns = transaction__ns

    @property
    def comment(self):
        """Gets the comment of this WriteOffInvoiceRequest.  # noqa: E501

        Comments about the write-off. The comment is used as the comment of the credit memo generated by writing off the specified invoice.   # noqa: E501

        :return: The comment of this WriteOffInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this WriteOffInvoiceRequest.

        Comments about the write-off. The comment is used as the comment of the credit memo generated by writing off the specified invoice.   # noqa: E501

        :param comment: The comment of this WriteOffInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def items(self):
        """Gets the items of this WriteOffInvoiceRequest.  # noqa: E501

        Container for items. This field is optional.  **Note:** If specified, you must specify ALL the items of the invoice. The entire balance of the invoice will be written off, you cannot just write off some items of the invoice.   # noqa: E501

        :return: The items of this WriteOffInvoiceRequest.  # noqa: E501
        :rtype: list[CreditMemoItemFromWriteOffInvoice]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this WriteOffInvoiceRequest.

        Container for items. This field is optional.  **Note:** If specified, you must specify ALL the items of the invoice. The entire balance of the invoice will be written off, you cannot just write off some items of the invoice.   # noqa: E501

        :param items: The items of this WriteOffInvoiceRequest.  # noqa: E501
        :type: list[CreditMemoItemFromWriteOffInvoice]
        """

        self._items = items

    @property
    def memo_date(self):
        """Gets the memo_date of this WriteOffInvoiceRequest.  # noqa: E501

        The date when the credit memo was created, in `yyyy-mm-dd` format. The memo date must be later than or equal to the invoice date.  The default value is the date when you write off the invoice.   # noqa: E501

        :return: The memo_date of this WriteOffInvoiceRequest.  # noqa: E501
        :rtype: date
        """
        return self._memo_date

    @memo_date.setter
    def memo_date(self, memo_date):
        """Sets the memo_date of this WriteOffInvoiceRequest.

        The date when the credit memo was created, in `yyyy-mm-dd` format. The memo date must be later than or equal to the invoice date.  The default value is the date when you write off the invoice.   # noqa: E501

        :param memo_date: The memo_date of this WriteOffInvoiceRequest.  # noqa: E501
        :type: date
        """

        self._memo_date = memo_date

    @property
    def reason_code(self):
        """Gets the reason_code of this WriteOffInvoiceRequest.  # noqa: E501

        A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code `Write-off`.   # noqa: E501

        :return: The reason_code of this WriteOffInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this WriteOffInvoiceRequest.

        A code identifying the reason for the transaction. The value must be an existing reason code or empty. If you do not specify a value, Zuora uses the default reason code `Write-off`.   # noqa: E501

        :param reason_code: The reason_code of this WriteOffInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this WriteOffInvoiceRequest.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this WriteOffInvoiceRequest.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this WriteOffInvoiceRequest.  # noqa: E501

        Status of the credit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this WriteOffInvoiceRequest.

        Status of the credit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def origin__ns(self):
        """Gets the origin__ns of this WriteOffInvoiceRequest.  # noqa: E501

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The origin__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._origin__ns

    @origin__ns.setter
    def origin__ns(self, origin__ns):
        """Sets the origin__ns of this WriteOffInvoiceRequest.

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param origin__ns: The origin__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._origin__ns = origin__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this WriteOffInvoiceRequest.  # noqa: E501

        Date when the credit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this WriteOffInvoiceRequest.

        Date when the credit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    @property
    def transaction__ns(self):
        """Gets the transaction__ns of this WriteOffInvoiceRequest.  # noqa: E501

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The transaction__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction__ns

    @transaction__ns.setter
    def transaction__ns(self, transaction__ns):
        """Sets the transaction__ns of this WriteOffInvoiceRequest.

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param transaction__ns: The transaction__ns of this WriteOffInvoiceRequest.  # noqa: E501
        :type: str
        """

        self._transaction__ns = transaction__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WriteOffInvoiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WriteOffInvoiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
