# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RampIntervalChargeDeltaMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charge_number': 'str',
        'delta_discount_tcb': 'float',
        'delta_discount_tcv': 'float',
        'delta_gross_tcb': 'float',
        'delta_gross_tcv': 'float',
        'delta_mrr': 'list[RampIntervalChargeDeltaMetricsDeltaMrrInner]',
        'delta_net_tcb': 'float',
        'delta_net_tcv': 'float',
        'delta_quantity': 'list[RampIntervalChargeDeltaMetricsDeltaQuantityInner]',
        'product_rate_plan_charge_id': 'str',
        'subscription_number': 'str'
    }

    attribute_map = {
        'charge_number': 'chargeNumber',
        'delta_discount_tcb': 'deltaDiscountTcb',
        'delta_discount_tcv': 'deltaDiscountTcv',
        'delta_gross_tcb': 'deltaGrossTcb',
        'delta_gross_tcv': 'deltaGrossTcv',
        'delta_mrr': 'deltaMrr',
        'delta_net_tcb': 'deltaNetTcb',
        'delta_net_tcv': 'deltaNetTcv',
        'delta_quantity': 'deltaQuantity',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'subscription_number': 'subscriptionNumber'
    }

    def __init__(self, charge_number=None, delta_discount_tcb=None, delta_discount_tcv=None, delta_gross_tcb=None, delta_gross_tcv=None, delta_mrr=None, delta_net_tcb=None, delta_net_tcv=None, delta_quantity=None, product_rate_plan_charge_id=None, subscription_number=None):  # noqa: E501
        """RampIntervalChargeDeltaMetrics - a model defined in Swagger"""  # noqa: E501
        self._charge_number = None
        self._delta_discount_tcb = None
        self._delta_discount_tcv = None
        self._delta_gross_tcb = None
        self._delta_gross_tcv = None
        self._delta_mrr = None
        self._delta_net_tcb = None
        self._delta_net_tcv = None
        self._delta_quantity = None
        self._product_rate_plan_charge_id = None
        self._subscription_number = None
        self.discriminator = None
        if charge_number is not None:
            self.charge_number = charge_number
        if delta_discount_tcb is not None:
            self.delta_discount_tcb = delta_discount_tcb
        if delta_discount_tcv is not None:
            self.delta_discount_tcv = delta_discount_tcv
        if delta_gross_tcb is not None:
            self.delta_gross_tcb = delta_gross_tcb
        if delta_gross_tcv is not None:
            self.delta_gross_tcv = delta_gross_tcv
        if delta_mrr is not None:
            self.delta_mrr = delta_mrr
        if delta_net_tcb is not None:
            self.delta_net_tcb = delta_net_tcb
        if delta_net_tcv is not None:
            self.delta_net_tcv = delta_net_tcv
        if delta_quantity is not None:
            self.delta_quantity = delta_quantity
        if product_rate_plan_charge_id is not None:
            self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if subscription_number is not None:
            self.subscription_number = subscription_number

    @property
    def charge_number(self):
        """Gets the charge_number of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The number of the rate plan charge.  # noqa: E501

        :return: The charge_number of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: str
        """
        return self._charge_number

    @charge_number.setter
    def charge_number(self, charge_number):
        """Sets the charge_number of this RampIntervalChargeDeltaMetrics.

        The number of the rate plan charge.  # noqa: E501

        :param charge_number: The charge_number of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: str
        """

        self._charge_number = charge_number

    @property
    def delta_discount_tcb(self):
        """Gets the delta_discount_tcb of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The discount delta amount for the TCB.  # noqa: E501

        :return: The delta_discount_tcb of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: float
        """
        return self._delta_discount_tcb

    @delta_discount_tcb.setter
    def delta_discount_tcb(self, delta_discount_tcb):
        """Sets the delta_discount_tcb of this RampIntervalChargeDeltaMetrics.

        The discount delta amount for the TCB.  # noqa: E501

        :param delta_discount_tcb: The delta_discount_tcb of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: float
        """

        self._delta_discount_tcb = delta_discount_tcb

    @property
    def delta_discount_tcv(self):
        """Gets the delta_discount_tcv of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The discount delta amount for the TCV.  # noqa: E501

        :return: The delta_discount_tcv of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: float
        """
        return self._delta_discount_tcv

    @delta_discount_tcv.setter
    def delta_discount_tcv(self, delta_discount_tcv):
        """Sets the delta_discount_tcv of this RampIntervalChargeDeltaMetrics.

        The discount delta amount for the TCV.  # noqa: E501

        :param delta_discount_tcv: The delta_discount_tcv of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: float
        """

        self._delta_discount_tcv = delta_discount_tcv

    @property
    def delta_gross_tcb(self):
        """Gets the delta_gross_tcb of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The TCB delta value before discount charges are applied.  # noqa: E501

        :return: The delta_gross_tcb of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: float
        """
        return self._delta_gross_tcb

    @delta_gross_tcb.setter
    def delta_gross_tcb(self, delta_gross_tcb):
        """Sets the delta_gross_tcb of this RampIntervalChargeDeltaMetrics.

        The TCB delta value before discount charges are applied.  # noqa: E501

        :param delta_gross_tcb: The delta_gross_tcb of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: float
        """

        self._delta_gross_tcb = delta_gross_tcb

    @property
    def delta_gross_tcv(self):
        """Gets the delta_gross_tcv of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The TCV delta value before discount charges are applied.  # noqa: E501

        :return: The delta_gross_tcv of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: float
        """
        return self._delta_gross_tcv

    @delta_gross_tcv.setter
    def delta_gross_tcv(self, delta_gross_tcv):
        """Sets the delta_gross_tcv of this RampIntervalChargeDeltaMetrics.

        The TCV delta value before discount charges are applied.  # noqa: E501

        :param delta_gross_tcv: The delta_gross_tcv of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: float
        """

        self._delta_gross_tcv = delta_gross_tcv

    @property
    def delta_mrr(self):
        """Gets the delta_mrr of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The MRR changing history of the current rate plan charge in the current ramp interval.  # noqa: E501

        :return: The delta_mrr of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: list[RampIntervalChargeDeltaMetricsDeltaMrrInner]
        """
        return self._delta_mrr

    @delta_mrr.setter
    def delta_mrr(self, delta_mrr):
        """Sets the delta_mrr of this RampIntervalChargeDeltaMetrics.

        The MRR changing history of the current rate plan charge in the current ramp interval.  # noqa: E501

        :param delta_mrr: The delta_mrr of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: list[RampIntervalChargeDeltaMetricsDeltaMrrInner]
        """

        self._delta_mrr = delta_mrr

    @property
    def delta_net_tcb(self):
        """Gets the delta_net_tcb of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The TCB delta value after discount charges are applied.  # noqa: E501

        :return: The delta_net_tcb of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: float
        """
        return self._delta_net_tcb

    @delta_net_tcb.setter
    def delta_net_tcb(self, delta_net_tcb):
        """Sets the delta_net_tcb of this RampIntervalChargeDeltaMetrics.

        The TCB delta value after discount charges are applied.  # noqa: E501

        :param delta_net_tcb: The delta_net_tcb of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: float
        """

        self._delta_net_tcb = delta_net_tcb

    @property
    def delta_net_tcv(self):
        """Gets the delta_net_tcv of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The TCV delta value after discount charges are applied.  # noqa: E501

        :return: The delta_net_tcv of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: float
        """
        return self._delta_net_tcv

    @delta_net_tcv.setter
    def delta_net_tcv(self, delta_net_tcv):
        """Sets the delta_net_tcv of this RampIntervalChargeDeltaMetrics.

        The TCV delta value after discount charges are applied.  # noqa: E501

        :param delta_net_tcv: The delta_net_tcv of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: float
        """

        self._delta_net_tcv = delta_net_tcv

    @property
    def delta_quantity(self):
        """Gets the delta_quantity of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The charge quantity changing history of the current rate plan charge in the current ramp interval.  # noqa: E501

        :return: The delta_quantity of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: list[RampIntervalChargeDeltaMetricsDeltaQuantityInner]
        """
        return self._delta_quantity

    @delta_quantity.setter
    def delta_quantity(self, delta_quantity):
        """Sets the delta_quantity of this RampIntervalChargeDeltaMetrics.

        The charge quantity changing history of the current rate plan charge in the current ramp interval.  # noqa: E501

        :param delta_quantity: The delta_quantity of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: list[RampIntervalChargeDeltaMetricsDeltaQuantityInner]
        """

        self._delta_quantity = delta_quantity

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The ID of the corresponding product rate plan charge.  # noqa: E501

        :return: The product_rate_plan_charge_id of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this RampIntervalChargeDeltaMetrics.

        The ID of the corresponding product rate plan charge.  # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def subscription_number(self):
        """Gets the subscription_number of this RampIntervalChargeDeltaMetrics.  # noqa: E501

        The number of the subscription that the current rate plan charge belongs to.  # noqa: E501

        :return: The subscription_number of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this RampIntervalChargeDeltaMetrics.

        The number of the subscription that the current rate plan charge belongs to.  # noqa: E501

        :param subscription_number: The subscription_number of this RampIntervalChargeDeltaMetrics.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RampIntervalChargeDeltaMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RampIntervalChargeDeltaMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
