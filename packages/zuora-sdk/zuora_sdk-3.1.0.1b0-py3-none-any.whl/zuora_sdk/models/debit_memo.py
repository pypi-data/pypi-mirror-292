# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DebitMemo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_number': 'str',
        'amount': 'float',
        'auto_pay': 'bool',
        'balance': 'float',
        'be_applied_amount': 'float',
        'bill_to_contact_id': 'str',
        'cancelled_by_id': 'str',
        'cancelled_on': 'str',
        'comment': 'str',
        'created_by_id': 'str',
        'created_date': 'str',
        'debit_memo_date': 'date',
        'due_date': 'date',
        'id': 'str',
        'invoice_group_number': 'str',
        'latest_pdf_file_id': 'str',
        'number': 'str',
        'payment_term': 'str',
        'posted_by_id': 'str',
        'posted_on': 'str',
        'reason_code': 'str',
        'referred_credit_memo_id': 'str',
        'referred_invoice_id': 'str',
        'sequence_set_id': 'str',
        'source_type': 'MemoSourceType',
        'status': 'BillingDocumentStatus',
        'target_date': 'date',
        'tax_amount': 'float',
        'tax_message': 'str',
        'tax_status': 'TaxStatus',
        'total_tax_exempt_amount': 'float',
        'transferred_to_accounting': 'TransferredToAccountingStatus',
        'updated_by_id': 'str',
        'updated_date': 'str',
        'e_invoice_status': 'EInvoiceStatus',
        'e_invoice_error_code': 'str',
        'e_invoice_error_message': 'str',
        'e_invoice_file_id': 'str',
        'bill_to_contact_snapshot_id': 'str',
        'organization_label': 'str',
        'currency': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_number': 'accountNumber',
        'amount': 'amount',
        'auto_pay': 'autoPay',
        'balance': 'balance',
        'be_applied_amount': 'beAppliedAmount',
        'bill_to_contact_id': 'billToContactId',
        'cancelled_by_id': 'cancelledById',
        'cancelled_on': 'cancelledOn',
        'comment': 'comment',
        'created_by_id': 'createdById',
        'created_date': 'createdDate',
        'debit_memo_date': 'debitMemoDate',
        'due_date': 'dueDate',
        'id': 'id',
        'invoice_group_number': 'invoiceGroupNumber',
        'latest_pdf_file_id': 'latestPDFFileId',
        'number': 'number',
        'payment_term': 'paymentTerm',
        'posted_by_id': 'postedById',
        'posted_on': 'postedOn',
        'reason_code': 'reasonCode',
        'referred_credit_memo_id': 'referredCreditMemoId',
        'referred_invoice_id': 'referredInvoiceId',
        'sequence_set_id': 'sequenceSetId',
        'source_type': 'sourceType',
        'status': 'status',
        'target_date': 'targetDate',
        'tax_amount': 'taxAmount',
        'tax_message': 'taxMessage',
        'tax_status': 'taxStatus',
        'total_tax_exempt_amount': 'totalTaxExemptAmount',
        'transferred_to_accounting': 'transferredToAccounting',
        'updated_by_id': 'updatedById',
        'updated_date': 'updatedDate',
        'e_invoice_status': 'eInvoiceStatus',
        'e_invoice_error_code': 'eInvoiceErrorCode',
        'e_invoice_error_message': 'eInvoiceErrorMessage',
        'e_invoice_file_id': 'eInvoiceFileId',
        'bill_to_contact_snapshot_id': 'billToContactSnapshotId',
        'organization_label': 'organizationLabel',
        'currency': 'currency',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, account_id=None, account_number=None, amount=None, auto_pay=None, balance=None, be_applied_amount=None, bill_to_contact_id=None, cancelled_by_id=None, cancelled_on=None, comment=None, created_by_id=None, created_date=None, debit_memo_date=None, due_date=None, id=None, invoice_group_number=None, latest_pdf_file_id=None, number=None, payment_term=None, posted_by_id=None, posted_on=None, reason_code=None, referred_credit_memo_id=None, referred_invoice_id=None, sequence_set_id=None, source_type=None, status=None, target_date=None, tax_amount=None, tax_message=None, tax_status=None, total_tax_exempt_amount=None, transferred_to_accounting=None, updated_by_id=None, updated_date=None, e_invoice_status=None, e_invoice_error_code=None, e_invoice_error_message=None, e_invoice_file_id=None, bill_to_contact_snapshot_id=None, organization_label=None, currency=None, integration_id__ns=None, integration_status__ns=None, sync_date__ns=None):  # noqa: E501
        """DebitMemo - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_number = None
        self._amount = None
        self._auto_pay = None
        self._balance = None
        self._be_applied_amount = None
        self._bill_to_contact_id = None
        self._cancelled_by_id = None
        self._cancelled_on = None
        self._comment = None
        self._created_by_id = None
        self._created_date = None
        self._debit_memo_date = None
        self._due_date = None
        self._id = None
        self._invoice_group_number = None
        self._latest_pdf_file_id = None
        self._number = None
        self._payment_term = None
        self._posted_by_id = None
        self._posted_on = None
        self._reason_code = None
        self._referred_credit_memo_id = None
        self._referred_invoice_id = None
        self._sequence_set_id = None
        self._source_type = None
        self._status = None
        self._target_date = None
        self._tax_amount = None
        self._tax_message = None
        self._tax_status = None
        self._total_tax_exempt_amount = None
        self._transferred_to_accounting = None
        self._updated_by_id = None
        self._updated_date = None
        self._e_invoice_status = None
        self._e_invoice_error_code = None
        self._e_invoice_error_message = None
        self._e_invoice_file_id = None
        self._bill_to_contact_snapshot_id = None
        self._organization_label = None
        self._currency = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_number is not None:
            self.account_number = account_number
        if amount is not None:
            self.amount = amount
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if balance is not None:
            self.balance = balance
        if be_applied_amount is not None:
            self.be_applied_amount = be_applied_amount
        if bill_to_contact_id is not None:
            self.bill_to_contact_id = bill_to_contact_id
        if cancelled_by_id is not None:
            self.cancelled_by_id = cancelled_by_id
        if cancelled_on is not None:
            self.cancelled_on = cancelled_on
        if comment is not None:
            self.comment = comment
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if debit_memo_date is not None:
            self.debit_memo_date = debit_memo_date
        if due_date is not None:
            self.due_date = due_date
        if id is not None:
            self.id = id
        if invoice_group_number is not None:
            self.invoice_group_number = invoice_group_number
        if latest_pdf_file_id is not None:
            self.latest_pdf_file_id = latest_pdf_file_id
        if number is not None:
            self.number = number
        if payment_term is not None:
            self.payment_term = payment_term
        if posted_by_id is not None:
            self.posted_by_id = posted_by_id
        if posted_on is not None:
            self.posted_on = posted_on
        if reason_code is not None:
            self.reason_code = reason_code
        if referred_credit_memo_id is not None:
            self.referred_credit_memo_id = referred_credit_memo_id
        if referred_invoice_id is not None:
            self.referred_invoice_id = referred_invoice_id
        if sequence_set_id is not None:
            self.sequence_set_id = sequence_set_id
        if source_type is not None:
            self.source_type = source_type
        if status is not None:
            self.status = status
        if target_date is not None:
            self.target_date = target_date
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_message is not None:
            self.tax_message = tax_message
        if tax_status is not None:
            self.tax_status = tax_status
        if total_tax_exempt_amount is not None:
            self.total_tax_exempt_amount = total_tax_exempt_amount
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date
        if e_invoice_status is not None:
            self.e_invoice_status = e_invoice_status
        if e_invoice_error_code is not None:
            self.e_invoice_error_code = e_invoice_error_code
        if e_invoice_error_message is not None:
            self.e_invoice_error_message = e_invoice_error_message
        if e_invoice_file_id is not None:
            self.e_invoice_file_id = e_invoice_file_id
        if bill_to_contact_snapshot_id is not None:
            self.bill_to_contact_snapshot_id = bill_to_contact_snapshot_id
        if organization_label is not None:
            self.organization_label = organization_label
        if currency is not None:
            self.currency = currency
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def account_id(self):
        """Gets the account_id of this DebitMemo.  # noqa: E501

        The ID of the customer account associated with the debit memo.  # noqa: E501

        :return: The account_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this DebitMemo.

        The ID of the customer account associated with the debit memo.  # noqa: E501

        :param account_id: The account_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this DebitMemo.  # noqa: E501

        The number of the customer account associated with the debit memo.  # noqa: E501

        :return: The account_number of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this DebitMemo.

        The number of the customer account associated with the debit memo.  # noqa: E501

        :param account_number: The account_number of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this DebitMemo.  # noqa: E501

        The total amount of the debit memo.  # noqa: E501

        :return: The amount of this DebitMemo.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DebitMemo.

        The total amount of the debit memo.  # noqa: E501

        :param amount: The amount of this DebitMemo.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def auto_pay(self):
        """Gets the auto_pay of this DebitMemo.  # noqa: E501

        Whether debit memos are automatically picked up for processing in the corresponding payment run.   By default, debit memos are automatically picked up for processing in the corresponding payment run.         # noqa: E501

        :return: The auto_pay of this DebitMemo.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this DebitMemo.

        Whether debit memos are automatically picked up for processing in the corresponding payment run.   By default, debit memos are automatically picked up for processing in the corresponding payment run.         # noqa: E501

        :param auto_pay: The auto_pay of this DebitMemo.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def balance(self):
        """Gets the balance of this DebitMemo.  # noqa: E501

        The balance of the debit memo.  # noqa: E501

        :return: The balance of this DebitMemo.  # noqa: E501
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this DebitMemo.

        The balance of the debit memo.  # noqa: E501

        :param balance: The balance of this DebitMemo.  # noqa: E501
        :type: float
        """

        self._balance = balance

    @property
    def be_applied_amount(self):
        """Gets the be_applied_amount of this DebitMemo.  # noqa: E501

        The applied amount of the debit memo.  # noqa: E501

        :return: The be_applied_amount of this DebitMemo.  # noqa: E501
        :rtype: float
        """
        return self._be_applied_amount

    @be_applied_amount.setter
    def be_applied_amount(self, be_applied_amount):
        """Sets the be_applied_amount of this DebitMemo.

        The applied amount of the debit memo.  # noqa: E501

        :param be_applied_amount: The be_applied_amount of this DebitMemo.  # noqa: E501
        :type: float
        """

        self._be_applied_amount = be_applied_amount

    @property
    def bill_to_contact_id(self):
        """Gets the bill_to_contact_id of this DebitMemo.  # noqa: E501

        The ID of the bill-to contact associated with the debit memo.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :return: The bill_to_contact_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_contact_id

    @bill_to_contact_id.setter
    def bill_to_contact_id(self, bill_to_contact_id):
        """Sets the bill_to_contact_id of this DebitMemo.

        The ID of the bill-to contact associated with the debit memo.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :param bill_to_contact_id: The bill_to_contact_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._bill_to_contact_id = bill_to_contact_id

    @property
    def cancelled_by_id(self):
        """Gets the cancelled_by_id of this DebitMemo.  # noqa: E501

        The ID of the Zuora user who cancelled the debit memo.  # noqa: E501

        :return: The cancelled_by_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_by_id

    @cancelled_by_id.setter
    def cancelled_by_id(self, cancelled_by_id):
        """Sets the cancelled_by_id of this DebitMemo.

        The ID of the Zuora user who cancelled the debit memo.  # noqa: E501

        :param cancelled_by_id: The cancelled_by_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._cancelled_by_id = cancelled_by_id

    @property
    def cancelled_on(self):
        """Gets the cancelled_on of this DebitMemo.  # noqa: E501

        The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The cancelled_on of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_on

    @cancelled_on.setter
    def cancelled_on(self, cancelled_on):
        """Sets the cancelled_on of this DebitMemo.

        The date and time when the debit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param cancelled_on: The cancelled_on of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._cancelled_on = cancelled_on

    @property
    def comment(self):
        """Gets the comment of this DebitMemo.  # noqa: E501

        Comments about the debit memo.  # noqa: E501

        :return: The comment of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this DebitMemo.

        Comments about the debit memo.  # noqa: E501

        :param comment: The comment of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by_id(self):
        """Gets the created_by_id of this DebitMemo.  # noqa: E501

        The ID of the Zuora user who created the debit memo.  # noqa: E501

        :return: The created_by_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this DebitMemo.

        The ID of the Zuora user who created the debit memo.  # noqa: E501

        :param created_by_id: The created_by_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this DebitMemo.  # noqa: E501

        The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.  # noqa: E501

        :return: The created_date of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this DebitMemo.

        The date and time when the debit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.  # noqa: E501

        :param created_date: The created_date of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def debit_memo_date(self):
        """Gets the debit_memo_date of this DebitMemo.  # noqa: E501

        The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.  # noqa: E501

        :return: The debit_memo_date of this DebitMemo.  # noqa: E501
        :rtype: date
        """
        return self._debit_memo_date

    @debit_memo_date.setter
    def debit_memo_date(self, debit_memo_date):
        """Sets the debit_memo_date of this DebitMemo.

        The date when the debit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.  # noqa: E501

        :param debit_memo_date: The debit_memo_date of this DebitMemo.  # noqa: E501
        :type: date
        """

        self._debit_memo_date = debit_memo_date

    @property
    def due_date(self):
        """Gets the due_date of this DebitMemo.  # noqa: E501

        The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.  # noqa: E501

        :return: The due_date of this DebitMemo.  # noqa: E501
        :rtype: date
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date):
        """Sets the due_date of this DebitMemo.

        The date by which the payment for the debit memo is due, in `yyyy-mm-dd` format.  # noqa: E501

        :param due_date: The due_date of this DebitMemo.  # noqa: E501
        :type: date
        """

        self._due_date = due_date

    @property
    def id(self):
        """Gets the id of this DebitMemo.  # noqa: E501

        The unique ID of the debit memo.  # noqa: E501

        :return: The id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DebitMemo.

        The unique ID of the debit memo.  # noqa: E501

        :param id: The id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_group_number(self):
        """Gets the invoice_group_number of this DebitMemo.  # noqa: E501

        The number of invoice group associated with the debit memo.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled.   # noqa: E501

        :return: The invoice_group_number of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._invoice_group_number

    @invoice_group_number.setter
    def invoice_group_number(self, invoice_group_number):
        """Sets the invoice_group_number of this DebitMemo.

        The number of invoice group associated with the debit memo.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled.   # noqa: E501

        :param invoice_group_number: The invoice_group_number of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._invoice_group_number = invoice_group_number

    @property
    def latest_pdf_file_id(self):
        """Gets the latest_pdf_file_id of this DebitMemo.  # noqa: E501

        The ID of the latest PDF file generated for the debit memo.  # noqa: E501

        :return: The latest_pdf_file_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._latest_pdf_file_id

    @latest_pdf_file_id.setter
    def latest_pdf_file_id(self, latest_pdf_file_id):
        """Sets the latest_pdf_file_id of this DebitMemo.

        The ID of the latest PDF file generated for the debit memo.  # noqa: E501

        :param latest_pdf_file_id: The latest_pdf_file_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._latest_pdf_file_id = latest_pdf_file_id

    @property
    def number(self):
        """Gets the number of this DebitMemo.  # noqa: E501

        The unique identification number of the debit memo.  # noqa: E501

        :return: The number of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DebitMemo.

        The unique identification number of the debit memo.  # noqa: E501

        :param number: The number of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def payment_term(self):
        """Gets the payment_term of this DebitMemo.  # noqa: E501

        The name of the payment term associated with the debit memo.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :return: The payment_term of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._payment_term

    @payment_term.setter
    def payment_term(self, payment_term):
        """Sets the payment_term of this DebitMemo.

        The name of the payment term associated with the debit memo.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :param payment_term: The payment_term of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._payment_term = payment_term

    @property
    def posted_by_id(self):
        """Gets the posted_by_id of this DebitMemo.  # noqa: E501

        The ID of the Zuora user who posted the debit memo.  # noqa: E501

        :return: The posted_by_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._posted_by_id

    @posted_by_id.setter
    def posted_by_id(self, posted_by_id):
        """Sets the posted_by_id of this DebitMemo.

        The ID of the Zuora user who posted the debit memo.  # noqa: E501

        :param posted_by_id: The posted_by_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._posted_by_id = posted_by_id

    @property
    def posted_on(self):
        """Gets the posted_on of this DebitMemo.  # noqa: E501

        The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The posted_on of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._posted_on

    @posted_on.setter
    def posted_on(self, posted_on):
        """Sets the posted_on of this DebitMemo.

        The date and time when the debit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param posted_on: The posted_on of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._posted_on = posted_on

    @property
    def reason_code(self):
        """Gets the reason_code of this DebitMemo.  # noqa: E501

        A code identifying the reason for the transaction. The value must be an existing reason code or empty.  # noqa: E501

        :return: The reason_code of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this DebitMemo.

        A code identifying the reason for the transaction. The value must be an existing reason code or empty.  # noqa: E501

        :param reason_code: The reason_code of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def referred_credit_memo_id(self):
        """Gets the referred_credit_memo_id of this DebitMemo.  # noqa: E501

        The ID of the credit memo from which the debit memo was created.  # noqa: E501

        :return: The referred_credit_memo_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._referred_credit_memo_id

    @referred_credit_memo_id.setter
    def referred_credit_memo_id(self, referred_credit_memo_id):
        """Sets the referred_credit_memo_id of this DebitMemo.

        The ID of the credit memo from which the debit memo was created.  # noqa: E501

        :param referred_credit_memo_id: The referred_credit_memo_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._referred_credit_memo_id = referred_credit_memo_id

    @property
    def referred_invoice_id(self):
        """Gets the referred_invoice_id of this DebitMemo.  # noqa: E501

        The ID of a referred invoice.  # noqa: E501

        :return: The referred_invoice_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._referred_invoice_id

    @referred_invoice_id.setter
    def referred_invoice_id(self, referred_invoice_id):
        """Sets the referred_invoice_id of this DebitMemo.

        The ID of a referred invoice.  # noqa: E501

        :param referred_invoice_id: The referred_invoice_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._referred_invoice_id = referred_invoice_id

    @property
    def sequence_set_id(self):
        """Gets the sequence_set_id of this DebitMemo.  # noqa: E501

        The ID of the sequence set associated with the debit memo.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :return: The sequence_set_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_id

    @sequence_set_id.setter
    def sequence_set_id(self, sequence_set_id):
        """Sets the sequence_set_id of this DebitMemo.

        The ID of the sequence set associated with the debit memo.  The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :param sequence_set_id: The sequence_set_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._sequence_set_id = sequence_set_id

    @property
    def source_type(self):
        """Gets the source_type of this DebitMemo.  # noqa: E501


        :return: The source_type of this DebitMemo.  # noqa: E501
        :rtype: MemoSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this DebitMemo.


        :param source_type: The source_type of this DebitMemo.  # noqa: E501
        :type: MemoSourceType
        """

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this DebitMemo.  # noqa: E501


        :return: The status of this DebitMemo.  # noqa: E501
        :rtype: BillingDocumentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DebitMemo.


        :param status: The status of this DebitMemo.  # noqa: E501
        :type: BillingDocumentStatus
        """

        self._status = status

    @property
    def target_date(self):
        """Gets the target_date of this DebitMemo.  # noqa: E501

        The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.  # noqa: E501

        :return: The target_date of this DebitMemo.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this DebitMemo.

        The target date for the debit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.  # noqa: E501

        :param target_date: The target_date of this DebitMemo.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def tax_amount(self):
        """Gets the tax_amount of this DebitMemo.  # noqa: E501

        The amount of taxation.  # noqa: E501

        :return: The tax_amount of this DebitMemo.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this DebitMemo.

        The amount of taxation.  # noqa: E501

        :param tax_amount: The tax_amount of this DebitMemo.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_message(self):
        """Gets the tax_message of this DebitMemo.  # noqa: E501

        The message about the status of tax calculation related to the debit memo. If tax calculation fails in one debit memo, this field displays the reason for the failure.  # noqa: E501

        :return: The tax_message of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._tax_message

    @tax_message.setter
    def tax_message(self, tax_message):
        """Sets the tax_message of this DebitMemo.

        The message about the status of tax calculation related to the debit memo. If tax calculation fails in one debit memo, this field displays the reason for the failure.  # noqa: E501

        :param tax_message: The tax_message of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._tax_message = tax_message

    @property
    def tax_status(self):
        """Gets the tax_status of this DebitMemo.  # noqa: E501


        :return: The tax_status of this DebitMemo.  # noqa: E501
        :rtype: TaxStatus
        """
        return self._tax_status

    @tax_status.setter
    def tax_status(self, tax_status):
        """Sets the tax_status of this DebitMemo.


        :param tax_status: The tax_status of this DebitMemo.  # noqa: E501
        :type: TaxStatus
        """

        self._tax_status = tax_status

    @property
    def total_tax_exempt_amount(self):
        """Gets the total_tax_exempt_amount of this DebitMemo.  # noqa: E501

        The calculated tax amount excluded due to the exemption.  # noqa: E501

        :return: The total_tax_exempt_amount of this DebitMemo.  # noqa: E501
        :rtype: float
        """
        return self._total_tax_exempt_amount

    @total_tax_exempt_amount.setter
    def total_tax_exempt_amount(self, total_tax_exempt_amount):
        """Sets the total_tax_exempt_amount of this DebitMemo.

        The calculated tax amount excluded due to the exemption.  # noqa: E501

        :param total_tax_exempt_amount: The total_tax_exempt_amount of this DebitMemo.  # noqa: E501
        :type: float
        """

        self._total_tax_exempt_amount = total_tax_exempt_amount

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this DebitMemo.  # noqa: E501


        :return: The transferred_to_accounting of this DebitMemo.  # noqa: E501
        :rtype: TransferredToAccountingStatus
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this DebitMemo.


        :param transferred_to_accounting: The transferred_to_accounting of this DebitMemo.  # noqa: E501
        :type: TransferredToAccountingStatus
        """

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this DebitMemo.  # noqa: E501

        The ID of the Zuora user who last updated the debit memo.  # noqa: E501

        :return: The updated_by_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this DebitMemo.

        The ID of the Zuora user who last updated the debit memo.  # noqa: E501

        :param updated_by_id: The updated_by_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this DebitMemo.  # noqa: E501

        The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:31:10.  # noqa: E501

        :return: The updated_date of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this DebitMemo.

        The date and time when the debit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:31:10.  # noqa: E501

        :param updated_date: The updated_date of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def e_invoice_status(self):
        """Gets the e_invoice_status of this DebitMemo.  # noqa: E501


        :return: The e_invoice_status of this DebitMemo.  # noqa: E501
        :rtype: EInvoiceStatus
        """
        return self._e_invoice_status

    @e_invoice_status.setter
    def e_invoice_status(self, e_invoice_status):
        """Sets the e_invoice_status of this DebitMemo.


        :param e_invoice_status: The e_invoice_status of this DebitMemo.  # noqa: E501
        :type: EInvoiceStatus
        """

        self._e_invoice_status = e_invoice_status

    @property
    def e_invoice_error_code(self):
        """Gets the e_invoice_error_code of this DebitMemo.  # noqa: E501

        eInvoiceErrorCode.   # noqa: E501

        :return: The e_invoice_error_code of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._e_invoice_error_code

    @e_invoice_error_code.setter
    def e_invoice_error_code(self, e_invoice_error_code):
        """Sets the e_invoice_error_code of this DebitMemo.

        eInvoiceErrorCode.   # noqa: E501

        :param e_invoice_error_code: The e_invoice_error_code of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._e_invoice_error_code = e_invoice_error_code

    @property
    def e_invoice_error_message(self):
        """Gets the e_invoice_error_message of this DebitMemo.  # noqa: E501

        eInvoiceErrorMessage.   # noqa: E501

        :return: The e_invoice_error_message of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._e_invoice_error_message

    @e_invoice_error_message.setter
    def e_invoice_error_message(self, e_invoice_error_message):
        """Sets the e_invoice_error_message of this DebitMemo.

        eInvoiceErrorMessage.   # noqa: E501

        :param e_invoice_error_message: The e_invoice_error_message of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._e_invoice_error_message = e_invoice_error_message

    @property
    def e_invoice_file_id(self):
        """Gets the e_invoice_file_id of this DebitMemo.  # noqa: E501

        eInvoiceFileId.   # noqa: E501

        :return: The e_invoice_file_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._e_invoice_file_id

    @e_invoice_file_id.setter
    def e_invoice_file_id(self, e_invoice_file_id):
        """Sets the e_invoice_file_id of this DebitMemo.

        eInvoiceFileId.   # noqa: E501

        :param e_invoice_file_id: The e_invoice_file_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._e_invoice_file_id = e_invoice_file_id

    @property
    def bill_to_contact_snapshot_id(self):
        """Gets the bill_to_contact_snapshot_id of this DebitMemo.  # noqa: E501

        billToContactSnapshotId.   # noqa: E501

        :return: The bill_to_contact_snapshot_id of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_contact_snapshot_id

    @bill_to_contact_snapshot_id.setter
    def bill_to_contact_snapshot_id(self, bill_to_contact_snapshot_id):
        """Sets the bill_to_contact_snapshot_id of this DebitMemo.

        billToContactSnapshotId.   # noqa: E501

        :param bill_to_contact_snapshot_id: The bill_to_contact_snapshot_id of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._bill_to_contact_snapshot_id = bill_to_contact_snapshot_id

    @property
    def organization_label(self):
        """Gets the organization_label of this DebitMemo.  # noqa: E501

        organization label.   # noqa: E501

        :return: The organization_label of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._organization_label

    @organization_label.setter
    def organization_label(self, organization_label):
        """Sets the organization_label of this DebitMemo.

        organization label.   # noqa: E501

        :param organization_label: The organization_label of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._organization_label = organization_label

    @property
    def currency(self):
        """Gets the currency of this DebitMemo.  # noqa: E501

        Currency code.  # noqa: E501

        :return: The currency of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DebitMemo.

        Currency code.  # noqa: E501

        :param currency: The currency of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this DebitMemo.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this DebitMemo.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this DebitMemo.  # noqa: E501

        Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this DebitMemo.

        Status of the debit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this DebitMemo.  # noqa: E501

        Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this DebitMemo.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this DebitMemo.

        Date when the debit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this DebitMemo.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DebitMemo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DebitMemo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
