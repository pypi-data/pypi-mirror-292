# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreatePaymentMethodACH(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_line1': 'str',
        'address_line2': 'str',
        'bank_aba_code': 'str',
        'bank_account_name': 'str',
        'bank_account_number': 'str',
        'bank_account_mask_number': 'str',
        'bank_account_type': 'PaymentMethodACHBankAccountType',
        'bank_name': 'str',
        'city': 'str',
        'country': 'str',
        'phone': 'str',
        'state': 'str',
        'zip_code': 'str'
    }

    attribute_map = {
        'address_line1': 'addressLine1',
        'address_line2': 'addressLine2',
        'bank_aba_code': 'bankABACode',
        'bank_account_name': 'bankAccountName',
        'bank_account_number': 'bankAccountNumber',
        'bank_account_mask_number': 'bankAccountMaskNumber',
        'bank_account_type': 'bankAccountType',
        'bank_name': 'bankName',
        'city': 'city',
        'country': 'country',
        'phone': 'phone',
        'state': 'state',
        'zip_code': 'zipCode'
    }

    def __init__(self, address_line1=None, address_line2=None, bank_aba_code=None, bank_account_name=None, bank_account_number=None, bank_account_mask_number=None, bank_account_type=None, bank_name=None, city=None, country=None, phone=None, state=None, zip_code=None):  # noqa: E501
        """CreatePaymentMethodACH - a model defined in Swagger"""  # noqa: E501
        self._address_line1 = None
        self._address_line2 = None
        self._bank_aba_code = None
        self._bank_account_name = None
        self._bank_account_number = None
        self._bank_account_mask_number = None
        self._bank_account_type = None
        self._bank_name = None
        self._city = None
        self._country = None
        self._phone = None
        self._state = None
        self._zip_code = None
        self.discriminator = None
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if bank_aba_code is not None:
            self.bank_aba_code = bank_aba_code
        if bank_account_name is not None:
            self.bank_account_name = bank_account_name
        if bank_account_number is not None:
            self.bank_account_number = bank_account_number
        if bank_account_mask_number is not None:
            self.bank_account_mask_number = bank_account_mask_number
        if bank_account_type is not None:
            self.bank_account_type = bank_account_type
        if bank_name is not None:
            self.bank_name = bank_name
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if phone is not None:
            self.phone = phone
        if state is not None:
            self.state = state
        if zip_code is not None:
            self.zip_code = zip_code

    @property
    def address_line1(self):
        """Gets the address_line1 of this CreatePaymentMethodACH.  # noqa: E501

        First address line, 255 characters or less.   # noqa: E501

        :return: The address_line1 of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this CreatePaymentMethodACH.

        First address line, 255 characters or less.   # noqa: E501

        :param address_line1: The address_line1 of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this CreatePaymentMethodACH.  # noqa: E501

        Second address line, 255 characters or less.   # noqa: E501

        :return: The address_line2 of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this CreatePaymentMethodACH.

        Second address line, 255 characters or less.   # noqa: E501

        :param address_line2: The address_line2 of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def bank_aba_code(self):
        """Gets the bank_aba_code of this CreatePaymentMethodACH.  # noqa: E501

        The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :return: The bank_aba_code of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_aba_code

    @bank_aba_code.setter
    def bank_aba_code(self, bank_aba_code):
        """Sets the bank_aba_code of this CreatePaymentMethodACH.

        The nine-digit routing number or ABA number used by banks. This field is only required if the `type` field is set to `ACH`.   # noqa: E501

        :param bank_aba_code: The bank_aba_code of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._bank_aba_code = bank_aba_code

    @property
    def bank_account_name(self):
        """Gets the bank_account_name of this CreatePaymentMethodACH.  # noqa: E501

        The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.  For ACH payment methods on the BlueSnap integration, see [Overview of BlueSnap gateway integration](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways/BlueSnap_Gateway/Overview_of_BlueSnap_gateway_integration#Payer_Name_Extraction) for more information about how Zuora splits the string in this field into two parts and passes them to BlueSnap's `firstName` and `lastName` fields.   # noqa: E501

        :return: The bank_account_name of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_name

    @bank_account_name.setter
    def bank_account_name(self, bank_account_name):
        """Sets the bank_account_name of this CreatePaymentMethodACH.

        The name of the account holder, which can be either a person or a company. This field is only required if the `type` field is set to `ACH`.  For ACH payment methods on the BlueSnap integration, see [Overview of BlueSnap gateway integration](https://knowledgecenter.zuora.com/Zuora_Billing/Billing_and_Payments/M_Payment_Gateways/Supported_Payment_Gateways/BlueSnap_Gateway/Overview_of_BlueSnap_gateway_integration#Payer_Name_Extraction) for more information about how Zuora splits the string in this field into two parts and passes them to BlueSnap's `firstName` and `lastName` fields.   # noqa: E501

        :param bank_account_name: The bank_account_name of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._bank_account_name = bank_account_name

    @property
    def bank_account_number(self):
        """Gets the bank_account_number of this CreatePaymentMethodACH.  # noqa: E501

        The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`. However, for creating tokenized ACH payment methods on  Stripe v2, this field is optional if the `tokens` and `bankAccountMaskNumber` fields are specified.   # noqa: E501

        :return: The bank_account_number of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_number

    @bank_account_number.setter
    def bank_account_number(self, bank_account_number):
        """Sets the bank_account_number of this CreatePaymentMethodACH.

        The bank account number associated with the ACH payment. This field is only required if the `type` field is set to `ACH`. However, for creating tokenized ACH payment methods on  Stripe v2, this field is optional if the `tokens` and `bankAccountMaskNumber` fields are specified.   # noqa: E501

        :param bank_account_number: The bank_account_number of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._bank_account_number = bank_account_number

    @property
    def bank_account_mask_number(self):
        """Gets the bank_account_mask_number of this CreatePaymentMethodACH.  # noqa: E501

        The masked bank account number associated with the ACH payment. This field is only required if the ACH payment method is created using tokens.   # noqa: E501

        :return: The bank_account_mask_number of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_account_mask_number

    @bank_account_mask_number.setter
    def bank_account_mask_number(self, bank_account_mask_number):
        """Sets the bank_account_mask_number of this CreatePaymentMethodACH.

        The masked bank account number associated with the ACH payment. This field is only required if the ACH payment method is created using tokens.   # noqa: E501

        :param bank_account_mask_number: The bank_account_mask_number of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._bank_account_mask_number = bank_account_mask_number

    @property
    def bank_account_type(self):
        """Gets the bank_account_type of this CreatePaymentMethodACH.  # noqa: E501


        :return: The bank_account_type of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: PaymentMethodACHBankAccountType
        """
        return self._bank_account_type

    @bank_account_type.setter
    def bank_account_type(self, bank_account_type):
        """Sets the bank_account_type of this CreatePaymentMethodACH.


        :param bank_account_type: The bank_account_type of this CreatePaymentMethodACH.  # noqa: E501
        :type: PaymentMethodACHBankAccountType
        """

        self._bank_account_type = bank_account_type

    @property
    def bank_name(self):
        """Gets the bank_name of this CreatePaymentMethodACH.  # noqa: E501

        The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`.  When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.   # noqa: E501

        :return: The bank_name of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this CreatePaymentMethodACH.

        The name of the bank where the ACH payment account is held. This field is only required if the `type` field is set to `ACH`.  When creating an ACH payment method on Adyen, this field is required by Zuora but it is not required by Adyen. To create the ACH payment method successfully, specify a real value for this field if you can. If it is not possible to get the real value for it, specify a dummy value.   # noqa: E501

        :param bank_name: The bank_name of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._bank_name = bank_name

    @property
    def city(self):
        """Gets the city of this CreatePaymentMethodACH.  # noqa: E501

        City, 40 characters or less.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.        # noqa: E501

        :return: The city of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CreatePaymentMethodACH.

        City, 40 characters or less.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.        # noqa: E501

        :param city: The city of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this CreatePaymentMethodACH.  # noqa: E501

        Country, must be a valid country name or abbreviation.  See [Country Names and Their ISO Standard 2- and 3-Digit Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes) for the list of supported country names and abbreviations.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.   # noqa: E501

        :return: The country of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CreatePaymentMethodACH.

        Country, must be a valid country name or abbreviation.  See [Country Names and Their ISO Standard 2- and 3-Digit Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/A_Country_Names_and_Their_ISO_Codes) for the list of supported country names and abbreviations.  It is recommended to provide the city and country information when creating a payment method. The information will be used to process payments. If the information is not provided during payment method creation, the city and country data will be missing during payment processing.   # noqa: E501

        :param country: The country of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def phone(self):
        """Gets the phone of this CreatePaymentMethodACH.  # noqa: E501

        Phone number, 40 characters or less.   # noqa: E501

        :return: The phone of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this CreatePaymentMethodACH.

        Phone number, 40 characters or less.   # noqa: E501

        :param phone: The phone of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def state(self):
        """Gets the state of this CreatePaymentMethodACH.  # noqa: E501

        State, must be a valid state name or 2-character abbreviation.  See [United States Standard State Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes) and [Canadian Standard Province Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/C_Canadian_Province_Names_and_2-Digit_Codes) for the list of supported names and abbreviations.   # noqa: E501

        :return: The state of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this CreatePaymentMethodACH.

        State, must be a valid state name or 2-character abbreviation.  See [United States Standard State Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/B_State_Names_and_2-Digit_Codes) and [Canadian Standard Province Codes](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/D_Country%2C_State%2C_and_Province_Codes/C_Canadian_Province_Names_and_2-Digit_Codes) for the list of supported names and abbreviations.   # noqa: E501

        :param state: The state of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def zip_code(self):
        """Gets the zip_code of this CreatePaymentMethodACH.  # noqa: E501

        Zip code, 20 characters or less.   # noqa: E501

        :return: The zip_code of this CreatePaymentMethodACH.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this CreatePaymentMethodACH.

        Zip code, 20 characters or less.   # noqa: E501

        :param zip_code: The zip_code of this CreatePaymentMethodACH.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreatePaymentMethodACH, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreatePaymentMethodACH):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
