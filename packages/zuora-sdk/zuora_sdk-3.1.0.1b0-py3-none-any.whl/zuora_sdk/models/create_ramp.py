# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateRamp(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'charges': 'list[RampChargeRequest]',
        'delete': 'bool',
        'description': 'str',
        'intervals': 'list[RampIntervalRequest]',
        'name': 'str'
    }

    attribute_map = {
        'charges': 'charges',
        'delete': 'delete',
        'description': 'description',
        'intervals': 'intervals',
        'name': 'name'
    }

    def __init__(self, charges=None, delete=None, description=None, intervals=None, name=None):  # noqa: E501
        """CreateRamp - a model defined in Swagger"""  # noqa: E501
        self._charges = None
        self._delete = None
        self._description = None
        self._intervals = None
        self._name = None
        self.discriminator = None
        if charges is not None:
            self.charges = charges
        if delete is not None:
            self.delete = delete
        if description is not None:
            self.description = description
        if intervals is not None:
            self.intervals = intervals
        if name is not None:
            self.name = name

    @property
    def charges(self):
        """Gets the charges of this CreateRamp.  # noqa: E501

        Container for the rate plan charges that are considered as part of the ramp deal.  * If this field is not specified, all the one-time and recurring regular charges of the new subscription are automatically considered as part of the ramp deal. * If this field is specified, either 'chargeNumber' or 'uniqueToken' must be specified.   # noqa: E501

        :return: The charges of this CreateRamp.  # noqa: E501
        :rtype: list[RampChargeRequest]
        """
        return self._charges

    @charges.setter
    def charges(self, charges):
        """Sets the charges of this CreateRamp.

        Container for the rate plan charges that are considered as part of the ramp deal.  * If this field is not specified, all the one-time and recurring regular charges of the new subscription are automatically considered as part of the ramp deal. * If this field is specified, either 'chargeNumber' or 'uniqueToken' must be specified.   # noqa: E501

        :param charges: The charges of this CreateRamp.  # noqa: E501
        :type: list[RampChargeRequest]
        """

        self._charges = charges

    @property
    def delete(self):
        """Gets the delete of this CreateRamp.  # noqa: E501

        Whether to remove the ramp definition from the new subscription. If you want to remove the ramp definition, this field is the only required field for the `ramp` object.     # noqa: E501

        :return: The delete of this CreateRamp.  # noqa: E501
        :rtype: bool
        """
        return self._delete

    @delete.setter
    def delete(self, delete):
        """Sets the delete of this CreateRamp.

        Whether to remove the ramp definition from the new subscription. If you want to remove the ramp definition, this field is the only required field for the `ramp` object.     # noqa: E501

        :param delete: The delete of this CreateRamp.  # noqa: E501
        :type: bool
        """

        self._delete = delete

    @property
    def description(self):
        """Gets the description of this CreateRamp.  # noqa: E501

        The short description of the ramp.  # noqa: E501

        :return: The description of this CreateRamp.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateRamp.

        The short description of the ramp.  # noqa: E501

        :param description: The description of this CreateRamp.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def intervals(self):
        """Gets the intervals of this CreateRamp.  # noqa: E501

        Container for the intervals that the ramp is split into in its timeline.   It is required when you want to create or update the ramp definition. The ramp intervals cannot have any overlap or gap between each other.   # noqa: E501

        :return: The intervals of this CreateRamp.  # noqa: E501
        :rtype: list[RampIntervalRequest]
        """
        return self._intervals

    @intervals.setter
    def intervals(self, intervals):
        """Sets the intervals of this CreateRamp.

        Container for the intervals that the ramp is split into in its timeline.   It is required when you want to create or update the ramp definition. The ramp intervals cannot have any overlap or gap between each other.   # noqa: E501

        :param intervals: The intervals of this CreateRamp.  # noqa: E501
        :type: list[RampIntervalRequest]
        """

        self._intervals = intervals

    @property
    def name(self):
        """Gets the name of this CreateRamp.  # noqa: E501

        The name of the ramp.  # noqa: E501

        :return: The name of this CreateRamp.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateRamp.

        The name of the ramp.  # noqa: E501

        :param name: The name of this CreateRamp.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateRamp, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateRamp):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
