# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateAuthorizationResponsePaymentGateway(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'additional_info': 'object',
        'gateway_response_code': 'str',
        'gateway_response_message': 'str',
        'gateway_type': 'str',
        'gateway_version': 'str'
    }

    attribute_map = {
        'additional_info': 'additionalInfo',
        'gateway_response_code': 'gatewayResponseCode',
        'gateway_response_message': 'gatewayResponseMessage',
        'gateway_type': 'gatewayType',
        'gateway_version': 'gatewayVersion'
    }

    def __init__(self, additional_info=None, gateway_response_code=None, gateway_response_message=None, gateway_type=None, gateway_version=None):  # noqa: E501
        """CreateAuthorizationResponsePaymentGateway - a model defined in Swagger"""  # noqa: E501
        self._additional_info = None
        self._gateway_response_code = None
        self._gateway_response_message = None
        self._gateway_type = None
        self._gateway_version = None
        self.discriminator = None
        if additional_info is not None:
            self.additional_info = additional_info
        if gateway_response_code is not None:
            self.gateway_response_code = gateway_response_code
        if gateway_response_message is not None:
            self.gateway_response_message = gateway_response_message
        if gateway_type is not None:
            self.gateway_type = gateway_type
        if gateway_version is not None:
            self.gateway_version = gateway_version

    @property
    def additional_info(self):
        """Gets the additional_info of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501

        The additional information returned from the gateway. The returned fields vary for gateways. Here is an example.  ``` \"additionalInfo\": {   \"ProcessorName\": \"MasterCard Saferpay Test\",   \"ProcessorResult\": \"51\",   \"ProcessorMessage\": \"Insufficient funds\",   \"ErrorName\": \"TRANSACTION_DECLINED\" } ```   # noqa: E501

        :return: The additional_info of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :rtype: object
        """
        return self._additional_info

    @additional_info.setter
    def additional_info(self, additional_info):
        """Sets the additional_info of this CreateAuthorizationResponsePaymentGateway.

        The additional information returned from the gateway. The returned fields vary for gateways. Here is an example.  ``` \"additionalInfo\": {   \"ProcessorName\": \"MasterCard Saferpay Test\",   \"ProcessorResult\": \"51\",   \"ProcessorMessage\": \"Insufficient funds\",   \"ErrorName\": \"TRANSACTION_DECLINED\" } ```   # noqa: E501

        :param additional_info: The additional_info of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :type: object
        """

        self._additional_info = additional_info

    @property
    def gateway_response_code(self):
        """Gets the gateway_response_code of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501

        The HTTP response code.   # noqa: E501

        :return: The gateway_response_code of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response_code

    @gateway_response_code.setter
    def gateway_response_code(self, gateway_response_code):
        """Sets the gateway_response_code of this CreateAuthorizationResponsePaymentGateway.

        The HTTP response code.   # noqa: E501

        :param gateway_response_code: The gateway_response_code of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :type: str
        """

        self._gateway_response_code = gateway_response_code

    @property
    def gateway_response_message(self):
        """Gets the gateway_response_message of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501

        The error message returned from the gateway.   # noqa: E501

        :return: The gateway_response_message of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_response_message

    @gateway_response_message.setter
    def gateway_response_message(self, gateway_response_message):
        """Sets the gateway_response_message of this CreateAuthorizationResponsePaymentGateway.

        The error message returned from the gateway.   # noqa: E501

        :param gateway_response_message: The gateway_response_message of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :type: str
        """

        self._gateway_response_message = gateway_response_message

    @property
    def gateway_type(self):
        """Gets the gateway_type of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501

        The gateway type.   # noqa: E501

        :return: The gateway_type of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_type

    @gateway_type.setter
    def gateway_type(self, gateway_type):
        """Sets the gateway_type of this CreateAuthorizationResponsePaymentGateway.

        The gateway type.   # noqa: E501

        :param gateway_type: The gateway_type of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :type: str
        """

        self._gateway_type = gateway_type

    @property
    def gateway_version(self):
        """Gets the gateway_version of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501

        The gateway version.   # noqa: E501

        :return: The gateway_version of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :rtype: str
        """
        return self._gateway_version

    @gateway_version.setter
    def gateway_version(self, gateway_version):
        """Sets the gateway_version of this CreateAuthorizationResponsePaymentGateway.

        The gateway version.   # noqa: E501

        :param gateway_version: The gateway_version of this CreateAuthorizationResponsePaymentGateway.  # noqa: E501
        :type: str
        """

        self._gateway_version = gateway_version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateAuthorizationResponsePaymentGateway, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateAuthorizationResponsePaymentGateway):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
