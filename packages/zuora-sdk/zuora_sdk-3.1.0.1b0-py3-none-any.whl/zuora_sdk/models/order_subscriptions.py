# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrderSubscriptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_version': 'int',
        'custom_fields': 'dict(str, object)',
        'externally_managed_by': 'ExternallyManagedBy',
        'new_version': 'int',
        'order_actions': 'list[OrderAction]',
        'quote': 'QuoteObjectFields',
        'ramp': 'object',
        'sequence': 'int',
        'subscription_number': 'str',
        'subscription_owner_account_number': 'str',
        'subscription_owner_account_details': 'AllOfOrderSubscriptionsSubscriptionOwnerAccountDetails'
    }

    attribute_map = {
        'base_version': 'baseVersion',
        'custom_fields': 'customFields',
        'externally_managed_by': 'externallyManagedBy',
        'new_version': 'newVersion',
        'order_actions': 'orderActions',
        'quote': 'quote',
        'ramp': 'ramp',
        'sequence': 'sequence',
        'subscription_number': 'subscriptionNumber',
        'subscription_owner_account_number': 'subscriptionOwnerAccountNumber',
        'subscription_owner_account_details': 'subscriptionOwnerAccountDetails'
    }

    def __init__(self, base_version=None, custom_fields=None, externally_managed_by=None, new_version=None, order_actions=None, quote=None, ramp=None, sequence=None, subscription_number=None, subscription_owner_account_number=None, subscription_owner_account_details=None):  # noqa: E501
        """OrderSubscriptions - a model defined in Swagger"""  # noqa: E501
        self._base_version = None
        self._custom_fields = None
        self._externally_managed_by = None
        self._new_version = None
        self._order_actions = None
        self._quote = None
        self._ramp = None
        self._sequence = None
        self._subscription_number = None
        self._subscription_owner_account_number = None
        self._subscription_owner_account_details = None
        self.discriminator = None
        if base_version is not None:
            self.base_version = base_version
        if custom_fields is not None:
            self.custom_fields = custom_fields
        if externally_managed_by is not None:
            self.externally_managed_by = externally_managed_by
        if new_version is not None:
            self.new_version = new_version
        if order_actions is not None:
            self.order_actions = order_actions
        if quote is not None:
            self.quote = quote
        if ramp is not None:
            self.ramp = ramp
        if sequence is not None:
            self.sequence = sequence
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if subscription_owner_account_number is not None:
            self.subscription_owner_account_number = subscription_owner_account_number
        if subscription_owner_account_details is not None:
            self.subscription_owner_account_details = subscription_owner_account_details

    @property
    def base_version(self):
        """Gets the base_version of this OrderSubscriptions.  # noqa: E501

        The base version of the subscription.  # noqa: E501

        :return: The base_version of this OrderSubscriptions.  # noqa: E501
        :rtype: int
        """
        return self._base_version

    @base_version.setter
    def base_version(self, base_version):
        """Sets the base_version of this OrderSubscriptions.

        The base version of the subscription.  # noqa: E501

        :param base_version: The base_version of this OrderSubscriptions.  # noqa: E501
        :type: int
        """

        self._base_version = base_version

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OrderSubscriptions.  # noqa: E501

        Container for custom fields of a Subscription object.   # noqa: E501

        :return: The custom_fields of this OrderSubscriptions.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OrderSubscriptions.

        Container for custom fields of a Subscription object.   # noqa: E501

        :param custom_fields: The custom_fields of this OrderSubscriptions.  # noqa: E501
        :type: dict(str, object)
        """

        self._custom_fields = custom_fields

    @property
    def externally_managed_by(self):
        """Gets the externally_managed_by of this OrderSubscriptions.  # noqa: E501


        :return: The externally_managed_by of this OrderSubscriptions.  # noqa: E501
        :rtype: ExternallyManagedBy
        """
        return self._externally_managed_by

    @externally_managed_by.setter
    def externally_managed_by(self, externally_managed_by):
        """Sets the externally_managed_by of this OrderSubscriptions.


        :param externally_managed_by: The externally_managed_by of this OrderSubscriptions.  # noqa: E501
        :type: ExternallyManagedBy
        """

        self._externally_managed_by = externally_managed_by

    @property
    def new_version(self):
        """Gets the new_version of this OrderSubscriptions.  # noqa: E501

        The latest version of the subscription.  # noqa: E501

        :return: The new_version of this OrderSubscriptions.  # noqa: E501
        :rtype: int
        """
        return self._new_version

    @new_version.setter
    def new_version(self, new_version):
        """Sets the new_version of this OrderSubscriptions.

        The latest version of the subscription.  # noqa: E501

        :param new_version: The new_version of this OrderSubscriptions.  # noqa: E501
        :type: int
        """

        self._new_version = new_version

    @property
    def order_actions(self):
        """Gets the order_actions of this OrderSubscriptions.  # noqa: E501


        :return: The order_actions of this OrderSubscriptions.  # noqa: E501
        :rtype: list[OrderAction]
        """
        return self._order_actions

    @order_actions.setter
    def order_actions(self, order_actions):
        """Sets the order_actions of this OrderSubscriptions.


        :param order_actions: The order_actions of this OrderSubscriptions.  # noqa: E501
        :type: list[OrderAction]
        """

        self._order_actions = order_actions

    @property
    def quote(self):
        """Gets the quote of this OrderSubscriptions.  # noqa: E501


        :return: The quote of this OrderSubscriptions.  # noqa: E501
        :rtype: QuoteObjectFields
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this OrderSubscriptions.


        :param quote: The quote of this OrderSubscriptions.  # noqa: E501
        :type: QuoteObjectFields
        """

        self._quote = quote

    @property
    def ramp(self):
        """Gets the ramp of this OrderSubscriptions.  # noqa: E501

        **Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.  The ramp definition.   # noqa: E501

        :return: The ramp of this OrderSubscriptions.  # noqa: E501
        :rtype: object
        """
        return self._ramp

    @ramp.setter
    def ramp(self, ramp):
        """Sets the ramp of this OrderSubscriptions.

        **Note**: This field is only available if you have the Ramps feature enabled. The [Orders](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/AA_Overview_of_Orders) feature must be enabled before you can access the [Ramps](https://knowledgecenter.zuora.com/Billing/Subscriptions/Orders/Ramps_and_Ramp_Metrics/A_Overview_of_Ramps_and_Ramp_Metrics) feature. The Ramps feature is available for customers with Enterprise and Nine editions by default. If you are a Growth customer, see [Zuora Editions](https://knowledgecenter.zuora.com/BB_Introducing_Z_Business/C_Zuora_Editions) for pricing information coming October 2020.  The ramp definition.   # noqa: E501

        :param ramp: The ramp of this OrderSubscriptions.  # noqa: E501
        :type: object
        """

        self._ramp = ramp

    @property
    def sequence(self):
        """Gets the sequence of this OrderSubscriptions.  # noqa: E501

        The sequence number of a certain subscription processed by the order.  # noqa: E501

        :return: The sequence of this OrderSubscriptions.  # noqa: E501
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """Sets the sequence of this OrderSubscriptions.

        The sequence number of a certain subscription processed by the order.  # noqa: E501

        :param sequence: The sequence of this OrderSubscriptions.  # noqa: E501
        :type: int
        """

        self._sequence = sequence

    @property
    def subscription_number(self):
        """Gets the subscription_number of this OrderSubscriptions.  # noqa: E501

        The new subscription number for a new subscription created, or the existing subscription number. Unlike the order request, the subscription number here always has a value.  # noqa: E501

        :return: The subscription_number of this OrderSubscriptions.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this OrderSubscriptions.

        The new subscription number for a new subscription created, or the existing subscription number. Unlike the order request, the subscription number here always has a value.  # noqa: E501

        :param subscription_number: The subscription_number of this OrderSubscriptions.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def subscription_owner_account_number(self):
        """Gets the subscription_owner_account_number of this OrderSubscriptions.  # noqa: E501

        The number of the account that owns the subscription.  # noqa: E501

        :return: The subscription_owner_account_number of this OrderSubscriptions.  # noqa: E501
        :rtype: str
        """
        return self._subscription_owner_account_number

    @subscription_owner_account_number.setter
    def subscription_owner_account_number(self, subscription_owner_account_number):
        """Sets the subscription_owner_account_number of this OrderSubscriptions.

        The number of the account that owns the subscription.  # noqa: E501

        :param subscription_owner_account_number: The subscription_owner_account_number of this OrderSubscriptions.  # noqa: E501
        :type: str
        """

        self._subscription_owner_account_number = subscription_owner_account_number

    @property
    def subscription_owner_account_details(self):
        """Gets the subscription_owner_account_details of this OrderSubscriptions.  # noqa: E501

        The account basic information that this order has been created under. This is also the invoice owner of the subscriptions included in this order.   # noqa: E501

        :return: The subscription_owner_account_details of this OrderSubscriptions.  # noqa: E501
        :rtype: AllOfOrderSubscriptionsSubscriptionOwnerAccountDetails
        """
        return self._subscription_owner_account_details

    @subscription_owner_account_details.setter
    def subscription_owner_account_details(self, subscription_owner_account_details):
        """Sets the subscription_owner_account_details of this OrderSubscriptions.

        The account basic information that this order has been created under. This is also the invoice owner of the subscriptions included in this order.   # noqa: E501

        :param subscription_owner_account_details: The subscription_owner_account_details of this OrderSubscriptions.  # noqa: E501
        :type: AllOfOrderSubscriptionsSubscriptionOwnerAccountDetails
        """

        self._subscription_owner_account_details = subscription_owner_account_details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderSubscriptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderSubscriptions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
