# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RSASignatureResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'signature': 'str',
        'success': 'bool',
        'tenant_id': 'str',
        'token': 'str'
    }

    attribute_map = {
        'key': 'key',
        'signature': 'signature',
        'success': 'success',
        'tenant_id': 'tenantId',
        'token': 'token'
    }

    def __init__(self, key=None, signature=None, success=None, tenant_id=None, token=None):  # noqa: E501
        """RSASignatureResponse - a model defined in Swagger"""  # noqa: E501
        self._key = None
        self._signature = None
        self._success = None
        self._tenant_id = None
        self._token = None
        self.discriminator = None
        if key is not None:
            self.key = key
        if signature is not None:
            self.signature = signature
        if success is not None:
            self.success = success
        if tenant_id is not None:
            self.tenant_id = tenant_id
        if token is not None:
            self.token = token

    @property
    def key(self):
        """Gets the key of this RSASignatureResponse.  # noqa: E501

        Public key generated for this Payment Page.   # noqa: E501

        :return: The key of this RSASignatureResponse.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this RSASignatureResponse.

        Public key generated for this Payment Page.   # noqa: E501

        :param key: The key of this RSASignatureResponse.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def signature(self):
        """Gets the signature of this RSASignatureResponse.  # noqa: E501

        Digital signature generated for this Payment Page.  If `signature` returns `null` but `token` is successfully returned, please limit the number of the fields in your request to make sure that the maximum length supported by the RSA signature algorithm is not exceeded.   # noqa: E501

        :return: The signature of this RSASignatureResponse.  # noqa: E501
        :rtype: str
        """
        return self._signature

    @signature.setter
    def signature(self, signature):
        """Sets the signature of this RSASignatureResponse.

        Digital signature generated for this Payment Page.  If `signature` returns `null` but `token` is successfully returned, please limit the number of the fields in your request to make sure that the maximum length supported by the RSA signature algorithm is not exceeded.   # noqa: E501

        :param signature: The signature of this RSASignatureResponse.  # noqa: E501
        :type: str
        """

        self._signature = signature

    @property
    def success(self):
        """Gets the success of this RSASignatureResponse.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this RSASignatureResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this RSASignatureResponse.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this RSASignatureResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def tenant_id(self):
        """Gets the tenant_id of this RSASignatureResponse.  # noqa: E501

        ID of the Zuora tenant.   # noqa: E501

        :return: The tenant_id of this RSASignatureResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this RSASignatureResponse.

        ID of the Zuora tenant.   # noqa: E501

        :param tenant_id: The tenant_id of this RSASignatureResponse.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def token(self):
        """Gets the token of this RSASignatureResponse.  # noqa: E501

        Token generated for this Payment Page.   # noqa: E501

        :return: The token of this RSASignatureResponse.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this RSASignatureResponse.

        Token generated for this Payment Page.   # noqa: E501

        :param token: The token of this RSASignatureResponse.  # noqa: E501
        :type: str
        """

        self._token = token

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RSASignatureResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RSASignatureResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
