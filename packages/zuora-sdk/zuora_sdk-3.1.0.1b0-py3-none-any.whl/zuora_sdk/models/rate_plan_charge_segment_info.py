# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RatePlanChargeSegmentInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'amended_by_order_on': 'date',
        'apply_discount_to': 'ApplyDiscountTo',
        'charge_function': 'ChargeFunction',
        'charge_model_configuration': 'ChargeModelConfigurationForSubscription',
        'charged_through_date': 'date',
        'commitment_type': 'CommitmentType',
        'prepaid_committed_amount': 'str',
        'credit_option': 'str',
        'currency': 'Currency',
        'delivery_schedule': 'DeliverySchedule',
        'number_of_deliveries': 'float',
        'description': 'str',
        'discount_amount': 'float',
        'discount_apply_details': 'list[DiscountApplyDetail]',
        'discount_class': 'str',
        'discount_level': 'DiscountLevel',
        'discount_percentage': 'float',
        'apply_to_billing_period_partially': 'bool',
        'dmrc': 'float',
        'done': 'bool',
        'drawdown_rate': 'float',
        'drawdown_uom': 'Uom',
        'dtcv': 'float',
        'effective_end_date': 'date',
        'effective_start_date': 'date',
        'end_date_condition': 'EndDateCondition',
        'included_units': 'float',
        'input_argument_id': 'str',
        'is_committed': 'bool',
        'is_prepaid': 'bool',
        'is_rollover': 'bool',
        'mrr': 'float',
        'original_order_date': 'date',
        'overage_price': 'float',
        'prepaid_operation_type': 'str',
        'prepaid_quantity': 'float',
        'prepaid_total_quantity': 'float',
        'prepaid_uom': 'Uom',
        'quantity': 'float',
        'price': 'float',
        'price_change_option': 'PriceChangeOption',
        'price_increase_percentage': 'float',
        'pricing_summary': 'str',
        'processed_through_date': 'date',
        'rollover_apply': 'str',
        'rollover_period_length': 'int',
        'rollover_periods': 'int',
        'proration_option': 'str',
        'segment': 'int',
        'specific_end_date': 'date',
        'subscription_charge_interval_pricing': 'list[IntervalPricing]',
        'tcv': 'float',
        'tiers': 'list[RatePlanChargeTier]',
        'trigger_date': 'date',
        'billing_period_alignment': 'BillingPeriodAlignment',
        'trigger_event': 'TriggerEvent',
        'up_to_periods': 'int',
        'up_to_periods_type': 'UpToPeriodsType',
        'validity_period_type': 'ValidityPeriodType',
        'sales_price': 'float',
        'accounting_code': 'str',
        'revenue_recognition_code': 'str',
        'rev_rec_trigger_condition': 'str'
    }

    attribute_map = {
        'id': 'id',
        'amended_by_order_on': 'amendedByOrderOn',
        'apply_discount_to': 'applyDiscountTo',
        'charge_function': 'chargeFunction',
        'charge_model_configuration': 'chargeModelConfiguration',
        'charged_through_date': 'chargedThroughDate',
        'commitment_type': 'commitmentType',
        'prepaid_committed_amount': 'prepaidCommittedAmount',
        'credit_option': 'creditOption',
        'currency': 'currency',
        'delivery_schedule': 'deliverySchedule',
        'number_of_deliveries': 'numberOfDeliveries',
        'description': 'description',
        'discount_amount': 'discountAmount',
        'discount_apply_details': 'discountApplyDetails',
        'discount_class': 'discountClass',
        'discount_level': 'discountLevel',
        'discount_percentage': 'discountPercentage',
        'apply_to_billing_period_partially': 'applyToBillingPeriodPartially',
        'dmrc': 'dmrc',
        'done': 'done',
        'drawdown_rate': 'drawdownRate',
        'drawdown_uom': 'drawdownUom',
        'dtcv': 'dtcv',
        'effective_end_date': 'effectiveEndDate',
        'effective_start_date': 'effectiveStartDate',
        'end_date_condition': 'endDateCondition',
        'included_units': 'includedUnits',
        'input_argument_id': 'inputArgumentId',
        'is_committed': 'isCommitted',
        'is_prepaid': 'isPrepaid',
        'is_rollover': 'isRollover',
        'mrr': 'mrr',
        'original_order_date': 'originalOrderDate',
        'overage_price': 'overagePrice',
        'prepaid_operation_type': 'prepaidOperationType',
        'prepaid_quantity': 'prepaidQuantity',
        'prepaid_total_quantity': 'prepaidTotalQuantity',
        'prepaid_uom': 'prepaidUOM',
        'quantity': 'quantity',
        'price': 'price',
        'price_change_option': 'priceChangeOption',
        'price_increase_percentage': 'priceIncreasePercentage',
        'pricing_summary': 'pricingSummary',
        'processed_through_date': 'processedThroughDate',
        'rollover_apply': 'rolloverApply',
        'rollover_period_length': 'rolloverPeriodLength',
        'rollover_periods': 'rolloverPeriods',
        'proration_option': 'prorationOption',
        'segment': 'segment',
        'specific_end_date': 'specificEndDate',
        'subscription_charge_interval_pricing': 'subscriptionChargeIntervalPricing',
        'tcv': 'tcv',
        'tiers': 'tiers',
        'trigger_date': 'triggerDate',
        'billing_period_alignment': 'billingPeriodAlignment',
        'trigger_event': 'triggerEvent',
        'up_to_periods': 'upToPeriods',
        'up_to_periods_type': 'upToPeriodsType',
        'validity_period_type': 'validityPeriodType',
        'sales_price': 'salesPrice',
        'accounting_code': 'accountingCode',
        'revenue_recognition_code': 'revenueRecognitionCode',
        'rev_rec_trigger_condition': 'revRecTriggerCondition'
    }

    def __init__(self, id=None, amended_by_order_on=None, apply_discount_to=None, charge_function=None, charge_model_configuration=None, charged_through_date=None, commitment_type=None, prepaid_committed_amount=None, credit_option=None, currency=None, delivery_schedule=None, number_of_deliveries=None, description=None, discount_amount=None, discount_apply_details=None, discount_class=None, discount_level=None, discount_percentage=None, apply_to_billing_period_partially=None, dmrc=None, done=None, drawdown_rate=None, drawdown_uom=None, dtcv=None, effective_end_date=None, effective_start_date=None, end_date_condition=None, included_units=None, input_argument_id=None, is_committed=None, is_prepaid=None, is_rollover=None, mrr=None, original_order_date=None, overage_price=None, prepaid_operation_type=None, prepaid_quantity=None, prepaid_total_quantity=None, prepaid_uom=None, quantity=None, price=None, price_change_option=None, price_increase_percentage=None, pricing_summary=None, processed_through_date=None, rollover_apply=None, rollover_period_length=None, rollover_periods=None, proration_option=None, segment=None, specific_end_date=None, subscription_charge_interval_pricing=None, tcv=None, tiers=None, trigger_date=None, billing_period_alignment=None, trigger_event=None, up_to_periods=None, up_to_periods_type=None, validity_period_type=None, sales_price=None, accounting_code=None, revenue_recognition_code=None, rev_rec_trigger_condition=None):  # noqa: E501
        """RatePlanChargeSegmentInfo - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._amended_by_order_on = None
        self._apply_discount_to = None
        self._charge_function = None
        self._charge_model_configuration = None
        self._charged_through_date = None
        self._commitment_type = None
        self._prepaid_committed_amount = None
        self._credit_option = None
        self._currency = None
        self._delivery_schedule = None
        self._number_of_deliveries = None
        self._description = None
        self._discount_amount = None
        self._discount_apply_details = None
        self._discount_class = None
        self._discount_level = None
        self._discount_percentage = None
        self._apply_to_billing_period_partially = None
        self._dmrc = None
        self._done = None
        self._drawdown_rate = None
        self._drawdown_uom = None
        self._dtcv = None
        self._effective_end_date = None
        self._effective_start_date = None
        self._end_date_condition = None
        self._included_units = None
        self._input_argument_id = None
        self._is_committed = None
        self._is_prepaid = None
        self._is_rollover = None
        self._mrr = None
        self._original_order_date = None
        self._overage_price = None
        self._prepaid_operation_type = None
        self._prepaid_quantity = None
        self._prepaid_total_quantity = None
        self._prepaid_uom = None
        self._quantity = None
        self._price = None
        self._price_change_option = None
        self._price_increase_percentage = None
        self._pricing_summary = None
        self._processed_through_date = None
        self._rollover_apply = None
        self._rollover_period_length = None
        self._rollover_periods = None
        self._proration_option = None
        self._segment = None
        self._specific_end_date = None
        self._subscription_charge_interval_pricing = None
        self._tcv = None
        self._tiers = None
        self._trigger_date = None
        self._billing_period_alignment = None
        self._trigger_event = None
        self._up_to_periods = None
        self._up_to_periods_type = None
        self._validity_period_type = None
        self._sales_price = None
        self._accounting_code = None
        self._revenue_recognition_code = None
        self._rev_rec_trigger_condition = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if amended_by_order_on is not None:
            self.amended_by_order_on = amended_by_order_on
        if apply_discount_to is not None:
            self.apply_discount_to = apply_discount_to
        if charge_function is not None:
            self.charge_function = charge_function
        if charge_model_configuration is not None:
            self.charge_model_configuration = charge_model_configuration
        if charged_through_date is not None:
            self.charged_through_date = charged_through_date
        if commitment_type is not None:
            self.commitment_type = commitment_type
        if prepaid_committed_amount is not None:
            self.prepaid_committed_amount = prepaid_committed_amount
        if credit_option is not None:
            self.credit_option = credit_option
        if currency is not None:
            self.currency = currency
        if delivery_schedule is not None:
            self.delivery_schedule = delivery_schedule
        if number_of_deliveries is not None:
            self.number_of_deliveries = number_of_deliveries
        if description is not None:
            self.description = description
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if discount_apply_details is not None:
            self.discount_apply_details = discount_apply_details
        if discount_class is not None:
            self.discount_class = discount_class
        if discount_level is not None:
            self.discount_level = discount_level
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if apply_to_billing_period_partially is not None:
            self.apply_to_billing_period_partially = apply_to_billing_period_partially
        if dmrc is not None:
            self.dmrc = dmrc
        if done is not None:
            self.done = done
        if drawdown_rate is not None:
            self.drawdown_rate = drawdown_rate
        if drawdown_uom is not None:
            self.drawdown_uom = drawdown_uom
        if dtcv is not None:
            self.dtcv = dtcv
        if effective_end_date is not None:
            self.effective_end_date = effective_end_date
        if effective_start_date is not None:
            self.effective_start_date = effective_start_date
        if end_date_condition is not None:
            self.end_date_condition = end_date_condition
        if included_units is not None:
            self.included_units = included_units
        if input_argument_id is not None:
            self.input_argument_id = input_argument_id
        if is_committed is not None:
            self.is_committed = is_committed
        if is_prepaid is not None:
            self.is_prepaid = is_prepaid
        if is_rollover is not None:
            self.is_rollover = is_rollover
        if mrr is not None:
            self.mrr = mrr
        if original_order_date is not None:
            self.original_order_date = original_order_date
        if overage_price is not None:
            self.overage_price = overage_price
        if prepaid_operation_type is not None:
            self.prepaid_operation_type = prepaid_operation_type
        if prepaid_quantity is not None:
            self.prepaid_quantity = prepaid_quantity
        if prepaid_total_quantity is not None:
            self.prepaid_total_quantity = prepaid_total_quantity
        if prepaid_uom is not None:
            self.prepaid_uom = prepaid_uom
        if quantity is not None:
            self.quantity = quantity
        if price is not None:
            self.price = price
        if price_change_option is not None:
            self.price_change_option = price_change_option
        if price_increase_percentage is not None:
            self.price_increase_percentage = price_increase_percentage
        if pricing_summary is not None:
            self.pricing_summary = pricing_summary
        if processed_through_date is not None:
            self.processed_through_date = processed_through_date
        if rollover_apply is not None:
            self.rollover_apply = rollover_apply
        if rollover_period_length is not None:
            self.rollover_period_length = rollover_period_length
        if rollover_periods is not None:
            self.rollover_periods = rollover_periods
        if proration_option is not None:
            self.proration_option = proration_option
        if segment is not None:
            self.segment = segment
        if specific_end_date is not None:
            self.specific_end_date = specific_end_date
        if subscription_charge_interval_pricing is not None:
            self.subscription_charge_interval_pricing = subscription_charge_interval_pricing
        if tcv is not None:
            self.tcv = tcv
        if tiers is not None:
            self.tiers = tiers
        if trigger_date is not None:
            self.trigger_date = trigger_date
        if billing_period_alignment is not None:
            self.billing_period_alignment = billing_period_alignment
        if trigger_event is not None:
            self.trigger_event = trigger_event
        if up_to_periods is not None:
            self.up_to_periods = up_to_periods
        if up_to_periods_type is not None:
            self.up_to_periods_type = up_to_periods_type
        if validity_period_type is not None:
            self.validity_period_type = validity_period_type
        if sales_price is not None:
            self.sales_price = sales_price
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if revenue_recognition_code is not None:
            self.revenue_recognition_code = revenue_recognition_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def id(self):
        """Gets the id of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The id of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RatePlanChargeSegmentInfo.


        :param id: The id of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def amended_by_order_on(self):
        """Gets the amended_by_order_on of this RatePlanChargeSegmentInfo.  # noqa: E501

        The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :return: The amended_by_order_on of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: date
        """
        return self._amended_by_order_on

    @amended_by_order_on.setter
    def amended_by_order_on(self, amended_by_order_on):
        """Sets the amended_by_order_on of this RatePlanChargeSegmentInfo.

        The date when the rate plan charge is amended through an order or amendment. This field is to standardize the booking date information to increase audit ability and traceability of data between Zuora Billing and Zuora Revenue. It is mapped as the booking date for a sale order line in Zuora Revenue.   # noqa: E501

        :param amended_by_order_on: The amended_by_order_on of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: date
        """

        self._amended_by_order_on = amended_by_order_on

    @property
    def apply_discount_to(self):
        """Gets the apply_discount_to of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The apply_discount_to of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: ApplyDiscountTo
        """
        return self._apply_discount_to

    @apply_discount_to.setter
    def apply_discount_to(self, apply_discount_to):
        """Sets the apply_discount_to of this RatePlanChargeSegmentInfo.


        :param apply_discount_to: The apply_discount_to of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: ApplyDiscountTo
        """

        self._apply_discount_to = apply_discount_to

    @property
    def charge_function(self):
        """Gets the charge_function of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The charge_function of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: ChargeFunction
        """
        return self._charge_function

    @charge_function.setter
    def charge_function(self, charge_function):
        """Sets the charge_function of this RatePlanChargeSegmentInfo.


        :param charge_function: The charge_function of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: ChargeFunction
        """

        self._charge_function = charge_function

    @property
    def charge_model_configuration(self):
        """Gets the charge_model_configuration of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The charge_model_configuration of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: ChargeModelConfigurationForSubscription
        """
        return self._charge_model_configuration

    @charge_model_configuration.setter
    def charge_model_configuration(self, charge_model_configuration):
        """Sets the charge_model_configuration of this RatePlanChargeSegmentInfo.


        :param charge_model_configuration: The charge_model_configuration of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: ChargeModelConfigurationForSubscription
        """

        self._charge_model_configuration = charge_model_configuration

    @property
    def charged_through_date(self):
        """Gets the charged_through_date of this RatePlanChargeSegmentInfo.  # noqa: E501

        The date through which a customer has been billed for the charge.   # noqa: E501

        :return: The charged_through_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: date
        """
        return self._charged_through_date

    @charged_through_date.setter
    def charged_through_date(self, charged_through_date):
        """Sets the charged_through_date of this RatePlanChargeSegmentInfo.

        The date through which a customer has been billed for the charge.   # noqa: E501

        :param charged_through_date: The charged_through_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: date
        """

        self._charged_through_date = charged_through_date

    @property
    def commitment_type(self):
        """Gets the commitment_type of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The commitment_type of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: CommitmentType
        """
        return self._commitment_type

    @commitment_type.setter
    def commitment_type(self, commitment_type):
        """Sets the commitment_type of this RatePlanChargeSegmentInfo.


        :param commitment_type: The commitment_type of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: CommitmentType
        """

        self._commitment_type = commitment_type

    @property
    def prepaid_committed_amount(self):
        """Gets the prepaid_committed_amount of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The prepaid_committed_amount of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._prepaid_committed_amount

    @prepaid_committed_amount.setter
    def prepaid_committed_amount(self, prepaid_committed_amount):
        """Sets the prepaid_committed_amount of this RatePlanChargeSegmentInfo.


        :param prepaid_committed_amount: The prepaid_committed_amount of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._prepaid_committed_amount = prepaid_committed_amount

    @property
    def credit_option(self):
        """Gets the credit_option of this RatePlanChargeSegmentInfo.  # noqa: E501

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information.   # noqa: E501

        :return: The credit_option of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._credit_option

    @credit_option.setter
    def credit_option(self, credit_option):
        """Sets the credit_option of this RatePlanChargeSegmentInfo.

        **Note**: This field is only available if you have the [Prepaid with Drawdown](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown) feature enabled.  To use this field, you must set the `X-Zuora-WSDL-Version` request header to 114 or higher. Otherwise, an error occurs.  The way to calculate credit. See [Credit Option](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/J_Billing_Operations/Prepaid_with_Drawdown/Create_prepayment_charge#Credit_Option) for more information.   # noqa: E501

        :param credit_option: The credit_option of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["TimeBased", "ConsumptionBased", "FullCreditBack"]  # noqa: E501
        if credit_option not in allowed_values:
            raise ValueError(
                "Invalid value for `credit_option` ({0}), must be one of {1}"  # noqa: E501
                .format(credit_option, allowed_values)
            )

        self._credit_option = credit_option

    @property
    def currency(self):
        """Gets the currency of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The currency of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this RatePlanChargeSegmentInfo.


        :param currency: The currency of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: Currency
        """

        self._currency = currency

    @property
    def delivery_schedule(self):
        """Gets the delivery_schedule of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The delivery_schedule of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: DeliverySchedule
        """
        return self._delivery_schedule

    @delivery_schedule.setter
    def delivery_schedule(self, delivery_schedule):
        """Sets the delivery_schedule of this RatePlanChargeSegmentInfo.


        :param delivery_schedule: The delivery_schedule of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: DeliverySchedule
        """

        self._delivery_schedule = delivery_schedule

    @property
    def number_of_deliveries(self):
        """Gets the number_of_deliveries of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The number_of_deliveries of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._number_of_deliveries

    @number_of_deliveries.setter
    def number_of_deliveries(self, number_of_deliveries):
        """Sets the number_of_deliveries of this RatePlanChargeSegmentInfo.


        :param number_of_deliveries: The number_of_deliveries of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._number_of_deliveries = number_of_deliveries

    @property
    def description(self):
        """Gets the description of this RatePlanChargeSegmentInfo.  # noqa: E501

        Description of the rate plan charge.  # noqa: E501

        :return: The description of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RatePlanChargeSegmentInfo.

        Description of the rate plan charge.  # noqa: E501

        :param description: The description of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this RatePlanChargeSegmentInfo.  # noqa: E501

        The amount of the discount.  # noqa: E501

        :return: The discount_amount of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this RatePlanChargeSegmentInfo.

        The amount of the discount.  # noqa: E501

        :param discount_amount: The discount_amount of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def discount_apply_details(self):
        """Gets the discount_apply_details of this RatePlanChargeSegmentInfo.  # noqa: E501

        Container for the application details about a discount rate plan charge.   Only discount rate plan charges have values in this field.   # noqa: E501

        :return: The discount_apply_details of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: list[DiscountApplyDetail]
        """
        return self._discount_apply_details

    @discount_apply_details.setter
    def discount_apply_details(self, discount_apply_details):
        """Sets the discount_apply_details of this RatePlanChargeSegmentInfo.

        Container for the application details about a discount rate plan charge.   Only discount rate plan charges have values in this field.   # noqa: E501

        :param discount_apply_details: The discount_apply_details of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: list[DiscountApplyDetail]
        """

        self._discount_apply_details = discount_apply_details

    @property
    def discount_class(self):
        """Gets the discount_class of this RatePlanChargeSegmentInfo.  # noqa: E501

        The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).   # noqa: E501

        :return: The discount_class of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._discount_class

    @discount_class.setter
    def discount_class(self, discount_class):
        """Sets the discount_class of this RatePlanChargeSegmentInfo.

        The class that the discount belongs to. The discount class defines the order in which discount rate plan charges are applied.  For more information, see [Manage Discount Classes](https://knowledgecenter.zuora.com/BC_Subscription_Management/Product_Catalog/B_Charge_Models/Manage_Discount_Classes).   # noqa: E501

        :param discount_class: The discount_class of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._discount_class = discount_class

    @property
    def discount_level(self):
        """Gets the discount_level of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The discount_level of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: DiscountLevel
        """
        return self._discount_level

    @discount_level.setter
    def discount_level(self, discount_level):
        """Sets the discount_level of this RatePlanChargeSegmentInfo.


        :param discount_level: The discount_level of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: DiscountLevel
        """

        self._discount_level = discount_level

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this RatePlanChargeSegmentInfo.  # noqa: E501

        The amount of the discount as a percentage.   # noqa: E501

        :return: The discount_percentage of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this RatePlanChargeSegmentInfo.

        The amount of the discount as a percentage.   # noqa: E501

        :param discount_percentage: The discount_percentage of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def apply_to_billing_period_partially(self):
        """Gets the apply_to_billing_period_partially of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The apply_to_billing_period_partially of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._apply_to_billing_period_partially

    @apply_to_billing_period_partially.setter
    def apply_to_billing_period_partially(self, apply_to_billing_period_partially):
        """Sets the apply_to_billing_period_partially of this RatePlanChargeSegmentInfo.


        :param apply_to_billing_period_partially: The apply_to_billing_period_partially of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: bool
        """

        self._apply_to_billing_period_partially = apply_to_billing_period_partially

    @property
    def dmrc(self):
        """Gets the dmrc of this RatePlanChargeSegmentInfo.  # noqa: E501

        The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription.   # noqa: E501

        :return: The dmrc of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._dmrc

    @dmrc.setter
    def dmrc(self, dmrc):
        """Sets the dmrc of this RatePlanChargeSegmentInfo.

        The change (delta) of monthly recurring charge exists when the change in monthly recurring revenue caused by an amendment or a new subscription.   # noqa: E501

        :param dmrc: The dmrc of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._dmrc = dmrc

    @property
    def done(self):
        """Gets the done of this RatePlanChargeSegmentInfo.  # noqa: E501

        A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not been completed for the charge segment.   # noqa: E501

        :return: The done of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._done

    @done.setter
    def done(self, done):
        """Sets the done of this RatePlanChargeSegmentInfo.

        A value of `true` indicates that an invoice for a charge segment has been completed. A value of `false` indicates that an invoice has not been completed for the charge segment.   # noqa: E501

        :param done: The done of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: bool
        """

        self._done = done

    @property
    def drawdown_rate(self):
        """Gets the drawdown_rate of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The drawdown_rate of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._drawdown_rate

    @drawdown_rate.setter
    def drawdown_rate(self, drawdown_rate):
        """Sets the drawdown_rate of this RatePlanChargeSegmentInfo.


        :param drawdown_rate: The drawdown_rate of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._drawdown_rate = drawdown_rate

    @property
    def drawdown_uom(self):
        """Gets the drawdown_uom of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The drawdown_uom of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: Uom
        """
        return self._drawdown_uom

    @drawdown_uom.setter
    def drawdown_uom(self, drawdown_uom):
        """Sets the drawdown_uom of this RatePlanChargeSegmentInfo.


        :param drawdown_uom: The drawdown_uom of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: Uom
        """

        self._drawdown_uom = drawdown_uom

    @property
    def dtcv(self):
        """Gets the dtcv of this RatePlanChargeSegmentInfo.  # noqa: E501

        After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types.   # noqa: E501

        :return: The dtcv of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._dtcv

    @dtcv.setter
    def dtcv(self, dtcv):
        """Sets the dtcv of this RatePlanChargeSegmentInfo.

        After an amendment or an AutomatedPriceChange event, `dtcv` displays the change (delta) for the total contract value (TCV) amount for this charge, compared with its previous value with recurring charge types.   # noqa: E501

        :param dtcv: The dtcv of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._dtcv = dtcv

    @property
    def effective_end_date(self):
        """Gets the effective_end_date of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The effective_end_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: date
        """
        return self._effective_end_date

    @effective_end_date.setter
    def effective_end_date(self, effective_end_date):
        """Sets the effective_end_date of this RatePlanChargeSegmentInfo.


        :param effective_end_date: The effective_end_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: date
        """

        self._effective_end_date = effective_end_date

    @property
    def effective_start_date(self):
        """Gets the effective_start_date of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The effective_start_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: date
        """
        return self._effective_start_date

    @effective_start_date.setter
    def effective_start_date(self, effective_start_date):
        """Sets the effective_start_date of this RatePlanChargeSegmentInfo.


        :param effective_start_date: The effective_start_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: date
        """

        self._effective_start_date = effective_start_date

    @property
    def end_date_condition(self):
        """Gets the end_date_condition of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The end_date_condition of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: EndDateCondition
        """
        return self._end_date_condition

    @end_date_condition.setter
    def end_date_condition(self, end_date_condition):
        """Sets the end_date_condition of this RatePlanChargeSegmentInfo.


        :param end_date_condition: The end_date_condition of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: EndDateCondition
        """

        self._end_date_condition = end_date_condition

    @property
    def included_units(self):
        """Gets the included_units of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The included_units of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._included_units

    @included_units.setter
    def included_units(self, included_units):
        """Sets the included_units of this RatePlanChargeSegmentInfo.


        :param included_units: The included_units of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._included_units = included_units

    @property
    def input_argument_id(self):
        """Gets the input_argument_id of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The input_argument_id of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._input_argument_id

    @input_argument_id.setter
    def input_argument_id(self, input_argument_id):
        """Sets the input_argument_id of this RatePlanChargeSegmentInfo.


        :param input_argument_id: The input_argument_id of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._input_argument_id = input_argument_id

    @property
    def is_committed(self):
        """Gets the is_committed of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The is_committed of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_committed

    @is_committed.setter
    def is_committed(self, is_committed):
        """Sets the is_committed of this RatePlanChargeSegmentInfo.


        :param is_committed: The is_committed of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: bool
        """

        self._is_committed = is_committed

    @property
    def is_prepaid(self):
        """Gets the is_prepaid of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The is_prepaid of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_prepaid

    @is_prepaid.setter
    def is_prepaid(self, is_prepaid):
        """Sets the is_prepaid of this RatePlanChargeSegmentInfo.


        :param is_prepaid: The is_prepaid of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: bool
        """

        self._is_prepaid = is_prepaid

    @property
    def is_rollover(self):
        """Gets the is_rollover of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The is_rollover of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: bool
        """
        return self._is_rollover

    @is_rollover.setter
    def is_rollover(self, is_rollover):
        """Sets the is_rollover of this RatePlanChargeSegmentInfo.


        :param is_rollover: The is_rollover of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: bool
        """

        self._is_rollover = is_rollover

    @property
    def mrr(self):
        """Gets the mrr of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The mrr of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._mrr

    @mrr.setter
    def mrr(self, mrr):
        """Sets the mrr of this RatePlanChargeSegmentInfo.


        :param mrr: The mrr of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._mrr = mrr

    @property
    def original_order_date(self):
        """Gets the original_order_date of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The original_order_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: date
        """
        return self._original_order_date

    @original_order_date.setter
    def original_order_date(self, original_order_date):
        """Sets the original_order_date of this RatePlanChargeSegmentInfo.


        :param original_order_date: The original_order_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: date
        """

        self._original_order_date = original_order_date

    @property
    def overage_price(self):
        """Gets the overage_price of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The overage_price of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._overage_price

    @overage_price.setter
    def overage_price(self, overage_price):
        """Sets the overage_price of this RatePlanChargeSegmentInfo.


        :param overage_price: The overage_price of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._overage_price = overage_price

    @property
    def prepaid_operation_type(self):
        """Gets the prepaid_operation_type of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The prepaid_operation_type of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._prepaid_operation_type

    @prepaid_operation_type.setter
    def prepaid_operation_type(self, prepaid_operation_type):
        """Sets the prepaid_operation_type of this RatePlanChargeSegmentInfo.


        :param prepaid_operation_type: The prepaid_operation_type of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["topup", "drawdown"]  # noqa: E501
        if prepaid_operation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `prepaid_operation_type` ({0}), must be one of {1}"  # noqa: E501
                .format(prepaid_operation_type, allowed_values)
            )

        self._prepaid_operation_type = prepaid_operation_type

    @property
    def prepaid_quantity(self):
        """Gets the prepaid_quantity of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The prepaid_quantity of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._prepaid_quantity

    @prepaid_quantity.setter
    def prepaid_quantity(self, prepaid_quantity):
        """Sets the prepaid_quantity of this RatePlanChargeSegmentInfo.


        :param prepaid_quantity: The prepaid_quantity of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._prepaid_quantity = prepaid_quantity

    @property
    def prepaid_total_quantity(self):
        """Gets the prepaid_total_quantity of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The prepaid_total_quantity of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._prepaid_total_quantity

    @prepaid_total_quantity.setter
    def prepaid_total_quantity(self, prepaid_total_quantity):
        """Sets the prepaid_total_quantity of this RatePlanChargeSegmentInfo.


        :param prepaid_total_quantity: The prepaid_total_quantity of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._prepaid_total_quantity = prepaid_total_quantity

    @property
    def prepaid_uom(self):
        """Gets the prepaid_uom of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The prepaid_uom of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: Uom
        """
        return self._prepaid_uom

    @prepaid_uom.setter
    def prepaid_uom(self, prepaid_uom):
        """Sets the prepaid_uom of this RatePlanChargeSegmentInfo.


        :param prepaid_uom: The prepaid_uom of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: Uom
        """

        self._prepaid_uom = prepaid_uom

    @property
    def quantity(self):
        """Gets the quantity of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The quantity of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RatePlanChargeSegmentInfo.


        :param quantity: The quantity of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def price(self):
        """Gets the price of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The price of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this RatePlanChargeSegmentInfo.


        :param price: The price of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def price_change_option(self):
        """Gets the price_change_option of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The price_change_option of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: PriceChangeOption
        """
        return self._price_change_option

    @price_change_option.setter
    def price_change_option(self, price_change_option):
        """Sets the price_change_option of this RatePlanChargeSegmentInfo.


        :param price_change_option: The price_change_option of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: PriceChangeOption
        """

        self._price_change_option = price_change_option

    @property
    def price_increase_percentage(self):
        """Gets the price_increase_percentage of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The price_increase_percentage of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._price_increase_percentage

    @price_increase_percentage.setter
    def price_increase_percentage(self, price_increase_percentage):
        """Sets the price_increase_percentage of this RatePlanChargeSegmentInfo.


        :param price_increase_percentage: The price_increase_percentage of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._price_increase_percentage = price_increase_percentage

    @property
    def pricing_summary(self):
        """Gets the pricing_summary of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The pricing_summary of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._pricing_summary

    @pricing_summary.setter
    def pricing_summary(self, pricing_summary):
        """Sets the pricing_summary of this RatePlanChargeSegmentInfo.


        :param pricing_summary: The pricing_summary of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._pricing_summary = pricing_summary

    @property
    def processed_through_date(self):
        """Gets the processed_through_date of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The processed_through_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: date
        """
        return self._processed_through_date

    @processed_through_date.setter
    def processed_through_date(self, processed_through_date):
        """Sets the processed_through_date of this RatePlanChargeSegmentInfo.


        :param processed_through_date: The processed_through_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: date
        """

        self._processed_through_date = processed_through_date

    @property
    def rollover_apply(self):
        """Gets the rollover_apply of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The rollover_apply of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._rollover_apply

    @rollover_apply.setter
    def rollover_apply(self, rollover_apply):
        """Sets the rollover_apply of this RatePlanChargeSegmentInfo.


        :param rollover_apply: The rollover_apply of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["ApplyFirst", "ApplyLast"]  # noqa: E501
        if rollover_apply not in allowed_values:
            raise ValueError(
                "Invalid value for `rollover_apply` ({0}), must be one of {1}"  # noqa: E501
                .format(rollover_apply, allowed_values)
            )

        self._rollover_apply = rollover_apply

    @property
    def rollover_period_length(self):
        """Gets the rollover_period_length of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The rollover_period_length of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: int
        """
        return self._rollover_period_length

    @rollover_period_length.setter
    def rollover_period_length(self, rollover_period_length):
        """Sets the rollover_period_length of this RatePlanChargeSegmentInfo.


        :param rollover_period_length: The rollover_period_length of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: int
        """

        self._rollover_period_length = rollover_period_length

    @property
    def rollover_periods(self):
        """Gets the rollover_periods of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The rollover_periods of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: int
        """
        return self._rollover_periods

    @rollover_periods.setter
    def rollover_periods(self, rollover_periods):
        """Sets the rollover_periods of this RatePlanChargeSegmentInfo.


        :param rollover_periods: The rollover_periods of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: int
        """

        self._rollover_periods = rollover_periods

    @property
    def proration_option(self):
        """Gets the proration_option of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The proration_option of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._proration_option

    @proration_option.setter
    def proration_option(self, proration_option):
        """Sets the proration_option of this RatePlanChargeSegmentInfo.


        :param proration_option: The proration_option of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._proration_option = proration_option

    @property
    def segment(self):
        """Gets the segment of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The segment of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: int
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this RatePlanChargeSegmentInfo.


        :param segment: The segment of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: int
        """

        self._segment = segment

    @property
    def specific_end_date(self):
        """Gets the specific_end_date of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The specific_end_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: date
        """
        return self._specific_end_date

    @specific_end_date.setter
    def specific_end_date(self, specific_end_date):
        """Sets the specific_end_date of this RatePlanChargeSegmentInfo.


        :param specific_end_date: The specific_end_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: date
        """

        self._specific_end_date = specific_end_date

    @property
    def subscription_charge_interval_pricing(self):
        """Gets the subscription_charge_interval_pricing of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The subscription_charge_interval_pricing of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: list[IntervalPricing]
        """
        return self._subscription_charge_interval_pricing

    @subscription_charge_interval_pricing.setter
    def subscription_charge_interval_pricing(self, subscription_charge_interval_pricing):
        """Sets the subscription_charge_interval_pricing of this RatePlanChargeSegmentInfo.


        :param subscription_charge_interval_pricing: The subscription_charge_interval_pricing of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: list[IntervalPricing]
        """

        self._subscription_charge_interval_pricing = subscription_charge_interval_pricing

    @property
    def tcv(self):
        """Gets the tcv of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The tcv of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._tcv

    @tcv.setter
    def tcv(self, tcv):
        """Sets the tcv of this RatePlanChargeSegmentInfo.


        :param tcv: The tcv of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._tcv = tcv

    @property
    def tiers(self):
        """Gets the tiers of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The tiers of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: list[RatePlanChargeTier]
        """
        return self._tiers

    @tiers.setter
    def tiers(self, tiers):
        """Sets the tiers of this RatePlanChargeSegmentInfo.


        :param tiers: The tiers of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: list[RatePlanChargeTier]
        """

        self._tiers = tiers

    @property
    def trigger_date(self):
        """Gets the trigger_date of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The trigger_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: date
        """
        return self._trigger_date

    @trigger_date.setter
    def trigger_date(self, trigger_date):
        """Sets the trigger_date of this RatePlanChargeSegmentInfo.


        :param trigger_date: The trigger_date of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: date
        """

        self._trigger_date = trigger_date

    @property
    def billing_period_alignment(self):
        """Gets the billing_period_alignment of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The billing_period_alignment of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: BillingPeriodAlignment
        """
        return self._billing_period_alignment

    @billing_period_alignment.setter
    def billing_period_alignment(self, billing_period_alignment):
        """Sets the billing_period_alignment of this RatePlanChargeSegmentInfo.


        :param billing_period_alignment: The billing_period_alignment of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: BillingPeriodAlignment
        """

        self._billing_period_alignment = billing_period_alignment

    @property
    def trigger_event(self):
        """Gets the trigger_event of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The trigger_event of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: TriggerEvent
        """
        return self._trigger_event

    @trigger_event.setter
    def trigger_event(self, trigger_event):
        """Sets the trigger_event of this RatePlanChargeSegmentInfo.


        :param trigger_event: The trigger_event of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: TriggerEvent
        """

        self._trigger_event = trigger_event

    @property
    def up_to_periods(self):
        """Gets the up_to_periods of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The up_to_periods of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: int
        """
        return self._up_to_periods

    @up_to_periods.setter
    def up_to_periods(self, up_to_periods):
        """Sets the up_to_periods of this RatePlanChargeSegmentInfo.


        :param up_to_periods: The up_to_periods of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: int
        """

        self._up_to_periods = up_to_periods

    @property
    def up_to_periods_type(self):
        """Gets the up_to_periods_type of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The up_to_periods_type of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: UpToPeriodsType
        """
        return self._up_to_periods_type

    @up_to_periods_type.setter
    def up_to_periods_type(self, up_to_periods_type):
        """Sets the up_to_periods_type of this RatePlanChargeSegmentInfo.


        :param up_to_periods_type: The up_to_periods_type of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: UpToPeriodsType
        """

        self._up_to_periods_type = up_to_periods_type

    @property
    def validity_period_type(self):
        """Gets the validity_period_type of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The validity_period_type of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: ValidityPeriodType
        """
        return self._validity_period_type

    @validity_period_type.setter
    def validity_period_type(self, validity_period_type):
        """Sets the validity_period_type of this RatePlanChargeSegmentInfo.


        :param validity_period_type: The validity_period_type of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: ValidityPeriodType
        """

        self._validity_period_type = validity_period_type

    @property
    def sales_price(self):
        """Gets the sales_price of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The sales_price of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: float
        """
        return self._sales_price

    @sales_price.setter
    def sales_price(self, sales_price):
        """Sets the sales_price of this RatePlanChargeSegmentInfo.


        :param sales_price: The sales_price of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: float
        """

        self._sales_price = sales_price

    @property
    def accounting_code(self):
        """Gets the accounting_code of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The accounting_code of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this RatePlanChargeSegmentInfo.


        :param accounting_code: The accounting_code of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def revenue_recognition_code(self):
        """Gets the revenue_recognition_code of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The revenue_recognition_code of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_code

    @revenue_recognition_code.setter
    def revenue_recognition_code(self, revenue_recognition_code):
        """Sets the revenue_recognition_code of this RatePlanChargeSegmentInfo.


        :param revenue_recognition_code: The revenue_recognition_code of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_code = revenue_recognition_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this RatePlanChargeSegmentInfo.  # noqa: E501


        :return: The rev_rec_trigger_condition of this RatePlanChargeSegmentInfo.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this RatePlanChargeSegmentInfo.


        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this RatePlanChargeSegmentInfo.  # noqa: E501
        :type: str
        """

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RatePlanChargeSegmentInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatePlanChargeSegmentInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
