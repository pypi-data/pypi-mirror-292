# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from zuora_sdk.models.common_response import CommonResponse  # noqa: F401,E501

class AccountDetailResponse(CommonResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'basic_info': 'AccountBasicInfo',
        'bill_to_contact': 'Contact',
        'billing_and_payment': 'AccountBillingAndPayment',
        'metrics': 'AccountMetrics',
        'sold_to_contact': 'Contact',
        'success': 'bool',
        'tax_info': 'TaxInfo',
        'metrics_data': 'list[AccountMetrics]',
        'einvoice_profile': 'AccountEInvoiceProfile'
    }
    if hasattr(CommonResponse, "swagger_types"):
        swagger_types.update(CommonResponse.swagger_types)

    attribute_map = {
        'basic_info': 'basicInfo',
        'bill_to_contact': 'billToContact',
        'billing_and_payment': 'billingAndPayment',
        'metrics': 'metrics',
        'sold_to_contact': 'soldToContact',
        'success': 'success',
        'tax_info': 'taxInfo',
        'metrics_data': 'metricsData',
        'einvoice_profile': 'einvoiceProfile'
    }
    if hasattr(CommonResponse, "attribute_map"):
        attribute_map.update(CommonResponse.attribute_map)

    def __init__(self, basic_info=None, bill_to_contact=None, billing_and_payment=None, metrics=None, sold_to_contact=None, success=None, tax_info=None, metrics_data=None, einvoice_profile=None, *args, **kwargs):  # noqa: E501
        """AccountDetailResponse - a model defined in Swagger"""  # noqa: E501
        self._basic_info = None
        self._bill_to_contact = None
        self._billing_and_payment = None
        self._metrics = None
        self._sold_to_contact = None
        self._success = None
        self._tax_info = None
        self._metrics_data = None
        self._einvoice_profile = None
        self.discriminator = None
        if basic_info is not None:
            self.basic_info = basic_info
        if bill_to_contact is not None:
            self.bill_to_contact = bill_to_contact
        if billing_and_payment is not None:
            self.billing_and_payment = billing_and_payment
        if metrics is not None:
            self.metrics = metrics
        if sold_to_contact is not None:
            self.sold_to_contact = sold_to_contact
        if success is not None:
            self.success = success
        if tax_info is not None:
            self.tax_info = tax_info
        if metrics_data is not None:
            self.metrics_data = metrics_data
        if einvoice_profile is not None:
            self.einvoice_profile = einvoice_profile
        CommonResponse.__init__(self, *args, **kwargs)

    @property
    def basic_info(self):
        """Gets the basic_info of this AccountDetailResponse.  # noqa: E501


        :return: The basic_info of this AccountDetailResponse.  # noqa: E501
        :rtype: AccountBasicInfo
        """
        return self._basic_info

    @basic_info.setter
    def basic_info(self, basic_info):
        """Sets the basic_info of this AccountDetailResponse.


        :param basic_info: The basic_info of this AccountDetailResponse.  # noqa: E501
        :type: AccountBasicInfo
        """

        self._basic_info = basic_info

    @property
    def bill_to_contact(self):
        """Gets the bill_to_contact of this AccountDetailResponse.  # noqa: E501


        :return: The bill_to_contact of this AccountDetailResponse.  # noqa: E501
        :rtype: Contact
        """
        return self._bill_to_contact

    @bill_to_contact.setter
    def bill_to_contact(self, bill_to_contact):
        """Sets the bill_to_contact of this AccountDetailResponse.


        :param bill_to_contact: The bill_to_contact of this AccountDetailResponse.  # noqa: E501
        :type: Contact
        """

        self._bill_to_contact = bill_to_contact

    @property
    def billing_and_payment(self):
        """Gets the billing_and_payment of this AccountDetailResponse.  # noqa: E501


        :return: The billing_and_payment of this AccountDetailResponse.  # noqa: E501
        :rtype: AccountBillingAndPayment
        """
        return self._billing_and_payment

    @billing_and_payment.setter
    def billing_and_payment(self, billing_and_payment):
        """Sets the billing_and_payment of this AccountDetailResponse.


        :param billing_and_payment: The billing_and_payment of this AccountDetailResponse.  # noqa: E501
        :type: AccountBillingAndPayment
        """

        self._billing_and_payment = billing_and_payment

    @property
    def metrics(self):
        """Gets the metrics of this AccountDetailResponse.  # noqa: E501


        :return: The metrics of this AccountDetailResponse.  # noqa: E501
        :rtype: AccountMetrics
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this AccountDetailResponse.


        :param metrics: The metrics of this AccountDetailResponse.  # noqa: E501
        :type: AccountMetrics
        """

        self._metrics = metrics

    @property
    def sold_to_contact(self):
        """Gets the sold_to_contact of this AccountDetailResponse.  # noqa: E501


        :return: The sold_to_contact of this AccountDetailResponse.  # noqa: E501
        :rtype: Contact
        """
        return self._sold_to_contact

    @sold_to_contact.setter
    def sold_to_contact(self, sold_to_contact):
        """Sets the sold_to_contact of this AccountDetailResponse.


        :param sold_to_contact: The sold_to_contact of this AccountDetailResponse.  # noqa: E501
        :type: Contact
        """

        self._sold_to_contact = sold_to_contact

    @property
    def success(self):
        """Gets the success of this AccountDetailResponse.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this AccountDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this AccountDetailResponse.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this AccountDetailResponse.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def tax_info(self):
        """Gets the tax_info of this AccountDetailResponse.  # noqa: E501


        :return: The tax_info of this AccountDetailResponse.  # noqa: E501
        :rtype: TaxInfo
        """
        return self._tax_info

    @tax_info.setter
    def tax_info(self, tax_info):
        """Sets the tax_info of this AccountDetailResponse.


        :param tax_info: The tax_info of this AccountDetailResponse.  # noqa: E501
        :type: TaxInfo
        """

        self._tax_info = tax_info

    @property
    def metrics_data(self):
        """Gets the metrics_data of this AccountDetailResponse.  # noqa: E501

        Container for account metrics of different currencies.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Multiple_Currencies\" target=\"_blank\">Multiple Currencies</a> feature in the **Early Adopter** phase enabled.   # noqa: E501

        :return: The metrics_data of this AccountDetailResponse.  # noqa: E501
        :rtype: list[AccountMetrics]
        """
        return self._metrics_data

    @metrics_data.setter
    def metrics_data(self, metrics_data):
        """Sets the metrics_data of this AccountDetailResponse.

        Container for account metrics of different currencies.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Multiple_Currencies\" target=\"_blank\">Multiple Currencies</a> feature in the **Early Adopter** phase enabled.   # noqa: E501

        :param metrics_data: The metrics_data of this AccountDetailResponse.  # noqa: E501
        :type: list[AccountMetrics]
        """

        self._metrics_data = metrics_data

    @property
    def einvoice_profile(self):
        """Gets the einvoice_profile of this AccountDetailResponse.  # noqa: E501


        :return: The einvoice_profile of this AccountDetailResponse.  # noqa: E501
        :rtype: AccountEInvoiceProfile
        """
        return self._einvoice_profile

    @einvoice_profile.setter
    def einvoice_profile(self, einvoice_profile):
        """Sets the einvoice_profile of this AccountDetailResponse.


        :param einvoice_profile: The einvoice_profile of this AccountDetailResponse.  # noqa: E501
        :type: AccountEInvoiceProfile
        """

        self._einvoice_profile = einvoice_profile

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountDetailResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountDetailResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
