# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateBillingAdjustmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'charge_numbers': 'list[str]',
        'deferred_revenue_accounting_code': 'str',
        'end_date': 'date',
        'exclusion': 'list[BillingAdjustmentExclusion]',
        'reason': 'str',
        'recognized_revenue_accounting_code': 'str',
        'revenue_recognition_rule_name': 'str',
        'start_date': 'date',
        'subscription_number': 'str',
        'type': 'BillingAdjustmentType',
        'credit_memo_custom_fields': 'dict(str, object)'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'charge_numbers': 'chargeNumbers',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'end_date': 'endDate',
        'exclusion': 'exclusion',
        'reason': 'reason',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'revenue_recognition_rule_name': 'revenueRecognitionRuleName',
        'start_date': 'startDate',
        'subscription_number': 'subscriptionNumber',
        'type': 'type',
        'credit_memo_custom_fields': 'creditMemoCustomFields'
    }

    def __init__(self, account_number=None, charge_numbers=None, deferred_revenue_accounting_code=None, end_date=None, exclusion=None, reason=None, recognized_revenue_accounting_code=None, revenue_recognition_rule_name=None, start_date=None, subscription_number=None, type=None, credit_memo_custom_fields=None):  # noqa: E501
        """CreateBillingAdjustmentRequest - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._charge_numbers = None
        self._deferred_revenue_accounting_code = None
        self._end_date = None
        self._exclusion = None
        self._reason = None
        self._recognized_revenue_accounting_code = None
        self._revenue_recognition_rule_name = None
        self._start_date = None
        self._subscription_number = None
        self._type = None
        self._credit_memo_custom_fields = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if charge_numbers is not None:
            self.charge_numbers = charge_numbers
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        self.end_date = end_date
        if exclusion is not None:
            self.exclusion = exclusion
        if reason is not None:
            self.reason = reason
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        self.start_date = start_date
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if type is not None:
            self.type = type
        if credit_memo_custom_fields is not None:
            self.credit_memo_custom_fields = credit_memo_custom_fields

    @property
    def account_number(self):
        """Gets the account_number of this CreateBillingAdjustmentRequest.  # noqa: E501

        The account number for which the adjustment is created.    **Note**: The account number should be of the subscription owner.  **Note**: Only one of accountNumber or subscriptionNumber should be provided.   # noqa: E501

        :return: The account_number of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreateBillingAdjustmentRequest.

        The account number for which the adjustment is created.    **Note**: The account number should be of the subscription owner.  **Note**: Only one of accountNumber or subscriptionNumber should be provided.   # noqa: E501

        :param account_number: The account_number of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def charge_numbers(self):
        """Gets the charge_numbers of this CreateBillingAdjustmentRequest.  # noqa: E501

        An optional container to specify charge numbers in the subscription for which the adjustment needs to be created.   # noqa: E501

        :return: The charge_numbers of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._charge_numbers

    @charge_numbers.setter
    def charge_numbers(self, charge_numbers):
        """Sets the charge_numbers of this CreateBillingAdjustmentRequest.

        An optional container to specify charge numbers in the subscription for which the adjustment needs to be created.   # noqa: E501

        :param charge_numbers: The charge_numbers of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: list[str]
        """

        self._charge_numbers = charge_numbers

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this CreateBillingAdjustmentRequest.  # noqa: E501

        The accounting code for the deferred revenue, such as Monthly Recurring Liability.   # noqa: E501

        :return: The deferred_revenue_accounting_code of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this CreateBillingAdjustmentRequest.

        The accounting code for the deferred revenue, such as Monthly Recurring Liability.   # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def end_date(self):
        """Gets the end_date of this CreateBillingAdjustmentRequest.  # noqa: E501

        The end date of the adjustment, in `yyyy-mm-dd` format. This is inclusive.   # noqa: E501

        :return: The end_date of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this CreateBillingAdjustmentRequest.

        The end date of the adjustment, in `yyyy-mm-dd` format. This is inclusive.   # noqa: E501

        :param end_date: The end_date of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def exclusion(self):
        """Gets the exclusion of this CreateBillingAdjustmentRequest.  # noqa: E501

        The charge numbers and the corresponding dates for exclusion of adjustment.   # noqa: E501

        :return: The exclusion of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: list[BillingAdjustmentExclusion]
        """
        return self._exclusion

    @exclusion.setter
    def exclusion(self, exclusion):
        """Sets the exclusion of this CreateBillingAdjustmentRequest.

        The charge numbers and the corresponding dates for exclusion of adjustment.   # noqa: E501

        :param exclusion: The exclusion of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: list[BillingAdjustmentExclusion]
        """

        self._exclusion = exclusion

    @property
    def reason(self):
        """Gets the reason of this CreateBillingAdjustmentRequest.  # noqa: E501

        The reason for the adjustment.   # noqa: E501

        :return: The reason of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this CreateBillingAdjustmentRequest.

        The reason for the adjustment.   # noqa: E501

        :param reason: The reason of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: str
        """

        self._reason = reason

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this CreateBillingAdjustmentRequest.  # noqa: E501

        The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.   # noqa: E501

        :return: The recognized_revenue_accounting_code of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this CreateBillingAdjustmentRequest.

        The accounting code for the recognized revenue, such as Monthly Recurring Charges or Overage Charges.   # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this CreateBillingAdjustmentRequest.  # noqa: E501

        The name of the revenue recognition rule governing the revenue schedule.   # noqa: E501

        :return: The revenue_recognition_rule_name of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this CreateBillingAdjustmentRequest.

        The name of the revenue recognition rule governing the revenue schedule.   # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def start_date(self):
        """Gets the start_date of this CreateBillingAdjustmentRequest.  # noqa: E501

        The start date of the adjustment, in `yyyy-mm-dd` format. This is inclusive.   # noqa: E501

        :return: The start_date of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this CreateBillingAdjustmentRequest.

        The start date of the adjustment, in `yyyy-mm-dd` format. This is inclusive.   # noqa: E501

        :param start_date: The start_date of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def subscription_number(self):
        """Gets the subscription_number of this CreateBillingAdjustmentRequest.  # noqa: E501

        The subscription number for which the adjustment is created.  **Note**: Only one of accountNumber or subscriptionNumber should be provided.   # noqa: E501

        :return: The subscription_number of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this CreateBillingAdjustmentRequest.

        The subscription number for which the adjustment is created.  **Note**: Only one of accountNumber or subscriptionNumber should be provided.   # noqa: E501

        :param subscription_number: The subscription_number of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def type(self):
        """Gets the type of this CreateBillingAdjustmentRequest.  # noqa: E501


        :return: The type of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: BillingAdjustmentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateBillingAdjustmentRequest.


        :param type: The type of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: BillingAdjustmentType
        """

        self._type = type

    @property
    def credit_memo_custom_fields(self):
        """Gets the credit_memo_custom_fields of this CreateBillingAdjustmentRequest.  # noqa: E501

        Container for custom fields of the Credit Memo. The custom fields of the Credit Memo can be defined during Create Adjustment   # noqa: E501

        :return: The credit_memo_custom_fields of this CreateBillingAdjustmentRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._credit_memo_custom_fields

    @credit_memo_custom_fields.setter
    def credit_memo_custom_fields(self, credit_memo_custom_fields):
        """Sets the credit_memo_custom_fields of this CreateBillingAdjustmentRequest.

        Container for custom fields of the Credit Memo. The custom fields of the Credit Memo can be defined during Create Adjustment   # noqa: E501

        :param credit_memo_custom_fields: The credit_memo_custom_fields of this CreateBillingAdjustmentRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._credit_memo_custom_fields = credit_memo_custom_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateBillingAdjustmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateBillingAdjustmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
