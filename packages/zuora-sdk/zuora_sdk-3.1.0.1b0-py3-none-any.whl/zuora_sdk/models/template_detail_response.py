# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TemplateDetailResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'content': 'SettingSourceComponentResponse',
        'created_by': 'str',
        'created_on': 'str',
        'description': 'str',
        'entity_name': 'str',
        'environment': 'str',
        'errors': 'str',
        'id': 'str',
        'name': 'str',
        'status': 'str',
        'tenant_name': 'str'
    }

    attribute_map = {
        'active': 'active',
        'content': 'content',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'description': 'description',
        'entity_name': 'entityName',
        'environment': 'environment',
        'errors': 'errors',
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'tenant_name': 'tenantName'
    }

    def __init__(self, active=None, content=None, created_by=None, created_on=None, description=None, entity_name=None, environment=None, errors=None, id=None, name=None, status=None, tenant_name=None):  # noqa: E501
        """TemplateDetailResponse - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._content = None
        self._created_by = None
        self._created_on = None
        self._description = None
        self._entity_name = None
        self._environment = None
        self._errors = None
        self._id = None
        self._name = None
        self._status = None
        self._tenant_name = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if content is not None:
            self.content = content
        if created_by is not None:
            self.created_by = created_by
        if created_on is not None:
            self.created_on = created_on
        if description is not None:
            self.description = description
        if entity_name is not None:
            self.entity_name = entity_name
        if environment is not None:
            self.environment = environment
        if errors is not None:
            self.errors = errors
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if tenant_name is not None:
            self.tenant_name = tenant_name

    @property
    def active(self):
        """Gets the active of this TemplateDetailResponse.  # noqa: E501

        Whether or not the template is active.  # noqa: E501

        :return: The active of this TemplateDetailResponse.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this TemplateDetailResponse.

        Whether or not the template is active.  # noqa: E501

        :param active: The active of this TemplateDetailResponse.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def content(self):
        """Gets the content of this TemplateDetailResponse.  # noqa: E501


        :return: The content of this TemplateDetailResponse.  # noqa: E501
        :rtype: SettingSourceComponentResponse
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this TemplateDetailResponse.


        :param content: The content of this TemplateDetailResponse.  # noqa: E501
        :type: SettingSourceComponentResponse
        """

        self._content = content

    @property
    def created_by(self):
        """Gets the created_by of this TemplateDetailResponse.  # noqa: E501

        Information about the user who created it.  # noqa: E501

        :return: The created_by of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this TemplateDetailResponse.

        Information about the user who created it.  # noqa: E501

        :param created_by: The created_by of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """Gets the created_on of this TemplateDetailResponse.  # noqa: E501

        When it is created.  # noqa: E501

        :return: The created_on of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """Sets the created_on of this TemplateDetailResponse.

        When it is created.  # noqa: E501

        :param created_on: The created_on of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._created_on = created_on

    @property
    def description(self):
        """Gets the description of this TemplateDetailResponse.  # noqa: E501

        Template description which contains the information about the created template.  # noqa: E501

        :return: The description of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TemplateDetailResponse.

        Template description which contains the information about the created template.  # noqa: E501

        :param description: The description of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def entity_name(self):
        """Gets the entity_name of this TemplateDetailResponse.  # noqa: E501

        Name of the Entity  # noqa: E501

        :return: The entity_name of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._entity_name

    @entity_name.setter
    def entity_name(self, entity_name):
        """Sets the entity_name of this TemplateDetailResponse.

        Name of the Entity  # noqa: E501

        :param entity_name: The entity_name of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._entity_name = entity_name

    @property
    def environment(self):
        """Gets the environment of this TemplateDetailResponse.  # noqa: E501

        Details of the environment in which the template was created.  # noqa: E501

        :return: The environment of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """Sets the environment of this TemplateDetailResponse.

        Details of the environment in which the template was created.  # noqa: E501

        :param environment: The environment of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._environment = environment

    @property
    def errors(self):
        """Gets the errors of this TemplateDetailResponse.  # noqa: E501

        Error information.  # noqa: E501

        :return: The errors of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this TemplateDetailResponse.

        Error information.  # noqa: E501

        :param errors: The errors of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._errors = errors

    @property
    def id(self):
        """Gets the id of this TemplateDetailResponse.  # noqa: E501

        Id of the template.  # noqa: E501

        :return: The id of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TemplateDetailResponse.

        Id of the template.  # noqa: E501

        :param id: The id of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this TemplateDetailResponse.  # noqa: E501

        Name of the template.  # noqa: E501

        :return: The name of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateDetailResponse.

        Name of the template.  # noqa: E501

        :param name: The name of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this TemplateDetailResponse.  # noqa: E501

        The status of the template creation, such as whether it is in progress, completed, or failed.  # noqa: E501

        :return: The status of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TemplateDetailResponse.

        The status of the template creation, such as whether it is in progress, completed, or failed.  # noqa: E501

        :param status: The status of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tenant_name(self):
        """Gets the tenant_name of this TemplateDetailResponse.  # noqa: E501

        Tenant's name for whom the template is created.  # noqa: E501

        :return: The tenant_name of this TemplateDetailResponse.  # noqa: E501
        :rtype: str
        """
        return self._tenant_name

    @tenant_name.setter
    def tenant_name(self, tenant_name):
        """Sets the tenant_name of this TemplateDetailResponse.

        Tenant's name for whom the template is created.  # noqa: E501

        :param tenant_name: The tenant_name of this TemplateDetailResponse.  # noqa: E501
        :type: str
        """

        self._tenant_name = tenant_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TemplateDetailResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TemplateDetailResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
