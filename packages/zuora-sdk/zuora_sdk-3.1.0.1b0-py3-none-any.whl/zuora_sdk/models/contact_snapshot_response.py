# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from zuora_sdk.models.common_response import CommonResponse  # noqa: F401,E501

class ContactSnapshotResponse(CommonResponse):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address1': 'str',
        'address2': 'str',
        'city': 'str',
        'contact_id': 'str',
        'country': 'str',
        'county': 'str',
        'description': 'str',
        'fax': 'str',
        'first_name': 'str',
        'home_phone': 'str',
        'id': 'str',
        'last_name': 'str',
        'mobile_phone': 'str',
        'nickname': 'str',
        'other_phone': 'str',
        'other_phone_type': 'PhoneType',
        'personal_email': 'str',
        'postal_code': 'str',
        'state': 'str',
        'tax_region': 'str',
        'work_email': 'str',
        'work_phone': 'str'
    }
    if hasattr(CommonResponse, "swagger_types"):
        swagger_types.update(CommonResponse.swagger_types)

    attribute_map = {
        'address1': 'address1',
        'address2': 'address2',
        'city': 'city',
        'contact_id': 'contactId',
        'country': 'country',
        'county': 'county',
        'description': 'description',
        'fax': 'fax',
        'first_name': 'firstName',
        'home_phone': 'homePhone',
        'id': 'id',
        'last_name': 'lastName',
        'mobile_phone': 'mobilePhone',
        'nickname': 'nickname',
        'other_phone': 'otherPhone',
        'other_phone_type': 'otherPhoneType',
        'personal_email': 'personalEmail',
        'postal_code': 'postalCode',
        'state': 'state',
        'tax_region': 'taxRegion',
        'work_email': 'workEmail',
        'work_phone': 'workPhone'
    }
    if hasattr(CommonResponse, "attribute_map"):
        attribute_map.update(CommonResponse.attribute_map)

    def __init__(self, address1=None, address2=None, city=None, contact_id=None, country=None, county=None, description=None, fax=None, first_name=None, home_phone=None, id=None, last_name=None, mobile_phone=None, nickname=None, other_phone=None, other_phone_type=None, personal_email=None, postal_code=None, state=None, tax_region=None, work_email=None, work_phone=None, *args, **kwargs):  # noqa: E501
        """ContactSnapshotResponse - a model defined in Swagger"""  # noqa: E501
        self._address1 = None
        self._address2 = None
        self._city = None
        self._contact_id = None
        self._country = None
        self._county = None
        self._description = None
        self._fax = None
        self._first_name = None
        self._home_phone = None
        self._id = None
        self._last_name = None
        self._mobile_phone = None
        self._nickname = None
        self._other_phone = None
        self._other_phone_type = None
        self._personal_email = None
        self._postal_code = None
        self._state = None
        self._tax_region = None
        self._work_email = None
        self._work_phone = None
        self.discriminator = None
        if address1 is not None:
            self.address1 = address1
        if address2 is not None:
            self.address2 = address2
        if city is not None:
            self.city = city
        if contact_id is not None:
            self.contact_id = contact_id
        if country is not None:
            self.country = country
        if county is not None:
            self.county = county
        if description is not None:
            self.description = description
        if fax is not None:
            self.fax = fax
        if first_name is not None:
            self.first_name = first_name
        if home_phone is not None:
            self.home_phone = home_phone
        if id is not None:
            self.id = id
        if last_name is not None:
            self.last_name = last_name
        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if nickname is not None:
            self.nickname = nickname
        if other_phone is not None:
            self.other_phone = other_phone
        if other_phone_type is not None:
            self.other_phone_type = other_phone_type
        if personal_email is not None:
            self.personal_email = personal_email
        if postal_code is not None:
            self.postal_code = postal_code
        if state is not None:
            self.state = state
        if tax_region is not None:
            self.tax_region = tax_region
        if work_email is not None:
            self.work_email = work_email
        if work_phone is not None:
            self.work_phone = work_phone
        CommonResponse.__init__(self, *args, **kwargs)

    @property
    def address1(self):
        """Gets the address1 of this ContactSnapshotResponse.  # noqa: E501

        The first line for the address of the contact, which is often a street address or business name.   # noqa: E501

        :return: The address1 of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._address1

    @address1.setter
    def address1(self, address1):
        """Sets the address1 of this ContactSnapshotResponse.

        The first line for the address of the contact, which is often a street address or business name.   # noqa: E501

        :param address1: The address1 of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._address1 = address1

    @property
    def address2(self):
        """Gets the address2 of this ContactSnapshotResponse.  # noqa: E501

        The second line for the address of the contact, which is mostly the locality.   # noqa: E501

        :return: The address2 of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this ContactSnapshotResponse.

        The second line for the address of the contact, which is mostly the locality.   # noqa: E501

        :param address2: The address2 of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this ContactSnapshotResponse.  # noqa: E501

        The city for the address of the contact.   # noqa: E501

        :return: The city of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ContactSnapshotResponse.

        The city for the address of the contact.   # noqa: E501

        :param city: The city of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def contact_id(self):
        """Gets the contact_id of this ContactSnapshotResponse.  # noqa: E501

        The Zuora ID of the contact who the snapshot belongs to.   # noqa: E501

        :return: The contact_id of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._contact_id

    @contact_id.setter
    def contact_id(self, contact_id):
        """Sets the contact_id of this ContactSnapshotResponse.

        The Zuora ID of the contact who the snapshot belongs to.   # noqa: E501

        :param contact_id: The contact_id of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._contact_id = contact_id

    @property
    def country(self):
        """Gets the country of this ContactSnapshotResponse.  # noqa: E501

        The country for the address of the contact.   # noqa: E501

        :return: The country of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactSnapshotResponse.

        The country for the address of the contact.   # noqa: E501

        :param country: The country of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def county(self):
        """Gets the county of this ContactSnapshotResponse.  # noqa: E501

        The county for the address of the contact. The field value might optionally be used by Zuora Tax to calculate county tax.   # noqa: E501

        :return: The county of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._county

    @county.setter
    def county(self, county):
        """Sets the county of this ContactSnapshotResponse.

        The county for the address of the contact. The field value might optionally be used by Zuora Tax to calculate county tax.   # noqa: E501

        :param county: The county of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._county = county

    @property
    def description(self):
        """Gets the description of this ContactSnapshotResponse.  # noqa: E501

        A description of the contact.   # noqa: E501

        :return: The description of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContactSnapshotResponse.

        A description of the contact.   # noqa: E501

        :param description: The description of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def fax(self):
        """Gets the fax of this ContactSnapshotResponse.  # noqa: E501

        The fax number of the contact.   # noqa: E501

        :return: The fax of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._fax

    @fax.setter
    def fax(self, fax):
        """Sets the fax of this ContactSnapshotResponse.

        The fax number of the contact.   # noqa: E501

        :param fax: The fax of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._fax = fax

    @property
    def first_name(self):
        """Gets the first_name of this ContactSnapshotResponse.  # noqa: E501

        The first name of the contact.   # noqa: E501

        :return: The first_name of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactSnapshotResponse.

        The first name of the contact.   # noqa: E501

        :param first_name: The first_name of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def home_phone(self):
        """Gets the home_phone of this ContactSnapshotResponse.  # noqa: E501

        The home phone number of the contact.   # noqa: E501

        :return: The home_phone of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this ContactSnapshotResponse.

        The home phone number of the contact.   # noqa: E501

        :param home_phone: The home_phone of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._home_phone = home_phone

    @property
    def id(self):
        """Gets the id of this ContactSnapshotResponse.  # noqa: E501

        The unique ID of the contact snapshot.   # noqa: E501

        :return: The id of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContactSnapshotResponse.

        The unique ID of the contact snapshot.   # noqa: E501

        :param id: The id of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this ContactSnapshotResponse.  # noqa: E501

        The last name of the contact.   # noqa: E501

        :return: The last_name of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactSnapshotResponse.

        The last name of the contact.   # noqa: E501

        :param last_name: The last_name of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this ContactSnapshotResponse.  # noqa: E501

        The mobile phone number of the contact.   # noqa: E501

        :return: The mobile_phone of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this ContactSnapshotResponse.

        The mobile phone number of the contact.   # noqa: E501

        :param mobile_phone: The mobile_phone of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def nickname(self):
        """Gets the nickname of this ContactSnapshotResponse.  # noqa: E501

        A nickname for the contact.   # noqa: E501

        :return: The nickname of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this ContactSnapshotResponse.

        A nickname for the contact.   # noqa: E501

        :param nickname: The nickname of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def other_phone(self):
        """Gets the other_phone of this ContactSnapshotResponse.  # noqa: E501

        An additional phone number for the contact.   # noqa: E501

        :return: The other_phone of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._other_phone

    @other_phone.setter
    def other_phone(self, other_phone):
        """Sets the other_phone of this ContactSnapshotResponse.

        An additional phone number for the contact.   # noqa: E501

        :param other_phone: The other_phone of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._other_phone = other_phone

    @property
    def other_phone_type(self):
        """Gets the other_phone_type of this ContactSnapshotResponse.  # noqa: E501


        :return: The other_phone_type of this ContactSnapshotResponse.  # noqa: E501
        :rtype: PhoneType
        """
        return self._other_phone_type

    @other_phone_type.setter
    def other_phone_type(self, other_phone_type):
        """Sets the other_phone_type of this ContactSnapshotResponse.


        :param other_phone_type: The other_phone_type of this ContactSnapshotResponse.  # noqa: E501
        :type: PhoneType
        """

        self._other_phone_type = other_phone_type

    @property
    def personal_email(self):
        """Gets the personal_email of this ContactSnapshotResponse.  # noqa: E501

        The personal email address of the contact.   # noqa: E501

        :return: The personal_email of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._personal_email

    @personal_email.setter
    def personal_email(self, personal_email):
        """Sets the personal_email of this ContactSnapshotResponse.

        The personal email address of the contact.   # noqa: E501

        :param personal_email: The personal_email of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._personal_email = personal_email

    @property
    def postal_code(self):
        """Gets the postal_code of this ContactSnapshotResponse.  # noqa: E501

        The postal code for the address of the contact.   # noqa: E501

        :return: The postal_code of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ContactSnapshotResponse.

        The postal code for the address of the contact.   # noqa: E501

        :param postal_code: The postal_code of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this ContactSnapshotResponse.  # noqa: E501

        The state or province for the address of the contact.   # noqa: E501

        :return: The state of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ContactSnapshotResponse.

        The state or province for the address of the contact.   # noqa: E501

        :param state: The state of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def tax_region(self):
        """Gets the tax_region of this ContactSnapshotResponse.  # noqa: E501

        If using Zuora Tax rules.   # noqa: E501

        :return: The tax_region of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._tax_region

    @tax_region.setter
    def tax_region(self, tax_region):
        """Sets the tax_region of this ContactSnapshotResponse.

        If using Zuora Tax rules.   # noqa: E501

        :param tax_region: The tax_region of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._tax_region = tax_region

    @property
    def work_email(self):
        """Gets the work_email of this ContactSnapshotResponse.  # noqa: E501

        The business email address of the contact.   # noqa: E501

        :return: The work_email of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_email

    @work_email.setter
    def work_email(self, work_email):
        """Sets the work_email of this ContactSnapshotResponse.

        The business email address of the contact.   # noqa: E501

        :param work_email: The work_email of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._work_email = work_email

    @property
    def work_phone(self):
        """Gets the work_phone of this ContactSnapshotResponse.  # noqa: E501

        The business email address of the contact.   # noqa: E501

        :return: The work_phone of this ContactSnapshotResponse.  # noqa: E501
        :rtype: str
        """
        return self._work_phone

    @work_phone.setter
    def work_phone(self, work_phone):
        """Sets the work_phone of this ContactSnapshotResponse.

        The business email address of the contact.   # noqa: E501

        :param work_phone: The work_phone of this ContactSnapshotResponse.  # noqa: E501
        :type: str
        """

        self._work_phone = work_phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ContactSnapshotResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContactSnapshotResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
