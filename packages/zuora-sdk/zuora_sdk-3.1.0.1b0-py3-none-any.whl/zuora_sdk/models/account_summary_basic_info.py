# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AccountSummaryBasicInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_number': 'str',
        'additional_email_addresses': 'list[str]',
        'auto_pay': 'bool',
        'balance': 'str',
        'batch': 'str',
        'bill_cycle_day': 'int',
        'currency': 'str',
        'default_payment_method': 'AccountSummaryDefaultPaymentMethod',
        'id': 'str',
        'invoice_delivery_prefs_email': 'bool',
        'invoice_delivery_prefs_print': 'bool',
        'last_invoice_date': 'date',
        'last_metrics_update': 'str',
        'last_payment_amount': 'str',
        'last_payment_date': 'date',
        'name': 'str',
        'partner_account': 'bool',
        'purchase_order_number': 'str',
        'status': 'AccountStatus',
        'tags': 'str',
        'organization_label': 'str',
        'payment_method_cascading_consent': 'bool',
        'class__ns': 'str',
        'customer_type__ns': 'AccountObjectNSFieldsCustomerTypeNS',
        'department__ns': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'location__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str',
        'syncto_net_suite__ns': 'AccountObjectNSFieldsSynctoNetSuiteNS'
    }

    attribute_map = {
        'account_number': 'accountNumber',
        'additional_email_addresses': 'additionalEmailAddresses',
        'auto_pay': 'autoPay',
        'balance': 'balance',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'currency': 'currency',
        'default_payment_method': 'defaultPaymentMethod',
        'id': 'id',
        'invoice_delivery_prefs_email': 'invoiceDeliveryPrefsEmail',
        'invoice_delivery_prefs_print': 'invoiceDeliveryPrefsPrint',
        'last_invoice_date': 'lastInvoiceDate',
        'last_metrics_update': 'lastMetricsUpdate',
        'last_payment_amount': 'lastPaymentAmount',
        'last_payment_date': 'lastPaymentDate',
        'name': 'name',
        'partner_account': 'partnerAccount',
        'purchase_order_number': 'purchaseOrderNumber',
        'status': 'status',
        'tags': 'tags',
        'organization_label': 'organizationLabel',
        'payment_method_cascading_consent': 'paymentMethodCascadingConsent',
        'class__ns': 'Class__NS',
        'customer_type__ns': 'CustomerType__NS',
        'department__ns': 'Department__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'location__ns': 'Location__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS',
        'syncto_net_suite__ns': 'SynctoNetSuite__NS'
    }

    def __init__(self, account_number=None, additional_email_addresses=None, auto_pay=None, balance=None, batch=None, bill_cycle_day=None, currency=None, default_payment_method=None, id=None, invoice_delivery_prefs_email=None, invoice_delivery_prefs_print=None, last_invoice_date=None, last_metrics_update=None, last_payment_amount=None, last_payment_date=None, name=None, partner_account=None, purchase_order_number=None, status=None, tags=None, organization_label=None, payment_method_cascading_consent=None, class__ns=None, customer_type__ns=None, department__ns=None, integration_id__ns=None, integration_status__ns=None, location__ns=None, subsidiary__ns=None, sync_date__ns=None, syncto_net_suite__ns=None):  # noqa: E501
        """AccountSummaryBasicInfo - a model defined in Swagger"""  # noqa: E501
        self._account_number = None
        self._additional_email_addresses = None
        self._auto_pay = None
        self._balance = None
        self._batch = None
        self._bill_cycle_day = None
        self._currency = None
        self._default_payment_method = None
        self._id = None
        self._invoice_delivery_prefs_email = None
        self._invoice_delivery_prefs_print = None
        self._last_invoice_date = None
        self._last_metrics_update = None
        self._last_payment_amount = None
        self._last_payment_date = None
        self._name = None
        self._partner_account = None
        self._purchase_order_number = None
        self._status = None
        self._tags = None
        self._organization_label = None
        self._payment_method_cascading_consent = None
        self._class__ns = None
        self._customer_type__ns = None
        self._department__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._location__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self._syncto_net_suite__ns = None
        self.discriminator = None
        if account_number is not None:
            self.account_number = account_number
        if additional_email_addresses is not None:
            self.additional_email_addresses = additional_email_addresses
        if auto_pay is not None:
            self.auto_pay = auto_pay
        if balance is not None:
            self.balance = balance
        if batch is not None:
            self.batch = batch
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if currency is not None:
            self.currency = currency
        if default_payment_method is not None:
            self.default_payment_method = default_payment_method
        if id is not None:
            self.id = id
        if invoice_delivery_prefs_email is not None:
            self.invoice_delivery_prefs_email = invoice_delivery_prefs_email
        if invoice_delivery_prefs_print is not None:
            self.invoice_delivery_prefs_print = invoice_delivery_prefs_print
        if last_invoice_date is not None:
            self.last_invoice_date = last_invoice_date
        if last_metrics_update is not None:
            self.last_metrics_update = last_metrics_update
        if last_payment_amount is not None:
            self.last_payment_amount = last_payment_amount
        if last_payment_date is not None:
            self.last_payment_date = last_payment_date
        if name is not None:
            self.name = name
        if partner_account is not None:
            self.partner_account = partner_account
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if organization_label is not None:
            self.organization_label = organization_label
        if payment_method_cascading_consent is not None:
            self.payment_method_cascading_consent = payment_method_cascading_consent
        if class__ns is not None:
            self.class__ns = class__ns
        if customer_type__ns is not None:
            self.customer_type__ns = customer_type__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if syncto_net_suite__ns is not None:
            self.syncto_net_suite__ns = syncto_net_suite__ns

    @property
    def account_number(self):
        """Gets the account_number of this AccountSummaryBasicInfo.  # noqa: E501

        Account number.   # noqa: E501

        :return: The account_number of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this AccountSummaryBasicInfo.

        Account number.   # noqa: E501

        :param account_number: The account_number of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def additional_email_addresses(self):
        """Gets the additional_email_addresses of this AccountSummaryBasicInfo.  # noqa: E501

        A list of additional email addresses to receive email notifications.   # noqa: E501

        :return: The additional_email_addresses of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_email_addresses

    @additional_email_addresses.setter
    def additional_email_addresses(self, additional_email_addresses):
        """Sets the additional_email_addresses of this AccountSummaryBasicInfo.

        A list of additional email addresses to receive email notifications.   # noqa: E501

        :param additional_email_addresses: The additional_email_addresses of this AccountSummaryBasicInfo.  # noqa: E501
        :type: list[str]
        """

        self._additional_email_addresses = additional_email_addresses

    @property
    def auto_pay(self):
        """Gets the auto_pay of this AccountSummaryBasicInfo.  # noqa: E501

        Whether future payments are automatically collected when they are due during a payment run.   # noqa: E501

        :return: The auto_pay of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: bool
        """
        return self._auto_pay

    @auto_pay.setter
    def auto_pay(self, auto_pay):
        """Sets the auto_pay of this AccountSummaryBasicInfo.

        Whether future payments are automatically collected when they are due during a payment run.   # noqa: E501

        :param auto_pay: The auto_pay of this AccountSummaryBasicInfo.  # noqa: E501
        :type: bool
        """

        self._auto_pay = auto_pay

    @property
    def balance(self):
        """Gets the balance of this AccountSummaryBasicInfo.  # noqa: E501

        Current outstanding balance.   # noqa: E501

        :return: The balance of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this AccountSummaryBasicInfo.

        Current outstanding balance.   # noqa: E501

        :param balance: The balance of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def batch(self):
        """Gets the batch of this AccountSummaryBasicInfo.  # noqa: E501

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :return: The batch of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this AccountSummaryBasicInfo.

        The alias name given to a batch. A string of 50 characters or less.   # noqa: E501

        :param batch: The batch of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this AccountSummaryBasicInfo.  # noqa: E501

        Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.   # noqa: E501

        :return: The bill_cycle_day of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: int
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this AccountSummaryBasicInfo.

        Billing cycle day (BCD), the day of the month when a bill run generates invoices for the account.   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this AccountSummaryBasicInfo.  # noqa: E501
        :type: int
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def currency(self):
        """Gets the currency of this AccountSummaryBasicInfo.  # noqa: E501

        A currency as defined in Billing Settings in the Zuora UI.   # noqa: E501

        :return: The currency of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this AccountSummaryBasicInfo.

        A currency as defined in Billing Settings in the Zuora UI.   # noqa: E501

        :param currency: The currency of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def default_payment_method(self):
        """Gets the default_payment_method of this AccountSummaryBasicInfo.  # noqa: E501


        :return: The default_payment_method of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: AccountSummaryDefaultPaymentMethod
        """
        return self._default_payment_method

    @default_payment_method.setter
    def default_payment_method(self, default_payment_method):
        """Sets the default_payment_method of this AccountSummaryBasicInfo.


        :param default_payment_method: The default_payment_method of this AccountSummaryBasicInfo.  # noqa: E501
        :type: AccountSummaryDefaultPaymentMethod
        """

        self._default_payment_method = default_payment_method

    @property
    def id(self):
        """Gets the id of this AccountSummaryBasicInfo.  # noqa: E501

        Account ID.   # noqa: E501

        :return: The id of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AccountSummaryBasicInfo.

        Account ID.   # noqa: E501

        :param id: The id of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_delivery_prefs_email(self):
        """Gets the invoice_delivery_prefs_email of this AccountSummaryBasicInfo.  # noqa: E501

        Whether the customer wants to receive invoices through email.    # noqa: E501

        :return: The invoice_delivery_prefs_email of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_email

    @invoice_delivery_prefs_email.setter
    def invoice_delivery_prefs_email(self, invoice_delivery_prefs_email):
        """Sets the invoice_delivery_prefs_email of this AccountSummaryBasicInfo.

        Whether the customer wants to receive invoices through email.    # noqa: E501

        :param invoice_delivery_prefs_email: The invoice_delivery_prefs_email of this AccountSummaryBasicInfo.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_email = invoice_delivery_prefs_email

    @property
    def invoice_delivery_prefs_print(self):
        """Gets the invoice_delivery_prefs_print of this AccountSummaryBasicInfo.  # noqa: E501

        Whether the customer wants to receive printed invoices, such as through postal mail.   # noqa: E501

        :return: The invoice_delivery_prefs_print of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: bool
        """
        return self._invoice_delivery_prefs_print

    @invoice_delivery_prefs_print.setter
    def invoice_delivery_prefs_print(self, invoice_delivery_prefs_print):
        """Sets the invoice_delivery_prefs_print of this AccountSummaryBasicInfo.

        Whether the customer wants to receive printed invoices, such as through postal mail.   # noqa: E501

        :param invoice_delivery_prefs_print: The invoice_delivery_prefs_print of this AccountSummaryBasicInfo.  # noqa: E501
        :type: bool
        """

        self._invoice_delivery_prefs_print = invoice_delivery_prefs_print

    @property
    def last_invoice_date(self):
        """Gets the last_invoice_date of this AccountSummaryBasicInfo.  # noqa: E501

        Date of the most recent invoice for the account; null if no invoice has ever been generated.   # noqa: E501

        :return: The last_invoice_date of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: date
        """
        return self._last_invoice_date

    @last_invoice_date.setter
    def last_invoice_date(self, last_invoice_date):
        """Sets the last_invoice_date of this AccountSummaryBasicInfo.

        Date of the most recent invoice for the account; null if no invoice has ever been generated.   # noqa: E501

        :param last_invoice_date: The last_invoice_date of this AccountSummaryBasicInfo.  # noqa: E501
        :type: date
        """

        self._last_invoice_date = last_invoice_date

    @property
    def last_metrics_update(self):
        """Gets the last_metrics_update of this AccountSummaryBasicInfo.  # noqa: E501

        The date and time when account metrics are last updated, if the account is a partner account.  **Note**:    - This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   - If you have the Reseller Account feature enabled, and set the `partnerAccount` field to `false` for an account, the value of the `lastMetricsUpdate` field is automatically set to `null` in the response.    - If you ever set the `partnerAccount` field to `true` for an account, the value of `lastMetricsUpdate` field is the time when the account metrics are last updated.      # noqa: E501

        :return: The last_metrics_update of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_metrics_update

    @last_metrics_update.setter
    def last_metrics_update(self, last_metrics_update):
        """Sets the last_metrics_update of this AccountSummaryBasicInfo.

        The date and time when account metrics are last updated, if the account is a partner account.  **Note**:    - This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   - If you have the Reseller Account feature enabled, and set the `partnerAccount` field to `false` for an account, the value of the `lastMetricsUpdate` field is automatically set to `null` in the response.    - If you ever set the `partnerAccount` field to `true` for an account, the value of `lastMetricsUpdate` field is the time when the account metrics are last updated.      # noqa: E501

        :param last_metrics_update: The last_metrics_update of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._last_metrics_update = last_metrics_update

    @property
    def last_payment_amount(self):
        """Gets the last_payment_amount of this AccountSummaryBasicInfo.  # noqa: E501

        Amount of the most recent payment collected for the account; null if no payment has ever been collected.   # noqa: E501

        :return: The last_payment_amount of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_payment_amount

    @last_payment_amount.setter
    def last_payment_amount(self, last_payment_amount):
        """Sets the last_payment_amount of this AccountSummaryBasicInfo.

        Amount of the most recent payment collected for the account; null if no payment has ever been collected.   # noqa: E501

        :param last_payment_amount: The last_payment_amount of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._last_payment_amount = last_payment_amount

    @property
    def last_payment_date(self):
        """Gets the last_payment_date of this AccountSummaryBasicInfo.  # noqa: E501

        Date of the most recent payment collected for the account. Null if no payment has ever been collected.   # noqa: E501

        :return: The last_payment_date of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: date
        """
        return self._last_payment_date

    @last_payment_date.setter
    def last_payment_date(self, last_payment_date):
        """Sets the last_payment_date of this AccountSummaryBasicInfo.

        Date of the most recent payment collected for the account. Null if no payment has ever been collected.   # noqa: E501

        :param last_payment_date: The last_payment_date of this AccountSummaryBasicInfo.  # noqa: E501
        :type: date
        """

        self._last_payment_date = last_payment_date

    @property
    def name(self):
        """Gets the name of this AccountSummaryBasicInfo.  # noqa: E501

        Account name.   # noqa: E501

        :return: The name of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AccountSummaryBasicInfo.

        Account name.   # noqa: E501

        :param name: The name of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def partner_account(self):
        """Gets the partner_account of this AccountSummaryBasicInfo.  # noqa: E501

        Whether the customer account is a partner, distributor, or reseller.    **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   # noqa: E501

        :return: The partner_account of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: bool
        """
        return self._partner_account

    @partner_account.setter
    def partner_account(self, partner_account):
        """Sets the partner_account of this AccountSummaryBasicInfo.

        Whether the customer account is a partner, distributor, or reseller.    **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Manage_customer_accounts/AAA_Overview_of_customer_accounts/Reseller_Account\" target=\"_blank\">Reseller Account</a> feature enabled.   # noqa: E501

        :param partner_account: The partner_account of this AccountSummaryBasicInfo.  # noqa: E501
        :type: bool
        """

        self._partner_account = partner_account

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this AccountSummaryBasicInfo.  # noqa: E501

        The purchase order number provided by your customer for services, products, or both purchased.  # noqa: E501

        :return: The purchase_order_number of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this AccountSummaryBasicInfo.

        The purchase order number provided by your customer for services, products, or both purchased.  # noqa: E501

        :param purchase_order_number: The purchase_order_number of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def status(self):
        """Gets the status of this AccountSummaryBasicInfo.  # noqa: E501


        :return: The status of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AccountSummaryBasicInfo.


        :param status: The status of this AccountSummaryBasicInfo.  # noqa: E501
        :type: AccountStatus
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this AccountSummaryBasicInfo.  # noqa: E501


        :return: The tags of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AccountSummaryBasicInfo.


        :param tags: The tags of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._tags = tags

    @property
    def organization_label(self):
        """Gets the organization_label of this AccountSummaryBasicInfo.  # noqa: E501

        organization label.   # noqa: E501

        :return: The organization_label of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._organization_label

    @organization_label.setter
    def organization_label(self, organization_label):
        """Sets the organization_label of this AccountSummaryBasicInfo.

        organization label.   # noqa: E501

        :param organization_label: The organization_label of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._organization_label = organization_label

    @property
    def payment_method_cascading_consent(self):
        """Gets the payment_method_cascading_consent of this AccountSummaryBasicInfo.  # noqa: E501

        payment method cascading consent   # noqa: E501

        :return: The payment_method_cascading_consent of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: bool
        """
        return self._payment_method_cascading_consent

    @payment_method_cascading_consent.setter
    def payment_method_cascading_consent(self, payment_method_cascading_consent):
        """Sets the payment_method_cascading_consent of this AccountSummaryBasicInfo.

        payment method cascading consent   # noqa: E501

        :param payment_method_cascading_consent: The payment_method_cascading_consent of this AccountSummaryBasicInfo.  # noqa: E501
        :type: bool
        """

        self._payment_method_cascading_consent = payment_method_cascading_consent

    @property
    def class__ns(self):
        """Gets the class__ns of this AccountSummaryBasicInfo.  # noqa: E501

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this AccountSummaryBasicInfo.

        Value of the Class field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._class__ns = class__ns

    @property
    def customer_type__ns(self):
        """Gets the customer_type__ns of this AccountSummaryBasicInfo.  # noqa: E501


        :return: The customer_type__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: AccountObjectNSFieldsCustomerTypeNS
        """
        return self._customer_type__ns

    @customer_type__ns.setter
    def customer_type__ns(self, customer_type__ns):
        """Sets the customer_type__ns of this AccountSummaryBasicInfo.


        :param customer_type__ns: The customer_type__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :type: AccountObjectNSFieldsCustomerTypeNS
        """

        self._customer_type__ns = customer_type__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this AccountSummaryBasicInfo.  # noqa: E501

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this AccountSummaryBasicInfo.

        Value of the Department field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._department__ns = department__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this AccountSummaryBasicInfo.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this AccountSummaryBasicInfo.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this AccountSummaryBasicInfo.  # noqa: E501

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this AccountSummaryBasicInfo.

        Status of the account's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this AccountSummaryBasicInfo.  # noqa: E501

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this AccountSummaryBasicInfo.

        Value of the Location field for the corresponding customer account in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._location__ns = location__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this AccountSummaryBasicInfo.  # noqa: E501

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this AccountSummaryBasicInfo.

        Value of the Subsidiary field for the corresponding customer account in NetSuite. The Subsidiary field is required if you use NetSuite OneWorld. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this AccountSummaryBasicInfo.  # noqa: E501

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this AccountSummaryBasicInfo.

        Date when the account was sychronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    @property
    def syncto_net_suite__ns(self):
        """Gets the syncto_net_suite__ns of this AccountSummaryBasicInfo.  # noqa: E501


        :return: The syncto_net_suite__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :rtype: AccountObjectNSFieldsSynctoNetSuiteNS
        """
        return self._syncto_net_suite__ns

    @syncto_net_suite__ns.setter
    def syncto_net_suite__ns(self, syncto_net_suite__ns):
        """Sets the syncto_net_suite__ns of this AccountSummaryBasicInfo.


        :param syncto_net_suite__ns: The syncto_net_suite__ns of this AccountSummaryBasicInfo.  # noqa: E501
        :type: AccountObjectNSFieldsSynctoNetSuiteNS
        """

        self._syncto_net_suite__ns = syncto_net_suite__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountSummaryBasicInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountSummaryBasicInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
