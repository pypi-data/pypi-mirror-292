# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdatePaymentRunRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'apply_credit_balance': 'bool',
        'auto_apply_credit_memo': 'bool',
        'auto_apply_unapplied_payment': 'bool',
        'batch': 'str',
        'bill_cycle_day': 'str',
        'billing_run_id': 'str',
        'collect_payment': 'bool',
        'consolidated_payment': 'bool',
        'currency': 'str',
        'payment_gateway_id': 'str',
        'process_payment_with_closed_pm': 'bool',
        'run_date': 'datetime',
        'target_date': 'date'
    }

    attribute_map = {
        'account_id': 'accountId',
        'apply_credit_balance': 'applyCreditBalance',
        'auto_apply_credit_memo': 'autoApplyCreditMemo',
        'auto_apply_unapplied_payment': 'autoApplyUnappliedPayment',
        'batch': 'batch',
        'bill_cycle_day': 'billCycleDay',
        'billing_run_id': 'billingRunId',
        'collect_payment': 'collectPayment',
        'consolidated_payment': 'consolidatedPayment',
        'currency': 'currency',
        'payment_gateway_id': 'paymentGatewayId',
        'process_payment_with_closed_pm': 'processPaymentWithClosedPM',
        'run_date': 'runDate',
        'target_date': 'targetDate'
    }

    def __init__(self, account_id=None, apply_credit_balance=None, auto_apply_credit_memo=None, auto_apply_unapplied_payment=None, batch=None, bill_cycle_day=None, billing_run_id=None, collect_payment=None, consolidated_payment=None, currency=None, payment_gateway_id=None, process_payment_with_closed_pm=None, run_date=None, target_date=None):  # noqa: E501
        """UpdatePaymentRunRequest - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._apply_credit_balance = None
        self._auto_apply_credit_memo = None
        self._auto_apply_unapplied_payment = None
        self._batch = None
        self._bill_cycle_day = None
        self._billing_run_id = None
        self._collect_payment = None
        self._consolidated_payment = None
        self._currency = None
        self._payment_gateway_id = None
        self._process_payment_with_closed_pm = None
        self._run_date = None
        self._target_date = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if apply_credit_balance is not None:
            self.apply_credit_balance = apply_credit_balance
        if auto_apply_credit_memo is not None:
            self.auto_apply_credit_memo = auto_apply_credit_memo
        if auto_apply_unapplied_payment is not None:
            self.auto_apply_unapplied_payment = auto_apply_unapplied_payment
        if batch is not None:
            self.batch = batch
        if bill_cycle_day is not None:
            self.bill_cycle_day = bill_cycle_day
        if billing_run_id is not None:
            self.billing_run_id = billing_run_id
        if collect_payment is not None:
            self.collect_payment = collect_payment
        if consolidated_payment is not None:
            self.consolidated_payment = consolidated_payment
        if currency is not None:
            self.currency = currency
        if payment_gateway_id is not None:
            self.payment_gateway_id = payment_gateway_id
        if process_payment_with_closed_pm is not None:
            self.process_payment_with_closed_pm = process_payment_with_closed_pm
        if run_date is not None:
            self.run_date = run_date
        if target_date is not None:
            self.target_date = target_date

    @property
    def account_id(self):
        """Gets the account_id of this UpdatePaymentRunRequest.  # noqa: E501

        The ID of the customer account associated with the payment run.  This field conflicts with each of the `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields. If there are such conflicts, an error occurs and an error message is returned.   # noqa: E501

        :return: The account_id of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this UpdatePaymentRunRequest.

        The ID of the customer account associated with the payment run.  This field conflicts with each of the `batch`, `billCycleDay`, `currency`, `paymentGatewayId`, and `billingRunId` fields. If there are such conflicts, an error occurs and an error message is returned.   # noqa: E501

        :param account_id: The account_id of this UpdatePaymentRunRequest.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def apply_credit_balance(self):
        """Gets the apply_credit_balance of this UpdatePaymentRunRequest.  # noqa: E501

        **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.  Whether to apply credit balances in the payment run. This field is only available when you have Invoice Settlement feature disabled.   # noqa: E501

        :return: The apply_credit_balance of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._apply_credit_balance

    @apply_credit_balance.setter
    def apply_credit_balance(self, apply_credit_balance):
        """Sets the apply_credit_balance of this UpdatePaymentRunRequest.

        **Note:** This field is only available if you have the Credit Balance feature enabled and the Invoice Settlement feature disabled.  Whether to apply credit balances in the payment run. This field is only available when you have Invoice Settlement feature disabled.   # noqa: E501

        :param apply_credit_balance: The apply_credit_balance of this UpdatePaymentRunRequest.  # noqa: E501
        :type: bool
        """

        self._apply_credit_balance = apply_credit_balance

    @property
    def auto_apply_credit_memo(self):
        """Gets the auto_apply_credit_memo of this UpdatePaymentRunRequest.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  Whether to automatically apply a posted credit memo to one or more receivables in the payment run.   # noqa: E501

        :return: The auto_apply_credit_memo of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_apply_credit_memo

    @auto_apply_credit_memo.setter
    def auto_apply_credit_memo(self, auto_apply_credit_memo):
        """Sets the auto_apply_credit_memo of this UpdatePaymentRunRequest.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  Whether to automatically apply a posted credit memo to one or more receivables in the payment run.   # noqa: E501

        :param auto_apply_credit_memo: The auto_apply_credit_memo of this UpdatePaymentRunRequest.  # noqa: E501
        :type: bool
        """

        self._auto_apply_credit_memo = auto_apply_credit_memo

    @property
    def auto_apply_unapplied_payment(self):
        """Gets the auto_apply_unapplied_payment of this UpdatePaymentRunRequest.  # noqa: E501

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  Whether to automatically apply unapplied payments to  one or more receivables in the payment run.   # noqa: E501

        :return: The auto_apply_unapplied_payment of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._auto_apply_unapplied_payment

    @auto_apply_unapplied_payment.setter
    def auto_apply_unapplied_payment(self, auto_apply_unapplied_payment):
        """Sets the auto_apply_unapplied_payment of this UpdatePaymentRunRequest.

        **Note:** This field is only available if you have [Invoice Settlement](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement) enabled. The Invoice Settlement feature is generally available as of Zuora Billing Release 296 (March 2021). This feature includes Unapplied Payments, Credit and Debit Memo, and Invoice Item Settlement. If you want to enable Invoice Settlement, see [Invoice Settlement Enablement and Checklist Guide](https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Invoice_Settlement/Invoice_Settlement_Migration_Checklist_and_Guide) for more information.  Whether to automatically apply unapplied payments to  one or more receivables in the payment run.   # noqa: E501

        :param auto_apply_unapplied_payment: The auto_apply_unapplied_payment of this UpdatePaymentRunRequest.  # noqa: E501
        :type: bool
        """

        self._auto_apply_unapplied_payment = auto_apply_unapplied_payment

    @property
    def batch(self):
        """Gets the batch of this UpdatePaymentRunRequest.  # noqa: E501

        The alias name given to a batch. The batch name is a string of 50 characters or less.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.    # noqa: E501

        :return: The batch of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._batch

    @batch.setter
    def batch(self, batch):
        """Sets the batch of this UpdatePaymentRunRequest.

        The alias name given to a batch. The batch name is a string of 50 characters or less.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.    # noqa: E501

        :param batch: The batch of this UpdatePaymentRunRequest.  # noqa: E501
        :type: str
        """

        self._batch = batch

    @property
    def bill_cycle_day(self):
        """Gets the bill_cycle_day of this UpdatePaymentRunRequest.  # noqa: E501

        The billing cycle day (BCD), the day of the month when a bill run generates invoices for the account. The value must be equal to or less then 31, and 31 is mean the EOM.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.   # noqa: E501

        :return: The bill_cycle_day of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._bill_cycle_day

    @bill_cycle_day.setter
    def bill_cycle_day(self, bill_cycle_day):
        """Sets the bill_cycle_day of this UpdatePaymentRunRequest.

        The billing cycle day (BCD), the day of the month when a bill run generates invoices for the account. The value must be equal to or less then 31, and 31 is mean the EOM.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.   # noqa: E501

        :param bill_cycle_day: The bill_cycle_day of this UpdatePaymentRunRequest.  # noqa: E501
        :type: str
        """

        self._bill_cycle_day = bill_cycle_day

    @property
    def billing_run_id(self):
        """Gets the billing_run_id of this UpdatePaymentRunRequest.  # noqa: E501

        The ID of a bill run.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.   # noqa: E501

        :return: The billing_run_id of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._billing_run_id

    @billing_run_id.setter
    def billing_run_id(self, billing_run_id):
        """Sets the billing_run_id of this UpdatePaymentRunRequest.

        The ID of a bill run.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.   # noqa: E501

        :param billing_run_id: The billing_run_id of this UpdatePaymentRunRequest.  # noqa: E501
        :type: str
        """

        self._billing_run_id = billing_run_id

    @property
    def collect_payment(self):
        """Gets the collect_payment of this UpdatePaymentRunRequest.  # noqa: E501

        Whether to process electronic payments during the execution of payment runs.   If the Payment user permission \"Process Electronic Payment\" is disabled, this field will be ignored.   # noqa: E501

        :return: The collect_payment of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._collect_payment

    @collect_payment.setter
    def collect_payment(self, collect_payment):
        """Sets the collect_payment of this UpdatePaymentRunRequest.

        Whether to process electronic payments during the execution of payment runs.   If the Payment user permission \"Process Electronic Payment\" is disabled, this field will be ignored.   # noqa: E501

        :param collect_payment: The collect_payment of this UpdatePaymentRunRequest.  # noqa: E501
        :type: bool
        """

        self._collect_payment = collect_payment

    @property
    def consolidated_payment(self):
        """Gets the consolidated_payment of this UpdatePaymentRunRequest.  # noqa: E501

        **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.   Whether to process a single payment for all receivables that are due on an account.   # noqa: E501

        :return: The consolidated_payment of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._consolidated_payment

    @consolidated_payment.setter
    def consolidated_payment(self, consolidated_payment):
        """Sets the consolidated_payment of this UpdatePaymentRunRequest.

        **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.   Whether to process a single payment for all receivables that are due on an account.   # noqa: E501

        :param consolidated_payment: The consolidated_payment of this UpdatePaymentRunRequest.  # noqa: E501
        :type: bool
        """

        self._consolidated_payment = consolidated_payment

    @property
    def currency(self):
        """Gets the currency of this UpdatePaymentRunRequest.  # noqa: E501

        A currency defined in the web-based UI administrative settings.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.   # noqa: E501

        :return: The currency of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this UpdatePaymentRunRequest.

        A currency defined in the web-based UI administrative settings.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.   # noqa: E501

        :param currency: The currency of this UpdatePaymentRunRequest.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def payment_gateway_id(self):
        """Gets the payment_gateway_id of this UpdatePaymentRunRequest.  # noqa: E501

        The ID of the gateway instance that processes the payment.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.   # noqa: E501

        :return: The payment_gateway_id of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: str
        """
        return self._payment_gateway_id

    @payment_gateway_id.setter
    def payment_gateway_id(self, payment_gateway_id):
        """Sets the payment_gateway_id of this UpdatePaymentRunRequest.

        The ID of the gateway instance that processes the payment.  This field conflicts with the `accountId` field. If they are both specified in the request body, an error occurs and an error message is returned.   # noqa: E501

        :param payment_gateway_id: The payment_gateway_id of this UpdatePaymentRunRequest.  # noqa: E501
        :type: str
        """

        self._payment_gateway_id = payment_gateway_id

    @property
    def process_payment_with_closed_pm(self):
        """Gets the process_payment_with_closed_pm of this UpdatePaymentRunRequest.  # noqa: E501

        **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.   Whether to process payments even if the default payment method is closed.   # noqa: E501

        :return: The process_payment_with_closed_pm of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: bool
        """
        return self._process_payment_with_closed_pm

    @process_payment_with_closed_pm.setter
    def process_payment_with_closed_pm(self, process_payment_with_closed_pm):
        """Sets the process_payment_with_closed_pm of this UpdatePaymentRunRequest.

        **Note:** The **Process Electronic Payment** permission also needs to be allowed for a Manage Payment Runs role to work. See [Payments Roles](https://knowledgecenter.zuora.com/CF_Users_and_Administrators/A_Administrator_Settings/User_Roles/e_Payments_Roles) for more information.   Whether to process payments even if the default payment method is closed.   # noqa: E501

        :param process_payment_with_closed_pm: The process_payment_with_closed_pm of this UpdatePaymentRunRequest.  # noqa: E501
        :type: bool
        """

        self._process_payment_with_closed_pm = process_payment_with_closed_pm

    @property
    def run_date(self):
        """Gets the run_date of this UpdatePaymentRunRequest.  # noqa: E501

        The date and time when the scheduled payment run is to be executed, in `yyyy-mm-dd hh:mm:ss` format. The backend will ignore mintues and seconds in the field value. For example, if you specify `2017-03-01 11:30:37` for this value, this payment run will be run at 2017-03-01 11:00:00.   # noqa: E501

        :return: The run_date of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._run_date

    @run_date.setter
    def run_date(self, run_date):
        """Sets the run_date of this UpdatePaymentRunRequest.

        The date and time when the scheduled payment run is to be executed, in `yyyy-mm-dd hh:mm:ss` format. The backend will ignore mintues and seconds in the field value. For example, if you specify `2017-03-01 11:30:37` for this value, this payment run will be run at 2017-03-01 11:00:00.   # noqa: E501

        :param run_date: The run_date of this UpdatePaymentRunRequest.  # noqa: E501
        :type: datetime
        """

        self._run_date = run_date

    @property
    def target_date(self):
        """Gets the target_date of this UpdatePaymentRunRequest.  # noqa: E501

        The target date used to determine which receivables to be paid in the payment run. The payments are collected for all receivables with the due date no later than the target date.   # noqa: E501

        :return: The target_date of this UpdatePaymentRunRequest.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this UpdatePaymentRunRequest.

        The target date used to determine which receivables to be paid in the payment run. The payments are collected for all receivables with the due date no later than the target date.   # noqa: E501

        :param target_date: The target_date of this UpdatePaymentRunRequest.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdatePaymentRunRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdatePaymentRunRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
