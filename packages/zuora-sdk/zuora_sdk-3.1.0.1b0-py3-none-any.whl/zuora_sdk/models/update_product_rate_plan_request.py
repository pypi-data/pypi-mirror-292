# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateProductRatePlanRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_rate_plan_number': 'str',
        'name': 'str',
        'product_id': 'str',
        'active_currencies': 'list[Currency]',
        'description': 'str',
        'effective_start_date': 'date',
        'effective_end_date': 'date',
        'grade': 'float',
        'billing_period__ns': 'ProductRatePlanObjectNSFieldsBillingPeriodNS',
        'class__ns': 'str',
        'department__ns': 'str',
        'include_children__ns': 'ProductRatePlanObjectNSFieldsIncludeChildrenNS',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'item_type__ns': 'ProductRatePlanObjectNSFieldsItemTypeNS',
        'location__ns': 'str',
        'multi_currency_price__ns': 'str',
        'price__ns': 'str',
        'subsidiary__ns': 'str',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'product_rate_plan_number': 'ProductRatePlanNumber',
        'name': 'Name',
        'product_id': 'ProductId',
        'active_currencies': 'ActiveCurrencies',
        'description': 'Description',
        'effective_start_date': 'EffectiveStartDate',
        'effective_end_date': 'EffectiveEndDate',
        'grade': 'Grade',
        'billing_period__ns': 'BillingPeriod__NS',
        'class__ns': 'Class__NS',
        'department__ns': 'Department__NS',
        'include_children__ns': 'IncludeChildren__NS',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'item_type__ns': 'ItemType__NS',
        'location__ns': 'Location__NS',
        'multi_currency_price__ns': 'MultiCurrencyPrice__NS',
        'price__ns': 'Price__NS',
        'subsidiary__ns': 'Subsidiary__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, product_rate_plan_number=None, name=None, product_id=None, active_currencies=None, description=None, effective_start_date=None, effective_end_date=None, grade=None, billing_period__ns=None, class__ns=None, department__ns=None, include_children__ns=None, integration_id__ns=None, integration_status__ns=None, item_type__ns=None, location__ns=None, multi_currency_price__ns=None, price__ns=None, subsidiary__ns=None, sync_date__ns=None):  # noqa: E501
        """UpdateProductRatePlanRequest - a model defined in Swagger"""  # noqa: E501
        self._product_rate_plan_number = None
        self._name = None
        self._product_id = None
        self._active_currencies = None
        self._description = None
        self._effective_start_date = None
        self._effective_end_date = None
        self._grade = None
        self._billing_period__ns = None
        self._class__ns = None
        self._department__ns = None
        self._include_children__ns = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._item_type__ns = None
        self._location__ns = None
        self._multi_currency_price__ns = None
        self._price__ns = None
        self._subsidiary__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        if product_rate_plan_number is not None:
            self.product_rate_plan_number = product_rate_plan_number
        if name is not None:
            self.name = name
        if product_id is not None:
            self.product_id = product_id
        if active_currencies is not None:
            self.active_currencies = active_currencies
        if description is not None:
            self.description = description
        if effective_start_date is not None:
            self.effective_start_date = effective_start_date
        if effective_end_date is not None:
            self.effective_end_date = effective_end_date
        if grade is not None:
            self.grade = grade
        if billing_period__ns is not None:
            self.billing_period__ns = billing_period__ns
        if class__ns is not None:
            self.class__ns = class__ns
        if department__ns is not None:
            self.department__ns = department__ns
        if include_children__ns is not None:
            self.include_children__ns = include_children__ns
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if item_type__ns is not None:
            self.item_type__ns = item_type__ns
        if location__ns is not None:
            self.location__ns = location__ns
        if multi_currency_price__ns is not None:
            self.multi_currency_price__ns = multi_currency_price__ns
        if price__ns is not None:
            self.price__ns = price__ns
        if subsidiary__ns is not None:
            self.subsidiary__ns = subsidiary__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def product_rate_plan_number(self):
        """Gets the product_rate_plan_number of this UpdateProductRatePlanRequest.  # noqa: E501

        The natural key of the product rate plan.   For existing Product Rate Plan objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).  **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.   # noqa: E501

        :return: The product_rate_plan_number of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_number

    @product_rate_plan_number.setter
    def product_rate_plan_number(self, product_rate_plan_number):
        """Sets the product_rate_plan_number of this UpdateProductRatePlanRequest.

        The natural key of the product rate plan.   For existing Product Rate Plan objects that are created before this field is introduced, this field will be null. Use this field to specify a value for only these objects. Zuora also provides a tool to help you automatically backfill this field with tenant ID for your existing product catalog. If you want to use this backfill tool, contact [Zuora Global Support](https://support.zuora.com/).  **Note**: This field is only available if you set the `X-Zuora-WSDL-Version` request header to `133` or later.   # noqa: E501

        :param product_rate_plan_number: The product_rate_plan_number of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_number = product_rate_plan_number

    @property
    def name(self):
        """Gets the name of this UpdateProductRatePlanRequest.  # noqa: E501

        The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product.   # noqa: E501

        :return: The name of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateProductRatePlanRequest.

        The name of the product rate plan. The name doesn't have to be unique in a Product Catalog, but the name has to be unique within a product.   # noqa: E501

        :param name: The name of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def product_id(self):
        """Gets the product_id of this UpdateProductRatePlanRequest.  # noqa: E501

        The ID of the product that contains the product rate plan.   # noqa: E501

        :return: The product_id of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this UpdateProductRatePlanRequest.

        The ID of the product that contains the product rate plan.   # noqa: E501

        :param product_id: The product_id of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._product_id = product_id

    @property
    def active_currencies(self):
        """Gets the active_currencies of this UpdateProductRatePlanRequest.  # noqa: E501

        A list of 3-letter currency codes representing active currencies for the product rate plan. Use a comma to separate each currency code.  If the request body contains this field, the value of this field must contain the desired list of active currencies. The new list can never have more than four differences from the existing list.  This field cannot be used to modify the status of more than four currencies in a single request. For example, in a single request, you can only activate four currencies, or deactivate four currencies, or activate two and deactivate two. Making more than four changes to currencies always requires more than one call.  When specifying this field in the update request, you must provide the full list of active currencies you want, not just incremental changes. For each active currency update, provide the following currencies in the list:  Current active currencies + at most four changes (additions or deletions)   # noqa: E501

        :return: The active_currencies of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: list[Currency]
        """
        return self._active_currencies

    @active_currencies.setter
    def active_currencies(self, active_currencies):
        """Sets the active_currencies of this UpdateProductRatePlanRequest.

        A list of 3-letter currency codes representing active currencies for the product rate plan. Use a comma to separate each currency code.  If the request body contains this field, the value of this field must contain the desired list of active currencies. The new list can never have more than four differences from the existing list.  This field cannot be used to modify the status of more than four currencies in a single request. For example, in a single request, you can only activate four currencies, or deactivate four currencies, or activate two and deactivate two. Making more than four changes to currencies always requires more than one call.  When specifying this field in the update request, you must provide the full list of active currencies you want, not just incremental changes. For each active currency update, provide the following currencies in the list:  Current active currencies + at most four changes (additions or deletions)   # noqa: E501

        :param active_currencies: The active_currencies of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: list[Currency]
        """

        self._active_currencies = active_currencies

    @property
    def description(self):
        """Gets the description of this UpdateProductRatePlanRequest.  # noqa: E501

        A description of the product rate plan.   # noqa: E501

        :return: The description of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpdateProductRatePlanRequest.

        A description of the product rate plan.   # noqa: E501

        :param description: The description of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def effective_start_date(self):
        """Gets the effective_start_date of this UpdateProductRatePlanRequest.  # noqa: E501

        The date when the product rate plan becomes available and can be subscribed to, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The effective_start_date of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: date
        """
        return self._effective_start_date

    @effective_start_date.setter
    def effective_start_date(self, effective_start_date):
        """Sets the effective_start_date of this UpdateProductRatePlanRequest.

        The date when the product rate plan becomes available and can be subscribed to, in `yyyy-mm-dd` format.   # noqa: E501

        :param effective_start_date: The effective_start_date of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: date
        """

        self._effective_start_date = effective_start_date

    @property
    def effective_end_date(self):
        """Gets the effective_end_date of this UpdateProductRatePlanRequest.  # noqa: E501

        The date when the product rate plan expires and can't be subscribed to, in `yyyy-mm-dd` format.   # noqa: E501

        :return: The effective_end_date of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: date
        """
        return self._effective_end_date

    @effective_end_date.setter
    def effective_end_date(self, effective_end_date):
        """Sets the effective_end_date of this UpdateProductRatePlanRequest.

        The date when the product rate plan expires and can't be subscribed to, in `yyyy-mm-dd` format.   # noqa: E501

        :param effective_end_date: The effective_end_date of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: date
        """

        self._effective_end_date = effective_end_date

    @property
    def grade(self):
        """Gets the grade of this UpdateProductRatePlanRequest.  # noqa: E501

        The grade that is assigned for the product rate plan. The value of this field must be a positive integer. The greater the value, the higher the grade.  A product rate plan to be added to a Grading catalog group must have one grade. You can specify a grade for a product rate plan in this request or update the product rate plan individually.  **Notes**:    - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `116` or later. Otherwise, an error occurs.   - This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :return: The grade of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: float
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this UpdateProductRatePlanRequest.

        The grade that is assigned for the product rate plan. The value of this field must be a positive integer. The greater the value, the higher the grade.  A product rate plan to be added to a Grading catalog group must have one grade. You can specify a grade for a product rate plan in this request or update the product rate plan individually.  **Notes**:    - To use this field, you must set the `X-Zuora-WSDL-Version` request header to `116` or later. Otherwise, an error occurs.   - This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :param grade: The grade of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: float
        """

        self._grade = grade

    @property
    def billing_period__ns(self):
        """Gets the billing_period__ns of this UpdateProductRatePlanRequest.  # noqa: E501


        :return: The billing_period__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: ProductRatePlanObjectNSFieldsBillingPeriodNS
        """
        return self._billing_period__ns

    @billing_period__ns.setter
    def billing_period__ns(self, billing_period__ns):
        """Sets the billing_period__ns of this UpdateProductRatePlanRequest.


        :param billing_period__ns: The billing_period__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: ProductRatePlanObjectNSFieldsBillingPeriodNS
        """

        self._billing_period__ns = billing_period__ns

    @property
    def class__ns(self):
        """Gets the class__ns of this UpdateProductRatePlanRequest.  # noqa: E501

        Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The class__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._class__ns

    @class__ns.setter
    def class__ns(self, class__ns):
        """Sets the class__ns of this UpdateProductRatePlanRequest.

        Class associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param class__ns: The class__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._class__ns = class__ns

    @property
    def department__ns(self):
        """Gets the department__ns of this UpdateProductRatePlanRequest.  # noqa: E501

        Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The department__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._department__ns

    @department__ns.setter
    def department__ns(self, department__ns):
        """Sets the department__ns of this UpdateProductRatePlanRequest.

        Department associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param department__ns: The department__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._department__ns = department__ns

    @property
    def include_children__ns(self):
        """Gets the include_children__ns of this UpdateProductRatePlanRequest.  # noqa: E501


        :return: The include_children__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: ProductRatePlanObjectNSFieldsIncludeChildrenNS
        """
        return self._include_children__ns

    @include_children__ns.setter
    def include_children__ns(self, include_children__ns):
        """Sets the include_children__ns of this UpdateProductRatePlanRequest.


        :param include_children__ns: The include_children__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: ProductRatePlanObjectNSFieldsIncludeChildrenNS
        """

        self._include_children__ns = include_children__ns

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this UpdateProductRatePlanRequest.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this UpdateProductRatePlanRequest.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this UpdateProductRatePlanRequest.  # noqa: E501

        Status of the product rate plan's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this UpdateProductRatePlanRequest.

        Status of the product rate plan's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def item_type__ns(self):
        """Gets the item_type__ns of this UpdateProductRatePlanRequest.  # noqa: E501


        :return: The item_type__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: ProductRatePlanObjectNSFieldsItemTypeNS
        """
        return self._item_type__ns

    @item_type__ns.setter
    def item_type__ns(self, item_type__ns):
        """Sets the item_type__ns of this UpdateProductRatePlanRequest.


        :param item_type__ns: The item_type__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: ProductRatePlanObjectNSFieldsItemTypeNS
        """

        self._item_type__ns = item_type__ns

    @property
    def location__ns(self):
        """Gets the location__ns of this UpdateProductRatePlanRequest.  # noqa: E501

        Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The location__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._location__ns

    @location__ns.setter
    def location__ns(self, location__ns):
        """Sets the location__ns of this UpdateProductRatePlanRequest.

        Location associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param location__ns: The location__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._location__ns = location__ns

    @property
    def multi_currency_price__ns(self):
        """Gets the multi_currency_price__ns of this UpdateProductRatePlanRequest.  # noqa: E501

        Multi-currency price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The multi_currency_price__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._multi_currency_price__ns

    @multi_currency_price__ns.setter
    def multi_currency_price__ns(self, multi_currency_price__ns):
        """Sets the multi_currency_price__ns of this UpdateProductRatePlanRequest.

        Multi-currency price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param multi_currency_price__ns: The multi_currency_price__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._multi_currency_price__ns = multi_currency_price__ns

    @property
    def price__ns(self):
        """Gets the price__ns of this UpdateProductRatePlanRequest.  # noqa: E501

        Price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The price__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._price__ns

    @price__ns.setter
    def price__ns(self, price__ns):
        """Sets the price__ns of this UpdateProductRatePlanRequest.

        Price associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param price__ns: The price__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._price__ns = price__ns

    @property
    def subsidiary__ns(self):
        """Gets the subsidiary__ns of this UpdateProductRatePlanRequest.  # noqa: E501

        Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The subsidiary__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._subsidiary__ns

    @subsidiary__ns.setter
    def subsidiary__ns(self, subsidiary__ns):
        """Sets the subsidiary__ns of this UpdateProductRatePlanRequest.

        Subsidiary associated with the corresponding item in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param subsidiary__ns: The subsidiary__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._subsidiary__ns = subsidiary__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this UpdateProductRatePlanRequest.  # noqa: E501

        Date when the product rate plan was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this UpdateProductRatePlanRequest.

        Date when the product rate plan was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this UpdateProductRatePlanRequest.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateProductRatePlanRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateProductRatePlanRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
