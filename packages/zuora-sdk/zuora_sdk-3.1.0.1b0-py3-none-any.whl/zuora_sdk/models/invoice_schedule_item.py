# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceScheduleItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'actual_amount': 'float',
        'amount': 'float',
        'credit_memo_id': 'str',
        'id': 'str',
        'invoice_id': 'str',
        'name': 'str',
        'percentage': 'float',
        'run_date': 'date',
        'status': 'InvoiceScheduleItemStatus',
        'target_date_for_additional_subscriptions': 'date'
    }

    attribute_map = {
        'actual_amount': 'actualAmount',
        'amount': 'amount',
        'credit_memo_id': 'creditMemoId',
        'id': 'id',
        'invoice_id': 'invoiceId',
        'name': 'name',
        'percentage': 'percentage',
        'run_date': 'runDate',
        'status': 'status',
        'target_date_for_additional_subscriptions': 'targetDateForAdditionalSubscriptions'
    }

    def __init__(self, actual_amount=None, amount=None, credit_memo_id=None, id=None, invoice_id=None, name=None, percentage=None, run_date=None, status=None, target_date_for_additional_subscriptions=None):  # noqa: E501
        """InvoiceScheduleItem - a model defined in Swagger"""  # noqa: E501
        self._actual_amount = None
        self._amount = None
        self._credit_memo_id = None
        self._id = None
        self._invoice_id = None
        self._name = None
        self._percentage = None
        self._run_date = None
        self._status = None
        self._target_date_for_additional_subscriptions = None
        self.discriminator = None
        if actual_amount is not None:
            self.actual_amount = actual_amount
        if amount is not None:
            self.amount = amount
        if credit_memo_id is not None:
            self.credit_memo_id = credit_memo_id
        if id is not None:
            self.id = id
        if invoice_id is not None:
            self.invoice_id = invoice_id
        if name is not None:
            self.name = name
        if percentage is not None:
            self.percentage = percentage
        if run_date is not None:
            self.run_date = run_date
        if status is not None:
            self.status = status
        if target_date_for_additional_subscriptions is not None:
            self.target_date_for_additional_subscriptions = target_date_for_additional_subscriptions

    @property
    def actual_amount(self):
        """Gets the actual_amount of this InvoiceScheduleItem.  # noqa: E501

        The actual amount that needs to be billed during the processing of the invoice schedule item.  By default, the actual amount is the same as the total amount. Even if order changes occur like Remove Product or Cancel Subscription, the value of the `amount` field keeps unchanged. The value of the `actualAmount` field reflects the actual amount to be billed.   # noqa: E501

        :return: The actual_amount of this InvoiceScheduleItem.  # noqa: E501
        :rtype: float
        """
        return self._actual_amount

    @actual_amount.setter
    def actual_amount(self, actual_amount):
        """Sets the actual_amount of this InvoiceScheduleItem.

        The actual amount that needs to be billed during the processing of the invoice schedule item.  By default, the actual amount is the same as the total amount. Even if order changes occur like Remove Product or Cancel Subscription, the value of the `amount` field keeps unchanged. The value of the `actualAmount` field reflects the actual amount to be billed.   # noqa: E501

        :param actual_amount: The actual_amount of this InvoiceScheduleItem.  # noqa: E501
        :type: float
        """

        self._actual_amount = actual_amount

    @property
    def amount(self):
        """Gets the amount of this InvoiceScheduleItem.  # noqa: E501

        The amount of the invoice generated during the processing of the invoice schedule item.  The value of this field keeps unchanged once invoice schedule items are created.   # noqa: E501

        :return: The amount of this InvoiceScheduleItem.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceScheduleItem.

        The amount of the invoice generated during the processing of the invoice schedule item.  The value of this field keeps unchanged once invoice schedule items are created.   # noqa: E501

        :param amount: The amount of this InvoiceScheduleItem.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def credit_memo_id(self):
        """Gets the credit_memo_id of this InvoiceScheduleItem.  # noqa: E501

        The ID of the credit memo that is generated during the processing of the invoice schedule item.   # noqa: E501

        :return: The credit_memo_id of this InvoiceScheduleItem.  # noqa: E501
        :rtype: str
        """
        return self._credit_memo_id

    @credit_memo_id.setter
    def credit_memo_id(self, credit_memo_id):
        """Sets the credit_memo_id of this InvoiceScheduleItem.

        The ID of the credit memo that is generated during the processing of the invoice schedule item.   # noqa: E501

        :param credit_memo_id: The credit_memo_id of this InvoiceScheduleItem.  # noqa: E501
        :type: str
        """

        self._credit_memo_id = credit_memo_id

    @property
    def id(self):
        """Gets the id of this InvoiceScheduleItem.  # noqa: E501

        The unique ID of the invoice schedule item.   # noqa: E501

        :return: The id of this InvoiceScheduleItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceScheduleItem.

        The unique ID of the invoice schedule item.   # noqa: E501

        :param id: The id of this InvoiceScheduleItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_id(self):
        """Gets the invoice_id of this InvoiceScheduleItem.  # noqa: E501

        The ID of the invoice that is generated during the processing of the invoice schedule item.   # noqa: E501

        :return: The invoice_id of this InvoiceScheduleItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this InvoiceScheduleItem.

        The ID of the invoice that is generated during the processing of the invoice schedule item.   # noqa: E501

        :param invoice_id: The invoice_id of this InvoiceScheduleItem.  # noqa: E501
        :type: str
        """

        self._invoice_id = invoice_id

    @property
    def name(self):
        """Gets the name of this InvoiceScheduleItem.  # noqa: E501

        The name of the invoice schedule item.   # noqa: E501

        :return: The name of this InvoiceScheduleItem.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InvoiceScheduleItem.

        The name of the invoice schedule item.   # noqa: E501

        :param name: The name of this InvoiceScheduleItem.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def percentage(self):
        """Gets the percentage of this InvoiceScheduleItem.  # noqa: E501

        The percentage of the total amount to be generated during the processing of the invoice schedule item.  # noqa: E501

        :return: The percentage of this InvoiceScheduleItem.  # noqa: E501
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this InvoiceScheduleItem.

        The percentage of the total amount to be generated during the processing of the invoice schedule item.  # noqa: E501

        :param percentage: The percentage of this InvoiceScheduleItem.  # noqa: E501
        :type: float
        """

        self._percentage = percentage

    @property
    def run_date(self):
        """Gets the run_date of this InvoiceScheduleItem.  # noqa: E501

        The date in the tenant’s time zone when the invoice schedule item is processed to generate an invoice.   # noqa: E501

        :return: The run_date of this InvoiceScheduleItem.  # noqa: E501
        :rtype: date
        """
        return self._run_date

    @run_date.setter
    def run_date(self, run_date):
        """Sets the run_date of this InvoiceScheduleItem.

        The date in the tenant’s time zone when the invoice schedule item is processed to generate an invoice.   # noqa: E501

        :param run_date: The run_date of this InvoiceScheduleItem.  # noqa: E501
        :type: date
        """

        self._run_date = run_date

    @property
    def status(self):
        """Gets the status of this InvoiceScheduleItem.  # noqa: E501


        :return: The status of this InvoiceScheduleItem.  # noqa: E501
        :rtype: InvoiceScheduleItemStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InvoiceScheduleItem.


        :param status: The status of this InvoiceScheduleItem.  # noqa: E501
        :type: InvoiceScheduleItemStatus
        """

        self._status = status

    @property
    def target_date_for_additional_subscriptions(self):
        """Gets the target_date_for_additional_subscriptions of this InvoiceScheduleItem.  # noqa: E501

        The date in the tenant's time zone used by the invoice schedule to determine which fixed-period regular charges to be billed together with the invoice schedule item.   The regular charges must come from the subscriptions specified in the `additionalSubscriptionsToBill` field.   # noqa: E501

        :return: The target_date_for_additional_subscriptions of this InvoiceScheduleItem.  # noqa: E501
        :rtype: date
        """
        return self._target_date_for_additional_subscriptions

    @target_date_for_additional_subscriptions.setter
    def target_date_for_additional_subscriptions(self, target_date_for_additional_subscriptions):
        """Sets the target_date_for_additional_subscriptions of this InvoiceScheduleItem.

        The date in the tenant's time zone used by the invoice schedule to determine which fixed-period regular charges to be billed together with the invoice schedule item.   The regular charges must come from the subscriptions specified in the `additionalSubscriptionsToBill` field.   # noqa: E501

        :param target_date_for_additional_subscriptions: The target_date_for_additional_subscriptions of this InvoiceScheduleItem.  # noqa: E501
        :type: date
        """

        self._target_date_for_additional_subscriptions = target_date_for_additional_subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceScheduleItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceScheduleItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
