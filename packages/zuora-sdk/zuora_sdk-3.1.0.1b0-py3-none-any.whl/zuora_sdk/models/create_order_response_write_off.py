# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateOrderResponseWriteOff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'float',
        'failed_reason': 'str',
        'invoice_number': 'str',
        'status': 'CreateOrderResponseWriteOffStatus',
        'write_off_credit_memo_number': 'str'
    }

    attribute_map = {
        'amount': 'amount',
        'failed_reason': 'failedReason',
        'invoice_number': 'invoiceNumber',
        'status': 'status',
        'write_off_credit_memo_number': 'writeOffCreditMemoNumber'
    }

    def __init__(self, amount=None, failed_reason=None, invoice_number=None, status=None, write_off_credit_memo_number=None):  # noqa: E501
        """CreateOrderResponseWriteOff - a model defined in Swagger"""  # noqa: E501
        self._amount = None
        self._failed_reason = None
        self._invoice_number = None
        self._status = None
        self._write_off_credit_memo_number = None
        self.discriminator = None
        if amount is not None:
            self.amount = amount
        if failed_reason is not None:
            self.failed_reason = failed_reason
        if invoice_number is not None:
            self.invoice_number = invoice_number
        if status is not None:
            self.status = status
        if write_off_credit_memo_number is not None:
            self.write_off_credit_memo_number = write_off_credit_memo_number

    @property
    def amount(self):
        """Gets the amount of this CreateOrderResponseWriteOff.  # noqa: E501

        The amount written off from the invoice balance.  # noqa: E501

        :return: The amount of this CreateOrderResponseWriteOff.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateOrderResponseWriteOff.

        The amount written off from the invoice balance.  # noqa: E501

        :param amount: The amount of this CreateOrderResponseWriteOff.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def failed_reason(self):
        """Gets the failed_reason of this CreateOrderResponseWriteOff.  # noqa: E501

        The reason of write-off failure.  # noqa: E501

        :return: The failed_reason of this CreateOrderResponseWriteOff.  # noqa: E501
        :rtype: str
        """
        return self._failed_reason

    @failed_reason.setter
    def failed_reason(self, failed_reason):
        """Sets the failed_reason of this CreateOrderResponseWriteOff.

        The reason of write-off failure.  # noqa: E501

        :param failed_reason: The failed_reason of this CreateOrderResponseWriteOff.  # noqa: E501
        :type: str
        """

        self._failed_reason = failed_reason

    @property
    def invoice_number(self):
        """Gets the invoice_number of this CreateOrderResponseWriteOff.  # noqa: E501

        The number of the invoice that is written off. For example, `INV00051208`.  # noqa: E501

        :return: The invoice_number of this CreateOrderResponseWriteOff.  # noqa: E501
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this CreateOrderResponseWriteOff.

        The number of the invoice that is written off. For example, `INV00051208`.  # noqa: E501

        :param invoice_number: The invoice_number of this CreateOrderResponseWriteOff.  # noqa: E501
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def status(self):
        """Gets the status of this CreateOrderResponseWriteOff.  # noqa: E501


        :return: The status of this CreateOrderResponseWriteOff.  # noqa: E501
        :rtype: CreateOrderResponseWriteOffStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreateOrderResponseWriteOff.


        :param status: The status of this CreateOrderResponseWriteOff.  # noqa: E501
        :type: CreateOrderResponseWriteOffStatus
        """

        self._status = status

    @property
    def write_off_credit_memo_number(self):
        """Gets the write_off_credit_memo_number of this CreateOrderResponseWriteOff.  # noqa: E501

        The number of the credit memo that is written off.  # noqa: E501

        :return: The write_off_credit_memo_number of this CreateOrderResponseWriteOff.  # noqa: E501
        :rtype: str
        """
        return self._write_off_credit_memo_number

    @write_off_credit_memo_number.setter
    def write_off_credit_memo_number(self, write_off_credit_memo_number):
        """Sets the write_off_credit_memo_number of this CreateOrderResponseWriteOff.

        The number of the credit memo that is written off.  # noqa: E501

        :param write_off_credit_memo_number: The write_off_credit_memo_number of this CreateOrderResponseWriteOff.  # noqa: E501
        :type: str
        """

        self._write_off_credit_memo_number = write_off_credit_memo_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOrderResponseWriteOff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOrderResponseWriteOff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
