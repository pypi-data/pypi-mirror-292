# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConfigurationTemplateContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'component_type': 'str',
        'error': 'str',
        'id': 'str',
        'key': 'str',
        'method': 'str',
        'payload': 'object',
        'result': 'str',
        'segregation_key': 'str',
        'template_id': 'str',
        'url': 'str'
    }

    attribute_map = {
        'component_type': 'componentType',
        'error': 'error',
        'id': 'id',
        'key': 'key',
        'method': 'method',
        'payload': 'payload',
        'result': 'result',
        'segregation_key': 'segregationKey',
        'template_id': 'templateId',
        'url': 'url'
    }

    def __init__(self, component_type=None, error=None, id=None, key=None, method=None, payload=None, result=None, segregation_key=None, template_id=None, url=None):  # noqa: E501
        """ConfigurationTemplateContent - a model defined in Swagger"""  # noqa: E501
        self._component_type = None
        self._error = None
        self._id = None
        self._key = None
        self._method = None
        self._payload = None
        self._result = None
        self._segregation_key = None
        self._template_id = None
        self._url = None
        self.discriminator = None
        if component_type is not None:
            self.component_type = component_type
        if error is not None:
            self.error = error
        if id is not None:
            self.id = id
        if key is not None:
            self.key = key
        if method is not None:
            self.method = method
        if payload is not None:
            self.payload = payload
        if result is not None:
            self.result = result
        if segregation_key is not None:
            self.segregation_key = segregation_key
        if template_id is not None:
            self.template_id = template_id
        if url is not None:
            self.url = url

    @property
    def component_type(self):
        """Gets the component_type of this ConfigurationTemplateContent.  # noqa: E501

        Type of Component.  # noqa: E501

        :return: The component_type of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: str
        """
        return self._component_type

    @component_type.setter
    def component_type(self, component_type):
        """Sets the component_type of this ConfigurationTemplateContent.

        Type of Component.  # noqa: E501

        :param component_type: The component_type of this ConfigurationTemplateContent.  # noqa: E501
        :type: str
        """

        self._component_type = component_type

    @property
    def error(self):
        """Gets the error of this ConfigurationTemplateContent.  # noqa: E501

        Error Information.  # noqa: E501

        :return: The error of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ConfigurationTemplateContent.

        Error Information.  # noqa: E501

        :param error: The error of this ConfigurationTemplateContent.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this ConfigurationTemplateContent.  # noqa: E501

        Id of Each component.  # noqa: E501

        :return: The id of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConfigurationTemplateContent.

        Id of Each component.  # noqa: E501

        :param id: The id of this ConfigurationTemplateContent.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def key(self):
        """Gets the key of this ConfigurationTemplateContent.  # noqa: E501

        Key value of fields inside component.  # noqa: E501

        :return: The key of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this ConfigurationTemplateContent.

        Key value of fields inside component.  # noqa: E501

        :param key: The key of this ConfigurationTemplateContent.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def method(self):
        """Gets the method of this ConfigurationTemplateContent.  # noqa: E501

        Http method which is used to retrieve the particular component.  # noqa: E501

        :return: The method of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ConfigurationTemplateContent.

        Http method which is used to retrieve the particular component.  # noqa: E501

        :param method: The method of this ConfigurationTemplateContent.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def payload(self):
        """Gets the payload of this ConfigurationTemplateContent.  # noqa: E501

        Json node object contains metadata.  # noqa: E501

        :return: The payload of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload):
        """Sets the payload of this ConfigurationTemplateContent.

        Json node object contains metadata.  # noqa: E501

        :param payload: The payload of this ConfigurationTemplateContent.  # noqa: E501
        :type: object
        """

        self._payload = payload

    @property
    def result(self):
        """Gets the result of this ConfigurationTemplateContent.  # noqa: E501

        Contains the response of details fetched regarding selected component.  # noqa: E501

        :return: The result of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ConfigurationTemplateContent.

        Contains the response of details fetched regarding selected component.  # noqa: E501

        :param result: The result of this ConfigurationTemplateContent.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def segregation_key(self):
        """Gets the segregation_key of this ConfigurationTemplateContent.  # noqa: E501

        Gives the difference between components and sub components.  # noqa: E501

        :return: The segregation_key of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: str
        """
        return self._segregation_key

    @segregation_key.setter
    def segregation_key(self, segregation_key):
        """Sets the segregation_key of this ConfigurationTemplateContent.

        Gives the difference between components and sub components.  # noqa: E501

        :param segregation_key: The segregation_key of this ConfigurationTemplateContent.  # noqa: E501
        :type: str
        """

        self._segregation_key = segregation_key

    @property
    def template_id(self):
        """Gets the template_id of this ConfigurationTemplateContent.  # noqa: E501

        Id of the Template.  # noqa: E501

        :return: The template_id of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this ConfigurationTemplateContent.

        Id of the Template.  # noqa: E501

        :param template_id: The template_id of this ConfigurationTemplateContent.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    @property
    def url(self):
        """Gets the url of this ConfigurationTemplateContent.  # noqa: E501

        Metadata is retrieved from this URL.  # noqa: E501

        :return: The url of this ConfigurationTemplateContent.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ConfigurationTemplateContent.

        Metadata is retrieved from this URL.  # noqa: E501

        :param url: The url of this ConfigurationTemplateContent.  # noqa: E501
        :type: str
        """

        self._url = url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConfigurationTemplateContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConfigurationTemplateContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
