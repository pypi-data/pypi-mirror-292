# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InvoiceItem(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accounting_code': 'str',
        'adjustment_liability_accounting_code': 'str',
        'adjustment_revenue_accounting_code': 'str',
        'applied_to_item_id': 'str',
        'available_to_credit_amount': 'float',
        'balance': 'str',
        'booking_reference': 'str',
        'charge_amount': 'str',
        'charge_date': 'str',
        'charge_description': 'str',
        'charge_id': 'str',
        'charge_name': 'str',
        'charge_type': 'ChargeType',
        'contract_asset_accounting_code': 'str',
        'contract_liability_accounting_code': 'str',
        'contract_recognized_revenue_accounting_code': 'str',
        'deferred_revenue_accounting_code': 'str',
        'description': 'str',
        'exclude_item_billing_from_revenue_accounting': 'bool',
        'id': 'str',
        'invoice_schedule_id': 'str',
        'invoice_schedule_item_id': 'str',
        'item_type': 'str',
        'processing_type': 'BillingDocumentItemProcessingType',
        'product_name': 'str',
        'product_rate_plan_charge_id': 'str',
        'purchase_order_number': 'str',
        'quantity': 'float',
        'recognized_revenue_accounting_code': 'str',
        'rev_rec_code': 'str',
        'rev_rec_trigger_condition': 'RevRecTrigger',
        'revenue_recognition_rule_name': 'str',
        'service_end_date': 'date',
        'service_start_date': 'date',
        'sku': 'str',
        'sold_to_contact_id': 'str',
        'sold_to_contact_snapshot_id': 'str',
        'source_item_type': 'BillingDocumentItemSourceType',
        'subscription_id': 'str',
        'subscription_name': 'str',
        'tax_amount': 'str',
        'tax_code': 'str',
        'tax_mode': 'TaxMode',
        'taxation_items': 'TaxationItemsData',
        'unbilled_receivables_accounting_code': 'str',
        'unit_of_measure': 'str',
        'unit_price': 'float',
        'number_of_deliveries': 'float',
        'reflect_discount_in_net_amount': 'bool',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'sync_date__ns': 'str'
    }

    attribute_map = {
        'accounting_code': 'accountingCode',
        'adjustment_liability_accounting_code': 'adjustmentLiabilityAccountingCode',
        'adjustment_revenue_accounting_code': 'adjustmentRevenueAccountingCode',
        'applied_to_item_id': 'appliedToItemId',
        'available_to_credit_amount': 'availableToCreditAmount',
        'balance': 'balance',
        'booking_reference': 'bookingReference',
        'charge_amount': 'chargeAmount',
        'charge_date': 'chargeDate',
        'charge_description': 'chargeDescription',
        'charge_id': 'chargeId',
        'charge_name': 'chargeName',
        'charge_type': 'chargeType',
        'contract_asset_accounting_code': 'contractAssetAccountingCode',
        'contract_liability_accounting_code': 'contractLiabilityAccountingCode',
        'contract_recognized_revenue_accounting_code': 'contractRecognizedRevenueAccountingCode',
        'deferred_revenue_accounting_code': 'deferredRevenueAccountingCode',
        'description': 'description',
        'exclude_item_billing_from_revenue_accounting': 'excludeItemBillingFromRevenueAccounting',
        'id': 'id',
        'invoice_schedule_id': 'invoiceScheduleId',
        'invoice_schedule_item_id': 'invoiceScheduleItemId',
        'item_type': 'itemType',
        'processing_type': 'processingType',
        'product_name': 'productName',
        'product_rate_plan_charge_id': 'productRatePlanChargeId',
        'purchase_order_number': 'purchaseOrderNumber',
        'quantity': 'quantity',
        'recognized_revenue_accounting_code': 'recognizedRevenueAccountingCode',
        'rev_rec_code': 'revRecCode',
        'rev_rec_trigger_condition': 'revRecTriggerCondition',
        'revenue_recognition_rule_name': 'revenueRecognitionRuleName',
        'service_end_date': 'serviceEndDate',
        'service_start_date': 'serviceStartDate',
        'sku': 'sku',
        'sold_to_contact_id': 'soldToContactId',
        'sold_to_contact_snapshot_id': 'soldToContactSnapshotId',
        'source_item_type': 'sourceItemType',
        'subscription_id': 'subscriptionId',
        'subscription_name': 'subscriptionName',
        'tax_amount': 'taxAmount',
        'tax_code': 'taxCode',
        'tax_mode': 'taxMode',
        'taxation_items': 'taxationItems',
        'unbilled_receivables_accounting_code': 'unbilledReceivablesAccountingCode',
        'unit_of_measure': 'unitOfMeasure',
        'unit_price': 'unitPrice',
        'number_of_deliveries': 'numberOfDeliveries',
        'reflect_discount_in_net_amount': 'reflectDiscountInNetAmount',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'sync_date__ns': 'SyncDate__NS'
    }

    def __init__(self, accounting_code=None, adjustment_liability_accounting_code=None, adjustment_revenue_accounting_code=None, applied_to_item_id=None, available_to_credit_amount=None, balance=None, booking_reference=None, charge_amount=None, charge_date=None, charge_description=None, charge_id=None, charge_name=None, charge_type=None, contract_asset_accounting_code=None, contract_liability_accounting_code=None, contract_recognized_revenue_accounting_code=None, deferred_revenue_accounting_code=None, description=None, exclude_item_billing_from_revenue_accounting=None, id=None, invoice_schedule_id=None, invoice_schedule_item_id=None, item_type=None, processing_type=None, product_name=None, product_rate_plan_charge_id=None, purchase_order_number=None, quantity=None, recognized_revenue_accounting_code=None, rev_rec_code=None, rev_rec_trigger_condition=None, revenue_recognition_rule_name=None, service_end_date=None, service_start_date=None, sku=None, sold_to_contact_id=None, sold_to_contact_snapshot_id=None, source_item_type=None, subscription_id=None, subscription_name=None, tax_amount=None, tax_code=None, tax_mode=None, taxation_items=None, unbilled_receivables_accounting_code=None, unit_of_measure=None, unit_price=None, number_of_deliveries=None, reflect_discount_in_net_amount=None, integration_id__ns=None, integration_status__ns=None, sync_date__ns=None):  # noqa: E501
        """InvoiceItem - a model defined in Swagger"""  # noqa: E501
        self._accounting_code = None
        self._adjustment_liability_accounting_code = None
        self._adjustment_revenue_accounting_code = None
        self._applied_to_item_id = None
        self._available_to_credit_amount = None
        self._balance = None
        self._booking_reference = None
        self._charge_amount = None
        self._charge_date = None
        self._charge_description = None
        self._charge_id = None
        self._charge_name = None
        self._charge_type = None
        self._contract_asset_accounting_code = None
        self._contract_liability_accounting_code = None
        self._contract_recognized_revenue_accounting_code = None
        self._deferred_revenue_accounting_code = None
        self._description = None
        self._exclude_item_billing_from_revenue_accounting = None
        self._id = None
        self._invoice_schedule_id = None
        self._invoice_schedule_item_id = None
        self._item_type = None
        self._processing_type = None
        self._product_name = None
        self._product_rate_plan_charge_id = None
        self._purchase_order_number = None
        self._quantity = None
        self._recognized_revenue_accounting_code = None
        self._rev_rec_code = None
        self._rev_rec_trigger_condition = None
        self._revenue_recognition_rule_name = None
        self._service_end_date = None
        self._service_start_date = None
        self._sku = None
        self._sold_to_contact_id = None
        self._sold_to_contact_snapshot_id = None
        self._source_item_type = None
        self._subscription_id = None
        self._subscription_name = None
        self._tax_amount = None
        self._tax_code = None
        self._tax_mode = None
        self._taxation_items = None
        self._unbilled_receivables_accounting_code = None
        self._unit_of_measure = None
        self._unit_price = None
        self._number_of_deliveries = None
        self._reflect_discount_in_net_amount = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._sync_date__ns = None
        self.discriminator = None
        if accounting_code is not None:
            self.accounting_code = accounting_code
        if adjustment_liability_accounting_code is not None:
            self.adjustment_liability_accounting_code = adjustment_liability_accounting_code
        if adjustment_revenue_accounting_code is not None:
            self.adjustment_revenue_accounting_code = adjustment_revenue_accounting_code
        if applied_to_item_id is not None:
            self.applied_to_item_id = applied_to_item_id
        if available_to_credit_amount is not None:
            self.available_to_credit_amount = available_to_credit_amount
        if balance is not None:
            self.balance = balance
        if booking_reference is not None:
            self.booking_reference = booking_reference
        if charge_amount is not None:
            self.charge_amount = charge_amount
        if charge_date is not None:
            self.charge_date = charge_date
        if charge_description is not None:
            self.charge_description = charge_description
        if charge_id is not None:
            self.charge_id = charge_id
        if charge_name is not None:
            self.charge_name = charge_name
        if charge_type is not None:
            self.charge_type = charge_type
        if contract_asset_accounting_code is not None:
            self.contract_asset_accounting_code = contract_asset_accounting_code
        if contract_liability_accounting_code is not None:
            self.contract_liability_accounting_code = contract_liability_accounting_code
        if contract_recognized_revenue_accounting_code is not None:
            self.contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code
        if deferred_revenue_accounting_code is not None:
            self.deferred_revenue_accounting_code = deferred_revenue_accounting_code
        if description is not None:
            self.description = description
        if exclude_item_billing_from_revenue_accounting is not None:
            self.exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting
        if id is not None:
            self.id = id
        if invoice_schedule_id is not None:
            self.invoice_schedule_id = invoice_schedule_id
        if invoice_schedule_item_id is not None:
            self.invoice_schedule_item_id = invoice_schedule_item_id
        if item_type is not None:
            self.item_type = item_type
        if processing_type is not None:
            self.processing_type = processing_type
        if product_name is not None:
            self.product_name = product_name
        if product_rate_plan_charge_id is not None:
            self.product_rate_plan_charge_id = product_rate_plan_charge_id
        if purchase_order_number is not None:
            self.purchase_order_number = purchase_order_number
        if quantity is not None:
            self.quantity = quantity
        if recognized_revenue_accounting_code is not None:
            self.recognized_revenue_accounting_code = recognized_revenue_accounting_code
        if rev_rec_code is not None:
            self.rev_rec_code = rev_rec_code
        if rev_rec_trigger_condition is not None:
            self.rev_rec_trigger_condition = rev_rec_trigger_condition
        if revenue_recognition_rule_name is not None:
            self.revenue_recognition_rule_name = revenue_recognition_rule_name
        if service_end_date is not None:
            self.service_end_date = service_end_date
        if service_start_date is not None:
            self.service_start_date = service_start_date
        if sku is not None:
            self.sku = sku
        if sold_to_contact_id is not None:
            self.sold_to_contact_id = sold_to_contact_id
        if sold_to_contact_snapshot_id is not None:
            self.sold_to_contact_snapshot_id = sold_to_contact_snapshot_id
        if source_item_type is not None:
            self.source_item_type = source_item_type
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if subscription_name is not None:
            self.subscription_name = subscription_name
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_code is not None:
            self.tax_code = tax_code
        if tax_mode is not None:
            self.tax_mode = tax_mode
        if taxation_items is not None:
            self.taxation_items = taxation_items
        if unbilled_receivables_accounting_code is not None:
            self.unbilled_receivables_accounting_code = unbilled_receivables_accounting_code
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure
        if unit_price is not None:
            self.unit_price = unit_price
        if number_of_deliveries is not None:
            self.number_of_deliveries = number_of_deliveries
        if reflect_discount_in_net_amount is not None:
            self.reflect_discount_in_net_amount = reflect_discount_in_net_amount
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns

    @property
    def accounting_code(self):
        """Gets the accounting_code of this InvoiceItem.  # noqa: E501

        The accounting code associated with the invoice item.  # noqa: E501

        :return: The accounting_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._accounting_code

    @accounting_code.setter
    def accounting_code(self, accounting_code):
        """Sets the accounting_code of this InvoiceItem.

        The accounting code associated with the invoice item.  # noqa: E501

        :param accounting_code: The accounting_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._accounting_code = accounting_code

    @property
    def adjustment_liability_accounting_code(self):
        """Gets the adjustment_liability_accounting_code of this InvoiceItem.  # noqa: E501

        The accounting code for adjustment liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The adjustment_liability_accounting_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_liability_accounting_code

    @adjustment_liability_accounting_code.setter
    def adjustment_liability_accounting_code(self, adjustment_liability_accounting_code):
        """Sets the adjustment_liability_accounting_code of this InvoiceItem.

        The accounting code for adjustment liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param adjustment_liability_accounting_code: The adjustment_liability_accounting_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._adjustment_liability_accounting_code = adjustment_liability_accounting_code

    @property
    def adjustment_revenue_accounting_code(self):
        """Gets the adjustment_revenue_accounting_code of this InvoiceItem.  # noqa: E501

        The accounting code for adjustment revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The adjustment_revenue_accounting_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._adjustment_revenue_accounting_code

    @adjustment_revenue_accounting_code.setter
    def adjustment_revenue_accounting_code(self, adjustment_revenue_accounting_code):
        """Sets the adjustment_revenue_accounting_code of this InvoiceItem.

        The accounting code for adjustment revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param adjustment_revenue_accounting_code: The adjustment_revenue_accounting_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._adjustment_revenue_accounting_code = adjustment_revenue_accounting_code

    @property
    def applied_to_item_id(self):
        """Gets the applied_to_item_id of this InvoiceItem.  # noqa: E501

        The unique ID of the invoice item that the discount charge is applied to.  # noqa: E501

        :return: The applied_to_item_id of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._applied_to_item_id

    @applied_to_item_id.setter
    def applied_to_item_id(self, applied_to_item_id):
        """Sets the applied_to_item_id of this InvoiceItem.

        The unique ID of the invoice item that the discount charge is applied to.  # noqa: E501

        :param applied_to_item_id: The applied_to_item_id of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._applied_to_item_id = applied_to_item_id

    @property
    def available_to_credit_amount(self):
        """Gets the available_to_credit_amount of this InvoiceItem.  # noqa: E501

        The amount of the invoice item that is available to credit.  # noqa: E501

        :return: The available_to_credit_amount of this InvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._available_to_credit_amount

    @available_to_credit_amount.setter
    def available_to_credit_amount(self, available_to_credit_amount):
        """Sets the available_to_credit_amount of this InvoiceItem.

        The amount of the invoice item that is available to credit.  # noqa: E501

        :param available_to_credit_amount: The available_to_credit_amount of this InvoiceItem.  # noqa: E501
        :type: float
        """

        self._available_to_credit_amount = available_to_credit_amount

    @property
    def balance(self):
        """Gets the balance of this InvoiceItem.  # noqa: E501

        The balance of the invoice item.  # noqa: E501

        :return: The balance of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this InvoiceItem.

        The balance of the invoice item.  # noqa: E501

        :param balance: The balance of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._balance = balance

    @property
    def booking_reference(self):
        """Gets the booking_reference of this InvoiceItem.  # noqa: E501

        The booking reference of the invoice item.  # noqa: E501

        :return: The booking_reference of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._booking_reference

    @booking_reference.setter
    def booking_reference(self, booking_reference):
        """Sets the booking_reference of this InvoiceItem.

        The booking reference of the invoice item.  # noqa: E501

        :param booking_reference: The booking_reference of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._booking_reference = booking_reference

    @property
    def charge_amount(self):
        """Gets the charge_amount of this InvoiceItem.  # noqa: E501

        The amount of the charge.   This amount does not include taxes regardless if the charge's tax mode is inclusive or exclusive.   # noqa: E501

        :return: The charge_amount of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_amount

    @charge_amount.setter
    def charge_amount(self, charge_amount):
        """Sets the charge_amount of this InvoiceItem.

        The amount of the charge.   This amount does not include taxes regardless if the charge's tax mode is inclusive or exclusive.   # noqa: E501

        :param charge_amount: The charge_amount of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_amount = charge_amount

    @property
    def charge_date(self):
        """Gets the charge_date of this InvoiceItem.  # noqa: E501

        The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The charge_date of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_date

    @charge_date.setter
    def charge_date(self, charge_date):
        """Sets the charge_date of this InvoiceItem.

        The date when the invoice item is charged, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param charge_date: The charge_date of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_date = charge_date

    @property
    def charge_description(self):
        """Gets the charge_description of this InvoiceItem.  # noqa: E501

        The description of the charge.  # noqa: E501

        :return: The charge_description of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_description

    @charge_description.setter
    def charge_description(self, charge_description):
        """Sets the charge_description of this InvoiceItem.

        The description of the charge.  # noqa: E501

        :param charge_description: The charge_description of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_description = charge_description

    @property
    def charge_id(self):
        """Gets the charge_id of this InvoiceItem.  # noqa: E501

        The unique ID of the charge.  # noqa: E501

        :return: The charge_id of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_id

    @charge_id.setter
    def charge_id(self, charge_id):
        """Sets the charge_id of this InvoiceItem.

        The unique ID of the charge.  # noqa: E501

        :param charge_id: The charge_id of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_id = charge_id

    @property
    def charge_name(self):
        """Gets the charge_name of this InvoiceItem.  # noqa: E501

        The name of the charge.  # noqa: E501

        :return: The charge_name of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._charge_name

    @charge_name.setter
    def charge_name(self, charge_name):
        """Sets the charge_name of this InvoiceItem.

        The name of the charge.  # noqa: E501

        :param charge_name: The charge_name of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._charge_name = charge_name

    @property
    def charge_type(self):
        """Gets the charge_type of this InvoiceItem.  # noqa: E501


        :return: The charge_type of this InvoiceItem.  # noqa: E501
        :rtype: ChargeType
        """
        return self._charge_type

    @charge_type.setter
    def charge_type(self, charge_type):
        """Sets the charge_type of this InvoiceItem.


        :param charge_type: The charge_type of this InvoiceItem.  # noqa: E501
        :type: ChargeType
        """

        self._charge_type = charge_type

    @property
    def contract_asset_accounting_code(self):
        """Gets the contract_asset_accounting_code of this InvoiceItem.  # noqa: E501

        The accounting code for contract asset.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The contract_asset_accounting_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_asset_accounting_code

    @contract_asset_accounting_code.setter
    def contract_asset_accounting_code(self, contract_asset_accounting_code):
        """Sets the contract_asset_accounting_code of this InvoiceItem.

        The accounting code for contract asset.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param contract_asset_accounting_code: The contract_asset_accounting_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._contract_asset_accounting_code = contract_asset_accounting_code

    @property
    def contract_liability_accounting_code(self):
        """Gets the contract_liability_accounting_code of this InvoiceItem.  # noqa: E501

        The accounting code for contract liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The contract_liability_accounting_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_liability_accounting_code

    @contract_liability_accounting_code.setter
    def contract_liability_accounting_code(self, contract_liability_accounting_code):
        """Sets the contract_liability_accounting_code of this InvoiceItem.

        The accounting code for contract liability.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param contract_liability_accounting_code: The contract_liability_accounting_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._contract_liability_accounting_code = contract_liability_accounting_code

    @property
    def contract_recognized_revenue_accounting_code(self):
        """Gets the contract_recognized_revenue_accounting_code of this InvoiceItem.  # noqa: E501

        The accounting code for contract recognized revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The contract_recognized_revenue_accounting_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._contract_recognized_revenue_accounting_code

    @contract_recognized_revenue_accounting_code.setter
    def contract_recognized_revenue_accounting_code(self, contract_recognized_revenue_accounting_code):
        """Sets the contract_recognized_revenue_accounting_code of this InvoiceItem.

        The accounting code for contract recognized revenue.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param contract_recognized_revenue_accounting_code: The contract_recognized_revenue_accounting_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._contract_recognized_revenue_accounting_code = contract_recognized_revenue_accounting_code

    @property
    def deferred_revenue_accounting_code(self):
        """Gets the deferred_revenue_accounting_code of this InvoiceItem.  # noqa: E501

        The deferred revenue accounting code associated with the invoice item. **Note:** This field is only available if you have Zuora Finance enabled.  # noqa: E501

        :return: The deferred_revenue_accounting_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._deferred_revenue_accounting_code

    @deferred_revenue_accounting_code.setter
    def deferred_revenue_accounting_code(self, deferred_revenue_accounting_code):
        """Sets the deferred_revenue_accounting_code of this InvoiceItem.

        The deferred revenue accounting code associated with the invoice item. **Note:** This field is only available if you have Zuora Finance enabled.  # noqa: E501

        :param deferred_revenue_accounting_code: The deferred_revenue_accounting_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._deferred_revenue_accounting_code = deferred_revenue_accounting_code

    @property
    def description(self):
        """Gets the description of this InvoiceItem.  # noqa: E501

        The description of the invoice item.  # noqa: E501

        :return: The description of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceItem.

        The description of the invoice item.  # noqa: E501

        :param description: The description of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def exclude_item_billing_from_revenue_accounting(self):
        """Gets the exclude_item_billing_from_revenue_accounting of this InvoiceItem.  # noqa: E501

        The flag to exclude the invoice item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The exclude_item_billing_from_revenue_accounting of this InvoiceItem.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_item_billing_from_revenue_accounting

    @exclude_item_billing_from_revenue_accounting.setter
    def exclude_item_billing_from_revenue_accounting(self, exclude_item_billing_from_revenue_accounting):
        """Sets the exclude_item_billing_from_revenue_accounting of this InvoiceItem.

        The flag to exclude the invoice item from revenue accounting.  **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param exclude_item_billing_from_revenue_accounting: The exclude_item_billing_from_revenue_accounting of this InvoiceItem.  # noqa: E501
        :type: bool
        """

        self._exclude_item_billing_from_revenue_accounting = exclude_item_billing_from_revenue_accounting

    @property
    def id(self):
        """Gets the id of this InvoiceItem.  # noqa: E501

        Item ID.  # noqa: E501

        :return: The id of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceItem.

        Item ID.  # noqa: E501

        :param id: The id of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_schedule_id(self):
        """Gets the invoice_schedule_id of this InvoiceItem.  # noqa: E501

        The ID of the invoice schedule item by which Invoice Schedule Item the invoice item is generated by when the Invoice Schedule Item is executed. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature in the **Early Adopter** phase enabled.  # noqa: E501

        :return: The invoice_schedule_id of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_schedule_id

    @invoice_schedule_id.setter
    def invoice_schedule_id(self, invoice_schedule_id):
        """Sets the invoice_schedule_id of this InvoiceItem.

        The ID of the invoice schedule item by which Invoice Schedule Item the invoice item is generated by when the Invoice Schedule Item is executed. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature in the **Early Adopter** phase enabled.  # noqa: E501

        :param invoice_schedule_id: The invoice_schedule_id of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_schedule_id = invoice_schedule_id

    @property
    def invoice_schedule_item_id(self):
        """Gets the invoice_schedule_item_id of this InvoiceItem.  # noqa: E501

        The ID of the invoice schedule item associated with the invoice item. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature in the **Early Adopter** phase enabled.  # noqa: E501

        :return: The invoice_schedule_item_id of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._invoice_schedule_item_id

    @invoice_schedule_item_id.setter
    def invoice_schedule_item_id(self, invoice_schedule_item_id):
        """Sets the invoice_schedule_item_id of this InvoiceItem.

        The ID of the invoice schedule item associated with the invoice item. **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Billing/Billing_and_Payments/Billing_Schedule\" target=\"_blank\">Billing Schedule</a> feature in the **Early Adopter** phase enabled.  # noqa: E501

        :param invoice_schedule_item_id: The invoice_schedule_item_id of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._invoice_schedule_item_id = invoice_schedule_item_id

    @property
    def item_type(self):
        """Gets the item_type of this InvoiceItem.  # noqa: E501

        The type of the invoice item.  # noqa: E501

        :return: The item_type of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type):
        """Sets the item_type of this InvoiceItem.

        The type of the invoice item.  # noqa: E501

        :param item_type: The item_type of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._item_type = item_type

    @property
    def processing_type(self):
        """Gets the processing_type of this InvoiceItem.  # noqa: E501


        :return: The processing_type of this InvoiceItem.  # noqa: E501
        :rtype: BillingDocumentItemProcessingType
        """
        return self._processing_type

    @processing_type.setter
    def processing_type(self, processing_type):
        """Sets the processing_type of this InvoiceItem.


        :param processing_type: The processing_type of this InvoiceItem.  # noqa: E501
        :type: BillingDocumentItemProcessingType
        """

        self._processing_type = processing_type

    @property
    def product_name(self):
        """Gets the product_name of this InvoiceItem.  # noqa: E501

        Name of the product associated with this item.  # noqa: E501

        :return: The product_name of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name):
        """Sets the product_name of this InvoiceItem.

        Name of the product associated with this item.  # noqa: E501

        :param product_name: The product_name of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._product_name = product_name

    @property
    def product_rate_plan_charge_id(self):
        """Gets the product_rate_plan_charge_id of this InvoiceItem.  # noqa: E501

        The ID of the product rate plan charge that the invoice item is created from.  # noqa: E501

        :return: The product_rate_plan_charge_id of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._product_rate_plan_charge_id

    @product_rate_plan_charge_id.setter
    def product_rate_plan_charge_id(self, product_rate_plan_charge_id):
        """Sets the product_rate_plan_charge_id of this InvoiceItem.

        The ID of the product rate plan charge that the invoice item is created from.  # noqa: E501

        :param product_rate_plan_charge_id: The product_rate_plan_charge_id of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._product_rate_plan_charge_id = product_rate_plan_charge_id

    @property
    def purchase_order_number(self):
        """Gets the purchase_order_number of this InvoiceItem.  # noqa: E501

        The purchase order number associated with the invoice item.  # noqa: E501

        :return: The purchase_order_number of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._purchase_order_number

    @purchase_order_number.setter
    def purchase_order_number(self, purchase_order_number):
        """Sets the purchase_order_number of this InvoiceItem.

        The purchase order number associated with the invoice item.  # noqa: E501

        :param purchase_order_number: The purchase_order_number of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._purchase_order_number = purchase_order_number

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceItem.  # noqa: E501

        The quantity of this item, in the configured unit of measure for the charge.  # noqa: E501

        :return: The quantity of this InvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceItem.

        The quantity of this item, in the configured unit of measure for the charge.  # noqa: E501

        :param quantity: The quantity of this InvoiceItem.  # noqa: E501
        :type: float
        """

        self._quantity = quantity

    @property
    def recognized_revenue_accounting_code(self):
        """Gets the recognized_revenue_accounting_code of this InvoiceItem.  # noqa: E501

        The recognized revenue accounting code associated with the invoice item. **Note:** This field is only available if you have Zuora Finance enabled.  # noqa: E501

        :return: The recognized_revenue_accounting_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._recognized_revenue_accounting_code

    @recognized_revenue_accounting_code.setter
    def recognized_revenue_accounting_code(self, recognized_revenue_accounting_code):
        """Sets the recognized_revenue_accounting_code of this InvoiceItem.

        The recognized revenue accounting code associated with the invoice item. **Note:** This field is only available if you have Zuora Finance enabled.  # noqa: E501

        :param recognized_revenue_accounting_code: The recognized_revenue_accounting_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._recognized_revenue_accounting_code = recognized_revenue_accounting_code

    @property
    def rev_rec_code(self):
        """Gets the rev_rec_code of this InvoiceItem.  # noqa: E501

        The revenue recognition code.  # noqa: E501

        :return: The rev_rec_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._rev_rec_code

    @rev_rec_code.setter
    def rev_rec_code(self, rev_rec_code):
        """Sets the rev_rec_code of this InvoiceItem.

        The revenue recognition code.  # noqa: E501

        :param rev_rec_code: The rev_rec_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._rev_rec_code = rev_rec_code

    @property
    def rev_rec_trigger_condition(self):
        """Gets the rev_rec_trigger_condition of this InvoiceItem.  # noqa: E501


        :return: The rev_rec_trigger_condition of this InvoiceItem.  # noqa: E501
        :rtype: RevRecTrigger
        """
        return self._rev_rec_trigger_condition

    @rev_rec_trigger_condition.setter
    def rev_rec_trigger_condition(self, rev_rec_trigger_condition):
        """Sets the rev_rec_trigger_condition of this InvoiceItem.


        :param rev_rec_trigger_condition: The rev_rec_trigger_condition of this InvoiceItem.  # noqa: E501
        :type: RevRecTrigger
        """

        self._rev_rec_trigger_condition = rev_rec_trigger_condition

    @property
    def revenue_recognition_rule_name(self):
        """Gets the revenue_recognition_rule_name of this InvoiceItem.  # noqa: E501

        The revenue recognition rule of the invoice item. **Note:** This field is only available if you have Zuora Finance enabled.  # noqa: E501

        :return: The revenue_recognition_rule_name of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._revenue_recognition_rule_name

    @revenue_recognition_rule_name.setter
    def revenue_recognition_rule_name(self, revenue_recognition_rule_name):
        """Sets the revenue_recognition_rule_name of this InvoiceItem.

        The revenue recognition rule of the invoice item. **Note:** This field is only available if you have Zuora Finance enabled.  # noqa: E501

        :param revenue_recognition_rule_name: The revenue_recognition_rule_name of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._revenue_recognition_rule_name = revenue_recognition_rule_name

    @property
    def service_end_date(self):
        """Gets the service_end_date of this InvoiceItem.  # noqa: E501

        The end date of the service period for this item, i.e., the last day of the service period, as _yyyy-mm-dd_.  # noqa: E501

        :return: The service_end_date of this InvoiceItem.  # noqa: E501
        :rtype: date
        """
        return self._service_end_date

    @service_end_date.setter
    def service_end_date(self, service_end_date):
        """Sets the service_end_date of this InvoiceItem.

        The end date of the service period for this item, i.e., the last day of the service period, as _yyyy-mm-dd_.  # noqa: E501

        :param service_end_date: The service_end_date of this InvoiceItem.  # noqa: E501
        :type: date
        """

        self._service_end_date = service_end_date

    @property
    def service_start_date(self):
        """Gets the service_start_date of this InvoiceItem.  # noqa: E501

        The start date of the service period for this item, as _yyyy-mm-dd_. For a one-time fee item, the date of the charge.  # noqa: E501

        :return: The service_start_date of this InvoiceItem.  # noqa: E501
        :rtype: date
        """
        return self._service_start_date

    @service_start_date.setter
    def service_start_date(self, service_start_date):
        """Sets the service_start_date of this InvoiceItem.

        The start date of the service period for this item, as _yyyy-mm-dd_. For a one-time fee item, the date of the charge.  # noqa: E501

        :param service_start_date: The service_start_date of this InvoiceItem.  # noqa: E501
        :type: date
        """

        self._service_start_date = service_start_date

    @property
    def sku(self):
        """Gets the sku of this InvoiceItem.  # noqa: E501

        The SKU of the invoice item.  # noqa: E501

        :return: The sku of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this InvoiceItem.

        The SKU of the invoice item.  # noqa: E501

        :param sku: The sku of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._sku = sku

    @property
    def sold_to_contact_id(self):
        """Gets the sold_to_contact_id of this InvoiceItem.  # noqa: E501

        The ID of the sold-to contact associated with the invoice item. **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.  # noqa: E501

        :return: The sold_to_contact_id of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._sold_to_contact_id

    @sold_to_contact_id.setter
    def sold_to_contact_id(self, sold_to_contact_id):
        """Sets the sold_to_contact_id of this InvoiceItem.

        The ID of the sold-to contact associated with the invoice item. **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.  # noqa: E501

        :param sold_to_contact_id: The sold_to_contact_id of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._sold_to_contact_id = sold_to_contact_id

    @property
    def sold_to_contact_snapshot_id(self):
        """Gets the sold_to_contact_snapshot_id of this InvoiceItem.  # noqa: E501

        The ID of the sold-to contact snapshot associated with the invoice item. **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.  # noqa: E501

        :return: The sold_to_contact_snapshot_id of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._sold_to_contact_snapshot_id

    @sold_to_contact_snapshot_id.setter
    def sold_to_contact_snapshot_id(self, sold_to_contact_snapshot_id):
        """Sets the sold_to_contact_snapshot_id of this InvoiceItem.

        The ID of the sold-to contact snapshot associated with the invoice item. **Note**: If you have the Flexible Billing Attributes feature disabled, the value of this field is `null`.  # noqa: E501

        :param sold_to_contact_snapshot_id: The sold_to_contact_snapshot_id of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._sold_to_contact_snapshot_id = sold_to_contact_snapshot_id

    @property
    def source_item_type(self):
        """Gets the source_item_type of this InvoiceItem.  # noqa: E501


        :return: The source_item_type of this InvoiceItem.  # noqa: E501
        :rtype: BillingDocumentItemSourceType
        """
        return self._source_item_type

    @source_item_type.setter
    def source_item_type(self, source_item_type):
        """Sets the source_item_type of this InvoiceItem.


        :param source_item_type: The source_item_type of this InvoiceItem.  # noqa: E501
        :type: BillingDocumentItemSourceType
        """

        self._source_item_type = source_item_type

    @property
    def subscription_id(self):
        """Gets the subscription_id of this InvoiceItem.  # noqa: E501

        The ID of the subscription for this item.  # noqa: E501

        :return: The subscription_id of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this InvoiceItem.

        The ID of the subscription for this item.  # noqa: E501

        :param subscription_id: The subscription_id of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def subscription_name(self):
        """Gets the subscription_name of this InvoiceItem.  # noqa: E501

        The name of the subscription for this item.  # noqa: E501

        :return: The subscription_name of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._subscription_name

    @subscription_name.setter
    def subscription_name(self, subscription_name):
        """Sets the subscription_name of this InvoiceItem.

        The name of the subscription for this item.  # noqa: E501

        :param subscription_name: The subscription_name of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._subscription_name = subscription_name

    @property
    def tax_amount(self):
        """Gets the tax_amount of this InvoiceItem.  # noqa: E501

        Tax applied to the charge.  # noqa: E501

        :return: The tax_amount of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this InvoiceItem.

        Tax applied to the charge.  # noqa: E501

        :param tax_amount: The tax_amount of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._tax_amount = tax_amount

    @property
    def tax_code(self):
        """Gets the tax_code of this InvoiceItem.  # noqa: E501

        The tax code of the invoice item. **Note** Only when taxation feature is enabled, this field can be presented.  # noqa: E501

        :return: The tax_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._tax_code

    @tax_code.setter
    def tax_code(self, tax_code):
        """Sets the tax_code of this InvoiceItem.

        The tax code of the invoice item. **Note** Only when taxation feature is enabled, this field can be presented.  # noqa: E501

        :param tax_code: The tax_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._tax_code = tax_code

    @property
    def tax_mode(self):
        """Gets the tax_mode of this InvoiceItem.  # noqa: E501


        :return: The tax_mode of this InvoiceItem.  # noqa: E501
        :rtype: TaxMode
        """
        return self._tax_mode

    @tax_mode.setter
    def tax_mode(self, tax_mode):
        """Sets the tax_mode of this InvoiceItem.


        :param tax_mode: The tax_mode of this InvoiceItem.  # noqa: E501
        :type: TaxMode
        """

        self._tax_mode = tax_mode

    @property
    def taxation_items(self):
        """Gets the taxation_items of this InvoiceItem.  # noqa: E501


        :return: The taxation_items of this InvoiceItem.  # noqa: E501
        :rtype: TaxationItemsData
        """
        return self._taxation_items

    @taxation_items.setter
    def taxation_items(self, taxation_items):
        """Sets the taxation_items of this InvoiceItem.


        :param taxation_items: The taxation_items of this InvoiceItem.  # noqa: E501
        :type: TaxationItemsData
        """

        self._taxation_items = taxation_items

    @property
    def unbilled_receivables_accounting_code(self):
        """Gets the unbilled_receivables_accounting_code of this InvoiceItem.  # noqa: E501

        The accounting code for unbilled receivables.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :return: The unbilled_receivables_accounting_code of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._unbilled_receivables_accounting_code

    @unbilled_receivables_accounting_code.setter
    def unbilled_receivables_accounting_code(self, unbilled_receivables_accounting_code):
        """Sets the unbilled_receivables_accounting_code of this InvoiceItem.

        The accounting code for unbilled receivables.         **Note**: This field is only available if you have the Billing - Revenue Integration feature enabled.    # noqa: E501

        :param unbilled_receivables_accounting_code: The unbilled_receivables_accounting_code of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._unbilled_receivables_accounting_code = unbilled_receivables_accounting_code

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this InvoiceItem.  # noqa: E501

        Unit used to measure consumption.  # noqa: E501

        :return: The unit_of_measure of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this InvoiceItem.

        Unit used to measure consumption.  # noqa: E501

        :param unit_of_measure: The unit_of_measure of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def unit_price(self):
        """Gets the unit_price of this InvoiceItem.  # noqa: E501

        The per-unit price of the invoice item.  # noqa: E501

        :return: The unit_price of this InvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InvoiceItem.

        The per-unit price of the invoice item.  # noqa: E501

        :param unit_price: The unit_price of this InvoiceItem.  # noqa: E501
        :type: float
        """

        self._unit_price = unit_price

    @property
    def number_of_deliveries(self):
        """Gets the number_of_deliveries of this InvoiceItem.  # noqa: E501

        The number of delivery for charge.  **Note**: This field is available only if you have the Delivery Pricing feature enabled.   # noqa: E501

        :return: The number_of_deliveries of this InvoiceItem.  # noqa: E501
        :rtype: float
        """
        return self._number_of_deliveries

    @number_of_deliveries.setter
    def number_of_deliveries(self, number_of_deliveries):
        """Sets the number_of_deliveries of this InvoiceItem.

        The number of delivery for charge.  **Note**: This field is available only if you have the Delivery Pricing feature enabled.   # noqa: E501

        :param number_of_deliveries: The number_of_deliveries of this InvoiceItem.  # noqa: E501
        :type: float
        """

        self._number_of_deliveries = number_of_deliveries

    @property
    def reflect_discount_in_net_amount(self):
        """Gets the reflect_discount_in_net_amount of this InvoiceItem.  # noqa: E501

        The flag to reflect Discount in Apply To Charge Net Amount.   # noqa: E501

        :return: The reflect_discount_in_net_amount of this InvoiceItem.  # noqa: E501
        :rtype: bool
        """
        return self._reflect_discount_in_net_amount

    @reflect_discount_in_net_amount.setter
    def reflect_discount_in_net_amount(self, reflect_discount_in_net_amount):
        """Sets the reflect_discount_in_net_amount of this InvoiceItem.

        The flag to reflect Discount in Apply To Charge Net Amount.   # noqa: E501

        :param reflect_discount_in_net_amount: The reflect_discount_in_net_amount of this InvoiceItem.  # noqa: E501
        :type: bool
        """

        self._reflect_discount_in_net_amount = reflect_discount_in_net_amount

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this InvoiceItem.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this InvoiceItem.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this InvoiceItem.  # noqa: E501

        Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this InvoiceItem.

        Status of the invoice item's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this InvoiceItem.  # noqa: E501

        Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this InvoiceItem.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this InvoiceItem.

        Date when the invoice item was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this InvoiceItem.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InvoiceItem, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InvoiceItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
