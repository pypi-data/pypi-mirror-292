# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreditMemo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'account_id': 'str',
        'account_number': 'str',
        'amount': 'float',
        'applied_amount': 'float',
        'auto_apply_upon_posting': 'bool',
        'bill_to_contact_id': 'str',
        'cancelled_by_id': 'str',
        'cancelled_on': 'str',
        'comment': 'str',
        'created_by_id': 'str',
        'created_date': 'str',
        'credit_memo_date': 'date',
        'currency': 'str',
        'exclude_from_auto_apply_rules': 'bool',
        'id': 'str',
        'invoice_group_number': 'str',
        'latest_pdf_file_id': 'str',
        'number': 'str',
        'posted_by_id': 'str',
        'posted_on': 'str',
        'reason_code': 'str',
        'referred_invoice_id': 'str',
        'refund_amount': 'float',
        'reversed': 'bool',
        'sequence_set_id': 'str',
        'source': 'str',
        'source_id': 'str',
        'source_type': 'MemoSourceType',
        'status': 'BillingDocumentStatus',
        'target_date': 'date',
        'tax_amount': 'float',
        'tax_message': 'str',
        'tax_status': 'TaxStatus',
        'total_tax_exempt_amount': 'float',
        'transferred_to_accounting': 'TransferredToAccountingStatus',
        'unapplied_amount': 'float',
        'updated_by_id': 'str',
        'updated_date': 'str',
        'e_invoice_status': 'EInvoiceStatus',
        'e_invoice_error_code': 'str',
        'e_invoice_error_message': 'str',
        'e_invoice_file_id': 'str',
        'bill_to_contact_snapshot_id': 'str',
        'organization_label': 'str',
        'integration_id__ns': 'str',
        'integration_status__ns': 'str',
        'origin__ns': 'str',
        'sync_date__ns': 'str',
        'transaction__ns': 'str'
    }

    attribute_map = {
        'account_id': 'accountId',
        'account_number': 'accountNumber',
        'amount': 'amount',
        'applied_amount': 'appliedAmount',
        'auto_apply_upon_posting': 'autoApplyUponPosting',
        'bill_to_contact_id': 'billToContactId',
        'cancelled_by_id': 'cancelledById',
        'cancelled_on': 'cancelledOn',
        'comment': 'comment',
        'created_by_id': 'createdById',
        'created_date': 'createdDate',
        'credit_memo_date': 'creditMemoDate',
        'currency': 'currency',
        'exclude_from_auto_apply_rules': 'excludeFromAutoApplyRules',
        'id': 'id',
        'invoice_group_number': 'invoiceGroupNumber',
        'latest_pdf_file_id': 'latestPDFFileId',
        'number': 'number',
        'posted_by_id': 'postedById',
        'posted_on': 'postedOn',
        'reason_code': 'reasonCode',
        'referred_invoice_id': 'referredInvoiceId',
        'refund_amount': 'refundAmount',
        'reversed': 'reversed',
        'sequence_set_id': 'sequenceSetId',
        'source': 'source',
        'source_id': 'sourceId',
        'source_type': 'sourceType',
        'status': 'status',
        'target_date': 'targetDate',
        'tax_amount': 'taxAmount',
        'tax_message': 'taxMessage',
        'tax_status': 'taxStatus',
        'total_tax_exempt_amount': 'totalTaxExemptAmount',
        'transferred_to_accounting': 'transferredToAccounting',
        'unapplied_amount': 'unappliedAmount',
        'updated_by_id': 'updatedById',
        'updated_date': 'updatedDate',
        'e_invoice_status': 'eInvoiceStatus',
        'e_invoice_error_code': 'eInvoiceErrorCode',
        'e_invoice_error_message': 'eInvoiceErrorMessage',
        'e_invoice_file_id': 'eInvoiceFileId',
        'bill_to_contact_snapshot_id': 'billToContactSnapshotId',
        'organization_label': 'organizationLabel',
        'integration_id__ns': 'IntegrationId__NS',
        'integration_status__ns': 'IntegrationStatus__NS',
        'origin__ns': 'Origin__NS',
        'sync_date__ns': 'SyncDate__NS',
        'transaction__ns': 'Transaction__NS'
    }

    def __init__(self, account_id=None, account_number=None, amount=None, applied_amount=None, auto_apply_upon_posting=None, bill_to_contact_id=None, cancelled_by_id=None, cancelled_on=None, comment=None, created_by_id=None, created_date=None, credit_memo_date=None, currency=None, exclude_from_auto_apply_rules=None, id=None, invoice_group_number=None, latest_pdf_file_id=None, number=None, posted_by_id=None, posted_on=None, reason_code=None, referred_invoice_id=None, refund_amount=None, reversed=None, sequence_set_id=None, source=None, source_id=None, source_type=None, status=None, target_date=None, tax_amount=None, tax_message=None, tax_status=None, total_tax_exempt_amount=None, transferred_to_accounting=None, unapplied_amount=None, updated_by_id=None, updated_date=None, e_invoice_status=None, e_invoice_error_code=None, e_invoice_error_message=None, e_invoice_file_id=None, bill_to_contact_snapshot_id=None, organization_label=None, integration_id__ns=None, integration_status__ns=None, origin__ns=None, sync_date__ns=None, transaction__ns=None):  # noqa: E501
        """CreditMemo - a model defined in Swagger"""  # noqa: E501
        self._account_id = None
        self._account_number = None
        self._amount = None
        self._applied_amount = None
        self._auto_apply_upon_posting = None
        self._bill_to_contact_id = None
        self._cancelled_by_id = None
        self._cancelled_on = None
        self._comment = None
        self._created_by_id = None
        self._created_date = None
        self._credit_memo_date = None
        self._currency = None
        self._exclude_from_auto_apply_rules = None
        self._id = None
        self._invoice_group_number = None
        self._latest_pdf_file_id = None
        self._number = None
        self._posted_by_id = None
        self._posted_on = None
        self._reason_code = None
        self._referred_invoice_id = None
        self._refund_amount = None
        self._reversed = None
        self._sequence_set_id = None
        self._source = None
        self._source_id = None
        self._source_type = None
        self._status = None
        self._target_date = None
        self._tax_amount = None
        self._tax_message = None
        self._tax_status = None
        self._total_tax_exempt_amount = None
        self._transferred_to_accounting = None
        self._unapplied_amount = None
        self._updated_by_id = None
        self._updated_date = None
        self._e_invoice_status = None
        self._e_invoice_error_code = None
        self._e_invoice_error_message = None
        self._e_invoice_file_id = None
        self._bill_to_contact_snapshot_id = None
        self._organization_label = None
        self._integration_id__ns = None
        self._integration_status__ns = None
        self._origin__ns = None
        self._sync_date__ns = None
        self._transaction__ns = None
        self.discriminator = None
        if account_id is not None:
            self.account_id = account_id
        if account_number is not None:
            self.account_number = account_number
        if amount is not None:
            self.amount = amount
        if applied_amount is not None:
            self.applied_amount = applied_amount
        if auto_apply_upon_posting is not None:
            self.auto_apply_upon_posting = auto_apply_upon_posting
        if bill_to_contact_id is not None:
            self.bill_to_contact_id = bill_to_contact_id
        if cancelled_by_id is not None:
            self.cancelled_by_id = cancelled_by_id
        if cancelled_on is not None:
            self.cancelled_on = cancelled_on
        if comment is not None:
            self.comment = comment
        if created_by_id is not None:
            self.created_by_id = created_by_id
        if created_date is not None:
            self.created_date = created_date
        if credit_memo_date is not None:
            self.credit_memo_date = credit_memo_date
        if currency is not None:
            self.currency = currency
        if exclude_from_auto_apply_rules is not None:
            self.exclude_from_auto_apply_rules = exclude_from_auto_apply_rules
        if id is not None:
            self.id = id
        if invoice_group_number is not None:
            self.invoice_group_number = invoice_group_number
        if latest_pdf_file_id is not None:
            self.latest_pdf_file_id = latest_pdf_file_id
        if number is not None:
            self.number = number
        if posted_by_id is not None:
            self.posted_by_id = posted_by_id
        if posted_on is not None:
            self.posted_on = posted_on
        if reason_code is not None:
            self.reason_code = reason_code
        if referred_invoice_id is not None:
            self.referred_invoice_id = referred_invoice_id
        if refund_amount is not None:
            self.refund_amount = refund_amount
        if reversed is not None:
            self.reversed = reversed
        if sequence_set_id is not None:
            self.sequence_set_id = sequence_set_id
        if source is not None:
            self.source = source
        if source_id is not None:
            self.source_id = source_id
        if source_type is not None:
            self.source_type = source_type
        if status is not None:
            self.status = status
        if target_date is not None:
            self.target_date = target_date
        if tax_amount is not None:
            self.tax_amount = tax_amount
        if tax_message is not None:
            self.tax_message = tax_message
        if tax_status is not None:
            self.tax_status = tax_status
        if total_tax_exempt_amount is not None:
            self.total_tax_exempt_amount = total_tax_exempt_amount
        if transferred_to_accounting is not None:
            self.transferred_to_accounting = transferred_to_accounting
        if unapplied_amount is not None:
            self.unapplied_amount = unapplied_amount
        if updated_by_id is not None:
            self.updated_by_id = updated_by_id
        if updated_date is not None:
            self.updated_date = updated_date
        if e_invoice_status is not None:
            self.e_invoice_status = e_invoice_status
        if e_invoice_error_code is not None:
            self.e_invoice_error_code = e_invoice_error_code
        if e_invoice_error_message is not None:
            self.e_invoice_error_message = e_invoice_error_message
        if e_invoice_file_id is not None:
            self.e_invoice_file_id = e_invoice_file_id
        if bill_to_contact_snapshot_id is not None:
            self.bill_to_contact_snapshot_id = bill_to_contact_snapshot_id
        if organization_label is not None:
            self.organization_label = organization_label
        if integration_id__ns is not None:
            self.integration_id__ns = integration_id__ns
        if integration_status__ns is not None:
            self.integration_status__ns = integration_status__ns
        if origin__ns is not None:
            self.origin__ns = origin__ns
        if sync_date__ns is not None:
            self.sync_date__ns = sync_date__ns
        if transaction__ns is not None:
            self.transaction__ns = transaction__ns

    @property
    def account_id(self):
        """Gets the account_id of this CreditMemo.  # noqa: E501

        The ID of the customer account associated with the credit memo.  # noqa: E501

        :return: The account_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this CreditMemo.

        The ID of the customer account associated with the credit memo.  # noqa: E501

        :param account_id: The account_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._account_id = account_id

    @property
    def account_number(self):
        """Gets the account_number of this CreditMemo.  # noqa: E501

        The number of the account associated with the credit memo.  # noqa: E501

        :return: The account_number of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this CreditMemo.

        The number of the account associated with the credit memo.  # noqa: E501

        :param account_number: The account_number of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def amount(self):
        """Gets the amount of this CreditMemo.  # noqa: E501

        The total amount of the credit memo.  # noqa: E501

        :return: The amount of this CreditMemo.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreditMemo.

        The total amount of the credit memo.  # noqa: E501

        :param amount: The amount of this CreditMemo.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def applied_amount(self):
        """Gets the applied_amount of this CreditMemo.  # noqa: E501

        The applied amount of the credit memo.  # noqa: E501

        :return: The applied_amount of this CreditMemo.  # noqa: E501
        :rtype: float
        """
        return self._applied_amount

    @applied_amount.setter
    def applied_amount(self, applied_amount):
        """Sets the applied_amount of this CreditMemo.

        The applied amount of the credit memo.  # noqa: E501

        :param applied_amount: The applied_amount of this CreditMemo.  # noqa: E501
        :type: float
        """

        self._applied_amount = applied_amount

    @property
    def auto_apply_upon_posting(self):
        """Gets the auto_apply_upon_posting of this CreditMemo.  # noqa: E501

        Whether the credit memo automatically applies to the invoice upon posting.  # noqa: E501

        :return: The auto_apply_upon_posting of this CreditMemo.  # noqa: E501
        :rtype: bool
        """
        return self._auto_apply_upon_posting

    @auto_apply_upon_posting.setter
    def auto_apply_upon_posting(self, auto_apply_upon_posting):
        """Sets the auto_apply_upon_posting of this CreditMemo.

        Whether the credit memo automatically applies to the invoice upon posting.  # noqa: E501

        :param auto_apply_upon_posting: The auto_apply_upon_posting of this CreditMemo.  # noqa: E501
        :type: bool
        """

        self._auto_apply_upon_posting = auto_apply_upon_posting

    @property
    def bill_to_contact_id(self):
        """Gets the bill_to_contact_id of this CreditMemo.  # noqa: E501

        The ID of the bill-to contact associated with the credit memo. The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :return: The bill_to_contact_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_contact_id

    @bill_to_contact_id.setter
    def bill_to_contact_id(self, bill_to_contact_id):
        """Sets the bill_to_contact_id of this CreditMemo.

        The ID of the bill-to contact associated with the credit memo. The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :param bill_to_contact_id: The bill_to_contact_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._bill_to_contact_id = bill_to_contact_id

    @property
    def cancelled_by_id(self):
        """Gets the cancelled_by_id of this CreditMemo.  # noqa: E501

        The ID of the Zuora user who cancelled the credit memo.  # noqa: E501

        :return: The cancelled_by_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_by_id

    @cancelled_by_id.setter
    def cancelled_by_id(self, cancelled_by_id):
        """Sets the cancelled_by_id of this CreditMemo.

        The ID of the Zuora user who cancelled the credit memo.  # noqa: E501

        :param cancelled_by_id: The cancelled_by_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._cancelled_by_id = cancelled_by_id

    @property
    def cancelled_on(self):
        """Gets the cancelled_on of this CreditMemo.  # noqa: E501

        The date and time when the credit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The cancelled_on of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._cancelled_on

    @cancelled_on.setter
    def cancelled_on(self, cancelled_on):
        """Sets the cancelled_on of this CreditMemo.

        The date and time when the credit memo was cancelled, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param cancelled_on: The cancelled_on of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._cancelled_on = cancelled_on

    @property
    def comment(self):
        """Gets the comment of this CreditMemo.  # noqa: E501

        Comments about the credit memo.  # noqa: E501

        :return: The comment of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this CreditMemo.

        Comments about the credit memo.  # noqa: E501

        :param comment: The comment of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def created_by_id(self):
        """Gets the created_by_id of this CreditMemo.  # noqa: E501

        The ID of the Zuora user who created the credit memo.  # noqa: E501

        :return: The created_by_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._created_by_id

    @created_by_id.setter
    def created_by_id(self, created_by_id):
        """Sets the created_by_id of this CreditMemo.

        The ID of the Zuora user who created the credit memo.  # noqa: E501

        :param created_by_id: The created_by_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._created_by_id = created_by_id

    @property
    def created_date(self):
        """Gets the created_date of this CreditMemo.  # noqa: E501

        The date and time when the credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.  # noqa: E501

        :return: The created_date of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this CreditMemo.

        The date and time when the credit memo was created, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-01 15:31:10.  # noqa: E501

        :param created_date: The created_date of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._created_date = created_date

    @property
    def credit_memo_date(self):
        """Gets the credit_memo_date of this CreditMemo.  # noqa: E501

        The date when the credit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.  # noqa: E501

        :return: The credit_memo_date of this CreditMemo.  # noqa: E501
        :rtype: date
        """
        return self._credit_memo_date

    @credit_memo_date.setter
    def credit_memo_date(self, credit_memo_date):
        """Sets the credit_memo_date of this CreditMemo.

        The date when the credit memo takes effect, in `yyyy-mm-dd` format. For example, 2017-05-20.  # noqa: E501

        :param credit_memo_date: The credit_memo_date of this CreditMemo.  # noqa: E501
        :type: date
        """

        self._credit_memo_date = credit_memo_date

    @property
    def currency(self):
        """Gets the currency of this CreditMemo.  # noqa: E501

        A currency defined in the web-based UI administrative settings.  # noqa: E501

        :return: The currency of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CreditMemo.

        A currency defined in the web-based UI administrative settings.  # noqa: E501

        :param currency: The currency of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def exclude_from_auto_apply_rules(self):
        """Gets the exclude_from_auto_apply_rules of this CreditMemo.  # noqa: E501

        Whether the credit memo is excluded from the rule of automatically applying unapplied credit memos to invoices and debit memos during payment runs.  # noqa: E501

        :return: The exclude_from_auto_apply_rules of this CreditMemo.  # noqa: E501
        :rtype: bool
        """
        return self._exclude_from_auto_apply_rules

    @exclude_from_auto_apply_rules.setter
    def exclude_from_auto_apply_rules(self, exclude_from_auto_apply_rules):
        """Sets the exclude_from_auto_apply_rules of this CreditMemo.

        Whether the credit memo is excluded from the rule of automatically applying unapplied credit memos to invoices and debit memos during payment runs.  # noqa: E501

        :param exclude_from_auto_apply_rules: The exclude_from_auto_apply_rules of this CreditMemo.  # noqa: E501
        :type: bool
        """

        self._exclude_from_auto_apply_rules = exclude_from_auto_apply_rules

    @property
    def id(self):
        """Gets the id of this CreditMemo.  # noqa: E501

        The unique ID of the credit memo.  # noqa: E501

        :return: The id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreditMemo.

        The unique ID of the credit memo.  # noqa: E501

        :param id: The id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def invoice_group_number(self):
        """Gets the invoice_group_number of this CreditMemo.  # noqa: E501

        The number of invoice group associated with the credit memo.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled.   # noqa: E501

        :return: The invoice_group_number of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._invoice_group_number

    @invoice_group_number.setter
    def invoice_group_number(self, invoice_group_number):
        """Sets the invoice_group_number of this CreditMemo.

        The number of invoice group associated with the credit memo.  **Note**: This field is available only if you have the <a href=\"https://knowledgecenter.zuora.com/Zuora_Billing/Bill_your_customers/Bill_customers_at_subscription_level/Flexible_Billing_Attributes\" target=\"_blank\">Flexible Billing Attributes</a> feature enabled.   # noqa: E501

        :param invoice_group_number: The invoice_group_number of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._invoice_group_number = invoice_group_number

    @property
    def latest_pdf_file_id(self):
        """Gets the latest_pdf_file_id of this CreditMemo.  # noqa: E501

        The ID of the latest PDF file generated for the credit memo.   # noqa: E501

        :return: The latest_pdf_file_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._latest_pdf_file_id

    @latest_pdf_file_id.setter
    def latest_pdf_file_id(self, latest_pdf_file_id):
        """Sets the latest_pdf_file_id of this CreditMemo.

        The ID of the latest PDF file generated for the credit memo.   # noqa: E501

        :param latest_pdf_file_id: The latest_pdf_file_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._latest_pdf_file_id = latest_pdf_file_id

    @property
    def number(self):
        """Gets the number of this CreditMemo.  # noqa: E501

        The unique identification number of the credit memo.   # noqa: E501

        :return: The number of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreditMemo.

        The unique identification number of the credit memo.   # noqa: E501

        :param number: The number of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def posted_by_id(self):
        """Gets the posted_by_id of this CreditMemo.  # noqa: E501

        The ID of the Zuora user who posted the credit memo.   # noqa: E501

        :return: The posted_by_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._posted_by_id

    @posted_by_id.setter
    def posted_by_id(self, posted_by_id):
        """Sets the posted_by_id of this CreditMemo.

        The ID of the Zuora user who posted the credit memo.   # noqa: E501

        :param posted_by_id: The posted_by_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._posted_by_id = posted_by_id

    @property
    def posted_on(self):
        """Gets the posted_on of this CreditMemo.  # noqa: E501

        The date and time when the credit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :return: The posted_on of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._posted_on

    @posted_on.setter
    def posted_on(self, posted_on):
        """Sets the posted_on of this CreditMemo.

        The date and time when the credit memo was posted, in `yyyy-mm-dd hh:mm:ss` format.  # noqa: E501

        :param posted_on: The posted_on of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._posted_on = posted_on

    @property
    def reason_code(self):
        """Gets the reason_code of this CreditMemo.  # noqa: E501

        A code identifying the reason for the transaction. The value must be an existing reason code or empty.  # noqa: E501

        :return: The reason_code of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this CreditMemo.

        A code identifying the reason for the transaction. The value must be an existing reason code or empty.  # noqa: E501

        :param reason_code: The reason_code of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._reason_code = reason_code

    @property
    def referred_invoice_id(self):
        """Gets the referred_invoice_id of this CreditMemo.  # noqa: E501

        The ID of a referred invoice.  # noqa: E501

        :return: The referred_invoice_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._referred_invoice_id

    @referred_invoice_id.setter
    def referred_invoice_id(self, referred_invoice_id):
        """Sets the referred_invoice_id of this CreditMemo.

        The ID of a referred invoice.  # noqa: E501

        :param referred_invoice_id: The referred_invoice_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._referred_invoice_id = referred_invoice_id

    @property
    def refund_amount(self):
        """Gets the refund_amount of this CreditMemo.  # noqa: E501

        The amount of the refund on the credit memo.  # noqa: E501

        :return: The refund_amount of this CreditMemo.  # noqa: E501
        :rtype: float
        """
        return self._refund_amount

    @refund_amount.setter
    def refund_amount(self, refund_amount):
        """Sets the refund_amount of this CreditMemo.

        The amount of the refund on the credit memo.  # noqa: E501

        :param refund_amount: The refund_amount of this CreditMemo.  # noqa: E501
        :type: float
        """

        self._refund_amount = refund_amount

    @property
    def reversed(self):
        """Gets the reversed of this CreditMemo.  # noqa: E501

        Whether the credit memo is reversed.  # noqa: E501

        :return: The reversed of this CreditMemo.  # noqa: E501
        :rtype: bool
        """
        return self._reversed

    @reversed.setter
    def reversed(self, reversed):
        """Sets the reversed of this CreditMemo.

        Whether the credit memo is reversed.  # noqa: E501

        :param reversed: The reversed of this CreditMemo.  # noqa: E501
        :type: bool
        """

        self._reversed = reversed

    @property
    def sequence_set_id(self):
        """Gets the sequence_set_id of this CreditMemo.  # noqa: E501

        The ID of the sequence set associated with the credit memo. The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :return: The sequence_set_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._sequence_set_id

    @sequence_set_id.setter
    def sequence_set_id(self, sequence_set_id):
        """Sets the sequence_set_id of this CreditMemo.

        The ID of the sequence set associated with the credit memo. The value of this field is `null` if you have the [Flexible Billing Attributes](https://knowledgecenter.zuora.com/Billing/Subscriptions/Flexible_Billing_Attributes) feature disabled.  # noqa: E501

        :param sequence_set_id: The sequence_set_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._sequence_set_id = sequence_set_id

    @property
    def source(self):
        """Gets the source of this CreditMemo.  # noqa: E501

        The source of the credit memo.  Possible values: - `BillRun`: The credit memo is generated by a bill run. - `API`: The credit memo is created by calling the [Invoice and collect](https://www.zuora.com/developer/api-references/api/operation/Post_TransactionInvoicePayment) operation, or by calling the Orders, Order Line Items, or Fulfillments API operations. - `ApiSubscribe`: The credit memo is created by calling the [Create subscription](https://www.zuora.com/developer/api-references/api/operation/Post_Subscription) and [Create account](https://www.zuora.com/developer/api-references/api/operation/Post_Account) operation. - `ApiAmend`: The credit memo is created by calling the [Update subscription](https://www.zuora.com/developer/api-references/api/operation/Put_Subscription) operation. - `AdhocFromPrpc`: The credit memo is created from a product rate plan charge through the Zuora UI or by calling the [Create a credit memo from a charge](https://www.zuora.com/developer/api-references/api/operation/Post_CreditMemoFromPrpc) operation. - `AdhocFromInvoice`: The credit memo is created from an invoice or created by reversing an invoice. You can create a credit memo from an invoice through the Zuora UI or by calling the [Create credit memo from invoice](https://www.zuora.com/developer/api-references/api/operation/Post_CreditMemoFromInvoice) operation. You can create a credit memo by reversing an invoice through the Zuora UI or by calling the [Reverse invoice](https://www.zuora.com/developer/api-references/api/operation/Put_ReverseInvoice) operation.  # noqa: E501

        :return: The source of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CreditMemo.

        The source of the credit memo.  Possible values: - `BillRun`: The credit memo is generated by a bill run. - `API`: The credit memo is created by calling the [Invoice and collect](https://www.zuora.com/developer/api-references/api/operation/Post_TransactionInvoicePayment) operation, or by calling the Orders, Order Line Items, or Fulfillments API operations. - `ApiSubscribe`: The credit memo is created by calling the [Create subscription](https://www.zuora.com/developer/api-references/api/operation/Post_Subscription) and [Create account](https://www.zuora.com/developer/api-references/api/operation/Post_Account) operation. - `ApiAmend`: The credit memo is created by calling the [Update subscription](https://www.zuora.com/developer/api-references/api/operation/Put_Subscription) operation. - `AdhocFromPrpc`: The credit memo is created from a product rate plan charge through the Zuora UI or by calling the [Create a credit memo from a charge](https://www.zuora.com/developer/api-references/api/operation/Post_CreditMemoFromPrpc) operation. - `AdhocFromInvoice`: The credit memo is created from an invoice or created by reversing an invoice. You can create a credit memo from an invoice through the Zuora UI or by calling the [Create credit memo from invoice](https://www.zuora.com/developer/api-references/api/operation/Post_CreditMemoFromInvoice) operation. You can create a credit memo by reversing an invoice through the Zuora UI or by calling the [Reverse invoice](https://www.zuora.com/developer/api-references/api/operation/Put_ReverseInvoice) operation.  # noqa: E501

        :param source: The source of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def source_id(self):
        """Gets the source_id of this CreditMemo.  # noqa: E501

        The ID of the credit memo source.   If a credit memo is generated from a bill run, the value is the number of the corresponding bill run. Otherwise, the value is `null`.   # noqa: E501

        :return: The source_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """Sets the source_id of this CreditMemo.

        The ID of the credit memo source.   If a credit memo is generated from a bill run, the value is the number of the corresponding bill run. Otherwise, the value is `null`.   # noqa: E501

        :param source_id: The source_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._source_id = source_id

    @property
    def source_type(self):
        """Gets the source_type of this CreditMemo.  # noqa: E501


        :return: The source_type of this CreditMemo.  # noqa: E501
        :rtype: MemoSourceType
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this CreditMemo.


        :param source_type: The source_type of this CreditMemo.  # noqa: E501
        :type: MemoSourceType
        """

        self._source_type = source_type

    @property
    def status(self):
        """Gets the status of this CreditMemo.  # noqa: E501


        :return: The status of this CreditMemo.  # noqa: E501
        :rtype: BillingDocumentStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CreditMemo.


        :param status: The status of this CreditMemo.  # noqa: E501
        :type: BillingDocumentStatus
        """

        self._status = status

    @property
    def target_date(self):
        """Gets the target_date of this CreditMemo.  # noqa: E501

        The target date for the credit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.   # noqa: E501

        :return: The target_date of this CreditMemo.  # noqa: E501
        :rtype: date
        """
        return self._target_date

    @target_date.setter
    def target_date(self, target_date):
        """Sets the target_date of this CreditMemo.

        The target date for the credit memo, in `yyyy-mm-dd` format. For example, 2017-07-20.   # noqa: E501

        :param target_date: The target_date of this CreditMemo.  # noqa: E501
        :type: date
        """

        self._target_date = target_date

    @property
    def tax_amount(self):
        """Gets the tax_amount of this CreditMemo.  # noqa: E501

        The amount of taxation.  # noqa: E501

        :return: The tax_amount of this CreditMemo.  # noqa: E501
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this CreditMemo.

        The amount of taxation.  # noqa: E501

        :param tax_amount: The tax_amount of this CreditMemo.  # noqa: E501
        :type: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_message(self):
        """Gets the tax_message of this CreditMemo.  # noqa: E501

        The message about the status of tax calculation related to the credit memo. If tax calculation fails in one credit memo, this field displays the reason for the failure.  # noqa: E501

        :return: The tax_message of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._tax_message

    @tax_message.setter
    def tax_message(self, tax_message):
        """Sets the tax_message of this CreditMemo.

        The message about the status of tax calculation related to the credit memo. If tax calculation fails in one credit memo, this field displays the reason for the failure.  # noqa: E501

        :param tax_message: The tax_message of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._tax_message = tax_message

    @property
    def tax_status(self):
        """Gets the tax_status of this CreditMemo.  # noqa: E501


        :return: The tax_status of this CreditMemo.  # noqa: E501
        :rtype: TaxStatus
        """
        return self._tax_status

    @tax_status.setter
    def tax_status(self, tax_status):
        """Sets the tax_status of this CreditMemo.


        :param tax_status: The tax_status of this CreditMemo.  # noqa: E501
        :type: TaxStatus
        """

        self._tax_status = tax_status

    @property
    def total_tax_exempt_amount(self):
        """Gets the total_tax_exempt_amount of this CreditMemo.  # noqa: E501

        The calculated tax amount excluded due to the exemption.  # noqa: E501

        :return: The total_tax_exempt_amount of this CreditMemo.  # noqa: E501
        :rtype: float
        """
        return self._total_tax_exempt_amount

    @total_tax_exempt_amount.setter
    def total_tax_exempt_amount(self, total_tax_exempt_amount):
        """Sets the total_tax_exempt_amount of this CreditMemo.

        The calculated tax amount excluded due to the exemption.  # noqa: E501

        :param total_tax_exempt_amount: The total_tax_exempt_amount of this CreditMemo.  # noqa: E501
        :type: float
        """

        self._total_tax_exempt_amount = total_tax_exempt_amount

    @property
    def transferred_to_accounting(self):
        """Gets the transferred_to_accounting of this CreditMemo.  # noqa: E501


        :return: The transferred_to_accounting of this CreditMemo.  # noqa: E501
        :rtype: TransferredToAccountingStatus
        """
        return self._transferred_to_accounting

    @transferred_to_accounting.setter
    def transferred_to_accounting(self, transferred_to_accounting):
        """Sets the transferred_to_accounting of this CreditMemo.


        :param transferred_to_accounting: The transferred_to_accounting of this CreditMemo.  # noqa: E501
        :type: TransferredToAccountingStatus
        """

        self._transferred_to_accounting = transferred_to_accounting

    @property
    def unapplied_amount(self):
        """Gets the unapplied_amount of this CreditMemo.  # noqa: E501

        The unapplied amount of the credit memo.  # noqa: E501

        :return: The unapplied_amount of this CreditMemo.  # noqa: E501
        :rtype: float
        """
        return self._unapplied_amount

    @unapplied_amount.setter
    def unapplied_amount(self, unapplied_amount):
        """Sets the unapplied_amount of this CreditMemo.

        The unapplied amount of the credit memo.  # noqa: E501

        :param unapplied_amount: The unapplied_amount of this CreditMemo.  # noqa: E501
        :type: float
        """

        self._unapplied_amount = unapplied_amount

    @property
    def updated_by_id(self):
        """Gets the updated_by_id of this CreditMemo.  # noqa: E501

        The ID of the Zuora user who last updated the credit memo.  # noqa: E501

        :return: The updated_by_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_id

    @updated_by_id.setter
    def updated_by_id(self, updated_by_id):
        """Sets the updated_by_id of this CreditMemo.

        The ID of the Zuora user who last updated the credit memo.  # noqa: E501

        :param updated_by_id: The updated_by_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._updated_by_id = updated_by_id

    @property
    def updated_date(self):
        """Gets the updated_date of this CreditMemo.  # noqa: E501

        The date and time when the credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.  # noqa: E501

        :return: The updated_date of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this CreditMemo.

        The date and time when the credit memo was last updated, in `yyyy-mm-dd hh:mm:ss` format. For example, 2017-03-02 15:36:10.  # noqa: E501

        :param updated_date: The updated_date of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._updated_date = updated_date

    @property
    def e_invoice_status(self):
        """Gets the e_invoice_status of this CreditMemo.  # noqa: E501


        :return: The e_invoice_status of this CreditMemo.  # noqa: E501
        :rtype: EInvoiceStatus
        """
        return self._e_invoice_status

    @e_invoice_status.setter
    def e_invoice_status(self, e_invoice_status):
        """Sets the e_invoice_status of this CreditMemo.


        :param e_invoice_status: The e_invoice_status of this CreditMemo.  # noqa: E501
        :type: EInvoiceStatus
        """

        self._e_invoice_status = e_invoice_status

    @property
    def e_invoice_error_code(self):
        """Gets the e_invoice_error_code of this CreditMemo.  # noqa: E501

        eInvoiceErrorCode.   # noqa: E501

        :return: The e_invoice_error_code of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._e_invoice_error_code

    @e_invoice_error_code.setter
    def e_invoice_error_code(self, e_invoice_error_code):
        """Sets the e_invoice_error_code of this CreditMemo.

        eInvoiceErrorCode.   # noqa: E501

        :param e_invoice_error_code: The e_invoice_error_code of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._e_invoice_error_code = e_invoice_error_code

    @property
    def e_invoice_error_message(self):
        """Gets the e_invoice_error_message of this CreditMemo.  # noqa: E501

        eInvoiceErrorMessage.   # noqa: E501

        :return: The e_invoice_error_message of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._e_invoice_error_message

    @e_invoice_error_message.setter
    def e_invoice_error_message(self, e_invoice_error_message):
        """Sets the e_invoice_error_message of this CreditMemo.

        eInvoiceErrorMessage.   # noqa: E501

        :param e_invoice_error_message: The e_invoice_error_message of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._e_invoice_error_message = e_invoice_error_message

    @property
    def e_invoice_file_id(self):
        """Gets the e_invoice_file_id of this CreditMemo.  # noqa: E501

        eInvoiceFileId.   # noqa: E501

        :return: The e_invoice_file_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._e_invoice_file_id

    @e_invoice_file_id.setter
    def e_invoice_file_id(self, e_invoice_file_id):
        """Sets the e_invoice_file_id of this CreditMemo.

        eInvoiceFileId.   # noqa: E501

        :param e_invoice_file_id: The e_invoice_file_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._e_invoice_file_id = e_invoice_file_id

    @property
    def bill_to_contact_snapshot_id(self):
        """Gets the bill_to_contact_snapshot_id of this CreditMemo.  # noqa: E501

        billToContactSnapshotId.   # noqa: E501

        :return: The bill_to_contact_snapshot_id of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._bill_to_contact_snapshot_id

    @bill_to_contact_snapshot_id.setter
    def bill_to_contact_snapshot_id(self, bill_to_contact_snapshot_id):
        """Sets the bill_to_contact_snapshot_id of this CreditMemo.

        billToContactSnapshotId.   # noqa: E501

        :param bill_to_contact_snapshot_id: The bill_to_contact_snapshot_id of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._bill_to_contact_snapshot_id = bill_to_contact_snapshot_id

    @property
    def organization_label(self):
        """Gets the organization_label of this CreditMemo.  # noqa: E501

        organization label.   # noqa: E501

        :return: The organization_label of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._organization_label

    @organization_label.setter
    def organization_label(self, organization_label):
        """Sets the organization_label of this CreditMemo.

        organization label.   # noqa: E501

        :param organization_label: The organization_label of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._organization_label = organization_label

    @property
    def integration_id__ns(self):
        """Gets the integration_id__ns of this CreditMemo.  # noqa: E501

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_id__ns of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._integration_id__ns

    @integration_id__ns.setter
    def integration_id__ns(self, integration_id__ns):
        """Sets the integration_id__ns of this CreditMemo.

        ID of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_id__ns: The integration_id__ns of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._integration_id__ns = integration_id__ns

    @property
    def integration_status__ns(self):
        """Gets the integration_status__ns of this CreditMemo.  # noqa: E501

        Status of the credit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The integration_status__ns of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._integration_status__ns

    @integration_status__ns.setter
    def integration_status__ns(self, integration_status__ns):
        """Sets the integration_status__ns of this CreditMemo.

        Status of the credit memo's synchronization with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param integration_status__ns: The integration_status__ns of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._integration_status__ns = integration_status__ns

    @property
    def origin__ns(self):
        """Gets the origin__ns of this CreditMemo.  # noqa: E501

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The origin__ns of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._origin__ns

    @origin__ns.setter
    def origin__ns(self, origin__ns):
        """Sets the origin__ns of this CreditMemo.

        Origin of the corresponding object in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param origin__ns: The origin__ns of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._origin__ns = origin__ns

    @property
    def sync_date__ns(self):
        """Gets the sync_date__ns of this CreditMemo.  # noqa: E501

        Date when the credit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The sync_date__ns of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._sync_date__ns

    @sync_date__ns.setter
    def sync_date__ns(self, sync_date__ns):
        """Sets the sync_date__ns of this CreditMemo.

        Date when the credit memo was synchronized with NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param sync_date__ns: The sync_date__ns of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._sync_date__ns = sync_date__ns

    @property
    def transaction__ns(self):
        """Gets the transaction__ns of this CreditMemo.  # noqa: E501

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :return: The transaction__ns of this CreditMemo.  # noqa: E501
        :rtype: str
        """
        return self._transaction__ns

    @transaction__ns.setter
    def transaction__ns(self, transaction__ns):
        """Sets the transaction__ns of this CreditMemo.

        Related transaction in NetSuite. Only available if you have installed the [Zuora Connector for NetSuite](https://www.zuora.com/connect/app/?appId=265).   # noqa: E501

        :param transaction__ns: The transaction__ns of this CreditMemo.  # noqa: E501
        :type: str
        """

        self._transaction__ns = transaction__ns

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditMemo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditMemo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
