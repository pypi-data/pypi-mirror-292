# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SubscriptionMetrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_number': 'str',
        'contracted_mrr': 'float',
        'contracted_net_mrr': 'float',
        'as_of_day_gross_mrr': 'float',
        'as_of_day_net_mrr': 'float'
    }

    attribute_map = {
        'subscription_number': 'subscriptionNumber',
        'contracted_mrr': 'contractedMrr',
        'contracted_net_mrr': 'contractedNetMrr',
        'as_of_day_gross_mrr': 'asOfDayGrossMrr',
        'as_of_day_net_mrr': 'asOfDayNetMrr'
    }

    def __init__(self, subscription_number=None, contracted_mrr=None, contracted_net_mrr=None, as_of_day_gross_mrr=None, as_of_day_net_mrr=None):  # noqa: E501
        """SubscriptionMetrics - a model defined in Swagger"""  # noqa: E501
        self._subscription_number = None
        self._contracted_mrr = None
        self._contracted_net_mrr = None
        self._as_of_day_gross_mrr = None
        self._as_of_day_net_mrr = None
        self.discriminator = None
        if subscription_number is not None:
            self.subscription_number = subscription_number
        if contracted_mrr is not None:
            self.contracted_mrr = contracted_mrr
        if contracted_net_mrr is not None:
            self.contracted_net_mrr = contracted_net_mrr
        if as_of_day_gross_mrr is not None:
            self.as_of_day_gross_mrr = as_of_day_gross_mrr
        if as_of_day_net_mrr is not None:
            self.as_of_day_net_mrr = as_of_day_net_mrr

    @property
    def subscription_number(self):
        """Gets the subscription_number of this SubscriptionMetrics.  # noqa: E501

        The number for the subscription.  # noqa: E501

        :return: The subscription_number of this SubscriptionMetrics.  # noqa: E501
        :rtype: str
        """
        return self._subscription_number

    @subscription_number.setter
    def subscription_number(self, subscription_number):
        """Sets the subscription_number of this SubscriptionMetrics.

        The number for the subscription.  # noqa: E501

        :param subscription_number: The subscription_number of this SubscriptionMetrics.  # noqa: E501
        :type: str
        """

        self._subscription_number = subscription_number

    @property
    def contracted_mrr(self):
        """Gets the contracted_mrr of this SubscriptionMetrics.  # noqa: E501

        Monthly recurring revenue of the subscription.  # noqa: E501

        :return: The contracted_mrr of this SubscriptionMetrics.  # noqa: E501
        :rtype: float
        """
        return self._contracted_mrr

    @contracted_mrr.setter
    def contracted_mrr(self, contracted_mrr):
        """Sets the contracted_mrr of this SubscriptionMetrics.

        Monthly recurring revenue of the subscription.  # noqa: E501

        :param contracted_mrr: The contracted_mrr of this SubscriptionMetrics.  # noqa: E501
        :type: float
        """

        self._contracted_mrr = contracted_mrr

    @property
    def contracted_net_mrr(self):
        """Gets the contracted_net_mrr of this SubscriptionMetrics.  # noqa: E501

        Monthly recurring revenue of the subscription rate plan inclusive of all the discounts applicable, including the fixed-amount discounts and percentage discounts.  # noqa: E501

        :return: The contracted_net_mrr of this SubscriptionMetrics.  # noqa: E501
        :rtype: float
        """
        return self._contracted_net_mrr

    @contracted_net_mrr.setter
    def contracted_net_mrr(self, contracted_net_mrr):
        """Sets the contracted_net_mrr of this SubscriptionMetrics.

        Monthly recurring revenue of the subscription rate plan inclusive of all the discounts applicable, including the fixed-amount discounts and percentage discounts.  # noqa: E501

        :param contracted_net_mrr: The contracted_net_mrr of this SubscriptionMetrics.  # noqa: E501
        :type: float
        """

        self._contracted_net_mrr = contracted_net_mrr

    @property
    def as_of_day_gross_mrr(self):
        """Gets the as_of_day_gross_mrr of this SubscriptionMetrics.  # noqa: E501

        Monthly recurring revenue of the subscription rate plan exclusive of any discounts applicable as of specified day.  # noqa: E501

        :return: The as_of_day_gross_mrr of this SubscriptionMetrics.  # noqa: E501
        :rtype: float
        """
        return self._as_of_day_gross_mrr

    @as_of_day_gross_mrr.setter
    def as_of_day_gross_mrr(self, as_of_day_gross_mrr):
        """Sets the as_of_day_gross_mrr of this SubscriptionMetrics.

        Monthly recurring revenue of the subscription rate plan exclusive of any discounts applicable as of specified day.  # noqa: E501

        :param as_of_day_gross_mrr: The as_of_day_gross_mrr of this SubscriptionMetrics.  # noqa: E501
        :type: float
        """

        self._as_of_day_gross_mrr = as_of_day_gross_mrr

    @property
    def as_of_day_net_mrr(self):
        """Gets the as_of_day_net_mrr of this SubscriptionMetrics.  # noqa: E501

        Monthly recurring revenue of the subscription rate plan inclusive of all the discounts applicable, including the fixed-amount discounts and percentage discounts as of specified day.  # noqa: E501

        :return: The as_of_day_net_mrr of this SubscriptionMetrics.  # noqa: E501
        :rtype: float
        """
        return self._as_of_day_net_mrr

    @as_of_day_net_mrr.setter
    def as_of_day_net_mrr(self, as_of_day_net_mrr):
        """Sets the as_of_day_net_mrr of this SubscriptionMetrics.

        Monthly recurring revenue of the subscription rate plan inclusive of all the discounts applicable, including the fixed-amount discounts and percentage discounts as of specified day.  # noqa: E501

        :param as_of_day_net_mrr: The as_of_day_net_mrr of this SubscriptionMetrics.  # noqa: E501
        :type: float
        """

        self._as_of_day_net_mrr = as_of_day_net_mrr

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubscriptionMetrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscriptionMetrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
