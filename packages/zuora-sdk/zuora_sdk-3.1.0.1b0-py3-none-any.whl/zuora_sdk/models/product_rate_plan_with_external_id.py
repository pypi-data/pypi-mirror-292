# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProductRatePlanWithExternalId(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_id_source_system': 'str',
        'description': 'str',
        'effective_end_date': 'date',
        'effective_start_date': 'date',
        'externally_managed_plan_ids': 'list[str]',
        'grade': 'float',
        'id': 'str',
        'name': 'str',
        'status': 'ProductRatePlanStatus',
        'success': 'bool'
    }

    attribute_map = {
        'external_id_source_system': 'ExternalIdSourceSystem',
        'description': 'description',
        'effective_end_date': 'effectiveEndDate',
        'effective_start_date': 'effectiveStartDate',
        'externally_managed_plan_ids': 'externallyManagedPlanIds',
        'grade': 'grade',
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'success': 'success'
    }

    def __init__(self, external_id_source_system=None, description=None, effective_end_date=None, effective_start_date=None, externally_managed_plan_ids=None, grade=None, id=None, name=None, status=None, success=None):  # noqa: E501
        """ProductRatePlanWithExternalId - a model defined in Swagger"""  # noqa: E501
        self._external_id_source_system = None
        self._description = None
        self._effective_end_date = None
        self._effective_start_date = None
        self._externally_managed_plan_ids = None
        self._grade = None
        self._id = None
        self._name = None
        self._status = None
        self._success = None
        self.discriminator = None
        if external_id_source_system is not None:
            self.external_id_source_system = external_id_source_system
        if description is not None:
            self.description = description
        if effective_end_date is not None:
            self.effective_end_date = effective_end_date
        if effective_start_date is not None:
            self.effective_start_date = effective_start_date
        if externally_managed_plan_ids is not None:
            self.externally_managed_plan_ids = externally_managed_plan_ids
        if grade is not None:
            self.grade = grade
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if status is not None:
            self.status = status
        if success is not None:
            self.success = success

    @property
    def external_id_source_system(self):
        """Gets the external_id_source_system of this ProductRatePlanWithExternalId.  # noqa: E501

        The combination of `externallyManagedPlanId` and `externalIdSourceSystem` is the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.   # noqa: E501

        :return: The external_id_source_system of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: str
        """
        return self._external_id_source_system

    @external_id_source_system.setter
    def external_id_source_system(self, external_id_source_system):
        """Sets the external_id_source_system of this ProductRatePlanWithExternalId.

        The combination of `externallyManagedPlanId` and `externalIdSourceSystem` is the unique identifier for the rate plan purchased on a third-party store. This field is used to represent a subscription rate plan created through third-party stores.   # noqa: E501

        :param external_id_source_system: The external_id_source_system of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: str
        """

        self._external_id_source_system = external_id_source_system

    @property
    def description(self):
        """Gets the description of this ProductRatePlanWithExternalId.  # noqa: E501

        The short description of the product rate plan.   # noqa: E501

        :return: The description of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductRatePlanWithExternalId.

        The short description of the product rate plan.   # noqa: E501

        :param description: The description of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def effective_end_date(self):
        """Gets the effective_end_date of this ProductRatePlanWithExternalId.  # noqa: E501

        The end date of the product rate plan.   # noqa: E501

        :return: The effective_end_date of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: date
        """
        return self._effective_end_date

    @effective_end_date.setter
    def effective_end_date(self, effective_end_date):
        """Sets the effective_end_date of this ProductRatePlanWithExternalId.

        The end date of the product rate plan.   # noqa: E501

        :param effective_end_date: The effective_end_date of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: date
        """

        self._effective_end_date = effective_end_date

    @property
    def effective_start_date(self):
        """Gets the effective_start_date of this ProductRatePlanWithExternalId.  # noqa: E501

        The start date of the product rate plan.   # noqa: E501

        :return: The effective_start_date of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: date
        """
        return self._effective_start_date

    @effective_start_date.setter
    def effective_start_date(self, effective_start_date):
        """Sets the effective_start_date of this ProductRatePlanWithExternalId.

        The start date of the product rate plan.   # noqa: E501

        :param effective_start_date: The effective_start_date of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: date
        """

        self._effective_start_date = effective_start_date

    @property
    def externally_managed_plan_ids(self):
        """Gets the externally_managed_plan_ids of this ProductRatePlanWithExternalId.  # noqa: E501

        The unique identifier for the product rate plan in a third-party store. This field is used to represent a rate plan created through third-party stores.   # noqa: E501

        :return: The externally_managed_plan_ids of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: list[str]
        """
        return self._externally_managed_plan_ids

    @externally_managed_plan_ids.setter
    def externally_managed_plan_ids(self, externally_managed_plan_ids):
        """Sets the externally_managed_plan_ids of this ProductRatePlanWithExternalId.

        The unique identifier for the product rate plan in a third-party store. This field is used to represent a rate plan created through third-party stores.   # noqa: E501

        :param externally_managed_plan_ids: The externally_managed_plan_ids of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: list[str]
        """

        self._externally_managed_plan_ids = externally_managed_plan_ids

    @property
    def grade(self):
        """Gets the grade of this ProductRatePlanWithExternalId.  # noqa: E501

        The grade of the product rate plan.  **Note**: This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :return: The grade of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: float
        """
        return self._grade

    @grade.setter
    def grade(self, grade):
        """Sets the grade of this ProductRatePlanWithExternalId.

        The grade of the product rate plan.  **Note**: This field is in the **Early Adopter** phase. We are actively soliciting feedback from a small set of early adopters before releasing it as generally available. If you want to join this early adopter program, submit a request at [Zuora Global Support](http://support.zuora.com/).   # noqa: E501

        :param grade: The grade of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: float
        """

        self._grade = grade

    @property
    def id(self):
        """Gets the id of this ProductRatePlanWithExternalId.  # noqa: E501

        The unique product rate plan ID.   # noqa: E501

        :return: The id of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductRatePlanWithExternalId.

        The unique product rate plan ID.   # noqa: E501

        :param id: The id of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductRatePlanWithExternalId.  # noqa: E501

        The name of the product rate plan.   # noqa: E501

        :return: The name of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductRatePlanWithExternalId.

        The name of the product rate plan.   # noqa: E501

        :param name: The name of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this ProductRatePlanWithExternalId.  # noqa: E501


        :return: The status of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: ProductRatePlanStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProductRatePlanWithExternalId.


        :param status: The status of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: ProductRatePlanStatus
        """

        self._status = status

    @property
    def success(self):
        """Gets the success of this ProductRatePlanWithExternalId.  # noqa: E501

        Returns `true` if the request was processed successfully.   # noqa: E501

        :return: The success of this ProductRatePlanWithExternalId.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this ProductRatePlanWithExternalId.

        Returns `true` if the request was processed successfully.   # noqa: E501

        :param success: The success of this ProductRatePlanWithExternalId.  # noqa: E501
        :type: bool
        """

        self._success = success

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductRatePlanWithExternalId, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductRatePlanWithExternalId):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
