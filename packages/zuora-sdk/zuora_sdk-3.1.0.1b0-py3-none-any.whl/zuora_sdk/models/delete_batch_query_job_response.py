# coding: utf-8

"""
    Zuora API Reference

    REST API reference for the Zuora Billing, Payments, and Central Platform! Check out the [REST API Overview](https://www.zuora.com/developer/api-references/api/overview/).  # noqa: E501

    OpenAPI spec version: 2024-05-20
    Contact: docs@zuora.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeleteBatchQueryJobResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'batches': 'list[DeleteBatchQueryResponse]',
        'format': 'BatchQueryFormat',
        'id': 'str',
        'name': 'str',
        'encrypted': 'DeleteBatchQueryResponseEncrypted',
        'use_last_completed_job_queries': 'bool',
        'offset': 'float',
        'partner': 'str',
        'status': 'BatchQueryStatus',
        'localized_status': 'BatchQueryStatus',
        'version': 'float',
        'error_code': 'str',
        'message': 'str'
    }

    attribute_map = {
        'batches': 'batches',
        'format': 'format',
        'id': 'id',
        'name': 'name',
        'encrypted': 'encrypted',
        'use_last_completed_job_queries': 'useLastCompletedJobQueries',
        'offset': 'offset',
        'partner': 'partner',
        'status': 'status',
        'localized_status': 'localizedStatus',
        'version': 'version',
        'error_code': 'errorCode',
        'message': 'message'
    }

    def __init__(self, batches=None, format=None, id=None, name=None, encrypted=None, use_last_completed_job_queries=None, offset=None, partner=None, status=None, localized_status=None, version=None, error_code=None, message=None):  # noqa: E501
        """DeleteBatchQueryJobResponse - a model defined in Swagger"""  # noqa: E501
        self._batches = None
        self._format = None
        self._id = None
        self._name = None
        self._encrypted = None
        self._use_last_completed_job_queries = None
        self._offset = None
        self._partner = None
        self._status = None
        self._localized_status = None
        self._version = None
        self._error_code = None
        self._message = None
        self.discriminator = None
        if batches is not None:
            self.batches = batches
        if format is not None:
            self.format = format
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if encrypted is not None:
            self.encrypted = encrypted
        if use_last_completed_job_queries is not None:
            self.use_last_completed_job_queries = use_last_completed_job_queries
        if offset is not None:
            self.offset = offset
        if partner is not None:
            self.partner = partner
        if status is not None:
            self.status = status
        if localized_status is not None:
            self.localized_status = localized_status
        if version is not None:
            self.version = version
        if error_code is not None:
            self.error_code = error_code
        if message is not None:
            self.message = message

    @property
    def batches(self):
        """Gets the batches of this DeleteBatchQueryJobResponse.  # noqa: E501

        A JSON array object that contains a list of batch objects.   # noqa: E501

        :return: The batches of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: list[DeleteBatchQueryResponse]
        """
        return self._batches

    @batches.setter
    def batches(self, batches):
        """Sets the batches of this DeleteBatchQueryJobResponse.

        A JSON array object that contains a list of batch objects.   # noqa: E501

        :param batches: The batches of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: list[DeleteBatchQueryResponse]
        """

        self._batches = batches

    @property
    def format(self):
        """Gets the format of this DeleteBatchQueryJobResponse.  # noqa: E501


        :return: The format of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: BatchQueryFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this DeleteBatchQueryJobResponse.


        :param format: The format of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: BatchQueryFormat
        """

        self._format = format

    @property
    def id(self):
        """Gets the id of this DeleteBatchQueryJobResponse.  # noqa: E501

        The job ID created for the AQuA API request. The job ID can be used for querying for the query status.   The ID exists only if the JSON request can be parsed and validated successfully. Otherwise, the job ID is null.   # noqa: E501

        :return: The id of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeleteBatchQueryJobResponse.

        The job ID created for the AQuA API request. The job ID can be used for querying for the query status.   The ID exists only if the JSON request can be parsed and validated successfully. Otherwise, the job ID is null.   # noqa: E501

        :param id: The id of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DeleteBatchQueryJobResponse.  # noqa: E501

        The name of the job. 32 character limit.   # noqa: E501

        :return: The name of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeleteBatchQueryJobResponse.

        The name of the job. 32 character limit.   # noqa: E501

        :param name: The name of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def encrypted(self):
        """Gets the encrypted of this DeleteBatchQueryJobResponse.  # noqa: E501


        :return: The encrypted of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: DeleteBatchQueryResponseEncrypted
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this DeleteBatchQueryJobResponse.


        :param encrypted: The encrypted of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: DeleteBatchQueryResponseEncrypted
        """

        self._encrypted = encrypted

    @property
    def use_last_completed_job_queries(self):
        """Gets the use_last_completed_job_queries of this DeleteBatchQueryJobResponse.  # noqa: E501

        If this flag is set to `true`, then all the previous queries are merged with existing queries.  If the flag is set to `false`, then the previous queries are ignored, and only the new query is executed.   # noqa: E501

        :return: The use_last_completed_job_queries of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: bool
        """
        return self._use_last_completed_job_queries

    @use_last_completed_job_queries.setter
    def use_last_completed_job_queries(self, use_last_completed_job_queries):
        """Sets the use_last_completed_job_queries of this DeleteBatchQueryJobResponse.

        If this flag is set to `true`, then all the previous queries are merged with existing queries.  If the flag is set to `false`, then the previous queries are ignored, and only the new query is executed.   # noqa: E501

        :param use_last_completed_job_queries: The use_last_completed_job_queries of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: bool
        """

        self._use_last_completed_job_queries = use_last_completed_job_queries

    @property
    def offset(self):
        """Gets the offset of this DeleteBatchQueryJobResponse.  # noqa: E501

        This field specifies the time offset for AQuA queries in stateful mode. It is an integer in the range 0 to 3,600 seconds.  For example, if you set this field to 600 seconds and you post a query in stateful mode at 2:00 AM, it will query against data created or updated between the completion time of the previous query and 1:50 AM.  The value of this field will override the value you configured in **Settings** > **Administration** > **AQuA API Stateful Mode Time Offset**.       # noqa: E501

        :return: The offset of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: float
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this DeleteBatchQueryJobResponse.

        This field specifies the time offset for AQuA queries in stateful mode. It is an integer in the range 0 to 3,600 seconds.  For example, if you set this field to 600 seconds and you post a query in stateful mode at 2:00 AM, it will query against data created or updated between the completion time of the previous query and 1:50 AM.  The value of this field will override the value you configured in **Settings** > **Administration** > **AQuA API Stateful Mode Time Offset**.       # noqa: E501

        :param offset: The offset of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: float
        """

        self._offset = offset

    @property
    def partner(self):
        """Gets the partner of this DeleteBatchQueryJobResponse.  # noqa: E501

        The partner field indicates the unique ID of a data integration partner. The dropdown list of this field displays partner IDs for the past thirty days.  It must be used together with \"project\" field to uniquely identify a data integration target.  For example, if a continuous AQuA session is to retrieve data incrementally for a Salesforce.com Org 00170000011K3Ub, you can use partner as \"Salesforce\", and \"project\" as \"00170000011K3Ub.\"   This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.  **Note**: Zuora highly recommends you use the stateless mode instead of the stateful mode to extract bulk data. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Bulk_data__extraction_from_Zuora_using_AQuA\" target=\"_blank\">Bulk data extraction from Zuora using AQuA</a> for best practices.  **Note**: Submit a request at <a href=\"http://support.zuora.com\" target=\"_blank\">Zuora Global Support</a> to obtain a partner ID.   # noqa: E501

        :return: The partner of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this DeleteBatchQueryJobResponse.

        The partner field indicates the unique ID of a data integration partner. The dropdown list of this field displays partner IDs for the past thirty days.  It must be used together with \"project\" field to uniquely identify a data integration target.  For example, if a continuous AQuA session is to retrieve data incrementally for a Salesforce.com Org 00170000011K3Ub, you can use partner as \"Salesforce\", and \"project\" as \"00170000011K3Ub.\"   This field is required only if you are using AQuA in stateful mode. Otherwise, if you are using AQuA in stateless mode, partner field can be null.  **Note**: Zuora highly recommends you use the stateless mode instead of the stateful mode to extract bulk data. See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/Bulk_data__extraction_from_Zuora_using_AQuA\" target=\"_blank\">Bulk data extraction from Zuora using AQuA</a> for best practices.  **Note**: Submit a request at <a href=\"http://support.zuora.com\" target=\"_blank\">Zuora Global Support</a> to obtain a partner ID.   # noqa: E501

        :param partner: The partner of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: str
        """

        self._partner = partner

    @property
    def status(self):
        """Gets the status of this DeleteBatchQueryJobResponse.  # noqa: E501


        :return: The status of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: BatchQueryStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DeleteBatchQueryJobResponse.


        :param status: The status of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: BatchQueryStatus
        """

        self._status = status

    @property
    def localized_status(self):
        """Gets the localized_status of this DeleteBatchQueryJobResponse.  # noqa: E501


        :return: The localized_status of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: BatchQueryStatus
        """
        return self._localized_status

    @localized_status.setter
    def localized_status(self, localized_status):
        """Sets the localized_status of this DeleteBatchQueryJobResponse.


        :param localized_status: The localized_status of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: BatchQueryStatus
        """

        self._localized_status = localized_status

    @property
    def version(self):
        """Gets the version of this DeleteBatchQueryJobResponse.  # noqa: E501

        The API version you want to use.   The supported versions are as follows:   - `1.1`. It supports both modes   - `1.0`. Default. It supports stateless modes only.  See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/BA_Stateless_and_Stateful_Modes\" target=\"_blank\">Stateless and stateful modes</a> for more information.   # noqa: E501

        :return: The version of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DeleteBatchQueryJobResponse.

        The API version you want to use.   The supported versions are as follows:   - `1.1`. It supports both modes   - `1.0`. Default. It supports stateless modes only.  See <a href=\"https://knowledgecenter.zuora.com/Zuora_Central_Platform/API/AB_Aggregate_Query_API/BA_Stateless_and_Stateful_Modes\" target=\"_blank\">Stateless and stateful modes</a> for more information.   # noqa: E501

        :param version: The version of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: float
        """

        self._version = version

    @property
    def error_code(self):
        """Gets the error_code of this DeleteBatchQueryJobResponse.  # noqa: E501

        The error code used to identify the failure reason.  # noqa: E501

        :return: The error_code of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this DeleteBatchQueryJobResponse.

        The error code used to identify the failure reason.  # noqa: E501

        :param error_code: The error_code of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: str
        """

        self._error_code = error_code

    @property
    def message(self):
        """Gets the message of this DeleteBatchQueryJobResponse.  # noqa: E501

        The error message used to describe the failure reason detail.  # noqa: E501

        :return: The message of this DeleteBatchQueryJobResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DeleteBatchQueryJobResponse.

        The error message used to describe the failure reason detail.  # noqa: E501

        :param message: The message of this DeleteBatchQueryJobResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeleteBatchQueryJobResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeleteBatchQueryJobResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
