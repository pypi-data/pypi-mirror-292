Metadata-Version: 2.1
Name: data-agent
Version: 0.3.2
Summary: Data Agent is a python library for pipelining real-time and historical data to and from industrial historians and control systems
Home-page: https://github.com/imubit/data-agent/
Author: Meir Tseitlin
License: LGPLv3
Project-URL: Documentation, https://github.com/imubit/data-agent/
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Programming Language :: Python
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM
License-File: LICENSE.txt
Requires-Dist: confuse
Requires-Dist: pandas
Requires-Dist: aiomisc
Requires-Dist: aiodebug
Requires-Dist: apscheduler
Requires-Dist: cachetools
Requires-Dist: amqp-fabric
Requires-Dist: pywin32 >=1.0 ; platform_system == "Windows"
Requires-Dist: importlib-metadata ; python_version < "3.8"
Provides-Extra: testing
Requires-Dist: setuptools ; extra == 'testing'
Requires-Dist: pytest ; extra == 'testing'
Requires-Dist: pytest-cov ; extra == 'testing'
Requires-Dist: pytest-asyncio ; extra == 'testing'
Requires-Dist: aiomisc-pytest ; extra == 'testing'

[![PyPI-Server](https://img.shields.io/pypi/v/data-agent.svg)](https://pypi.org/project/data-agent/)
[![Coveralls](https://img.shields.io/coveralls/github/imubit/data-agent/main.svg)](https://coveralls.io/r/imubit/data-agent)



# Data Agent

Python package for accessing real-time and historical data on industrial historians and control systems.
Different historian protocols and APIs are implemented through standalone plugins.

*THIS PACKAGE IS USELESS WITHOUT EXTERNAL PLUGINS IMPLEMENTING TARGET SYSTEM CUSTOM DATA ACCESS PROTOCOLS*

## Description

The package provides a unified data access API having several usage scenarios:

* As a Python package
* As a command line CLI
* As a service (Windows or Linux) using AMQ protocol

## Installation

```commandline
pip install data-agent
```

Install the plugins required for communicating with the target systems

## Python Package Usage

```python
from data_agent.local_agent import LocalAgent

with LocalAgent() as agent:

    agent.api.list_supported_connectors()
    agent.api.create_connection(...)
```


## Command Line Usage

```bash
dagent --service.id my_service --broker.uri amqp://guest:guest@192.168.4.23/
```
