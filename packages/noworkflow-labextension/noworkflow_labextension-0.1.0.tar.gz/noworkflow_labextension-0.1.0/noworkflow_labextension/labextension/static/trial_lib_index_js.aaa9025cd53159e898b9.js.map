{"version":3,"file":"trial_lib_index_js.aaa9025cd53159e898b9.js","mappings":";;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;;;;;;;;;;;ACDhD;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB,mBAAO,CAAC,oEAAe;AACvB,mBAAmB,mBAAO,CAAC,0DAAU;AACrC,uBAAuB,mBAAO,CAAC,kEAAc;AAC7C,uBAAuB,mBAAO,CAAC,kEAAc;AAC7C,kBAAkB,mBAAO,CAAC,wDAAS;AACnC,WAAW,mBAAO,CAAC,uEAAY;AAC/B,gBAAgB,mBAAO,CAAC,8FAAmB;AAC3C;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,oBAAoB;AAChuCAAuC,mCAAmC;AAC1E;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,uBAAuB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,gEAAgE;AAChE,gEAAgE;AAChE,gEAAgE;AAChE,gEAAgE;AAChE,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,GAAG,IAAI;AACnC;AACA;AACA,gBAAgB,OAAO,GAAG,OAAO;AACjC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C;AACA;AACA,8BAA8B;AAC9B;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,UAAU,GAAG;AACzC,gBAAgB,eAAe,GAAG,eAAe;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,GAAG,IAAI;AACnC,gBAAgB,GAAG,IAAI,GAAG;AAC1B;AACA;AACA;AACA,4BAA4B,GAAG,IAAI;AACnC;AACA;AACA,gBAAgB,OAAO,GAAG,OAAO;AACjC;AACA;AACA;AACA;AACA;AACA,gCAAgC,GAAG,IAAI;AACvC,kBAAkB,oBAAoB,IAAI,GAAG;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,GAAG,IAAI;AACvC,oBAAoB,eAAe,EAAE,cAAc;AACnD,gBAAgB,eAAe,EAAE,cAAc;AAC/C,gBAAgB,IAAI,EAAE,GAAG;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,IAAI,EAAE;AAC9B,gBAAgB,eAAe,EAAE,GAAG;AACpC,gBAAgB,eAAe,EAAE,GAAG;AACpC,gBAAgB,IAAI,EAAE,GAAG;AACzB,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT,uBAAuB;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;ACnxBL;AACb;AACA;AACA;AACA;AACA,eAAe,oCAAoC;AACnD;AACA;AACA,CAAC;AACD;AACA;AACA,CAAC;AACD;AACA;AACA;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D,aAAa,mBAAO,CAAC,wCAAU;AAC/B,aAAa,mBAAO,CAAC,gDAAc;AACnC,aAAa,mBAAO,CAAC,sCAAS;;;;;;;;;;;AClBjB;AACb,8CAA6C,EAAE,aAAa,EAAC","sources":["webpack://@noworkflow/labextension/../trial/lib/config.js","webpack://@noworkflow/labextension/../trial/lib/graph.js","webpack://@noworkflow/labextension/../trial/lib/index.js","webpack://@noworkflow/labextension/../trial/lib/structures.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TrialGraph = void 0;\nrequire(\"d3-transition\");\nconst d3_color_1 = require(\"d3-color\");\nconst d3_hierarchy_1 = require(\"d3-hierarchy\");\nconst d3_selection_1 = require(\"d3-selection\");\nconst d3_zoom_1 = require(\"d3-zoom\");\nconst fs = require(\"file-saver\");\nconst utils_1 = require(\"@noworkflow/utils\");\nclass TrialGraph {\n    constructor(graphId, div, config = {}) {\n        this.i = 0;\n        let defaultConfig = {\n            customSize: function (g) {\n                return [\n                    g.config.width,\n                    g.config.height,\n                ];\n            },\n            customMouseOver: (g, d) => false,\n            customMouseOut: (g, d) => false,\n            customForm: (g, form) => null,\n            customLoadTooltip: (g, div, text, trialid, aid) => null,\n            duration: 750,\n            top: 50,\n            right: 30,\n            bottom: 80,\n            left: 30,\n            width: 900,\n            height: 500,\n            useTooltip: false,\n            fontSize: 10,\n            labelFontSize: 10,\n            nodeSizeX: 47,\n            nodeSizeY: 100,\n            queryTooltip: false\n        };\n        this.config = Object.assign({}, defaultConfig, config);\n        this.graphId = graphId;\n        this.zoom = (0, d3_zoom_1.zoom)()\n            .on(\"zoom\", (event) => {\n            return this.zoomFunction(event);\n        })\n            .on(\"start\", () => (0, d3_selection_1.select)('body').style(\"cursor\", \"move\"))\n            .on(\"end\", () => (0, d3_selection_1.select)('body').style(\"cursor\", \"auto\"))\n            .wheelDelta(function () {\n            const e = event;\n            return -e.deltaY * (e.deltaMode ? 120 : 1) / 2000;\n        });\n        this.div = (0, d3_selection_1.select)(div);\n        this.form = this.div\n            .append(\"form\")\n            .classed(\"trial-toolbar\", true);\n        this.svg = (0, d3_selection_1.select)(div)\n            .append(\"div\")\n            .append(\"svg\")\n            .attr(\"width\", this.config.width)\n            .attr(\"height\", this.config.height)\n            .call(this.zoom);\n        this.createMarker('end', 'enormal', 'black');\n        this.createMarker('endbefore', 'ebefore', 'red');\n        this.createMarker('endafter', 'eafter', 'green');\n        this.g = this.svg.append(\"g\")\n            .attr(\"id\", this._graphId())\n            .attr(\"transform\", \"translate(0,0)\")\n            .classed('TrialGraph', true);\n        this.tree = (0, d3_hierarchy_1.tree)()\n            .nodeSize([\n            this.config.nodeSizeX,\n            this.config.nodeSizeY\n        ]);\n        // Tooltip\n        this.tooltipDiv = (0, d3_selection_1.select)(\"body\").append(\"div\")\n            .attr(\"class\", \"now-tooltip now-trial-tooltip\")\n            .style(\"opacity\", 0)\n            .on(\"mouseout\", () => {\n            this.closeTooltip();\n        });\n        // Zoom\n        this.svg\n            .call(this.zoom.transform, d3_zoom_1.zoomIdentity.translate(this.config.left + this.config.width / 2, this.config.top));\n        this.activationStorage = {};\n    }\n    init(data, t1, t2) {\n        this.t1 = t1;\n        this.t2 = t2;\n        // **Toolbar**\n        this.createToolbar(this.form);\n        // **Graph**\n        this.minDuration = data.min_duration;\n        this.maxDuration = data.max_duration;\n        this.totalDuration = {};\n        this.totalDuration[t1] = this.maxDuration[t1] - this.minDuration[t1];\n        this.totalDuration[t2] = this.maxDuration[t2] - this.minDuration[t2];\n        this.maxTotalDuration = Math.max(this.totalDuration[t1], this.totalDuration[t2]);\n        this.colors = data.colors;\n        if (!data.root)\n            return;\n        this.root = (0, d3_hierarchy_1.hierarchy)(data.root, function (d) { return d.children; });\n        this.root.x0 = 0;\n        this.root.y0 = (this.config.width) / 2;\n        this.alledges = data.edges;\n        this.update(this.root);\n    }\n    createToolbar(form) {\n        let self = this;\n        form = form.append(\"div\")\n            .classed(\"buttons buttonsGraph\", true);\n        this.config.customForm(this, form);\n        // Reset zoom\n        form.append(\"a\")\n            .classed(\"toollink\", true)\n            .attr(\"id\", \"trial-\" + this.graphId + \"-restore-zoom\")\n            .attr(\"href\", \"#\")\n            .attr(\"title\", \"Restore zoom\")\n            .on(\"click\", () => this.restorePosition())\n            .append(\"i\")\n            .classed(\"fa fa-eye\", true);\n        // Toggle Tooltips\n        let tooltipsToggle = form.append(\"input\")\n            .attr(\"id\", \"trial-\" + this.graphId + \"-toolbar-tooltips\")\n            .attr(\"type\", \"checkbox\")\n            .attr(\"name\", \"trial-toolbar-tooltips\")\n            .attr(\"value\", \"show\")\n            .property(\"checked\", this.config.useTooltip)\n            .on(\"change\", () => {\n            this.closeTooltip();\n            this.config.useTooltip = tooltipsToggle.property(\"checked\");\n        });\n        form.append(\"label\")\n            .attr(\"for\", \"trial-\" + this.graphId + \"-toolbar-tooltips\")\n            .attr(\"title\", \"Show tooltips on mouse hover\")\n            .append(\"i\")\n            .classed(\"fa fa-comment\", true);\n        // Download SVG\n        form.append(\"a\")\n            .classed(\"toollink\", true)\n            .attr(\"id\", \"trial-\" + this.graphId + \"-download\")\n            .attr(\"href\", \"#\")\n            .attr(\"title\", \"Download graph SVG\")\n            .on(\"click\", () => {\n            this.download();\n        })\n            .append(\"i\")\n            .classed(\"fa fa-download\", true);\n        // Set Font Size\n        let fontToggle = form.append(\"input\")\n            .attr(\"id\", \"trial-\" + this.graphId + \"-toolbar-fonts\")\n            .attr(\"type\", \"checkbox\")\n            .attr(\"name\", \"trial-toolbar-fonts\")\n            .attr(\"value\", \"show\")\n            .property(\"checked\", false)\n            .on(\"change\", () => {\n            let display = fontToggle.property(\"checked\") ? \"inline-block\" : \"none\";\n            fontSize.style(\"display\", display);\n            labelFontSize.style(\"display\", display);\n        });\n        form.append(\"label\")\n            .attr(\"for\", \"trial-\" + this.graphId + \"-toolbar-fonts\")\n            .attr(\"title\", \"Set font size\")\n            .append(\"i\")\n            .classed(\"fa fa-font\", true);\n        let fontSize = form.append(\"input\")\n            .attr(\"type\", \"number\")\n            .attr(\"value\", this.config.fontSize)\n            .style(\"width\", \"50px\")\n            .style(\"display\", \"none\")\n            .attr(\"title\", \"Node font size\")\n            .on(\"change\", () => {\n            this.config.fontSize = fontSize.property(\"value\");\n            this.svg.selectAll(\".node text\").attr(\"font-size\", this.config.fontSize);\n        });\n        let labelFontSize = form.append(\"input\")\n            .attr(\"type\", \"number\")\n            .attr(\"value\", this.config.labelFontSize)\n            .style(\"width\", \"50px\")\n            .style(\"display\", \"none\")\n            .attr(\"title\", \"Arrow font size\")\n            .on(\"change\", () => {\n            this.config.labelFontSize = labelFontSize.property(\"value\");\n            this.svg.selectAll(\"text.label_text\").attr(\"font-size\", this.config.labelFontSize);\n        });\n        // Set distances\n        let setDistances = function () {\n            self.config.nodeSizeX = distanceX.property(\"value\");\n            self.config.nodeSizeY = distanceY.property(\"value\");\n            self.wrapText();\n            self.tree\n                .nodeSize([\n                self.config.nodeSizeX,\n                self.config.nodeSizeY\n            ]);\n            self.update(self.root);\n        };\n        // Set Distance X\n        let distanceXToggle = form.append(\"input\")\n            .attr(\"id\", \"trial-\" + this.graphId + \"-toolbar-distance-x\")\n            .attr(\"type\", \"checkbox\")\n            .attr(\"name\", \"trial-toolbar-distance-x\")\n            .attr(\"value\", \"show\")\n            .property(\"checked\", false)\n            .on(\"change\", () => {\n            let display = distanceXToggle.property(\"checked\") ? \"inline-block\" : \"none\";\n            distanceX.style(\"display\", display);\n        });\n        form.append(\"label\")\n            .attr(\"for\", \"trial-\" + this.graphId + \"-toolbar-distance-x\")\n            .attr(\"title\", \"Set horizontal distance\")\n            .append(\"i\")\n            .classed(\"fa fa-arrows-h\", true);\n        let distanceX = form.append(\"input\")\n            .attr(\"type\", \"number\")\n            .attr(\"value\", this.config.nodeSizeX)\n            .style(\"width\", \"65px\")\n            .style(\"display\", \"none\")\n            .attr(\"title\", \"Node horizontal distance\")\n            .on(\"change\", setDistances);\n        // Set Distance Y\n        let distanceYToggle = form.append(\"input\")\n            .attr(\"id\", \"trial-\" + this.graphId + \"-toolbar-distance-y\")\n            .attr(\"type\", \"checkbox\")\n            .attr(\"name\", \"trial-toolbar-distance-y\")\n            .attr(\"value\", \"show\")\n            .property(\"checked\", false)\n            .on(\"change\", () => {\n            let display = distanceYToggle.property(\"checked\") ? \"inline-block\" : \"none\";\n            distanceY.style(\"display\", display);\n        });\n        form.append(\"label\")\n            .attr(\"for\", \"trial-\" + this.graphId + \"-toolbar-distance-y\")\n            .attr(\"title\", \"Set vertical distance\")\n            .append(\"i\")\n            .classed(\"fa fa-arrows-v\", true);\n        let distanceY = form.append(\"input\")\n            .attr(\"type\", \"number\")\n            .attr(\"value\", this.config.nodeSizeY)\n            .style(\"width\", \"65px\")\n            .style(\"display\", \"none\")\n            .attr(\"title\", \"Node vertical distance\")\n            .on(\"change\", setDistances);\n        // Submit\n        form.append(\"input\")\n            .attr(\"type\", \"submit\")\n            .attr(\"name\", \"prevent-enter\")\n            .attr(\"onclick\", \"return false;\")\n            .style(\"display\", \"none\");\n    }\n    load(data, t1, t2) {\n        this.init(data, t1, t2);\n        this.updateWindow();\n    }\n    restorePosition() {\n        this.wrapText();\n        this.svg\n            .call(this.zoom.transform, d3_zoom_1.zoomIdentity.translate(this.config.left + this.config.width / 2, this.config.top));\n    }\n    updateWindow() {\n        let size = this.config.customSize(this);\n        this.config.width = size[0];\n        this.config.height = size[1];\n        this.svg\n            .attr(\"width\", size[0])\n            .attr(\"height\", size[1]);\n    }\n    update(source) {\n        let treeData = this.tree(this.root);\n        this.nodes = treeData.descendants();\n        var node = this.g.selectAll('g.node')\n            .data(this.nodes, (d) => { return d.id || (d.id = ++this.i); });\n        let validNodes = {};\n        this.nodes.forEach((node) => {\n            validNodes[node.data.index] = node;\n        });\n        var edges = this.alledges.filter((edge) => {\n            let source = validNodes[edge.source];\n            let target = validNodes[edge.target];\n            if (source == undefined || target == undefined) {\n                return false;\n            }\n            return true;\n        }).map((edge) => {\n            let source = validNodes[edge.source];\n            let target = validNodes[edge.target];\n            var copy = Object.assign({}, edge);\n            copy.id = edge.source + \"-\" + edge.target;\n            copy.source = source;\n            copy.target = target;\n            return copy;\n        });\n        this.updateNodes(source, node);\n        this.updateLinks(source, edges);\n        this.updateLinkLabels(edges);\n        // Store old positions for transition\n        this.nodes.forEach(function (d, i) {\n            d.x0 = d.x;\n            d.y0 = d.y;\n        });\n        this.wrapText();\n    }\n    download(name) {\n        var isFileSaverSupported = false;\n        try {\n            isFileSaverSupported = !!new Blob();\n        }\n        catch (e) {\n            alert(\"blob not supported\");\n        }\n        name = (name === undefined) ? \"trial.svg\" : name;\n        let gnode = this.g.node();\n        var bbox = gnode.getBBox();\n        var width = this.svg.attr(\"width\"), height = this.svg.attr(\"height\");\n        this.g.attr(\"transform\", \"translate(\" + (-bbox.x + 5) + \", \" + (-bbox.y + 5) + \")\");\n        let svgNode = this.svg\n            .attr(\"title\", \"Trial\")\n            .attr(\"version\", 1.1)\n            .attr(\"width\", bbox.width + 10)\n            .attr(\"height\", bbox.height + 10)\n            .attr(\"xmlns\", \"http://www.w3.org/2000/svg\")\n            .node();\n        var html = svgNode.parentNode.innerHTML;\n        html = '<svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + html.slice(4);\n        this.svg\n            .attr(\"width\", width)\n            .attr(\"height\", height);\n        this.g.attr(\"transform\", this.transform);\n        if (isFileSaverSupported) {\n            console.log(html);\n            var blob = new Blob([html], { type: \"image/svg+xml\" });\n            fs.saveAs(blob, name);\n        }\n    }\n    wrapText() {\n        this.svg.selectAll(\".node text:not(.nowrap)\")\n            .call(utils_1.wrap, this.config.nodeSizeX);\n    }\n    calculateColor(d, trial_id) {\n        var proportion = Math.round(255 * (1.0 - (d.duration[trial_id] / this.maxTotalDuration)));\n        //Math.round(510 * (node.duration - self.min_duration[node.trial_id]) / self.total_duration[node.trial_id]);\n        return (0, d3_color_1.rgb)(255, proportion, proportion, 255).toString();\n    }\n    closeTooltip() {\n        this.tooltipDiv.transition()\n            .duration(500)\n            .style(\"opacity\", 0);\n        this.tooltipDiv.classed(\"hidden\", true);\n    }\n    showTooltip(event, d, trial_id) {\n        var self = this;\n        this.tooltipDiv.classed(\"hidden\", false);\n        this.tooltipDiv.transition()\n            .duration(200)\n            .style(\"opacity\", 0.9);\n        if (this.config.queryTooltip) {\n            var string = d.tooltip[trial_id];\n            var regexp = (/T(.*) - (\\d*)<br>Line \\d*?<br>/g);\n            var match = regexp.exec(string);\n            this.tooltipDiv.html(\"\")\n                .style(\"left\", (event.pageX - 3) + \"px\")\n                .style(\"top\", (event.pageY - 28) + \"px\");\n            while (match != null) {\n                var div = document.createElement(\"div\");\n                //var div2 = document.createElement(\"div\");\n                this.tooltipDiv.append(() => div);\n                //this.tooltipDiv.append(() => div2);\n                var aid = match[2];\n                if (aid in self.activationStorage) {\n                    this.updateTooltipDiv(aid, div);\n                }\n                else {\n                    self.config.customLoadTooltip(self, div, match[0], match[1], match[2]);\n                }\n                match = regexp.exec(string);\n            }\n        }\n        else {\n            this.tooltipDiv.html(d.tooltip[trial_id])\n                .style(\"left\", (event.pageX - 3) + \"px\")\n                .style(\"top\", (event.pageY - 28) + \"px\");\n        }\n    }\n    updateTooltipDiv(activationId, div) {\n        var data = this.activationStorage[activationId];\n        var title = data.id + \" - \" + data.name;\n        if (data.hash != \"\") {\n            title = '<a href=\"/trials/files/' + data.hash + '/' + data.name + '\">' + title + \"</a>\";\n        }\n        var result = [\n            '<span class=\"attr\"> <span style=\"font-weight: bold;\">' + title + '</span></span>',\n            '<span class=\"attr\"> <span style=\"font-weight: bold;\"> Line: </span> <span class=\"line\">' + data.line + \"</span></span>\",\n            '<span class=\"attr\"> <span style=\"font-weight: bold;\"> Start: </span> <span class=\"start\">' + data.start + \"</span></span>\",\n            '<span class=\"attr\"> <span style=\"font-weight: bold;\"> Finish: </span> <span class=\"finish\">' + data.finish + \"</span></span>\",\n            '<span class=\"attr\"> <span style=\"font-weight: bold;\"> Duration: </span> <span class=\"duration\">' + data.duration + \"ns</span></span>\",\n            '<span class=\"attr\"> <span style=\"font-weight: bold;\"> Return: </span> <span class=\"return\">' + data.return_value + \"</span></span>\",\n        ];\n        // ToDo: parameters and globals\n        div.outerHTML = result.join(\"<br>\") + \"<br><br>\";\n    }\n    createMarker(name, cls, fill) {\n        this.svg.append(\"svg:defs\").selectAll(\"marker\")\n            .data([name])\n            .enter().append(\"svg:marker\")\n            .attr(\"id\", this.graphId + \"-\" + name)\n            .attr(\"viewBox\", \"0 -5 10 10\")\n            .attr(\"refX\", 10)\n            .attr(\"refY\", 0)\n            .attr(\"markerWidth\", 6)\n            .attr(\"markerHeight\", 6)\n            .attr(\"orient\", \"auto\")\n            .append(\"svg:path\")\n            .classed(cls, true)\n            .attr(\"fill\", fill)\n            .attr(\"d\", \"M0,-5L10,0L0,5\");\n    }\n    defaultNodeStroke(d) {\n        let color = this.colors[d.data.trial_ids[0]];\n        if (d.data.trial_ids.length > 1 || color == 0) {\n            return \"#000\";\n        }\n        if (color == 1) {\n            return \"red\";\n        }\n        return \"green\";\n    }\n    nodeClick(d) {\n        if (d.children) {\n            d._children = d.children;\n            delete d.children;\n        }\n        else {\n            d.children = d._children;\n            delete d._children;\n        }\n        this.update(d);\n    }\n    updateNodes(source, node) {\n        let self = this;\n        var nodeEnter = node.enter().append('g')\n            .attr(\"id\", (d) => {\n            return \"node-\" + this.graphId + \"-\" + d.data.index;\n        })\n            .attr('class', 'node')\n            .attr(\"cursor\", \"pointer\")\n            .attr('transform', (d) => {\n            return \"translate(\" + source.x + \",\" + source.y + \")\";\n        })\n            .on('click', (event, d) => this.nodeClick(d))\n            .on('mouseover', function (event, d) {\n            if (self.config.useTooltip) {\n                self.closeTooltip();\n                if ((0, d3_selection_1.pointers)(event)[0][0] < 10) {\n                    self.showTooltip(event, d.data, self.t1);\n                }\n                else {\n                    self.showTooltip(event, d.data, self.t2);\n                }\n            }\n            self.config.customMouseOver(self, d);\n            return false;\n        }).on('mouseout', function (event, d) {\n            self.config.customMouseOut(self, d);\n        });\n        // Circle for new nodes\n        nodeEnter.append('rect')\n            .attr('class', 'node')\n            .attr('rx', 1e-6)\n            .attr('ry', 1e-6)\n            .attr('width', 1e-6)\n            .attr('height', 1e-6)\n            .attr(\"stroke\", (d) => this.defaultNodeStroke(d))\n            .attr(\"stroke-width\", \"3px\")\n            .attr(\"fill\", (d) => {\n            if (d.data.trial_ids.length == 1) {\n                return this.calculateColor(d.data, this.t1);\n            }\n            var grad = this.svg.append(\"svg:defs\")\n                .append(\"linearGradient\")\n                .attr(\"id\", \"grad-\" + this.graphId + \"-\" + d.data.index)\n                .attr(\"x1\", \"100%\")\n                .attr(\"x2\", \"0%\")\n                .attr(\"y1\", \"0%\")\n                .attr(\"y2\", \"0%\");\n            grad.append(\"stop\")\n                .attr(\"offset\", \"50%\")\n                .attr(\"stop-color\", this.calculateColor(d.data, this.t2));\n            grad.append(\"stop\")\n                .attr(\"offset\", \"50%\")\n                .attr(\"stop-color\", this.calculateColor(d.data, this.t1));\n            return \"url(#grad-\" + this.graphId + \"-\" + d.data.index + \")\";\n        });\n        // Text for new nodes\n        nodeEnter.append('text')\n            .attr(\"dy\", \".35em\")\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", this.config.fontSize + \"px\")\n            .attr(\"pointer-events\", \"none\")\n            .attr(\"fill\", \"#000\")\n            .attr(\"y\", 24)\n            .attr(\"x\", 10)\n            .attr(\"text-anchor\", \"middle\")\n            .each(function (d) {\n            const textLabel = (0, d3_selection_1.select)(this);\n            const name = d.data.name.split('<br>');\n            if (name.length > 1) {\n                textLabel.append(\"tspan\")\n                    .attr(\"x\", \"10\")\n                    .attr(\"dy\", \".35em\")\n                    .attr(\"font-weight\", \"bold\")\n                    .text(name[0]);\n                textLabel.append(\"tspan\")\n                    .attr(\"x\", \"10\")\n                    .attr(\"dy\", \"1em\")\n                    .text(name[1]);\n                textLabel.attr(\"class\", \"nowrap\");\n            }\n            else {\n                return textLabel.text(d.data.name);\n            }\n        });\n        nodeEnter.append(\"path\")\n            .attr(\"stroke\", \"#000\")\n            .attr(\"d\", function (d) {\n            if (d.data.trial_ids.length > 1) {\n                return \"M10,\" + 0 +\n                    \"L10,\" + 20;\n            }\n            return \"M0,0L0,0\";\n        });\n        // Update\n        var nodeUpdate = nodeEnter.merge(node);\n        // Transition to proper position\n        nodeUpdate.transition()\n            .duration(this.config.duration)\n            .attr(\"transform\", (d) => {\n            let color = this.colors[d.data.trial_ids[0]];\n            d.dy = 0;\n            if (color == 1) {\n                d.dy = -40;\n            }\n            else if (color == 2) {\n                d.dy = 40;\n            }\n            return \"translate(\" + (d.x - 10) + \",\" + (d.y + d.dy - 10) + \")\";\n        });\n        // Update the node attributes and style\n        nodeUpdate.select('rect.node')\n            .attr('width', 20)\n            .attr('height', 20)\n            .attr('rx', 20)\n            .attr('ry', 20)\n            .attr(\"rx\", (d) => {\n            return d._children ? 0 : 20;\n        })\n            .attr(\"ry\", (d) => {\n            return d._children ? 0 : 20;\n        })\n            .attr('cursor', 'pointer');\n        // Remove exiting nodes\n        var nodeExit = node.exit().transition()\n            .duration(this.config.duration)\n            .attr(\"transform\", function (d) {\n            return \"translate(\" + source.x + \",\" + source.y + \")\";\n        })\n            .remove();\n        // Reduce node rects size to 0 on exit\n        nodeExit.select('rect')\n            .attr('rx', 1e-6)\n            .attr('ry', 1e-6)\n            .attr('width', 1e-6)\n            .attr('height', 1e-6);\n        // Reduce opacity of labels on exit\n        nodeExit.select('text')\n            .style('fill-opacity', 1e-6);\n    }\n    updateLinks(source, edges) {\n        var link = this.g.selectAll('path.link')\n            .data(edges, (d) => d.id);\n        // Enter any new links at the parent's previous position.\n        var linkEnter = link.enter().insert('path', \"g\")\n            .attr(\"class\", \"link\")\n            .attr(\"id\", (d, i) => {\n            return \"pathId-\" + this.graphId + \"-\" + d.id;\n        })\n            .attr(\"fill\", \"none\")\n            .attr(\"stroke-width\", \"1.5px\")\n            .attr('d', (d) => {\n            var o = { y: source.y0, x: source.x0 };\n            if (d.source.dy == undefined) {\n                d.source.dy = 0;\n            }\n            if (d.target.dy == undefined) {\n                d.target.dy = 0;\n            }\n            let ox = source.x0 || 0, oy = source.y0 || 0, x1 = d.source.x, y1 = d.source.y + d.source.dy, x2 = d.target.x, y2 = d.target.y + d.target.dy, dx = x2 - x1, dy = y2 - y1;\n            if (d.type === 'initial' || d.type === 'call' || d.type == 'return') {\n                // Initial\n                return (0, utils_1.diagonal)(o, o);\n            }\n            else if (dx === 0 && dy === 0) {\n                // Loop\n                return `M ${ox}, ${oy}\n            A 15,20\n              -45,1,1\n              ${ox + 5},${oy + 8}`;\n            }\n            //return diagonal(d.source, d.target);\n            return (0, utils_1.diagonal)(o, o);\n        })\n            .attr(\"marker-end\", (d) => {\n            let count = 0;\n            for (let trial_id in d.count) {\n                if (trial_id == this.t1.toString()) {\n                    count += 1;\n                }\n                if (trial_id == this.t2.toString()) {\n                    count += 2;\n                }\n            }\n            if (count == 0 || count == 3) { // Single trial or diff\n                return \"url(#\" + this.graphId + \"-end)\";\n            }\n            if (count == 1) { // First trial\n                return \"url(#\" + this.graphId + \"-endbefore)\";\n            }\n            if (count == 2) { // Second trial\n                return \"url(#\" + this.graphId + \"-endafter)\";\n            }\n            return \"\";\n        })\n            .attr('stroke', (d) => {\n            if (d.type === 'sequence') {\n                return '#07F';\n            }\n            return '#666';\n        })\n            .attr('stroke-dasharray', (d) => {\n            if (d.type === 'return') {\n                return '10,2';\n            }\n            return 'none';\n        });\n        // UPDATE\n        var linkUpdate = linkEnter.merge(link);\n        // Transition back to the parent element position\n        linkUpdate.transition()\n            .duration(this.config.duration)\n            .attr('d', (d) => {\n            if (d.source.dy == undefined) {\n                d.source.dy = 0;\n            }\n            if (d.target.dy == undefined) {\n                d.target.dy = 0;\n            }\n            let sd = d.source.data, td = d.target.data, x1 = d.source.x, y1 = d.source.y + d.source.dy, x2 = d.target.x, y2 = d.target.y + d.target.dy, dx = x2 - x1, dy = y2 - y1, theta = Math.atan(dx / dy), phi = Math.atan(dy / dx), r = 10 + 2, sin_theta = r * Math.sin(theta), cos_theta = r * Math.cos(theta), sin_phi = r * Math.sin(phi), cos_phi = r * Math.cos(phi), m1 = (y2 > y1) ? 1 : -1, m2 = (x2 > x1) ? -1 : 1;\n            if (d.type === 'initial') {\n                // Initial\n                return `M ${(x2 - 20)},${(y2 - 20)}\n            L ${(x2 - r / 2.0)},${(y2 - r / 2.0)}`;\n            }\n            else if (d.type === 'call' || d.type == 'return') {\n                // Call/Return\n                x1 += m1 * sin_theta;\n                x2 += m2 * cos_phi;\n                y1 += m1 * cos_theta;\n                y2 += m2 * sin_phi;\n                if (dx === 0) {\n                    if (y1 > y2) {\n                        //y1 -= 10\n                        y2 += 20;\n                    }\n                    else {\n                        //y1 += 10\n                        y2 -= 20;\n                    }\n                }\n                return `M ${x1}, ${y1}\n            L ${x2}, ${y2}`;\n            }\n            else if (dx === 0 && dy === 0) {\n                // Loop\n                return `M ${x1}, ${y1}\n            A 15,20\n              -45,1,1\n              ${x2 + 5},${y2 + 8}`;\n            }\n            else if (sd.parent_index == td.parent_index) {\n                // Same caller\n                if (dy === 0 && sd.children_index == td.children_index - 1) {\n                    // Immediate sequence\n                    return `M ${x1}, ${y1}\n              L ${(x2 + m2 * cos_phi)}, ${y2}`;\n                }\n                else {\n                    let sign = -1;\n                    if (y1 < y2) {\n                        x1 += m1 * sin_theta;\n                        y1 += m1 * cos_theta;\n                        y2 -= r;\n                        sign = -1;\n                    }\n                    else if (y2 < y1) {\n                        x1 += m1 * sin_theta;\n                        y1 += m1 * cos_theta;\n                        y2 += r;\n                        sign = 1;\n                    }\n                    else if (x1 >= x2) {\n                        y1 += r;\n                        y2 += r;\n                        sign = 2;\n                    }\n                    else {\n                        y1 -= r;\n                        y2 -= r;\n                        sign = -1;\n                    }\n                    return `M ${x1}, ${y1}\n                C ${(x1 + x2) / 2} ${y1 + r * sign},\n              ${(x1 + x2) / 2} ${y2 + r * sign},\n              ${x2} ${y2}`;\n                }\n            }\n            // Other caller\n            x1 += m1 * sin_theta;\n            y1 += m1 * cos_theta;\n            x2 += m2 * cos_phi;\n            y2 += m2 * sin_phi;\n            return `M ${x1} ${y1}\n            C ${(x1 + x2) / 2} ${y1},\n              ${(x1 + x2) / 2} ${y2},\n              ${x2} ${y2}`;\n        });\n        // Remove any exiting links\n        link.exit() //.transition()\n            .attr('d', function (d) {\n            return (0, utils_1.diagonal)(d.source, d.target);\n        })\n            .remove(); // linkExit\n    }\n    updateLinkLabels(edges) {\n        var labelPath = this.g.selectAll(\".label_text\")\n            .data(edges, (d) => d.id);\n        var labelEnter = labelPath.enter().append(\"text\")\n            .attr(\"class\", \"label_text\")\n            .attr(\"font-family\", \"sans-serif\")\n            .attr(\"font-size\", this.config.labelFontSize + \"px\")\n            .attr(\"pointer-events\", \"none\")\n            .attr(\"fill\", \"#000\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"dx\", (d) => {\n            if (d.source.x == d.target.x) {\n                return 29;\n            }\n            return (Math.abs(d.source.x - d.target.x) - 10) / 2;\n        })\n            .attr(\"dy\", -3)\n            .attr(\"id\", (d, i) => {\n            return \"pathlabel-\" + this.graphId + \"-\" + d.id;\n        })\n            .append(\"textPath\")\n            .attr(\"xlink:href\", (d, i) => {\n            return \"#pathId-\" + this.graphId + \"-\" + d.id;\n        })\n            .text((d) => {\n            if (d.type === 'initial') {\n                return '';\n            }\n            if (this.t1 == this.t2 || !d.count[this.t2]) {\n                return d.count[this.t1].toString();\n            }\n            else if (!d.count[this.t1]) {\n                return d.count[this.t2].toString();\n            }\n            return d.count[this.t1] + ', ' + d.count[this.t2];\n        });\n        labelEnter.merge(labelPath);\n        labelPath.exit().remove();\n    }\n    zoomFunction(event) {\n        this.closeTooltip();\n        this.transform = event.transform;\n        this.g.attr(\"transform\", event.transform);\n    }\n    _graphId() {\n        return \"trial-graph-\" + this.graphId;\n    }\n}\nexports.TrialGraph = TrialGraph;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./config\"), exports);\n__exportStar(require(\"./structures\"), exports);\n__exportStar(require(\"./graph\"), exports);\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n"],"names":[],"sourceRoot":""}