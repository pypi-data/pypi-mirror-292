# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.account_connection_response_model import AccountConnectionResponseModel
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.account_connection_page import AccountConnectionPage
from ..types.account_connection_params_request import AccountConnectionParamsRequest
from ..types.account_connection_update_params_request import AccountConnectionUpdateParamsRequest
from ..types.add_to_steering_pool_body import AddToSteeringPoolBody
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class AccountConnectionsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_account_connection(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AccountConnectionResponseModel:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountConnectionResponseModel
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.account_connections.get_account_connection(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/account_connections",
            method="GET",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountConnectionResponseModel,
                    parse_obj_as(
                        type_=AccountConnectionResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_account_connections(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        sort_column: typing.Optional[str] = None,
        sort_desc: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountConnectionPage:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        size : typing.Optional[int]

        sort_column : typing.Optional[str]

        sort_desc : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountConnectionPage
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.account_connections.list_account_connections()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/account_connections/list",
            method="GET",
            params={
                "page": page,
                "size": size,
                "sort_column": sort_column,
                "sort_desc": sort_desc,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountConnectionPage,
                    parse_obj_as(
                        type_=AccountConnectionPage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_account_connection(
        self, *, request: AccountConnectionParamsRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> AccountConnectionResponseModel:
        """
        Parameters
        ----------
        request : AccountConnectionParamsRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountConnectionResponseModel
            Successful Response

        Examples
        --------
        from vocode import OpenAiAccountConnectionParams, OpenAiCredentials, Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.account_connections.create_account_connection(
            request=OpenAiAccountConnectionParams(
                credentials=OpenAiCredentials(
                    openai_api_key="openai_api_key",
                ),
            ),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/account_connections/create",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountConnectionResponseModel,
                    parse_obj_as(
                        type_=AccountConnectionResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_account_connection(
        self,
        *,
        id: str,
        request: AccountConnectionUpdateParamsRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountConnectionResponseModel:
        """
        Parameters
        ----------
        id : str

        request : AccountConnectionUpdateParamsRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountConnectionResponseModel
            Successful Response

        Examples
        --------
        from vocode import OpenAiAccountConnectionUpdateParams, Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.account_connections.update_account_connection(
            id="id",
            request=OpenAiAccountConnectionUpdateParams(),
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/account_connections/update",
            method="POST",
            params={
                "id": id,
            },
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountConnectionResponseModel,
                    parse_obj_as(
                        type_=AccountConnectionResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def add_to_steering_pool(
        self,
        *,
        id: str,
        request: typing.Optional[AddToSteeringPoolBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        request : typing.Optional[AddToSteeringPoolBody]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.account_connections.add_to_steering_pool(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/account_connections/add_to_steering_pool",
            method="POST",
            params={
                "id": id,
            },
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def remove_from_steering_pool(
        self, *, id: str, phone_number: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        phone_number : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.account_connections.remove_from_steering_pool(
            id="id",
            phone_number="phone_number",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/account_connections/remove_from_steering_pool",
            method="POST",
            params={
                "id": id,
            },
            json={
                "phone_number": phone_number,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncAccountConnectionsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_account_connection(
        self, *, id: str, request_options: typing.Optional[RequestOptions] = None
    ) -> AccountConnectionResponseModel:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountConnectionResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.account_connections.get_account_connection(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/account_connections",
            method="GET",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountConnectionResponseModel,
                    parse_obj_as(
                        type_=AccountConnectionResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_account_connections(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        sort_column: typing.Optional[str] = None,
        sort_desc: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountConnectionPage:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        size : typing.Optional[int]

        sort_column : typing.Optional[str]

        sort_desc : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountConnectionPage
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.account_connections.list_account_connections()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/account_connections/list",
            method="GET",
            params={
                "page": page,
                "size": size,
                "sort_column": sort_column,
                "sort_desc": sort_desc,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountConnectionPage,
                    parse_obj_as(
                        type_=AccountConnectionPage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_account_connection(
        self, *, request: AccountConnectionParamsRequest, request_options: typing.Optional[RequestOptions] = None
    ) -> AccountConnectionResponseModel:
        """
        Parameters
        ----------
        request : AccountConnectionParamsRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountConnectionResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode, OpenAiAccountConnectionParams, OpenAiCredentials

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.account_connections.create_account_connection(
                request=OpenAiAccountConnectionParams(
                    credentials=OpenAiCredentials(
                        openai_api_key="openai_api_key",
                    ),
                ),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/account_connections/create",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountConnectionResponseModel,
                    parse_obj_as(
                        type_=AccountConnectionResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_account_connection(
        self,
        *,
        id: str,
        request: AccountConnectionUpdateParamsRequest,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AccountConnectionResponseModel:
        """
        Parameters
        ----------
        id : str

        request : AccountConnectionUpdateParamsRequest

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AccountConnectionResponseModel
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode, OpenAiAccountConnectionUpdateParams

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.account_connections.update_account_connection(
                id="id",
                request=OpenAiAccountConnectionUpdateParams(),
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/account_connections/update",
            method="POST",
            params={
                "id": id,
            },
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    AccountConnectionResponseModel,
                    parse_obj_as(
                        type_=AccountConnectionResponseModel,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def add_to_steering_pool(
        self,
        *,
        id: str,
        request: typing.Optional[AddToSteeringPoolBody] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        request : typing.Optional[AddToSteeringPoolBody]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.account_connections.add_to_steering_pool(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/account_connections/add_to_steering_pool",
            method="POST",
            params={
                "id": id,
            },
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def remove_from_steering_pool(
        self, *, id: str, phone_number: str, request_options: typing.Optional[RequestOptions] = None
    ) -> typing.Optional[typing.Any]:
        """
        Parameters
        ----------
        id : str

        phone_number : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.Optional[typing.Any]
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.account_connections.remove_from_steering_pool(
                id="id",
                phone_number="phone_number",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/account_connections/remove_from_steering_pool",
            method="POST",
            params={
                "id": id,
            },
            json={
                "phone_number": phone_number,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.Optional[typing.Any],
                    parse_obj_as(
                        type_=typing.Optional[typing.Any],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
