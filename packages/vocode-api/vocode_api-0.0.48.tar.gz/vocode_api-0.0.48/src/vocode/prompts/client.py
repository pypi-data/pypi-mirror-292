# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.prompt import Prompt
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.prompt_page import PromptPage
from ..types.collect_field import CollectField
from ..types.prompt_params_prompt_template import PromptParamsPromptTemplate
from ..types.prompt_update_params_content import PromptUpdateParamsContent
from ..types.prompt_update_params_collect_fields import PromptUpdateParamsCollectFields
from ..types.prompt_update_params_context_endpoint import PromptUpdateParamsContextEndpoint
from ..types.prompt_update_params_prompt_template import PromptUpdateParamsPromptTemplate
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class PromptsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get_prompt(self, *, id: str, request_options: typing.Optional[RequestOptions] = None) -> Prompt:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.prompts.get_prompt(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/prompts",
            method="GET",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def list_prompts(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        sort_column: typing.Optional[str] = None,
        sort_desc: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptPage:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        size : typing.Optional[int]

        sort_column : typing.Optional[str]

        sort_desc : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptPage
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.prompts.list_prompts()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/prompts/list",
            method="GET",
            params={
                "page": page,
                "size": size,
                "sort_column": sort_column,
                "sort_desc": sort_desc,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptPage,
                    parse_obj_as(
                        type_=PromptPage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create_prompt(
        self,
        *,
        content: typing.Optional[str] = OMIT,
        collect_fields: typing.Optional[typing.Sequence[CollectField]] = OMIT,
        context_endpoint: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[PromptParamsPromptTemplate] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Prompt:
        """
        Parameters
        ----------
        content : typing.Optional[str]

        collect_fields : typing.Optional[typing.Sequence[CollectField]]

        context_endpoint : typing.Optional[str]

        prompt_template : typing.Optional[PromptParamsPromptTemplate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.prompts.create_prompt()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/prompts/create",
            method="POST",
            json={
                "content": content,
                "collect_fields": collect_fields,
                "context_endpoint": context_endpoint,
                "prompt_template": prompt_template,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_prompt(
        self,
        *,
        id: str,
        content: typing.Optional[PromptUpdateParamsContent] = OMIT,
        collect_fields: typing.Optional[PromptUpdateParamsCollectFields] = OMIT,
        context_endpoint: typing.Optional[PromptUpdateParamsContextEndpoint] = OMIT,
        prompt_template: typing.Optional[PromptUpdateParamsPromptTemplate] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Prompt:
        """
        Parameters
        ----------
        id : str

        content : typing.Optional[PromptUpdateParamsContent]

        collect_fields : typing.Optional[PromptUpdateParamsCollectFields]

        context_endpoint : typing.Optional[PromptUpdateParamsContextEndpoint]

        prompt_template : typing.Optional[PromptUpdateParamsPromptTemplate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.prompts.update_prompt(
            id="id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/prompts/update",
            method="POST",
            params={
                "id": id,
            },
            json={
                "content": content,
                "collect_fields": collect_fields,
                "context_endpoint": context_endpoint,
                "prompt_template": prompt_template,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncPromptsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get_prompt(self, *, id: str, request_options: typing.Optional[RequestOptions] = None) -> Prompt:
        """
        Parameters
        ----------
        id : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.prompts.get_prompt(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/prompts",
            method="GET",
            params={
                "id": id,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def list_prompts(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        sort_column: typing.Optional[str] = None,
        sort_desc: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PromptPage:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        size : typing.Optional[int]

        sort_column : typing.Optional[str]

        sort_desc : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PromptPage
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.prompts.list_prompts()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/prompts/list",
            method="GET",
            params={
                "page": page,
                "size": size,
                "sort_column": sort_column,
                "sort_desc": sort_desc,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PromptPage,
                    parse_obj_as(
                        type_=PromptPage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create_prompt(
        self,
        *,
        content: typing.Optional[str] = OMIT,
        collect_fields: typing.Optional[typing.Sequence[CollectField]] = OMIT,
        context_endpoint: typing.Optional[str] = OMIT,
        prompt_template: typing.Optional[PromptParamsPromptTemplate] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Prompt:
        """
        Parameters
        ----------
        content : typing.Optional[str]

        collect_fields : typing.Optional[typing.Sequence[CollectField]]

        context_endpoint : typing.Optional[str]

        prompt_template : typing.Optional[PromptParamsPromptTemplate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.prompts.create_prompt()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/prompts/create",
            method="POST",
            json={
                "content": content,
                "collect_fields": collect_fields,
                "context_endpoint": context_endpoint,
                "prompt_template": prompt_template,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_prompt(
        self,
        *,
        id: str,
        content: typing.Optional[PromptUpdateParamsContent] = OMIT,
        collect_fields: typing.Optional[PromptUpdateParamsCollectFields] = OMIT,
        context_endpoint: typing.Optional[PromptUpdateParamsContextEndpoint] = OMIT,
        prompt_template: typing.Optional[PromptUpdateParamsPromptTemplate] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Prompt:
        """
        Parameters
        ----------
        id : str

        content : typing.Optional[PromptUpdateParamsContent]

        collect_fields : typing.Optional[PromptUpdateParamsCollectFields]

        context_endpoint : typing.Optional[PromptUpdateParamsContextEndpoint]

        prompt_template : typing.Optional[PromptUpdateParamsPromptTemplate]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Prompt
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.prompts.update_prompt(
                id="id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/prompts/update",
            method="POST",
            params={
                "id": id,
            },
            json={
                "content": content,
                "collect_fields": collect_fields,
                "context_endpoint": context_endpoint,
                "prompt_template": prompt_template,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Prompt,
                    parse_obj_as(
                        type_=Prompt,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
