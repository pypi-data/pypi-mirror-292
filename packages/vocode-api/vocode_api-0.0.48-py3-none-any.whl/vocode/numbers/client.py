# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.phone_number_page import PhoneNumberPage
from ..core.pydantic_utilities import parse_obj_as
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.phone_number import PhoneNumber
from .types.buy_phone_number_request_telephony_provider import BuyPhoneNumberRequestTelephonyProvider
from .types.buy_phone_number_request_inbound_agent import BuyPhoneNumberRequestInboundAgent
from .types.update_number_request_outbound_only import UpdateNumberRequestOutboundOnly
from .types.update_number_request_example_context import UpdateNumberRequestExampleContext
from .types.update_number_request_label import UpdateNumberRequestLabel
from .types.update_number_request_inbound_agent import UpdateNumberRequestInboundAgent
from .types.link_phone_number_request_inbound_agent import LinkPhoneNumberRequestInboundAgent
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class NumbersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def list_numbers(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        sort_column: typing.Optional[str] = None,
        sort_desc: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PhoneNumberPage:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        size : typing.Optional[int]

        sort_column : typing.Optional[str]

        sort_desc : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumberPage
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.numbers.list_numbers()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/numbers/list",
            method="GET",
            params={
                "page": page,
                "size": size,
                "sort_column": sort_column,
                "sort_desc": sort_desc,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumberPage,
                    parse_obj_as(
                        type_=PhoneNumberPage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_number(self, *, phone_number: str, request_options: typing.Optional[RequestOptions] = None) -> PhoneNumber:
        """
        Parameters
        ----------
        phone_number : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.numbers.get_number(
            phone_number="phone_number",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/numbers",
            method="GET",
            params={
                "phone_number": phone_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def buy_number(
        self,
        *,
        area_code: typing.Optional[str] = OMIT,
        telephony_provider: typing.Optional[BuyPhoneNumberRequestTelephonyProvider] = OMIT,
        telephony_account_connection: typing.Optional[str] = OMIT,
        inbound_agent: typing.Optional[BuyPhoneNumberRequestInboundAgent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PhoneNumber:
        """
        Parameters
        ----------
        area_code : typing.Optional[str]

        telephony_provider : typing.Optional[BuyPhoneNumberRequestTelephonyProvider]

        telephony_account_connection : typing.Optional[str]

        inbound_agent : typing.Optional[BuyPhoneNumberRequestInboundAgent]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.numbers.buy_number()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/numbers/buy",
            method="POST",
            json={
                "area_code": area_code,
                "telephony_provider": telephony_provider,
                "telephony_account_connection": telephony_account_connection,
                "inbound_agent": inbound_agent,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update_number(
        self,
        *,
        phone_number: str,
        outbound_only: typing.Optional[UpdateNumberRequestOutboundOnly] = OMIT,
        example_context: typing.Optional[UpdateNumberRequestExampleContext] = OMIT,
        label: typing.Optional[UpdateNumberRequestLabel] = OMIT,
        inbound_agent: typing.Optional[UpdateNumberRequestInboundAgent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PhoneNumber:
        """
        Parameters
        ----------
        phone_number : str

        outbound_only : typing.Optional[UpdateNumberRequestOutboundOnly]

        example_context : typing.Optional[UpdateNumberRequestExampleContext]

        label : typing.Optional[UpdateNumberRequestLabel]

        inbound_agent : typing.Optional[UpdateNumberRequestInboundAgent]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.numbers.update_number(
            phone_number="phone_number",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/numbers/update",
            method="POST",
            params={
                "phone_number": phone_number,
            },
            json={
                "outbound_only": outbound_only,
                "example_context": example_context,
                "label": label,
                "inbound_agent": inbound_agent,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def cancel_number(
        self, *, phone_number: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PhoneNumber:
        """
        Parameters
        ----------
        phone_number : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.numbers.cancel_number(
            phone_number="phone_number",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/numbers/cancel",
            method="POST",
            params={
                "phone_number": phone_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def link_number(
        self,
        *,
        phone_number: str,
        telephony_account_connection: str,
        outbound_only: typing.Optional[bool] = OMIT,
        inbound_agent: typing.Optional[LinkPhoneNumberRequestInboundAgent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PhoneNumber:
        """
        Parameters
        ----------
        phone_number : str

        telephony_account_connection : str

        outbound_only : typing.Optional[bool]

        inbound_agent : typing.Optional[LinkPhoneNumberRequestInboundAgent]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        from vocode import Vocode

        client = Vocode(
            token="YOUR_TOKEN",
        )
        client.numbers.link_number(
            phone_number="phone_number",
            telephony_account_connection="telephony_account_connection",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/numbers/link",
            method="POST",
            json={
                "phone_number": phone_number,
                "telephony_account_connection": telephony_account_connection,
                "outbound_only": outbound_only,
                "inbound_agent": inbound_agent,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncNumbersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def list_numbers(
        self,
        *,
        page: typing.Optional[int] = None,
        size: typing.Optional[int] = None,
        sort_column: typing.Optional[str] = None,
        sort_desc: typing.Optional[bool] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PhoneNumberPage:
        """
        Parameters
        ----------
        page : typing.Optional[int]

        size : typing.Optional[int]

        sort_column : typing.Optional[str]

        sort_desc : typing.Optional[bool]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumberPage
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.numbers.list_numbers()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/numbers/list",
            method="GET",
            params={
                "page": page,
                "size": size,
                "sort_column": sort_column,
                "sort_desc": sort_desc,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumberPage,
                    parse_obj_as(
                        type_=PhoneNumberPage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_number(
        self, *, phone_number: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PhoneNumber:
        """
        Parameters
        ----------
        phone_number : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.numbers.get_number(
                phone_number="phone_number",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/numbers",
            method="GET",
            params={
                "phone_number": phone_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def buy_number(
        self,
        *,
        area_code: typing.Optional[str] = OMIT,
        telephony_provider: typing.Optional[BuyPhoneNumberRequestTelephonyProvider] = OMIT,
        telephony_account_connection: typing.Optional[str] = OMIT,
        inbound_agent: typing.Optional[BuyPhoneNumberRequestInboundAgent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PhoneNumber:
        """
        Parameters
        ----------
        area_code : typing.Optional[str]

        telephony_provider : typing.Optional[BuyPhoneNumberRequestTelephonyProvider]

        telephony_account_connection : typing.Optional[str]

        inbound_agent : typing.Optional[BuyPhoneNumberRequestInboundAgent]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.numbers.buy_number()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/numbers/buy",
            method="POST",
            json={
                "area_code": area_code,
                "telephony_provider": telephony_provider,
                "telephony_account_connection": telephony_account_connection,
                "inbound_agent": inbound_agent,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update_number(
        self,
        *,
        phone_number: str,
        outbound_only: typing.Optional[UpdateNumberRequestOutboundOnly] = OMIT,
        example_context: typing.Optional[UpdateNumberRequestExampleContext] = OMIT,
        label: typing.Optional[UpdateNumberRequestLabel] = OMIT,
        inbound_agent: typing.Optional[UpdateNumberRequestInboundAgent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PhoneNumber:
        """
        Parameters
        ----------
        phone_number : str

        outbound_only : typing.Optional[UpdateNumberRequestOutboundOnly]

        example_context : typing.Optional[UpdateNumberRequestExampleContext]

        label : typing.Optional[UpdateNumberRequestLabel]

        inbound_agent : typing.Optional[UpdateNumberRequestInboundAgent]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.numbers.update_number(
                phone_number="phone_number",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/numbers/update",
            method="POST",
            params={
                "phone_number": phone_number,
            },
            json={
                "outbound_only": outbound_only,
                "example_context": example_context,
                "label": label,
                "inbound_agent": inbound_agent,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def cancel_number(
        self, *, phone_number: str, request_options: typing.Optional[RequestOptions] = None
    ) -> PhoneNumber:
        """
        Parameters
        ----------
        phone_number : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.numbers.cancel_number(
                phone_number="phone_number",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/numbers/cancel",
            method="POST",
            params={
                "phone_number": phone_number,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def link_number(
        self,
        *,
        phone_number: str,
        telephony_account_connection: str,
        outbound_only: typing.Optional[bool] = OMIT,
        inbound_agent: typing.Optional[LinkPhoneNumberRequestInboundAgent] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PhoneNumber:
        """
        Parameters
        ----------
        phone_number : str

        telephony_account_connection : str

        outbound_only : typing.Optional[bool]

        inbound_agent : typing.Optional[LinkPhoneNumberRequestInboundAgent]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PhoneNumber
            Successful Response

        Examples
        --------
        import asyncio

        from vocode import AsyncVocode

        client = AsyncVocode(
            token="YOUR_TOKEN",
        )


        async def main() -> None:
            await client.numbers.link_number(
                phone_number="phone_number",
                telephony_account_connection="telephony_account_connection",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/numbers/link",
            method="POST",
            json={
                "phone_number": phone_number,
                "telephony_account_connection": telephony_account_connection,
                "outbound_only": outbound_only,
                "inbound_agent": inbound_agent,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PhoneNumber,
                    parse_obj_as(
                        type_=PhoneNumber,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        parse_obj_as(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
