# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WebhookArgs', 'Webhook']

@pulumi.input_type
class WebhookArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str],
                 url: pulumi.Input[str],
                 authentication: Optional[pulumi.Input['WebhookAuthenticationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enabled_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Webhook resource.
        :param pulumi.Input[str] project: The name of the Doppler project where the webhook is located
        :param pulumi.Input[str] url: The URL of the webhook endpoint
        :param pulumi.Input['WebhookAuthenticationArgs'] authentication: Authentication method used by the webhook
        :param pulumi.Input[bool] enabled: Whether the webhook is enabled or disabled.  Default to true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enabled_configs: Configs this webhook will trigger for
        :param pulumi.Input[str] payload: The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        :param pulumi.Input[str] secret: Secret used for request signing
        """
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "url", url)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enabled_configs is not None:
            pulumi.set(__self__, "enabled_configs", enabled_configs)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The name of the Doppler project where the webhook is located
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        The URL of the webhook endpoint
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['WebhookAuthenticationArgs']]:
        """
        Authentication method used by the webhook
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['WebhookAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the webhook is enabled or disabled.  Default to true.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enabledConfigs")
    def enabled_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Configs this webhook will trigger for
        """
        return pulumi.get(self, "enabled_configs")

    @enabled_configs.setter
    def enabled_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enabled_configs", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        """
        The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Secret used for request signing
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)


@pulumi.input_type
class _WebhookState:
    def __init__(__self__, *,
                 authentication: Optional[pulumi.Input['WebhookAuthenticationArgs']] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enabled_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Webhook resources.
        :param pulumi.Input['WebhookAuthenticationArgs'] authentication: Authentication method used by the webhook
        :param pulumi.Input[bool] enabled: Whether the webhook is enabled or disabled.  Default to true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enabled_configs: Configs this webhook will trigger for
        :param pulumi.Input[str] payload: The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        :param pulumi.Input[str] project: The name of the Doppler project where the webhook is located
        :param pulumi.Input[str] secret: Secret used for request signing
        :param pulumi.Input[str] slug: The slug of the Webhook
        :param pulumi.Input[str] url: The URL of the webhook endpoint
        """
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if enabled_configs is not None:
            pulumi.set(__self__, "enabled_configs", enabled_configs)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if secret is not None:
            pulumi.set(__self__, "secret", secret)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['WebhookAuthenticationArgs']]:
        """
        Authentication method used by the webhook
        """
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['WebhookAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the webhook is enabled or disabled.  Default to true.
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="enabledConfigs")
    def enabled_configs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Configs this webhook will trigger for
        """
        return pulumi.get(self, "enabled_configs")

    @enabled_configs.setter
    def enabled_configs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "enabled_configs", value)

    @property
    @pulumi.getter
    def payload(self) -> Optional[pulumi.Input[str]]:
        """
        The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        """
        return pulumi.get(self, "payload")

    @payload.setter
    def payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "payload", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Doppler project where the webhook is located
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def secret(self) -> Optional[pulumi.Input[str]]:
        """
        Secret used for request signing
        """
        return pulumi.get(self, "secret")

    @secret.setter
    def secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the Webhook
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL of the webhook endpoint
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


class Webhook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[Union['WebhookAuthenticationArgs', 'WebhookAuthenticationArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enabled_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Webhook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WebhookAuthenticationArgs', 'WebhookAuthenticationArgsDict']] authentication: Authentication method used by the webhook
        :param pulumi.Input[bool] enabled: Whether the webhook is enabled or disabled.  Default to true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enabled_configs: Configs this webhook will trigger for
        :param pulumi.Input[str] payload: The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        :param pulumi.Input[str] project: The name of the Doppler project where the webhook is located
        :param pulumi.Input[str] secret: Secret used for request signing
        :param pulumi.Input[str] url: The URL of the webhook endpoint
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WebhookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Webhook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WebhookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WebhookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication: Optional[pulumi.Input[Union['WebhookAuthenticationArgs', 'WebhookAuthenticationArgsDict']]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 enabled_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 payload: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 secret: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WebhookArgs.__new__(WebhookArgs)

            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["enabled_configs"] = enabled_configs
            __props__.__dict__["payload"] = None if payload is None else pulumi.Output.secret(payload)
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["secret"] = None if secret is None else pulumi.Output.secret(secret)
            if url is None and not opts.urn:
                raise TypeError("Missing required property 'url'")
            __props__.__dict__["url"] = url
            __props__.__dict__["slug"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["payload", "secret"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(Webhook, __self__).__init__(
            'doppler:index/webhook:Webhook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            authentication: Optional[pulumi.Input[Union['WebhookAuthenticationArgs', 'WebhookAuthenticationArgsDict']]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            enabled_configs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            payload: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            secret: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            url: Optional[pulumi.Input[str]] = None) -> 'Webhook':
        """
        Get an existing Webhook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union['WebhookAuthenticationArgs', 'WebhookAuthenticationArgsDict']] authentication: Authentication method used by the webhook
        :param pulumi.Input[bool] enabled: Whether the webhook is enabled or disabled.  Default to true.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] enabled_configs: Configs this webhook will trigger for
        :param pulumi.Input[str] payload: The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        :param pulumi.Input[str] project: The name of the Doppler project where the webhook is located
        :param pulumi.Input[str] secret: Secret used for request signing
        :param pulumi.Input[str] slug: The slug of the Webhook
        :param pulumi.Input[str] url: The URL of the webhook endpoint
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WebhookState.__new__(_WebhookState)

        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["enabled_configs"] = enabled_configs
        __props__.__dict__["payload"] = payload
        __props__.__dict__["project"] = project
        __props__.__dict__["secret"] = secret
        __props__.__dict__["slug"] = slug
        __props__.__dict__["url"] = url
        return Webhook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output[Optional['outputs.WebhookAuthentication']]:
        """
        Authentication method used by the webhook
        """
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether the webhook is enabled or disabled.  Default to true.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="enabledConfigs")
    def enabled_configs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Configs this webhook will trigger for
        """
        return pulumi.get(self, "enabled_configs")

    @property
    @pulumi.getter
    def payload(self) -> pulumi.Output[Optional[str]]:
        """
        The webhook's payload as a JSON string.  Leave empty to use the default webhook payload
        """
        return pulumi.get(self, "payload")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The name of the Doppler project where the webhook is located
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def secret(self) -> pulumi.Output[Optional[str]]:
        """
        Secret used for request signing
        """
        return pulumi.get(self, "secret")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the Webhook
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def url(self) -> pulumi.Output[str]:
        """
        The URL of the webhook endpoint
        """
        return pulumi.get(self, "url")

