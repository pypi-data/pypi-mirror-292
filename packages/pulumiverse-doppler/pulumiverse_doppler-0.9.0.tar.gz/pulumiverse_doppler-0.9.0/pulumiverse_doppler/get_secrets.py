# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSecretsResult',
    'AwaitableGetSecretsResult',
    'get_secrets',
    'get_secrets_output',
]

@pulumi.output_type
class GetSecretsResult:
    """
    A collection of values returned by getSecrets.
    """
    def __init__(__self__, config=None, id=None, map=None, project=None):
        if config and not isinstance(config, str):
            raise TypeError("Expected argument 'config' to be a str")
        pulumi.set(__self__, "config", config)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if map and not isinstance(map, dict):
            raise TypeError("Expected argument 'map' to be a dict")
        pulumi.set(__self__, "map", map)
        if project and not isinstance(project, str):
            raise TypeError("Expected argument 'project' to be a str")
        pulumi.set(__self__, "project", project)

    @property
    @pulumi.getter
    def config(self) -> Optional[str]:
        """
        The name of the Doppler config (required for personal tokens)
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def map(self) -> Mapping[str, str]:
        """
        A mapping of secret names to computed secret values
        """
        return pulumi.get(self, "map")

    @property
    @pulumi.getter
    def project(self) -> Optional[str]:
        """
        The name of the Doppler project (required for personal tokens)
        """
        return pulumi.get(self, "project")


class AwaitableGetSecretsResult(GetSecretsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSecretsResult(
            config=self.config,
            id=self.id,
            map=self.map,
            project=self.project)


def get_secrets(config: Optional[str] = None,
                project: Optional[str] = None,
                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSecretsResult:
    """
    Retrieve all secrets in the config.


    :param str config: The name of the Doppler config (required for personal tokens)
    :param str project: The name of the Doppler project (required for personal tokens)
    """
    __args__ = dict()
    __args__['config'] = config
    __args__['project'] = project
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('doppler:index/getSecrets:getSecrets', __args__, opts=opts, typ=GetSecretsResult).value

    return AwaitableGetSecretsResult(
        config=pulumi.get(__ret__, 'config'),
        id=pulumi.get(__ret__, 'id'),
        map=pulumi.get(__ret__, 'map'),
        project=pulumi.get(__ret__, 'project'))


@_utilities.lift_output_func(get_secrets)
def get_secrets_output(config: Optional[pulumi.Input[Optional[str]]] = None,
                       project: Optional[pulumi.Input[Optional[str]]] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSecretsResult]:
    """
    Retrieve all secrets in the config.


    :param str config: The name of the Doppler config (required for personal tokens)
    :param str project: The name of the Doppler project (required for personal tokens)
    """
    ...
