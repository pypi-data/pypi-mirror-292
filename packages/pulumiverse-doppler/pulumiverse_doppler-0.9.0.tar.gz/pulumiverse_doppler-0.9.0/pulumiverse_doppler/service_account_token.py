# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ServiceAccountTokenArgs', 'ServiceAccountToken']

@pulumi.input_type
class ServiceAccountTokenArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 service_account_slug: pulumi.Input[str],
                 expires_at: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceAccountToken resource.
        :param pulumi.Input[str] name: The display name of the API token
        :param pulumi.Input[str] service_account_slug: Slug of the service account
        :param pulumi.Input[str] expires_at: The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "service_account_slug", service_account_slug)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The display name of the API token
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceAccountSlug")
    def service_account_slug(self) -> pulumi.Input[str]:
        """
        Slug of the service account
        """
        return pulumi.get(self, "service_account_slug")

    @service_account_slug.setter
    def service_account_slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_account_slug", value)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[str]]:
        """
        The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at", value)


@pulumi.input_type
class _ServiceAccountTokenState:
    def __init__(__self__, *,
                 api_key: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_account_slug: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServiceAccountToken resources.
        :param pulumi.Input[str] api_key: The api key used to authenticate the service account
        :param pulumi.Input[str] created_at: The datetime that the token was created.
        :param pulumi.Input[str] expires_at: The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
        :param pulumi.Input[str] name: The display name of the API token
        :param pulumi.Input[str] service_account_slug: Slug of the service account
        :param pulumi.Input[str] slug: Slug of the service account token
        """
        if api_key is not None:
            pulumi.set(__self__, "api_key", api_key)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if service_account_slug is not None:
            pulumi.set(__self__, "service_account_slug", service_account_slug)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> Optional[pulumi.Input[str]]:
        """
        The api key used to authenticate the service account
        """
        return pulumi.get(self, "api_key")

    @api_key.setter
    def api_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_key", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        The datetime that the token was created.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[str]]:
        """
        The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The display name of the API token
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="serviceAccountSlug")
    def service_account_slug(self) -> Optional[pulumi.Input[str]]:
        """
        Slug of the service account
        """
        return pulumi.get(self, "service_account_slug")

    @service_account_slug.setter
    def service_account_slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_slug", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        Slug of the service account token
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class ServiceAccountToken(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_account_slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manage a Doppler service account token.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] expires_at: The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
        :param pulumi.Input[str] name: The display name of the API token
        :param pulumi.Input[str] service_account_slug: Slug of the service account
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceAccountTokenArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a Doppler service account token.

        :param str resource_name: The name of the resource.
        :param ServiceAccountTokenArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceAccountTokenArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 service_account_slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceAccountTokenArgs.__new__(ServiceAccountTokenArgs)

            __props__.__dict__["expires_at"] = expires_at
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            if service_account_slug is None and not opts.urn:
                raise TypeError("Missing required property 'service_account_slug'")
            __props__.__dict__["service_account_slug"] = service_account_slug
            __props__.__dict__["api_key"] = None
            __props__.__dict__["created_at"] = None
            __props__.__dict__["slug"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["apiKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ServiceAccountToken, __self__).__init__(
            'doppler:index/serviceAccountToken:ServiceAccountToken',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            api_key: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            expires_at: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            service_account_slug: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'ServiceAccountToken':
        """
        Get an existing ServiceAccountToken resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_key: The api key used to authenticate the service account
        :param pulumi.Input[str] created_at: The datetime that the token was created.
        :param pulumi.Input[str] expires_at: The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
        :param pulumi.Input[str] name: The display name of the API token
        :param pulumi.Input[str] service_account_slug: Slug of the service account
        :param pulumi.Input[str] slug: Slug of the service account token
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceAccountTokenState.__new__(_ServiceAccountTokenState)

        __props__.__dict__["api_key"] = api_key
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["expires_at"] = expires_at
        __props__.__dict__["name"] = name
        __props__.__dict__["service_account_slug"] = service_account_slug
        __props__.__dict__["slug"] = slug
        return ServiceAccountToken(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiKey")
    def api_key(self) -> pulumi.Output[str]:
        """
        The api key used to authenticate the service account
        """
        return pulumi.get(self, "api_key")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        The datetime that the token was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> pulumi.Output[Optional[str]]:
        """
        The datetime at which the API token should expire. If not provided, the API token will remain valid indefinitely unless manually revoked
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The display name of the API token
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceAccountSlug")
    def service_account_slug(self) -> pulumi.Output[str]:
        """
        Slug of the service account
        """
        return pulumi.get(self, "service_account_slug")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        Slug of the service account token
        """
        return pulumi.get(self, "slug")

