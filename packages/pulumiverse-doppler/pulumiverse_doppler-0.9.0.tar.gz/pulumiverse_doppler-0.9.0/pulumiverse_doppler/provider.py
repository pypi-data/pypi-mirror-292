# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 doppler_token: pulumi.Input[str],
                 host: Optional[pulumi.Input[str]] = None,
                 verify_tls: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] doppler_token: A Doppler token, either a personal or service token. This can also be set via the DOPPLER_TOKEN environment variable.
        :param pulumi.Input[str] host: The Doppler API host (i.e. https://api.doppler.com). This can also be set via the DOPPLER_API_HOST environment variable.
        :param pulumi.Input[bool] verify_tls: Whether or not to verify TLS. This can also be set via the DOPPLER_VERIFY_TLS environment variable.
        """
        pulumi.set(__self__, "doppler_token", doppler_token)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if verify_tls is not None:
            pulumi.set(__self__, "verify_tls", verify_tls)

    @property
    @pulumi.getter(name="dopplerToken")
    def doppler_token(self) -> pulumi.Input[str]:
        """
        A Doppler token, either a personal or service token. This can also be set via the DOPPLER_TOKEN environment variable.
        """
        return pulumi.get(self, "doppler_token")

    @doppler_token.setter
    def doppler_token(self, value: pulumi.Input[str]):
        pulumi.set(self, "doppler_token", value)

    @property
    @pulumi.getter
    def host(self) -> Optional[pulumi.Input[str]]:
        """
        The Doppler API host (i.e. https://api.doppler.com). This can also be set via the DOPPLER_API_HOST environment variable.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter(name="verifyTls")
    def verify_tls(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to verify TLS. This can also be set via the DOPPLER_VERIFY_TLS environment variable.
        """
        return pulumi.get(self, "verify_tls")

    @verify_tls.setter
    def verify_tls(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "verify_tls", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 doppler_token: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 verify_tls: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        The provider type for the doppler package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] doppler_token: A Doppler token, either a personal or service token. This can also be set via the DOPPLER_TOKEN environment variable.
        :param pulumi.Input[str] host: The Doppler API host (i.e. https://api.doppler.com). This can also be set via the DOPPLER_API_HOST environment variable.
        :param pulumi.Input[bool] verify_tls: Whether or not to verify TLS. This can also be set via the DOPPLER_VERIFY_TLS environment variable.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ProviderArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the doppler package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 doppler_token: Optional[pulumi.Input[str]] = None,
                 host: Optional[pulumi.Input[str]] = None,
                 verify_tls: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            if doppler_token is None and not opts.urn:
                raise TypeError("Missing required property 'doppler_token'")
            __props__.__dict__["doppler_token"] = doppler_token
            __props__.__dict__["host"] = host
            __props__.__dict__["verify_tls"] = pulumi.Output.from_input(verify_tls).apply(pulumi.runtime.to_json) if verify_tls is not None else None
        super(Provider, __self__).__init__(
            'doppler',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="dopplerToken")
    def doppler_token(self) -> pulumi.Output[str]:
        """
        A Doppler token, either a personal or service token. This can also be set via the DOPPLER_TOKEN environment variable.
        """
        return pulumi.get(self, "doppler_token")

    @property
    @pulumi.getter
    def host(self) -> pulumi.Output[Optional[str]]:
        """
        The Doppler API host (i.e. https://api.doppler.com). This can also be set via the DOPPLER_API_HOST environment variable.
        """
        return pulumi.get(self, "host")

