# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ServiceAccountArgs', 'ServiceAccount']

@pulumi.input_type
class ServiceAccountArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 workplace_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workplace_role: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ServiceAccount resource.
        :param pulumi.Input[str] name: The name of the service account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workplace_permissions: A list of the workplace permissions for the service account (or use `workplace_role`)
        :param pulumi.Input[str] workplace_role: The identifier of the workplace role for the service account (or use `workplace_permissions`)
        """
        pulumi.set(__self__, "name", name)
        if workplace_permissions is not None:
            pulumi.set(__self__, "workplace_permissions", workplace_permissions)
        if workplace_role is not None:
            pulumi.set(__self__, "workplace_role", workplace_role)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the service account
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="workplacePermissions")
    def workplace_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of the workplace permissions for the service account (or use `workplace_role`)
        """
        return pulumi.get(self, "workplace_permissions")

    @workplace_permissions.setter
    def workplace_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "workplace_permissions", value)

    @property
    @pulumi.getter(name="workplaceRole")
    def workplace_role(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the workplace role for the service account (or use `workplace_permissions`)
        """
        return pulumi.get(self, "workplace_role")

    @workplace_role.setter
    def workplace_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workplace_role", value)


@pulumi.input_type
class _ServiceAccountState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 workplace_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workplace_role: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ServiceAccount resources.
        :param pulumi.Input[str] name: The name of the service account
        :param pulumi.Input[str] slug: The slug of the service account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workplace_permissions: A list of the workplace permissions for the service account (or use `workplace_role`)
        :param pulumi.Input[str] workplace_role: The identifier of the workplace role for the service account (or use `workplace_permissions`)
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if workplace_permissions is not None:
            pulumi.set(__self__, "workplace_permissions", workplace_permissions)
        if workplace_role is not None:
            pulumi.set(__self__, "workplace_role", workplace_role)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the service account
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the service account
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="workplacePermissions")
    def workplace_permissions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of the workplace permissions for the service account (or use `workplace_role`)
        """
        return pulumi.get(self, "workplace_permissions")

    @workplace_permissions.setter
    def workplace_permissions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "workplace_permissions", value)

    @property
    @pulumi.getter(name="workplaceRole")
    def workplace_role(self) -> Optional[pulumi.Input[str]]:
        """
        The identifier of the workplace role for the service account (or use `workplace_permissions`)
        """
        return pulumi.get(self, "workplace_role")

    @workplace_role.setter
    def workplace_role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workplace_role", value)


class ServiceAccount(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 workplace_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workplace_role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manage a Doppler service account.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_doppler as doppler

        ci = doppler.ServiceAccount("ci", name="ci")
        ```

        ## Import

        import using the service account slug from the URL:

        https://dashboard.doppler.com/workplace/[workplace-slug]/team/service_accounts/[service-account-slug]

        ```sh
        $ pulumi import doppler:index/serviceAccount:ServiceAccount default <service-account-slug>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the service account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workplace_permissions: A list of the workplace permissions for the service account (or use `workplace_role`)
        :param pulumi.Input[str] workplace_role: The identifier of the workplace role for the service account (or use `workplace_permissions`)
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ServiceAccountArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a Doppler service account.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_doppler as doppler

        ci = doppler.ServiceAccount("ci", name="ci")
        ```

        ## Import

        import using the service account slug from the URL:

        https://dashboard.doppler.com/workplace/[workplace-slug]/team/service_accounts/[service-account-slug]

        ```sh
        $ pulumi import doppler:index/serviceAccount:ServiceAccount default <service-account-slug>
        ```

        :param str resource_name: The name of the resource.
        :param ServiceAccountArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ServiceAccountArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 workplace_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workplace_role: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ServiceAccountArgs.__new__(ServiceAccountArgs)

            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["workplace_permissions"] = workplace_permissions
            __props__.__dict__["workplace_role"] = workplace_role
            __props__.__dict__["slug"] = None
        super(ServiceAccount, __self__).__init__(
            'doppler:index/serviceAccount:ServiceAccount',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            workplace_permissions: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            workplace_role: Optional[pulumi.Input[str]] = None) -> 'ServiceAccount':
        """
        Get an existing ServiceAccount resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the service account
        :param pulumi.Input[str] slug: The slug of the service account
        :param pulumi.Input[Sequence[pulumi.Input[str]]] workplace_permissions: A list of the workplace permissions for the service account (or use `workplace_role`)
        :param pulumi.Input[str] workplace_role: The identifier of the workplace role for the service account (or use `workplace_permissions`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ServiceAccountState.__new__(_ServiceAccountState)

        __props__.__dict__["name"] = name
        __props__.__dict__["slug"] = slug
        __props__.__dict__["workplace_permissions"] = workplace_permissions
        __props__.__dict__["workplace_role"] = workplace_role
        return ServiceAccount(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the service account
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the service account
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="workplacePermissions")
    def workplace_permissions(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of the workplace permissions for the service account (or use `workplace_role`)
        """
        return pulumi.get(self, "workplace_permissions")

    @property
    @pulumi.getter(name="workplaceRole")
    def workplace_role(self) -> pulumi.Output[Optional[str]]:
        """
        The identifier of the workplace role for the service account (or use `workplace_permissions`)
        """
        return pulumi.get(self, "workplace_role")

