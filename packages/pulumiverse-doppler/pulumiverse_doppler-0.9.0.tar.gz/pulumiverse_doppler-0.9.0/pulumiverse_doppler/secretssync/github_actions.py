# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['GithubActionsArgs', 'GithubActions']

@pulumi.input_type
class GithubActionsArgs:
    def __init__(__self__, *,
                 config: pulumi.Input[str],
                 integration: pulumi.Input[str],
                 project: pulumi.Input[str],
                 sync_target: pulumi.Input[str],
                 delete_behavior: Optional[pulumi.Input[str]] = None,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 org_scope: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GithubActions resource.
        :param pulumi.Input[str] config: The name of the Doppler config
        :param pulumi.Input[str] integration: The slug of the integration to use for this sync
        :param pulumi.Input[str] project: The name of the Doppler project
        :param pulumi.Input[str] sync_target: Either "repo" or "org", based on the resource type to sync to
        :param pulumi.Input[str] delete_behavior: The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        :param pulumi.Input[str] environment_name: The GitHub repo environment name to sync to (only used when `sync_target` is set to "repo")
        :param pulumi.Input[str] org_scope: Either "all" or "private", based on the which repos you want to have access (only used when `sync_target` is set to "org")
        :param pulumi.Input[str] repo_name: The GitHub repo name to sync to (only used when `sync_target` is set to "repo")
        """
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "integration", integration)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "sync_target", sync_target)
        if delete_behavior is not None:
            pulumi.set(__self__, "delete_behavior", delete_behavior)
        if environment_name is not None:
            pulumi.set(__self__, "environment_name", environment_name)
        if org_scope is not None:
            pulumi.set(__self__, "org_scope", org_scope)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input[str]:
        """
        The name of the Doppler config
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input[str]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def integration(self) -> pulumi.Input[str]:
        """
        The slug of the integration to use for this sync
        """
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The name of the Doppler project
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="syncTarget")
    def sync_target(self) -> pulumi.Input[str]:
        """
        Either "repo" or "org", based on the resource type to sync to
        """
        return pulumi.get(self, "sync_target")

    @sync_target.setter
    def sync_target(self, value: pulumi.Input[str]):
        pulumi.set(self, "sync_target", value)

    @property
    @pulumi.getter(name="deleteBehavior")
    def delete_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        """
        return pulumi.get(self, "delete_behavior")

    @delete_behavior.setter
    def delete_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_behavior", value)

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> Optional[pulumi.Input[str]]:
        """
        The GitHub repo environment name to sync to (only used when `sync_target` is set to "repo")
        """
        return pulumi.get(self, "environment_name")

    @environment_name.setter
    def environment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_name", value)

    @property
    @pulumi.getter(name="orgScope")
    def org_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Either "all" or "private", based on the which repos you want to have access (only used when `sync_target` is set to "org")
        """
        return pulumi.get(self, "org_scope")

    @org_scope.setter
    def org_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_scope", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        The GitHub repo name to sync to (only used when `sync_target` is set to "repo")
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)


@pulumi.input_type
class _GithubActionsState:
    def __init__(__self__, *,
                 config: Optional[pulumi.Input[str]] = None,
                 delete_behavior: Optional[pulumi.Input[str]] = None,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 integration: Optional[pulumi.Input[str]] = None,
                 org_scope: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 sync_target: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GithubActions resources.
        :param pulumi.Input[str] config: The name of the Doppler config
        :param pulumi.Input[str] delete_behavior: The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        :param pulumi.Input[str] environment_name: The GitHub repo environment name to sync to (only used when `sync_target` is set to "repo")
        :param pulumi.Input[str] integration: The slug of the integration to use for this sync
        :param pulumi.Input[str] org_scope: Either "all" or "private", based on the which repos you want to have access (only used when `sync_target` is set to "org")
        :param pulumi.Input[str] project: The name of the Doppler project
        :param pulumi.Input[str] repo_name: The GitHub repo name to sync to (only used when `sync_target` is set to "repo")
        :param pulumi.Input[str] sync_target: Either "repo" or "org", based on the resource type to sync to
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if delete_behavior is not None:
            pulumi.set(__self__, "delete_behavior", delete_behavior)
        if environment_name is not None:
            pulumi.set(__self__, "environment_name", environment_name)
        if integration is not None:
            pulumi.set(__self__, "integration", integration)
        if org_scope is not None:
            pulumi.set(__self__, "org_scope", org_scope)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if repo_name is not None:
            pulumi.set(__self__, "repo_name", repo_name)
        if sync_target is not None:
            pulumi.set(__self__, "sync_target", sync_target)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Doppler config
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="deleteBehavior")
    def delete_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        """
        return pulumi.get(self, "delete_behavior")

    @delete_behavior.setter
    def delete_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_behavior", value)

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> Optional[pulumi.Input[str]]:
        """
        The GitHub repo environment name to sync to (only used when `sync_target` is set to "repo")
        """
        return pulumi.get(self, "environment_name")

    @environment_name.setter
    def environment_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment_name", value)

    @property
    @pulumi.getter
    def integration(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the integration to use for this sync
        """
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration", value)

    @property
    @pulumi.getter(name="orgScope")
    def org_scope(self) -> Optional[pulumi.Input[str]]:
        """
        Either "all" or "private", based on the which repos you want to have access (only used when `sync_target` is set to "org")
        """
        return pulumi.get(self, "org_scope")

    @org_scope.setter
    def org_scope(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_scope", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Doppler project
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> Optional[pulumi.Input[str]]:
        """
        The GitHub repo name to sync to (only used when `sync_target` is set to "repo")
        """
        return pulumi.get(self, "repo_name")

    @repo_name.setter
    def repo_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repo_name", value)

    @property
    @pulumi.getter(name="syncTarget")
    def sync_target(self) -> Optional[pulumi.Input[str]]:
        """
        Either "repo" or "org", based on the resource type to sync to
        """
        return pulumi.get(self, "sync_target")

    @sync_target.setter
    def sync_target(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sync_target", value)


class GithubActions(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 delete_behavior: Optional[pulumi.Input[str]] = None,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 integration: Optional[pulumi.Input[str]] = None,
                 org_scope: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 sync_target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manage a GitHub Actions Doppler sync.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: The name of the Doppler config
        :param pulumi.Input[str] delete_behavior: The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        :param pulumi.Input[str] environment_name: The GitHub repo environment name to sync to (only used when `sync_target` is set to "repo")
        :param pulumi.Input[str] integration: The slug of the integration to use for this sync
        :param pulumi.Input[str] org_scope: Either "all" or "private", based on the which repos you want to have access (only used when `sync_target` is set to "org")
        :param pulumi.Input[str] project: The name of the Doppler project
        :param pulumi.Input[str] repo_name: The GitHub repo name to sync to (only used when `sync_target` is set to "repo")
        :param pulumi.Input[str] sync_target: Either "repo" or "org", based on the resource type to sync to
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GithubActionsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a GitHub Actions Doppler sync.

        :param str resource_name: The name of the resource.
        :param GithubActionsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GithubActionsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 delete_behavior: Optional[pulumi.Input[str]] = None,
                 environment_name: Optional[pulumi.Input[str]] = None,
                 integration: Optional[pulumi.Input[str]] = None,
                 org_scope: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 repo_name: Optional[pulumi.Input[str]] = None,
                 sync_target: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GithubActionsArgs.__new__(GithubActionsArgs)

            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            __props__.__dict__["delete_behavior"] = delete_behavior
            __props__.__dict__["environment_name"] = environment_name
            if integration is None and not opts.urn:
                raise TypeError("Missing required property 'integration'")
            __props__.__dict__["integration"] = integration
            __props__.__dict__["org_scope"] = org_scope
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            __props__.__dict__["repo_name"] = repo_name
            if sync_target is None and not opts.urn:
                raise TypeError("Missing required property 'sync_target'")
            __props__.__dict__["sync_target"] = sync_target
        super(GithubActions, __self__).__init__(
            'doppler:secretsSync/githubActions:GithubActions',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            config: Optional[pulumi.Input[str]] = None,
            delete_behavior: Optional[pulumi.Input[str]] = None,
            environment_name: Optional[pulumi.Input[str]] = None,
            integration: Optional[pulumi.Input[str]] = None,
            org_scope: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            repo_name: Optional[pulumi.Input[str]] = None,
            sync_target: Optional[pulumi.Input[str]] = None) -> 'GithubActions':
        """
        Get an existing GithubActions resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] config: The name of the Doppler config
        :param pulumi.Input[str] delete_behavior: The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        :param pulumi.Input[str] environment_name: The GitHub repo environment name to sync to (only used when `sync_target` is set to "repo")
        :param pulumi.Input[str] integration: The slug of the integration to use for this sync
        :param pulumi.Input[str] org_scope: Either "all" or "private", based on the which repos you want to have access (only used when `sync_target` is set to "org")
        :param pulumi.Input[str] project: The name of the Doppler project
        :param pulumi.Input[str] repo_name: The GitHub repo name to sync to (only used when `sync_target` is set to "repo")
        :param pulumi.Input[str] sync_target: Either "repo" or "org", based on the resource type to sync to
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GithubActionsState.__new__(_GithubActionsState)

        __props__.__dict__["config"] = config
        __props__.__dict__["delete_behavior"] = delete_behavior
        __props__.__dict__["environment_name"] = environment_name
        __props__.__dict__["integration"] = integration
        __props__.__dict__["org_scope"] = org_scope
        __props__.__dict__["project"] = project
        __props__.__dict__["repo_name"] = repo_name
        __props__.__dict__["sync_target"] = sync_target
        return GithubActions(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[str]:
        """
        The name of the Doppler config
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="deleteBehavior")
    def delete_behavior(self) -> pulumi.Output[Optional[str]]:
        """
        The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        """
        return pulumi.get(self, "delete_behavior")

    @property
    @pulumi.getter(name="environmentName")
    def environment_name(self) -> pulumi.Output[Optional[str]]:
        """
        The GitHub repo environment name to sync to (only used when `sync_target` is set to "repo")
        """
        return pulumi.get(self, "environment_name")

    @property
    @pulumi.getter
    def integration(self) -> pulumi.Output[str]:
        """
        The slug of the integration to use for this sync
        """
        return pulumi.get(self, "integration")

    @property
    @pulumi.getter(name="orgScope")
    def org_scope(self) -> pulumi.Output[Optional[str]]:
        """
        Either "all" or "private", based on the which repos you want to have access (only used when `sync_target` is set to "org")
        """
        return pulumi.get(self, "org_scope")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The name of the Doppler project
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="repoName")
    def repo_name(self) -> pulumi.Output[Optional[str]]:
        """
        The GitHub repo name to sync to (only used when `sync_target` is set to "repo")
        """
        return pulumi.get(self, "repo_name")

    @property
    @pulumi.getter(name="syncTarget")
    def sync_target(self) -> pulumi.Output[str]:
        """
        Either "repo" or "org", based on the resource type to sync to
        """
        return pulumi.get(self, "sync_target")

