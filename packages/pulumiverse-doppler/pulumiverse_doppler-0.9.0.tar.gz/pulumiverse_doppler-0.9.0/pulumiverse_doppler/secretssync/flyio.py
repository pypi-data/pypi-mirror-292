# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['FlyioArgs', 'Flyio']

@pulumi.input_type
class FlyioArgs:
    def __init__(__self__, *,
                 app_id: pulumi.Input[str],
                 config: pulumi.Input[str],
                 integration: pulumi.Input[str],
                 project: pulumi.Input[str],
                 restart_machines: pulumi.Input[bool],
                 delete_behavior: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Flyio resource.
        :param pulumi.Input[str] app_id: The app ID
        :param pulumi.Input[str] config: The name of the Doppler config
        :param pulumi.Input[str] integration: The slug of the integration to use for this sync
        :param pulumi.Input[str] project: The name of the Doppler project
        :param pulumi.Input[bool] restart_machines: Whether or not to restart the Fly.io machines when secrets are updated
        :param pulumi.Input[str] delete_behavior: The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        """
        pulumi.set(__self__, "app_id", app_id)
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "integration", integration)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "restart_machines", restart_machines)
        if delete_behavior is not None:
            pulumi.set(__self__, "delete_behavior", delete_behavior)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Input[str]:
        """
        The app ID
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def config(self) -> pulumi.Input[str]:
        """
        The name of the Doppler config
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: pulumi.Input[str]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter
    def integration(self) -> pulumi.Input[str]:
        """
        The slug of the integration to use for this sync
        """
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: pulumi.Input[str]):
        pulumi.set(self, "integration", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The name of the Doppler project
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="restartMachines")
    def restart_machines(self) -> pulumi.Input[bool]:
        """
        Whether or not to restart the Fly.io machines when secrets are updated
        """
        return pulumi.get(self, "restart_machines")

    @restart_machines.setter
    def restart_machines(self, value: pulumi.Input[bool]):
        pulumi.set(self, "restart_machines", value)

    @property
    @pulumi.getter(name="deleteBehavior")
    def delete_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        """
        return pulumi.get(self, "delete_behavior")

    @delete_behavior.setter
    def delete_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_behavior", value)


@pulumi.input_type
class _FlyioState:
    def __init__(__self__, *,
                 app_id: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 delete_behavior: Optional[pulumi.Input[str]] = None,
                 integration: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 restart_machines: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering Flyio resources.
        :param pulumi.Input[str] app_id: The app ID
        :param pulumi.Input[str] config: The name of the Doppler config
        :param pulumi.Input[str] delete_behavior: The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        :param pulumi.Input[str] integration: The slug of the integration to use for this sync
        :param pulumi.Input[str] project: The name of the Doppler project
        :param pulumi.Input[bool] restart_machines: Whether or not to restart the Fly.io machines when secrets are updated
        """
        if app_id is not None:
            pulumi.set(__self__, "app_id", app_id)
        if config is not None:
            pulumi.set(__self__, "config", config)
        if delete_behavior is not None:
            pulumi.set(__self__, "delete_behavior", delete_behavior)
        if integration is not None:
            pulumi.set(__self__, "integration", integration)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if restart_machines is not None:
            pulumi.set(__self__, "restart_machines", restart_machines)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> Optional[pulumi.Input[str]]:
        """
        The app ID
        """
        return pulumi.get(self, "app_id")

    @app_id.setter
    def app_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "app_id", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Doppler config
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "config", value)

    @property
    @pulumi.getter(name="deleteBehavior")
    def delete_behavior(self) -> Optional[pulumi.Input[str]]:
        """
        The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        """
        return pulumi.get(self, "delete_behavior")

    @delete_behavior.setter
    def delete_behavior(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delete_behavior", value)

    @property
    @pulumi.getter
    def integration(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the integration to use for this sync
        """
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Doppler project
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="restartMachines")
    def restart_machines(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to restart the Fly.io machines when secrets are updated
        """
        return pulumi.get(self, "restart_machines")

    @restart_machines.setter
    def restart_machines(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "restart_machines", value)


class Flyio(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 delete_behavior: Optional[pulumi.Input[str]] = None,
                 integration: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 restart_machines: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        Manage a Fly.io Doppler sync.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_doppler as doppler

        prod = doppler.integration.Flyio("prod",
            name="TF Fly.io",
            api_key="fo1_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
        backend_prod = doppler.secrets_sync.Flyio("backend_prod",
            integration=prod.id,
            project="backend",
            config="prd",
            app_id="my-app",
            restart_machines=True,
            delete_behavior="leave_in_target")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: The app ID
        :param pulumi.Input[str] config: The name of the Doppler config
        :param pulumi.Input[str] delete_behavior: The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        :param pulumi.Input[str] integration: The slug of the integration to use for this sync
        :param pulumi.Input[str] project: The name of the Doppler project
        :param pulumi.Input[bool] restart_machines: Whether or not to restart the Fly.io machines when secrets are updated
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FlyioArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a Fly.io Doppler sync.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_doppler as doppler

        prod = doppler.integration.Flyio("prod",
            name="TF Fly.io",
            api_key="fo1_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx")
        backend_prod = doppler.secrets_sync.Flyio("backend_prod",
            integration=prod.id,
            project="backend",
            config="prd",
            app_id="my-app",
            restart_machines=True,
            delete_behavior="leave_in_target")
        ```

        :param str resource_name: The name of the resource.
        :param FlyioArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FlyioArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 app_id: Optional[pulumi.Input[str]] = None,
                 config: Optional[pulumi.Input[str]] = None,
                 delete_behavior: Optional[pulumi.Input[str]] = None,
                 integration: Optional[pulumi.Input[str]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 restart_machines: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FlyioArgs.__new__(FlyioArgs)

            if app_id is None and not opts.urn:
                raise TypeError("Missing required property 'app_id'")
            __props__.__dict__["app_id"] = app_id
            if config is None and not opts.urn:
                raise TypeError("Missing required property 'config'")
            __props__.__dict__["config"] = config
            __props__.__dict__["delete_behavior"] = delete_behavior
            if integration is None and not opts.urn:
                raise TypeError("Missing required property 'integration'")
            __props__.__dict__["integration"] = integration
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if restart_machines is None and not opts.urn:
                raise TypeError("Missing required property 'restart_machines'")
            __props__.__dict__["restart_machines"] = restart_machines
        super(Flyio, __self__).__init__(
            'doppler:secretsSync/flyio:Flyio',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            app_id: Optional[pulumi.Input[str]] = None,
            config: Optional[pulumi.Input[str]] = None,
            delete_behavior: Optional[pulumi.Input[str]] = None,
            integration: Optional[pulumi.Input[str]] = None,
            project: Optional[pulumi.Input[str]] = None,
            restart_machines: Optional[pulumi.Input[bool]] = None) -> 'Flyio':
        """
        Get an existing Flyio resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] app_id: The app ID
        :param pulumi.Input[str] config: The name of the Doppler config
        :param pulumi.Input[str] delete_behavior: The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        :param pulumi.Input[str] integration: The slug of the integration to use for this sync
        :param pulumi.Input[str] project: The name of the Doppler project
        :param pulumi.Input[bool] restart_machines: Whether or not to restart the Fly.io machines when secrets are updated
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FlyioState.__new__(_FlyioState)

        __props__.__dict__["app_id"] = app_id
        __props__.__dict__["config"] = config
        __props__.__dict__["delete_behavior"] = delete_behavior
        __props__.__dict__["integration"] = integration
        __props__.__dict__["project"] = project
        __props__.__dict__["restart_machines"] = restart_machines
        return Flyio(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="appId")
    def app_id(self) -> pulumi.Output[str]:
        """
        The app ID
        """
        return pulumi.get(self, "app_id")

    @property
    @pulumi.getter
    def config(self) -> pulumi.Output[str]:
        """
        The name of the Doppler config
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter(name="deleteBehavior")
    def delete_behavior(self) -> pulumi.Output[Optional[str]]:
        """
        The behavior to be performed on the secrets in the sync target when this resource is deleted or recreated. Either `leave_in_target` (default) or `delete_from_target`.
        """
        return pulumi.get(self, "delete_behavior")

    @property
    @pulumi.getter
    def integration(self) -> pulumi.Output[str]:
        """
        The slug of the integration to use for this sync
        """
        return pulumi.get(self, "integration")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The name of the Doppler project
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="restartMachines")
    def restart_machines(self) -> pulumi.Output[bool]:
        """
        Whether or not to restart the Fly.io machines when secrets are updated
        """
        return pulumi.get(self, "restart_machines")

