# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = ['AwsSecretsManagerArgs', 'AwsSecretsManager']

@pulumi.input_type
class AwsSecretsManagerArgs:
    def __init__(__self__, *,
                 assume_role_arn: pulumi.Input[str],
                 name: pulumi.Input[str]):
        """
        The set of arguments for constructing a AwsSecretsManager resource.
        :param pulumi.Input[str] assume_role_arn: The ARN of the AWS role for Doppler to assume
        :param pulumi.Input[str] name: The name of the integration
        """
        pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> pulumi.Input[str]:
        """
        The ARN of the AWS role for Doppler to assume
        """
        return pulumi.get(self, "assume_role_arn")

    @assume_role_arn.setter
    def assume_role_arn(self, value: pulumi.Input[str]):
        pulumi.set(self, "assume_role_arn", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _AwsSecretsManagerState:
    def __init__(__self__, *,
                 assume_role_arn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AwsSecretsManager resources.
        :param pulumi.Input[str] assume_role_arn: The ARN of the AWS role for Doppler to assume
        :param pulumi.Input[str] name: The name of the integration
        """
        if assume_role_arn is not None:
            pulumi.set(__self__, "assume_role_arn", assume_role_arn)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> Optional[pulumi.Input[str]]:
        """
        The ARN of the AWS role for Doppler to assume
        """
        return pulumi.get(self, "assume_role_arn")

    @assume_role_arn.setter
    def assume_role_arn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assume_role_arn", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the integration
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class AwsSecretsManager(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assume_role_arn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manage an AWS Secrets Manager Doppler integration.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_aws as aws
        import pulumiverse_doppler as doppler

        doppler_secrets_manager = aws.iam.Role("doppler_secrets_manager",
            name="doppler_secrets_manager",
            assume_role_policy=json.dumps({
                "Version": "2012-10-17",
                "Statement": [{
                    "Effect": "Allow",
                    "Action": "sts:AssumeRole",
                    "Principal": {
                        "AWS": "arn:aws:iam::299900769157:user/doppler-integration-operator",
                    },
                    "Condition": {
                        "StringEquals": {
                            "sts:ExternalId": "<YOUR_WORKPLACE_SLUG>",
                        },
                    },
                }],
            }),
            inline_policies=[{
                "name": "doppler_secret_manager",
                "policy": json.dumps({
                    "version": "2012-10-17",
                    "statement": [{
                        "action": [
                            "secretsmanager:GetSecretValue",
                            "secretsmanager:DescribeSecret",
                            "secretsmanager:PutSecretValue",
                            "secretsmanager:CreateSecret",
                            "secretsmanager:DeleteSecret",
                            "secretsmanager:TagResource",
                            "secretsmanager:UpdateSecret",
                        ],
                        "effect": "Allow",
                        "resource": "*",
                    }],
                }),
            }])
        prod = doppler.integration.AwsSecretsManager("prod",
            name="Production",
            assume_role_arn=doppler_secrets_manager.arn)
        backend_prod = doppler.secrets_sync.AwsSecretsManager("backend_prod",
            integration=prod.id,
            project="backend",
            config="prd",
            region="us-east-1",
            path="/backend/",
            tags={
                "myTag": "enabled",
            },
            delete_behavior="leave_in_target")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assume_role_arn: The ARN of the AWS role for Doppler to assume
        :param pulumi.Input[str] name: The name of the integration
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AwsSecretsManagerArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage an AWS Secrets Manager Doppler integration.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_aws as aws
        import pulumiverse_doppler as doppler

        doppler_secrets_manager = aws.iam.Role("doppler_secrets_manager",
            name="doppler_secrets_manager",
            assume_role_policy=json.dumps({
                "Version": "2012-10-17",
                "Statement": [{
                    "Effect": "Allow",
                    "Action": "sts:AssumeRole",
                    "Principal": {
                        "AWS": "arn:aws:iam::299900769157:user/doppler-integration-operator",
                    },
                    "Condition": {
                        "StringEquals": {
                            "sts:ExternalId": "<YOUR_WORKPLACE_SLUG>",
                        },
                    },
                }],
            }),
            inline_policies=[{
                "name": "doppler_secret_manager",
                "policy": json.dumps({
                    "version": "2012-10-17",
                    "statement": [{
                        "action": [
                            "secretsmanager:GetSecretValue",
                            "secretsmanager:DescribeSecret",
                            "secretsmanager:PutSecretValue",
                            "secretsmanager:CreateSecret",
                            "secretsmanager:DeleteSecret",
                            "secretsmanager:TagResource",
                            "secretsmanager:UpdateSecret",
                        ],
                        "effect": "Allow",
                        "resource": "*",
                    }],
                }),
            }])
        prod = doppler.integration.AwsSecretsManager("prod",
            name="Production",
            assume_role_arn=doppler_secrets_manager.arn)
        backend_prod = doppler.secrets_sync.AwsSecretsManager("backend_prod",
            integration=prod.id,
            project="backend",
            config="prd",
            region="us-east-1",
            path="/backend/",
            tags={
                "myTag": "enabled",
            },
            delete_behavior="leave_in_target")
        ```

        :param str resource_name: The name of the resource.
        :param AwsSecretsManagerArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AwsSecretsManagerArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assume_role_arn: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AwsSecretsManagerArgs.__new__(AwsSecretsManagerArgs)

            if assume_role_arn is None and not opts.urn:
                raise TypeError("Missing required property 'assume_role_arn'")
            __props__.__dict__["assume_role_arn"] = assume_role_arn
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
        super(AwsSecretsManager, __self__).__init__(
            'doppler:integration/awsSecretsManager:AwsSecretsManager',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assume_role_arn: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'AwsSecretsManager':
        """
        Get an existing AwsSecretsManager resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assume_role_arn: The ARN of the AWS role for Doppler to assume
        :param pulumi.Input[str] name: The name of the integration
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AwsSecretsManagerState.__new__(_AwsSecretsManagerState)

        __props__.__dict__["assume_role_arn"] = assume_role_arn
        __props__.__dict__["name"] = name
        return AwsSecretsManager(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assumeRoleArn")
    def assume_role_arn(self) -> pulumi.Output[str]:
        """
        The ARN of the AWS role for Doppler to assume
        """
        return pulumi.get(self, "assume_role_arn")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the integration
        """
        return pulumi.get(self, "name")

