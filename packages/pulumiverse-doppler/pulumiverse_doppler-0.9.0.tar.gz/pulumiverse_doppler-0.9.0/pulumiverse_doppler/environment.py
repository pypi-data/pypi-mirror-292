# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['EnvironmentArgs', 'Environment']

@pulumi.input_type
class EnvironmentArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 project: pulumi.Input[str],
                 slug: pulumi.Input[str],
                 personal_configs: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a Environment resource.
        :param pulumi.Input[str] name: The name of the Doppler environment
        :param pulumi.Input[str] project: The name of the Doppler project where the environment is located
        :param pulumi.Input[str] slug: The slug of the Doppler environment
        :param pulumi.Input[bool] personal_configs: Whether or not personal configs are enabled for the environment
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "slug", slug)
        if personal_configs is not None:
            pulumi.set(__self__, "personal_configs", personal_configs)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name of the Doppler environment
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        """
        The name of the Doppler project where the environment is located
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Input[str]:
        """
        The slug of the Doppler environment
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: pulumi.Input[str]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="personalConfigs")
    def personal_configs(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not personal configs are enabled for the environment
        """
        return pulumi.get(self, "personal_configs")

    @personal_configs.setter
    def personal_configs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "personal_configs", value)


@pulumi.input_type
class _EnvironmentState:
    def __init__(__self__, *,
                 name: Optional[pulumi.Input[str]] = None,
                 personal_configs: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Environment resources.
        :param pulumi.Input[str] name: The name of the Doppler environment
        :param pulumi.Input[bool] personal_configs: Whether or not personal configs are enabled for the environment
        :param pulumi.Input[str] project: The name of the Doppler project where the environment is located
        :param pulumi.Input[str] slug: The slug of the Doppler environment
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if personal_configs is not None:
            pulumi.set(__self__, "personal_configs", personal_configs)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Doppler environment
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="personalConfigs")
    def personal_configs(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not personal configs are enabled for the environment
        """
        return pulumi.get(self, "personal_configs")

    @personal_configs.setter
    def personal_configs(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "personal_configs", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Doppler project where the environment is located
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the Doppler environment
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class Environment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 personal_configs: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manage a Doppler environment.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_doppler as doppler

        backend_ci = doppler.Environment("backend_ci",
            project="backend",
            slug="ci",
            name="Continuous Integration")
        ```

        ## Import

        ```sh
        $ pulumi import doppler:index/environment:Environment default <project-name>.<environment-slug>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the Doppler environment
        :param pulumi.Input[bool] personal_configs: Whether or not personal configs are enabled for the environment
        :param pulumi.Input[str] project: The name of the Doppler project where the environment is located
        :param pulumi.Input[str] slug: The slug of the Doppler environment
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EnvironmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manage a Doppler environment.

        ## Example Usage

        ```python
        import pulumi
        import pulumiverse_doppler as doppler

        backend_ci = doppler.Environment("backend_ci",
            project="backend",
            slug="ci",
            name="Continuous Integration")
        ```

        ## Import

        ```sh
        $ pulumi import doppler:index/environment:Environment default <project-name>.<environment-slug>
        ```

        :param str resource_name: The name of the resource.
        :param EnvironmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EnvironmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 personal_configs: Optional[pulumi.Input[bool]] = None,
                 project: Optional[pulumi.Input[str]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EnvironmentArgs.__new__(EnvironmentArgs)

            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__.__dict__["name"] = name
            __props__.__dict__["personal_configs"] = personal_configs
            if project is None and not opts.urn:
                raise TypeError("Missing required property 'project'")
            __props__.__dict__["project"] = project
            if slug is None and not opts.urn:
                raise TypeError("Missing required property 'slug'")
            __props__.__dict__["slug"] = slug
        super(Environment, __self__).__init__(
            'doppler:index/environment:Environment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            name: Optional[pulumi.Input[str]] = None,
            personal_configs: Optional[pulumi.Input[bool]] = None,
            project: Optional[pulumi.Input[str]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'Environment':
        """
        Get an existing Environment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the Doppler environment
        :param pulumi.Input[bool] personal_configs: Whether or not personal configs are enabled for the environment
        :param pulumi.Input[str] project: The name of the Doppler project where the environment is located
        :param pulumi.Input[str] slug: The slug of the Doppler environment
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EnvironmentState.__new__(_EnvironmentState)

        __props__.__dict__["name"] = name
        __props__.__dict__["personal_configs"] = personal_configs
        __props__.__dict__["project"] = project
        __props__.__dict__["slug"] = slug
        return Environment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the Doppler environment
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="personalConfigs")
    def personal_configs(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not personal configs are enabled for the environment
        """
        return pulumi.get(self, "personal_configs")

    @property
    @pulumi.getter
    def project(self) -> pulumi.Output[str]:
        """
        The name of the Doppler project where the environment is located
        """
        return pulumi.get(self, "project")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the Doppler environment
        """
        return pulumi.get(self, "slug")

